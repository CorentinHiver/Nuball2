.TH "MTTHist< THist >" 3 "Tue Dec 5 2023" "Nuball2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MTTHist< THist > \- Multithreading wrapper for all THist spectra of root library\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <MTTHist\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBclean\fP ()"
.br
.ti -1c
.RI "bool const  & \fBexists\fP () const"
.br
.ti -1c
.RI "TFile * \fBfile\fP ()"
.br
.ti -1c
.RI "template<class\&.\&.\&. ARGS> void \fBFill\fP (ARGS &&\&.\&.\&. args) noexcept"
.br
.ti -1c
.RI "THist * \fBget\fP ()"
.br
.ti -1c
.RI "THist * \fBGet\fP ()"
.br
.ti -1c
.RI "THist * \fBGet\fP (\fBushort\fP const &thread_nb)"
.br
.ti -1c
.RI "std::vector< THist * > const  & \fBgetCollection\fP () const"
.br
.ti -1c
.RI "std::string const  & \fBGetName\fP () const"
.br
.ti -1c
.RI "auto const  & \fBIntegral\fP () const"
.br
.ti -1c
.RI "bool const  & \fBisWritten\fP () const"
.br
.ti -1c
.RI "void \fBMerge\fP ()"
.br
.ti -1c
.RI "void \fBMerge_t\fP ()"
.br
.ti -1c
.RI "THist * \fBMerged\fP ()"
.br
.ti -1c
.RI "template<class\&.\&.\&. ARGS> \fBMTTHist\fP ()"
.br
.ti -1c
.RI "template<class\&.\&.\&. ARGS> \fBMTTHist\fP (ARGS &&\&.\&.\&. args)"
.br
.RI "Construct a new \fBMTTHist\fP object and send the arguments directly to the underlying root histogramm\&. "
.ti -1c
.RI "template<class\&.\&.\&. ARGS> \fBMTTHist\fP (\fBMTTHist\fP< THist > &&hist)"
.br
.RI "Move constructor\&. "
.ti -1c
.RI "template<class\&.\&.\&. ARGS> \fBMTTHist\fP (\fBMTTHist\fP< THist > const &hist)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "std::string & \fBname\fP ()"
.br
.ti -1c
.RI "std::string const  & \fBname\fP () const"
.br
.ti -1c
.RI "\fBoperator bool\fP () const &"
.br
.ti -1c
.RI "THist * \fBoperator\->\fP ()"
.br
.ti -1c
.RI "\fBMTTHist\fP< THist > & \fBoperator=\fP (\fBMTTHist\fP< THist > const &hist)"
.br
.ti -1c
.RI "THist * \fBoperator[]\fP (int const &thread_nb)"
.br
.ti -1c
.RI "void \fBPrint\fP ()"
.br
.ti -1c
.RI "std::string const  & \fBreadComment\fP (std::string const &comment) const"
.br
.ti -1c
.RI "auto \fBreset\fP (\fBMTTHist\fP< THist > const &hist)"
.br
.RI "Copy initializer\&. "
.ti -1c
.RI "template<class\&.\&.\&. ARGS> void \fBreset\fP (std::nullptr_t)"
.br
.ti -1c
.RI "template<class\&.\&.\&. ARGS> void \fBreset\fP (std::string \fBname\fP, ARGS &&\&.\&.\&. args)"
.br
.ti -1c
.RI "void \fBsetComment\fP (std::string const &comment)"
.br
.ti -1c
.RI "std::string const  & \fBsetName\fP (std::string const &_name)"
.br
.ti -1c
.RI "std::string const  & \fBsetTitle\fP (std::string const &_title)"
.br
.ti -1c
.RI "auto \fBsize\fP () const"
.br
.ti -1c
.RI "std::string & \fBtitle\fP ()"
.br
.ti -1c
.RI "std::string const  & \fBtitle\fP () const"
.br
.ti -1c
.RI "void \fBWrite\fP (bool const &writeEmpty=false)"
.br
.ti -1c
.RI "void \fBWrite_i\fP (int const &thread_index)"
.br
.ti -1c
.RI "\fB~MTTHist\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBMerge_thread\fP (\fBMTTHist\fP< THist > &histo)"
.br
.ti -1c
.RI "static bool const  & \fBverbose\fP (bool const &_verbose=true)"
.br
.ti -1c
.RI "static bool & \fBverbosity\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "std::mutex \fBm_mutex\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::vector< THist * > \fBm_collection\fP"
.br
.ti -1c
.RI "std::string \fBm_comment\fP"
.br
.ti -1c
.RI "bool \fBm_exists\fP = false"
.br
.ti -1c
.RI "TFile * \fBm_file\fP = nullptr"
.br
.ti -1c
.RI "\fBulonglong\fP \fBm_integral\fP = 0ull"
.br
.ti -1c
.RI "\fBBools\fP \fBm_is_deleted\fP"
.br
.ti -1c
.RI "bool \fBm_is_merged\fP = false"
.br
.ti -1c
.RI "THist * \fBm_merged\fP = nullptr"
.br
.ti -1c
.RI "bool \fBm_merged_deleted\fP = false"
.br
.ti -1c
.RI "std::string \fBm_name\fP"
.br
.ti -1c
.RI "std::string \fBm_title\fP"
.br
.ti -1c
.RI "bool \fBm_written\fP = false"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static std::condition_variable \fBm_condition\fP"
.br
.ti -1c
.RI "static \fBMTCounter\fP \fBm_nb_thread_running\fP {0}"
.br
.ti -1c
.RI "static bool \fBm_verbose\fP = true"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class THist>
.br
class MTTHist< THist >"
Multithreading wrapper for all THist spectra of root library\&. 


.PP
\fBAuthor\fP
.RS 4
corentin.hiver@ijclab.in2p3.fr
.RE
.PP
Inspiration : https://root.cern.ch/doc/master/TThreadedObject_8hxx_source.html#l00167
.PP
\fBAttention\fP
.RS 4
As for any class deriving from \fBMTObject\fP, first initialize the number of threads : 
.PP
.nf
 MTObject::Initialize(nb_threads)

.fi
.PP
.RE
.PP
Instantiate this class as follow : 
.PP
.nf
 MTTHist<TH1F> some_TH1F_histo("name", "title:xaxis:yaxis", bins, min, max);

.fi
.PP
 Or 
.PP
.nf
 MTTHist<TH1F> some_TH1F_histo;
 some_TH1F_histo.reset("name", "title:xaxis:yaxis", bins, min, max);

.fi
.PP
 
.PP
\fBAttention\fP
.RS 4
Please do not use the copy constructors and operators, may need proper work to make it safe
.RE
.PP
In default mode, nb_threads histograms are created 
.PP
\fBTest\fP
.RS 4
In mono mode (MTTHIST_MONO), only one histogram is created UNDER DEVELOPPEMENT
.RE
.PP
.PP
To fill the histogram from threads : 
.PP
.nf
     some_TH1F_histo.Fill()

.fi
.PP
 Once the histogram have been filled, two options :
.PP
.IP "\(bu" 2
Either write it down directly : 
.PP
.nf
  // Open a TFile
  some_TH1F_histo.Write()
  // Write and close the TFile

.fi
.PP

.IP "\(bu" 2
Or you can merge the histograms : 
.PP
.nf
 some_TH1F_histo.Merge();

.fi
.PP
 You can then address the merged histogram using -> : 
.PP
.nf
some_TH1F_histo->Integral();

.fi
.PP
 Special case : you can also instanciate and write down one histogram per thread\&.
.PP
.PP
Example : void single_thread(MTTHist & histo) { histo\&.reset('name','title', args\&.\&.\&.); \&.\&.\&. Fill the histo histo\&.Write(); }
.PP
int main() { MTTHist<TH1> on_histo_per_thread; std::parallelise_function(single_thread, on_histo_per_thread); return 1; }
.PP
In this case each histogram is kept separated, no merge occurs\&. Use this if you want to make the benefits of the user defined method of this class or for consistency with the rest of the code\&. It is equivalent to declare the histogram directly inside the funcion
.PP
\fBTodo\fP
.RS 4
better memory management 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class THist > template<class\&.\&.\&. ARGS> \fBMTTHist\fP< THist >::\fBMTTHist\fP (ARGS &&\&.\&.\&. args)\fC [inline]\fP"

.PP
Construct a new \fBMTTHist\fP object and send the arguments directly to the underlying root histogramm\&. 
.SS "template<class THist > template<class\&.\&.\&. ARGS> \fBMTTHist\fP< THist >::\fBMTTHist\fP ()\fC [inline]\fP"

.SS "template<class THist > \fBMTTHist\fP< THist >::~\fBMTTHist\fP"

.SS "template<class THist > template<class\&.\&.\&. ARGS> \fBMTTHist\fP< THist >::\fBMTTHist\fP (\fBMTTHist\fP< THist > const & hist)\fC [inline]\fP"

.PP
Copy constructor\&. 
.SS "template<class THist > template<class\&.\&.\&. ARGS> \fBMTTHist\fP< THist >::\fBMTTHist\fP (\fBMTTHist\fP< THist > && hist)\fC [inline]\fP"

.PP
Move constructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<class THist > void \fBMTTHist\fP< THist >::clean ()\fC [inline]\fP"

.SS "template<class THist > bool const& \fBMTTHist\fP< THist >::exists () const\fC [inline]\fP"

.SS "template<class THist > TFile* \fBMTTHist\fP< THist >::file ()\fC [inline]\fP"

.SS "template<class THist > template<class\&.\&.\&. ARGS> void \fBMTTHist\fP< THist >::Fill (ARGS &&\&.\&.\&. args)\fC [inline]\fP, \fC [noexcept]\fP"

.SS "template<class THist > THist* \fBMTTHist\fP< THist >::get ()\fC [inline]\fP"

.SS "template<class THist > THist* \fBMTTHist\fP< THist >::Get ()\fC [inline]\fP"

.SS "template<class THist > THist* \fBMTTHist\fP< THist >::Get (\fBushort\fP const & thread_nb)\fC [inline]\fP"

.SS "template<class THist > std::vector<THist*> const& \fBMTTHist\fP< THist >::getCollection () const\fC [inline]\fP"

.SS "template<class THist > std::string const& \fBMTTHist\fP< THist >::GetName () const\fC [inline]\fP"

.SS "template<class THist > auto const& \fBMTTHist\fP< THist >::Integral () const\fC [inline]\fP"

.SS "template<class THist > bool const& \fBMTTHist\fP< THist >::isWritten () const\fC [inline]\fP"

.SS "template<class THist > void \fBMTTHist\fP< THist >::Merge"

.SS "template<class THist > void \fBMTTHist\fP< THist >::Merge_t\fC [inline]\fP"

.SS "template<class THist > void \fBMTTHist\fP< THist >::Merge_thread (\fBMTTHist\fP< THist > & histo)\fC [inline]\fP, \fC [static]\fP"

.SS "template<class THist > THist * \fBMTTHist\fP< THist >::Merged"

.SS "template<class THist > std::string& \fBMTTHist\fP< THist >::name ()\fC [inline]\fP"

.SS "template<class THist > std::string const& \fBMTTHist\fP< THist >::name () const\fC [inline]\fP"

.SS "template<class THist > \fBMTTHist\fP< THist >::operator bool () const &\fC [inline]\fP"

.SS "template<class THist > THist* \fBMTTHist\fP< THist >::operator\-> ()\fC [inline]\fP"

.SS "template<class THist > \fBMTTHist\fP<THist>& \fBMTTHist\fP< THist >::operator= (\fBMTTHist\fP< THist > const & hist)\fC [inline]\fP"

.SS "template<class THist > THist* \fBMTTHist\fP< THist >::operator[] (int const & thread_nb)\fC [inline]\fP"

.SS "template<class THist > void \fBMTTHist\fP< THist >::Print"

.SS "template<class THist > std::string const& \fBMTTHist\fP< THist >::readComment (std::string const & comment) const\fC [inline]\fP"

.SS "template<class THist > auto \fBMTTHist\fP< THist >::reset (\fBMTTHist\fP< THist > const & hist)\fC [inline]\fP"

.PP
Copy initializer\&. 
.SS "template<class THist > template<class\&.\&.\&. ARGS> void \fBMTTHist\fP< THist >::reset (std::nullptr_t)\fC [inline]\fP"

.SS "template<class THist > template<class\&.\&.\&. ARGS> void \fBMTTHist\fP< THist >::reset (std::string name, ARGS &&\&.\&.\&. args)\fC [inline]\fP"

.SS "template<class THist > void \fBMTTHist\fP< THist >::setComment (std::string const & comment)\fC [inline]\fP"

.SS "template<class THist > std::string const& \fBMTTHist\fP< THist >::setName (std::string const & _name)\fC [inline]\fP"

.SS "template<class THist > std::string const& \fBMTTHist\fP< THist >::setTitle (std::string const & _title)\fC [inline]\fP"

.SS "template<class THist > auto \fBMTTHist\fP< THist >::size () const\fC [inline]\fP"

.SS "template<class THist > std::string& \fBMTTHist\fP< THist >::title ()\fC [inline]\fP"

.SS "template<class THist > std::string const& \fBMTTHist\fP< THist >::title () const\fC [inline]\fP"

.SS "template<class THist > static bool const& \fBMTTHist\fP< THist >::verbose (bool const & _verbose = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.SS "template<class THist > static bool& \fBMTTHist\fP< THist >::verbosity ()\fC [inline]\fP, \fC [static]\fP"

.SS "template<class THist > void \fBMTTHist\fP< THist >::Write (bool const & writeEmpty = \fCfalse\fP)"

.SS "template<class THist > void \fBMTTHist\fP< THist >::Write_i (int const & thread_index)"

.SH "Member Data Documentation"
.PP 
.SS "template<class THist > std::vector<THist*> \fBMTTHist\fP< THist >::m_collection\fC [private]\fP"

.SS "template<class THist > std::string \fBMTTHist\fP< THist >::m_comment\fC [private]\fP"

.SS "template<class THist > std::condition_variable \fBMTTHist\fP< THist >::m_condition\fC [static]\fP, \fC [private]\fP"

.SS "template<class THist > bool \fBMTTHist\fP< THist >::m_exists = false\fC [private]\fP"

.SS "template<class THist > TFile* \fBMTTHist\fP< THist >::m_file = nullptr\fC [private]\fP"

.SS "template<class THist > \fBulonglong\fP \fBMTTHist\fP< THist >::m_integral = 0ull\fC [private]\fP"

.SS "template<class THist > \fBBools\fP \fBMTTHist\fP< THist >::m_is_deleted\fC [private]\fP"

.SS "template<class THist > bool \fBMTTHist\fP< THist >::m_is_merged = false\fC [private]\fP"

.SS "template<class THist > THist* \fBMTTHist\fP< THist >::m_merged = nullptr\fC [private]\fP"

.SS "template<class THist > bool \fBMTTHist\fP< THist >::m_merged_deleted = false\fC [private]\fP"

.SS "template<class THist > std::mutex \fBMTTHist\fP< THist >::m_mutex"

.SS "template<class THist > std::string \fBMTTHist\fP< THist >::m_name\fC [private]\fP"

.SS "template<class THist > \fBMTCounter\fP \fBMTTHist\fP< THist >::m_nb_thread_running {0}\fC [static]\fP, \fC [private]\fP"

.SS "template<class THist > std::string \fBMTTHist\fP< THist >::m_title\fC [private]\fP"

.SS "template<class THist > bool \fBMTTHist\fP< THist >::m_verbose = true\fC [static]\fP, \fC [private]\fP"

.SS "template<class THist > bool \fBMTTHist\fP< THist >::m_written = false\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Nuball2 from the source code\&.
