.TH "Path" 3 "Mon Mar 25 2024" "Nuball2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Path \- EXPERIMENTAL Object used to hold the complete path of a giver folder\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <files_functions\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPath\fP & \fBaddFolder\fP (\fBFolder\fP const &\fBfolder\fP)"
.br
.ti -1c
.RI "auto \fBc_str\fP ()"
.br
.ti -1c
.RI "bool \fBexists\fP ()"
.br
.ti -1c
.RI "\fBFolder\fP const  & \fBfolder\fP () const"
.br
.ti -1c
.RI "std::string const  & \fBget\fP () const"
.br
.ti -1c
.RI "\fBFolders\fP const  & \fBgetFolders\fP () const"
.br
.ti -1c
.RI "bool \fBmake\fP ()"
.br
.ti -1c
.RI "void \fBmakeFolderList\fP ()"
.br
.ti -1c
.RI "int \fBnbFiles\fP ()"
.br
.ti -1c
.RI "\fBoperator bool\fP () const"
.br
.ti -1c
.RI "std::string \fBoperator+\fP (const char *addString)"
.br
.ti -1c
.RI "\fBPath\fP \fBoperator+\fP (\fBFolder\fP const &\fBfolder\fP)"
.br
.ti -1c
.RI "std::string \fBoperator+\fP (std::string const &addString)"
.br
.ti -1c
.RI "\fBPath\fP & \fBoperator+=\fP (std::string const &addString)"
.br
.ti -1c
.RI "\fBPath\fP & \fBoperator=\fP (const char *\fBpath\fP)"
.br
.ti -1c
.RI "\fBPath\fP & \fBoperator=\fP (\fBPath\fP &\fBpath\fP)"
.br
.ti -1c
.RI "\fBPath\fP & \fBoperator=\fP (\fBPath\fP const &\fBpath\fP)"
.br
.ti -1c
.RI "\fBPath\fP & \fBoperator=\fP (std::string const &inputString)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (std::string const &cmprStr)"
.br
.ti -1c
.RI "\fBFolder\fP const  & \fBoperator[]\fP (\fBuint\fP const &i) const"
.br
.ti -1c
.RI "\fBPath\fP ()"
.br
.ti -1c
.RI "std::string const  & \fBpath\fP () const"
.br
.ti -1c
.RI "\fBPath\fP (const char *\fBc_str\fP, bool const &create=false)"
.br
.RI "Turns a C string to a path, creating it if create = true and it doesn't already exists\&. "
.ti -1c
.RI "\fBPath\fP (\fBPath\fP const &\fBpath\fP)"
.br
.ti -1c
.RI "\fBPath\fP (std::string const &\fBpath\fP, bool const &create=false)"
.br
.RI "Turns a string to a path, creating it if create = true and it doesn't already exists\&. "
.ti -1c
.RI "auto \fBsize\fP () const"
.br
.ti -1c
.RI "std::string const  & \fBstring\fP () const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBPath\fP \fBhome\fP ()"
.br
.ti -1c
.RI "static \fBPath\fP \fBpwd\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBcleanPath\fP ()"
.br
.RI "To remove extraneous \&./ or \&.\&./\&. "
.ti -1c
.RI "void \fBloadPath\fP (bool const &create=false)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fBm_exists\fP = false"
.br
.ti -1c
.RI "std::string \fBm_path\fP"
.br
.ti -1c
.RI "\fBFolders\fP \fBm_recursive_folders\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
EXPERIMENTAL Object used to hold the complete path of a giver folder\&. 

You can use either a full path from the root ('/\&.\&.\&./\&.\&.\&./') or from the home directory ('~/\&.\&.\&./\&.\&.\&./')
.PP
So far, relative paths are not supported (yet hopefully) 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Path::Path ()\fC [inline]\fP"

.SS "Path::Path (\fBPath\fP const & path)\fC [inline]\fP"

.SS "Path::Path (std::string const & path, bool const & create = \fCfalse\fP)\fC [inline]\fP"

.PP
Turns a string to a path, creating it if create = true and it doesn't already exists\&. 
.SS "Path::Path (const char * c_str, bool const & create = \fCfalse\fP)\fC [inline]\fP"

.PP
Turns a C string to a path, creating it if create = true and it doesn't already exists\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBPath\fP& Path::addFolder (\fBFolder\fP const & folder)\fC [inline]\fP"

.SS "auto Path::c_str ()\fC [inline]\fP"

.SS "void Path::cleanPath ()\fC [inline]\fP, \fC [private]\fP"

.PP
To remove extraneous \&./ or \&.\&./\&. 
.SS "bool Path::exists ()\fC [inline]\fP"

.SS "\fBFolder\fP const& Path::folder () const\fC [inline]\fP"

.SS "std::string const& Path::get () const\fC [inline]\fP"

.SS "\fBFolders\fP const& Path::getFolders () const\fC [inline]\fP"

.SS "static \fBPath\fP Path::home ()\fC [inline]\fP, \fC [static]\fP"

.SS "void Path::loadPath (bool const & create = \fCfalse\fP)\fC [inline]\fP, \fC [private]\fP"

.SS "bool Path::make ()\fC [inline]\fP"

.SS "void Path::makeFolderList ()\fC [inline]\fP"

.SS "int Path::nbFiles ()\fC [inline]\fP"

.SS "Path::operator bool () const\fC [inline]\fP"

.SS "std::string Path::operator+ (const char * addString)\fC [inline]\fP"

.SS "\fBPath\fP Path::operator+ (\fBFolder\fP const & folder)\fC [inline]\fP"

.SS "std::string Path::operator+ (std::string const & addString)\fC [inline]\fP"

.SS "\fBPath\fP& Path::operator+= (std::string const & addString)\fC [inline]\fP"

.SS "\fBPath\fP& Path::operator= (const char * path)\fC [inline]\fP"

.SS "\fBPath\fP& Path::operator= (\fBPath\fP & path)\fC [inline]\fP"

.SS "\fBPath\fP& Path::operator= (\fBPath\fP const & path)\fC [inline]\fP"

.SS "\fBPath\fP& Path::operator= (std::string const & inputString)\fC [inline]\fP"

.SS "bool Path::operator== (std::string const & cmprStr)\fC [inline]\fP"

.SS "\fBFolder\fP const& Path::operator[] (\fBuint\fP const & i) const\fC [inline]\fP"

.SS "std::string const& Path::path () const\fC [inline]\fP"

.SS "static \fBPath\fP Path::pwd ()\fC [inline]\fP, \fC [static]\fP"

.SS "auto Path::size () const\fC [inline]\fP"

.SS "std::string const& Path::string () const\fC [inline]\fP"

.SH "Member Data Documentation"
.PP 
.SS "bool Path::m_exists = false\fC [private]\fP"

.SS "std::string Path::m_path\fC [private]\fP"

.SS "\fBFolders\fP Path::m_recursive_folders\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Nuball2 from the source code\&.
