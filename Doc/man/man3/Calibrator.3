.TH "Calibrator" 3 "Mon Mar 25 2024" "Nuball2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Calibrator \- Allows one to calculate and verify calibration coefficients for various sources and detectors for Nuball2\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Calibrator\&.hpp>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBhistograms\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBanalyse\fP (std::string const &source='152Eu')"
.br
.RI "Analyse the spectra to extract calibration coefficients\&. "
.ti -1c
.RI "void \fBanalyse2\fP (std::vector< double > peaks)"
.br
.RI "Uses the second version of the peak finder to extract calibration coefficients\&. "
.ti -1c
.RI "void \fBcalculate\fP (std::string const &dataDir, int nb_files=\-1, std::string const &source='152Eu', std::string const &type='fast')"
.br
.ti -1c
.RI "void \fBcalculate\fP (std::string const &\fBhistograms\fP, std::string const &source='152Eu')"
.br
.RI "Calculate calibration from \&.root histograms\&. "
.ti -1c
.RI "void \fBcalculate2\fP (std::string const &histogramsFilename, std::vector< double > peaks, std::string const &fit_info_file='fit_info\&.data')"
.br
.ti -1c
.RI "auto & \fBcalib\fP ()"
.br
.ti -1c
.RI "auto const  & \fBcalib\fP () const"
.br
.ti -1c
.RI "bool const  & \fBcalibrate_data\fP ()"
.br
.ti -1c
.RI "bool const  & \fBcalibrate_data\fP () const"
.br
.ti -1c
.RI "void \fBcalibrateFasterData\fP (std::string const &folder, int const &nb_files=\-1)"
.br
.ti -1c
.RI "void \fBcalibrateRootData\fP (std::string const &folder, int const &nb_files=\-1)"
.br
.ti -1c
.RI "\fBCalibration\fP & \fBcalibration\fP ()"
.br
.ti -1c
.RI "\fBCalibration\fP const  & \fBcalibration\fP () const"
.br
.ti -1c
.RI "\fBCalibrator\fP ()=default"
.br
.ti -1c
.RI "void \fBfillRootDataHisto\fP (std::string const &filename)"
.br
.ti -1c
.RI "void \fBfitCalibration\fP (\fBFits\fP &fits)"
.br
.ti -1c
.RI "void \fBInitialise\fP ()"
.br
.ti -1c
.RI "bool \fBloadCalibration\fP (\fBCalibration\fP const &\fBcalib\fP)"
.br
.RI "Loading calibration from file name\&. "
.ti -1c
.RI "bool \fBloadCalibration\fP (std::string const &calib_file)"
.br
.ti -1c
.RI "void \fBloadFasterData\fP (std::string const &dataDir, int const &nb_files=\-1)"
.br
.ti -1c
.RI "void \fBloadFitInfo\fP (std::string const &fit_info_file)"
.br
.ti -1c
.RI "void \fBloadRootData\fP (std::string const &dataDir, int const &nb_files=\-1)"
.br
.ti -1c
.RI "void \fBloadRootHisto\fP (std::string const &\fBhistograms\fP)"
.br
.RI "Loads non-calibrated spectra\&. "
.ti -1c
.RI "\fBoperator bool\fP () const &"
.br
.ti -1c
.RI "void \fBpeakFinder\fP (std::string const &source)"
.br
.ti -1c
.RI "void \fBsetSource\fP (std::string const &source)"
.br
.ti -1c
.RI "void \fBverbose\fP (bool const &_verbose)"
.br
.ti -1c
.RI "void \fBverify\fP (std::string const &outfilename='verify')"
.br
.RI "if some spectra and calibration coefficients have been loaded, or after the calibration coefficients have been calculated, this allows one to check the calibration "
.ti -1c
.RI "void \fBwriteCalibratedHisto\fP (std::string const &outfilename)"
.br
.ti -1c
.RI "void \fBwriteData\fP (std::string const &outfilename)"
.br
.ti -1c
.RI "void \fBwritePosPeaks\fP (std::string const &outfilename)"
.br
.ti -1c
.RI "void \fBwriteRawRoot\fP (std::string const &outfilename)"
.br
.ti -1c
.RI "\fB~Calibrator\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBfillHisto\fP (\fBHit\fP &hit, \fBFasterReader\fP &reader, \fBCalibrator\fP &\fBcalib\fP)"
.br
.RI "Fills histograms\&. "
.ti -1c
.RI "static void \fBloadRootDataThread\fP (\fBCalibrator\fP &\fBcalib\fP, \fBMTList\fP &list)"
.br
.ti -1c
.RI "static void \fBtreatOnlyGe\fP (bool const &b=true)"
.br
.ti -1c
.RI "static void \fBtreatOnlyParis\fP (bool const &b=true)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "struct \fBCalibrator::histograms\fP \fBm_histos\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBprintParameters\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBPath\fP \fBdataPath\fP"
.br
.ti -1c
.RI "\fBCalibration\fP \fBm_calib\fP"
.br
.ti -1c
.RI "bool \fBm_calibrate_data\fP = false"
.br
.ti -1c
.RI "\fBFits\fP \fBm_fits\fP = \fBFits\fP(100)"
.br
.ti -1c
.RI "bool \fBm_histo_loaded\fP = false"
.br
.ti -1c
.RI "bool \fBm_Initialised\fP = false"
.br
.ti -1c
.RI "std::map< int, int > \fBm_nb_bins_below\fP"
.br
.ti -1c
.RI "std::string \fBm_outCalib\fP = ''"
.br
.ti -1c
.RI "std::string \fBm_outDir\fP = 'Calibrator/'"
.br
.ti -1c
.RI "std::string \fBm_outRoot\fP = 'calibration\&.root'"
.br
.ti -1c
.RI "bool \fBm_outRoot_b\fP = false"
.br
.ti -1c
.RI "std::map< int, int > \fBm_rebin\fP"
.br
.ti -1c
.RI "bool \fBm_residus\fP = false"
.br
.ti -1c
.RI "std::string \fBm_source\fP = ''"
.br
.ti -1c
.RI "std::map< int, double > \fBm_threshold\fP"
.br
.ti -1c
.RI "bool \fBm_verbose\fP = false"
.br
.ti -1c
.RI "TFile * \fBreadFile\fP = nullptr"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static bool \fBm_treatOnlyGe\fP = false"
.br
.ti -1c
.RI "static bool \fBm_treatOnlyParis\fP = false"
.br
.in -1c
.SH "Detailed Description"
.PP 
Allows one to calculate and verify calibration coefficients for various sources and detectors for Nuball2\&. 


.PP
\fBTodo\fP
.RS 4
\fBCalibrator::verify()\fP DO NOT SUPPORT multithreading with \fBMTObject\fP !! 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "Calibrator::Calibrator ()\fC [default]\fP"

.SS "Calibrator::~Calibrator ()\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "void Calibrator::analyse (std::string const & source = \fC'152Eu'\fP)"

.PP
Analyse the spectra to extract calibration coefficients\&. The peak finding follows the following principle : We start from the bin at the very right side of the spectra\&. Then we add the value of the bin to the integral counter\&. Then we add the value of the next bin on the left, then the next, etc\&.\&. That is, we integrate the spectra from right to left The moment the first peak is found, the higher energy one, the integral will suddenly increase Then we have to determine a threshold above which we say 'we have found the first peak' From this we determine a really rough first linear calibration\&. This allows us to find, for each other peak, an energy windows in which it should be\&. Once this window established, we find its centroid\&. Then we create a smaller window and find again the centroid\&. A third window (which may not me important ?) event narrower is set around the peak\&. Then the peak is fitted and the mean value of the gaussian fit added to the calibration curve\&. Finally, the fit of the calibration curve gives the calibration coefficients\&.
.PP
The threshold is taken as the ratio between the integral and the total integral of the spectra, so that the process do not depend neither on different counting rates nor on different calibration duration\&. Only issue : it depends on the kind of detector and to some extend to the geometry\&. That is, this calibration is not well suited for paris detectors\&.\&.\&. Also, if a peak is absent due to for instance high energy threshold of the detector (typically 121keV of 152Eu is absent in some noisy channels) then the calibration will fail
.PP
\fBAttention\fP
.RS 4
The most difficult part is to find the value of the threshold, wich must be different for each kind of detector\&. If it is different for differents detectors of the same type (e\&.g\&. paris) then the calibration requires additionnal work\&.
.PP
Take care of the binning of the spectra\&. If there is too much or not enough bins then the peak fitting will fail, if the maximum ADC value is lower than the higher energy peak then the peak findind will fail\&. Also, everything supposes the minimum bin corresponds to 0, otherwise it might fail\&. 
.RE
.PP

.SS "void Calibrator::analyse2 (std::vector< double > peaks)"

.PP
Uses the second version of the peak finder to extract calibration coefficients\&. Uses the second derivative spectra in order to find the peaks\&. To do so, uses an input file to set the three main parameter for each detector : The number of bins to use The threshold for peak detection The number of bins below threshold (by default 2)
.PP
The spectra's name must be the detector's name (ex R3A1_red)
.PP
\fBParameters\fP
.RS 4
\fIsource\fP 
.RE
.PP

.SS "void Calibrator::calculate (std::string const & dataDir, int nb_files = \fC\-1\fP, std::string const & source = \fC'152Eu'\fP, std::string const & type = \fC'fast'\fP)"

.SS "void Calibrator::calculate (std::string const & histograms, std::string const & source = \fC'152Eu'\fP)"

.PP
Calculate calibration from \&.root histograms\&. Calculate the calibration coefficients from already calculated histograms\&.
.PP
\fBAttention\fP
.RS 4
TODO
.PP
The name of the histograms must correspond either to the name of the detector or the label declared in the ID file 
.RE
.PP

.SS "void Calibrator::calculate2 (std::string const & histogramsFilename, std::vector< double > peaks, std::string const & fit_info_file = \fC'fit_info\&.data'\fP)"

.SS "auto& Calibrator::calib ()\fC [inline]\fP"

.SS "auto const& Calibrator::calib () const\fC [inline]\fP"

.SS "bool const& Calibrator::calibrate_data ()\fC [inline]\fP"

.SS "bool const& Calibrator::calibrate_data () const\fC [inline]\fP"

.SS "void Calibrator::calibrateFasterData (std::string const & folder, int const & nb_files = \fC\-1\fP)"

.SS "void Calibrator::calibrateRootData (std::string const & folder, int const & nb_files = \fC\-1\fP)"

.SS "\fBCalibration\fP& Calibrator::calibration ()\fC [inline]\fP"

.SS "\fBCalibration\fP const& Calibrator::calibration () const\fC [inline]\fP"

.SS "void Calibrator::fillHisto (\fBHit\fP & hit, \fBFasterReader\fP & reader, \fBCalibrator\fP & calib)\fC [static]\fP"

.PP
Fills histograms\&. There are two modes : You can either fill the histograms with raw values Or you can use the loaded or calculated calibration factors to fille calibrated histograms
.PP
\fBParameters\fP
.RS 4
\fIhit\fP 
.br
\fIreader\fP 
.br
\fIcalib\fP 
.RE
.PP

.SS "void Calibrator::fillRootDataHisto (std::string const & filename)"

.SS "void Calibrator::fitCalibration (\fBFits\fP & fits)"

.SS "void Calibrator::Initialise ()\fC [inline]\fP"

.SS "bool Calibrator::loadCalibration (\fBCalibration\fP const & calib)\fC [inline]\fP"

.PP
Loading calibration from file name\&. 
.SS "bool Calibrator::loadCalibration (std::string const & calib_file)\fC [inline]\fP"

.SS "void Calibrator::loadFasterData (std::string const & dataDir, int const & nb_files = \fC\-1\fP)"

.SS "void Calibrator::loadFitInfo (std::string const & fit_info_file)"

.SS "void Calibrator::loadRootData (std::string const & dataDir, int const & nb_files = \fC\-1\fP)"

.SS "void Calibrator::loadRootDataThread (\fBCalibrator\fP & calib, \fBMTList\fP & list)\fC [static]\fP"

.SS "void Calibrator::loadRootHisto (std::string const & histograms)"

.PP
Loads non-calibrated spectra\&. 
.PP
\fBParameters\fP
.RS 4
\fIhistograms\fP 
.RE
.PP

.SS "Calibrator::operator bool () const &\fC [inline]\fP"

.PP
\fBTodo\fP
.RS 4

.RE
.PP

.SS "void Calibrator::peakFinder (std::string const & source)"

.SS "void Calibrator::printParameters ()\fC [private]\fP"

.SS "void Calibrator::setSource (std::string const & source)\fC [inline]\fP"

.SS "static void Calibrator::treatOnlyGe (bool const & b = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.SS "static void Calibrator::treatOnlyParis (bool const & b = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.SS "void Calibrator::verbose (bool const & _verbose)\fC [inline]\fP"

.SS "void Calibrator::verify (std::string const & outfilename = \fC'verify'\fP)"

.PP
if some spectra and calibration coefficients have been loaded, or after the calibration coefficients have been calculated, this allows one to check the calibration 
.PP
\fBParameters\fP
.RS 4
\fIoutfilename\fP 
.RE
.PP

.SS "void Calibrator::writeCalibratedHisto (std::string const & outfilename)"

.SS "void Calibrator::writeData (std::string const & outfilename)"

.SS "void Calibrator::writePosPeaks (std::string const & outfilename)"

.SS "void Calibrator::writeRawRoot (std::string const & outfilename)"

.SH "Member Data Documentation"
.PP 
.SS "\fBPath\fP Calibrator::dataPath\fC [private]\fP"

.SS "\fBCalibration\fP Calibrator::m_calib\fC [private]\fP"

.SS "bool Calibrator::m_calibrate_data = false\fC [private]\fP"

.SS "\fBFits\fP Calibrator::m_fits = \fBFits\fP(100)\fC [private]\fP"

.SS "bool Calibrator::m_histo_loaded = false\fC [private]\fP"

.SS "struct \fBCalibrator::histograms\fP Calibrator::m_histos"

.SS "bool Calibrator::m_Initialised = false\fC [private]\fP"

.SS "std::map<int, int> Calibrator::m_nb_bins_below\fC [private]\fP"

.SS "std::string Calibrator::m_outCalib = ''\fC [private]\fP"

.SS "std::string Calibrator::m_outDir = 'Calibrator/'\fC [private]\fP"

.SS "std::string Calibrator::m_outRoot = 'calibration\&.root'\fC [private]\fP"

.SS "bool Calibrator::m_outRoot_b = false\fC [private]\fP"

.SS "std::map<int, int> Calibrator::m_rebin\fC [private]\fP"

.SS "bool Calibrator::m_residus = false\fC [private]\fP"

.SS "std::string Calibrator::m_source = ''\fC [private]\fP"

.SS "std::map<int, double> Calibrator::m_threshold\fC [private]\fP"

.SS "bool Calibrator::m_treatOnlyGe = false\fC [static]\fP, \fC [private]\fP"

.SS "bool Calibrator::m_treatOnlyParis = false\fC [static]\fP, \fC [private]\fP"

.SS "bool Calibrator::m_verbose = false\fC [private]\fP"

.SS "TFile* Calibrator::readFile = nullptr\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Nuball2 from the source code\&.
