<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_m_t_vector" xml:lang="en-US">
<title>MTVector&lt; T &gt; Class Template Reference</title>
<indexterm><primary>MTVector&lt; T &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;MTList.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>auto <link linkend="_class_m_t_vector_1ac635c567f37ab40e241f5eccdf49ac3d">begin</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_m_t_vector_1ae3f2bdb83abfae640cdcfe0dd5cd05c3">clear</link> ()</para>
</listitem>
            <listitem><para>auto <link linkend="_class_m_t_vector_1a5e9df0c0baf0b23daf47797492e6068e">end</link> ()</para>
</listitem>
            <listitem><para>std::vector&lt; T &gt; const  &amp; <link linkend="_class_m_t_vector_1ae6e4c7bbe8c226d36b317340c447e914">get</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_m_t_vector_1a824a9ff009dde921eec4759c69f74ca7">getNext</link> (T &amp;t)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_m_t_vector_1aaae47be200e6af0a341a5f9407fe3a4d">getNext</link> (T &amp;t, <link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> &amp;index)</para>
</listitem>
            <listitem><para><link linkend="_class_m_t_vector_1a5b1308e464723c4ad533a4b47d2d28b5">MTVector</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="_class_m_t_vector_1aeeb4587a3061551d0ebe81559b6777d2">MTVector</link> (std::vector&lt; T &gt; const &amp;collection)</para>
</listitem>
            <listitem><para><link linkend="_class_m_t_vector_1a99b913bfdcf68d04d080e7edb3ce89d8">operator std::vector&lt; T &gt;</link> () &amp;</para>
</listitem>
            <listitem><para>void <link linkend="_class_m_t_vector_1a7b972ae46bd6ca7086b45543bdee7503">operator=</link> (std::vector&lt; T &gt; const &amp;collection)</para>
</listitem>
            <listitem><para><link linkend="_class_m_t_vector">MTVector</link> &amp; <link linkend="_class_m_t_vector_1ae4daeb890c699da55114201063ea7b49">operator=</link> (T const &amp;t)</para>
</listitem>
            <listitem><para>T const  &amp; <link linkend="_class_m_t_vector_1a29b5d2b3af7c22198407775ecab444b5">operator[]</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp;i)</para>
</listitem>
            <listitem><para>void <link linkend="_class_m_t_vector_1a3bca517dd665e4ad48dceab41c6db9f7">Print</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_m_t_vector_1ada63ea1ffe18a57ba1ce0e87e45e497c">push_back</link> (T const &amp;t)</para>
</listitem>
            <listitem><para>void <link linkend="_class_m_t_vector_1ae777fd124e908c9a638f4d41585ac1d3">resetRead</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_m_t_vector_1aaf668b0e1119200aa54524e429acd0c9">resize</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp;i=0)</para>
</listitem>
            <listitem><para>void <link linkend="_class_m_t_vector_1a17f4b1c62fa8f37d67955085a2f31918">set</link> (std::vector&lt; T &gt; const &amp;collection)</para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const  &amp; <link linkend="_class_m_t_vector_1adc40b9528bbbdcf2e3d33c1d93bb1582">size</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; T &gt; <link linkend="_class_m_t_vector_1a2c3ec2db54d57467063e4b9f3ef0d02f">m_collection</link></para>
</listitem>
            <listitem><para>std::mutex <link linkend="_class_m_t_vector_1a6352285479e71649dbd4ec8d32f08ca0">m_mutex</link></para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_class_m_t_vector_1a61e0c6ca31740a065b6a9fea31b471db">m_read_index</link> = 0</para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_class_m_t_vector_1a42853e85d32b83e0ee6a8a822b5d532a">m_size</link> = 0</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_m_t_vector_1a5b1308e464723c4ad533a4b47d2d28b5"/>    <section>
    <title>MTVector()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>MTVector</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>MTVector</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::<link linkend="_class_m_t_vector">MTVector</link> ( )<computeroutput>[default]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_m_t_vector_1aeeb4587a3061551d0ebe81559b6777d2"/>    <section>
    <title>MTVector()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>MTVector</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>MTVector</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::<link linkend="_class_m_t_vector">MTVector</link> (std::vector&lt; T &gt; const &amp; collection)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_m_t_vector_1ac635c567f37ab40e241f5eccdf49ac3d"/>    <section>
    <title>begin()</title>
<indexterm><primary>begin</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>auto <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::begin ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_m_t_vector_1ae3f2bdb83abfae640cdcfe0dd5cd05c3"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>clear</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::clear ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_m_t_vector_ae3f2bdb83abfae640cdcfe0dd5cd05c3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_m_t_vector_1a5e9df0c0baf0b23daf47797492e6068e"/>    <section>
    <title>end()</title>
<indexterm><primary>end</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>end</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>auto <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::end ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_m_t_vector_1ae6e4c7bbe8c226d36b317340c447e914"/>    <section>
    <title>get()</title>
<indexterm><primary>get</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>std::vector&lt;T&gt; const&amp; <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::get ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_m_t_vector_ae6e4c7bbe8c226d36b317340c447e914_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_m_t_vector_1a824a9ff009dde921eec4759c69f74ca7"/>    <section>
    <title>getNext()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>getNext</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>getNext</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::getNext (T &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_m_t_vector_a824a9ff009dde921eec4759c69f74ca7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_m_t_vector_1aaae47be200e6af0a341a5f9407fe3a4d"/>    <section>
    <title>getNext()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>getNext</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>getNext</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::getNext (T &amp; t, <link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> &amp; index)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_m_t_vector_1a99b913bfdcf68d04d080e7edb3ce89d8"/>    <section>
    <title>operator std::vector&lt; T &gt;()</title>
<indexterm><primary>operator std::vector&lt; T &gt;</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>operator std::vector&lt; T &gt;</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::operator std::vector&lt; T &gt; ( ) &amp;<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_m_t_vector_1a7b972ae46bd6ca7086b45543bdee7503"/>    <section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::operator= (std::vector&lt; T &gt; const &amp; collection)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_m_t_vector_a7b972ae46bd6ca7086b45543bdee7503_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_m_t_vector_1ae4daeb890c699da55114201063ea7b49"/>    <section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_class_m_t_vector">MTVector</link>&amp; <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::operator= (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_m_t_vector_ae4daeb890c699da55114201063ea7b49_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_m_t_vector_1a29b5d2b3af7c22198407775ecab444b5"/>    <section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>T const&amp; <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::operator[] (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp; i)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_m_t_vector_1a3bca517dd665e4ad48dceab41c6db9f7"/>    <section>
    <title>Print()</title>
<indexterm><primary>Print</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>Print</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::Print ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_m_t_vector_a3bca517dd665e4ad48dceab41c6db9f7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_m_t_vector_a3bca517dd665e4ad48dceab41c6db9f7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_m_t_vector_1ada63ea1ffe18a57ba1ce0e87e45e497c"/>    <section>
    <title>push_back()</title>
<indexterm><primary>push_back</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>push_back</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::push_back (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_m_t_vector_ada63ea1ffe18a57ba1ce0e87e45e497c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_m_t_vector_1ae777fd124e908c9a638f4d41585ac1d3"/>    <section>
    <title>resetRead()</title>
<indexterm><primary>resetRead</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>resetRead</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::resetRead ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_m_t_vector_ae777fd124e908c9a638f4d41585ac1d3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_m_t_vector_1aaf668b0e1119200aa54524e429acd0c9"/>    <section>
    <title>resize()</title>
<indexterm><primary>resize</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>resize</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::resize (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp; i = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_m_t_vector_aaf668b0e1119200aa54524e429acd0c9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_m_t_vector_1a17f4b1c62fa8f37d67955085a2f31918"/>    <section>
    <title>set()</title>
<indexterm><primary>set</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>set</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::set (std::vector&lt; T &gt; const &amp; collection)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_m_t_vector_a17f4b1c62fa8f37d67955085a2f31918_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_m_t_vector_a17f4b1c62fa8f37d67955085a2f31918_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_m_t_vector_1adc40b9528bbbdcf2e3d33c1d93bb1582"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const&amp; <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_m_t_vector_1a2c3ec2db54d57467063e4b9f3ef0d02f"/>    <section>
    <title>m_collection</title>
<indexterm><primary>m_collection</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>m_collection</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>std::vector&lt;T&gt; <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::m_collection<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_m_t_vector_1a6352285479e71649dbd4ec8d32f08ca0"/>    <section>
    <title>m_mutex</title>
<indexterm><primary>m_mutex</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>m_mutex</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>std::mutex <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::m_mutex<computeroutput>[mutable]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_m_t_vector_1a61e0c6ca31740a065b6a9fea31b471db"/>    <section>
    <title>m_read_index</title>
<indexterm><primary>m_read_index</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>m_read_index</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::m_read_index = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_m_t_vector_1a42853e85d32b83e0ee6a8a822b5d532a"/>    <section>
    <title>m_size</title>
<indexterm><primary>m_size</primary><secondary>MTVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>MTVector&lt; T &gt;</primary><secondary>m_size</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_class_m_t_vector">MTVector</link>&lt; T &gt;::m_size = 0<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
lib/MTObjects/<link linkend="__m_t_list_8hpp">MTList.hpp</link></section>
</section>
