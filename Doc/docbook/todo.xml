<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_todo" xml:lang="en-US">

<para><variablelist>
<varlistentry><term>Member <link linkend="_lib_root_8hpp_1a0135527c42feb1bbb8180af21ef5229e">AddTH1ByValue</link>  (TH2 *histo2, TH1 *histo1, int index, bool x=true)</term>
<listitem>
<para><anchor xml:id="_todo_1_todo000012"/>doesn&apos;t work for some reason ... </para>
</listitem></varlistentry>
<varlistentry><term>Class <link linkend="_class_calibrator">Calibrator</link>  </term>
<listitem>
<para><anchor xml:id="_todo_1_todo000014"/><link linkend="_class_calibrator_1aad90b0e3951d4caffe11e319c7108a51">Calibrator::verify()</link> DO NOT SUPPORT multithreading with <link linkend="_class_m_t_object">MTObject</link> !!  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_class_calibrator_1a6f433f9ca2ce1406d8ca5d55fdccb696">Calibrator::operator bool</link>  () const &amp;</term>
<listitem>
<para><anchor xml:id="_todo_1_todo000015"/>  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_class_data_file_1a943ee036c1dc8d2a2a98a9bc5953d303">DataFile&lt; Index, T &gt;::vectorize</link>  ()</term>
<listitem>
<para><anchor xml:id="_todo_1_todo000008"/>if needed  </para>
</listitem></varlistentry>
<varlistentry><term>Class <link linkend="_class_faster2_histo">Faster2Histo</link>  </term>
<listitem>
<para><anchor xml:id="_todo_1_todo000016"/> event building, timeshifts </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_class_faster2_histo_1a9fe030fbb75d71117cbac93c14c787f6">Faster2Histo::setTrigger</link>  (TriggerHit trigger)</term>
<listitem>
<para><anchor xml:id="_todo_1_todo000017"/>UNUSED until event building is done  </para>
</listitem></varlistentry>
<varlistentry><term>Class <link linkend="_class_file">File</link>  </term>
<listitem>
<para><anchor xml:id="_todo_1_todo000011"/>rethink the checkMode logic ...  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_class_hit_buffer_1a69b8f046928a8e3dc0e573dff8b4fe94">HitBuffer::shift</link>  (int n)</term>
<listitem>
<para><anchor xml:id="_todo_1_todo000009"/>Make it functionnal maybe ? </para>
</listitem></varlistentry>
<varlistentry><term>Class <link linkend="_class_manip">Manip</link>  </term>
<listitem>
<para><anchor xml:id="_todo_1_todo000010"/>make it better !!  </para>
</listitem></varlistentry>
<varlistentry><term>Class <link linkend="_class_m_t_object">MTObject</link>  </term>
<listitem>
<para><anchor xml:id="_todo_1_todo000020"/> Trying to make this work : template&lt;class... ARGS&gt; static ret_type helper_function(MyClass &amp; myclass, ARGS... args) {return myclass.function_to_multithread(std::forward&lt;ARGS&gt;(args)...);}  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_class_m_t_object_1a35c02650eb403bd54e867f93bb26fc47">MTObject::parallelise_function</link>  (Func &amp;&amp;func, ARGS &amp;&amp;... args)</term>
<listitem>
<para><anchor xml:id="_todo_1_todo000021"/>check if I can replace Func by std::function  </para>
</listitem></varlistentry>
<varlistentry><term>Class <link linkend="_class_near_line">NearLine</link>  </term>
<listitem>
<para><anchor xml:id="_todo_1_todo000018"/> </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_class_spectra_co_1a223f3a9be7c661c1ef700d8bfda1106f">SpectraCo::fill</link>  (double const &amp;X) noexcept</term>
<listitem>
<para><anchor xml:id="_todo_1_todo000001"/>test it  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_class_spectra_co_1a34ea7496185caf2178c8ba1c10876dd3">SpectraCo::operator*</link>  (double const &amp;factor)</term>
<listitem>
<para><anchor xml:id="_todo_1_todo000003"/>can be optimized  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_class_spectra_co_1aa4225392a595ff8a0950ef67610096d0">SpectraCo::operator/</link>  (double const &amp;factor)</term>
<listitem>
<para><anchor xml:id="_todo_1_todo000004"/>can be optimized  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_class_spectra_co_1a79c602e0c90555c37098d070863134f3">SpectraCo::rebin</link>  (int const &amp;factor, bool const &amp;rebin_derivatives=false)</term>
<listitem>
<para><anchor xml:id="_todo_1_todo000002"/>create a custom method without the use of ROOT (attempt commented at the bottom of the file)  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_class_spectra_co_1adbdfafcc8b0a95d520e491b0062b2e0b">SpectraCo::removeBackground</link>  (int const &amp;smooth, std::string const &amp;fit_options=&quot;&quot;) noexcept</term>
<listitem>
<para><anchor xml:id="_todo_1_todo000005"/>Try to adapt not to have to use root for this function </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_class_spectra_co_1a213631f494d8361bfa9f4115266e9af7">SpectraCo::~SpectraCo</link>  () noexcept</term>
<listitem>
<para><anchor xml:id="_todo_1_todo000007"/>  </para>
</listitem></varlistentry>
<varlistentry><term>Class <link linkend="_class_the_t_chain">TheTChain</link>  </term>
<listitem>
<para><anchor xml:id="_todo_1_todo000013"/>maybe </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_class_timeshifts_1abc70d7dc0c400a76d84f2c5cc30edf77">Timeshifts::verification</link>  (bool const &amp;verif=true)</term>
<listitem>
<para><anchor xml:id="_todo_1_todo000019"/>caption</para>
</listitem></varlistentry>
</variablelist>
</para>
</section>
