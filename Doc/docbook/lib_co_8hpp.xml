<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_co_8hpp" xml:lang="en-US">
<title>lib/libCo.hpp File Reference</title>
<indexterm><primary>lib/libCo.hpp</primary></indexterm>
<programlisting>#include &quot;print.hpp&quot;
#include &quot;vector_functions.hpp&quot;
#include &quot;randomCo.hpp&quot;
#include &quot;string_functions.hpp&quot;
#include &quot;files_functions.hpp&quot;
#include &quot;errors.hpp&quot;
#include &lt;any&gt;
#include &lt;array&gt;
#include &lt;fstream&gt;
#include &lt;functional&gt;
#include &lt;memory&gt;
#include &lt;mutex&gt;
#include &lt;numeric&gt;
#include &lt;queue&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;stack&gt;
#include &lt;thread&gt;
#include &lt;typeindex&gt;
#include &lt;typeinfo&gt;
#include &lt;unordered_map&gt;
#include &lt;csignal&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;ctime&gt;
</programlisting>Include dependency graph for libCo.hpp:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_bools">Bools</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_cast_impossible">CastImpossible</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structis__container">is_container&lt; T &gt;</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para> <link linkend="_namespace_co_bazar">CoBazar</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_lib_co_8hpp_1acbf3245277a73b810032219100559ae2">_GLIBCXX_USE_CXX11_ABI</link>   0/1</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_lib_co_8hpp_1a54161053f7c12fa7dd7bddf119708644">Ints</link> = std::vector&lt; int &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729">longlong</link> = long long int</para>
</listitem>
            <listitem><para>using <link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> = std::size_t</para>
</listitem>
            <listitem><para>using <link linkend="_lib_co_8hpp_1a632090884b4aa0585e747446a2683963">Strings</link> = std::vector&lt; std::string &gt;</para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>using <link linkend="_lib_co_8hpp_1acbcaeec4b92056a813c1a11e65d5df7d">T_is_number</link> = void</para>
</listitem>
            <listitem><para>using <link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> = unsigned char</para>
</listitem>
            <listitem><para>using <link linkend="_lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d">uint</link> = unsigned int</para>
</listitem>
            <listitem><para>using <link linkend="_lib_co_8hpp_1a92c2ca60527219506deb3325507baee0">ulong</link> = unsigned long int</para>
</listitem>
            <listitem><para>using <link linkend="_lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52">ulonglong</link> = unsigned long long int</para>
</listitem>
            <listitem><para>using <link linkend="_lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a">ushort</link> = unsigned short int</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename T &gt; </para><para>bool <link linkend="_lib_co_8hpp_1a1783566268ead87d4fdd8c61b6af7ede">bool_cast</link> (T const &amp;t)</para>

<para>Casts a any type into an bool. </para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </para><para>char <link linkend="_lib_co_8hpp_1afe72de0c3fabeb8944bfd72ccdbe0d73">char_cast</link> (T const &amp;t)</para>

<para>Casts a number into an char. </para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </para><para>double <link linkend="_lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c">double_cast</link> (T const &amp;t)</para>

<para>Casts a number into an double. </para>
</listitem>
            <listitem><para>template&lt;typename K , typename V &gt; </para><para>bool <link linkend="_lib_co_8hpp_1a664347fcb6b16fdc63cd601ebcfc2c8e">find_key</link> (std::map&lt; K, V &gt; const &amp;map, K const &amp;key)</para>

<para>Returns yes if the key is found in the map. </para>
</listitem>
            <listitem><para>template&lt;typename K , typename V &gt; </para><para>bool <link linkend="_lib_co_8hpp_1a3b8ddb099e22657a31515fbcd8d1bf67">find_key</link> (std::unordered_map&lt; K, V &gt; const &amp;map, K const &amp;key)</para>
</listitem>
            <listitem><para>template&lt;typename K , typename V &gt; </para><para>bool <link linkend="_lib_co_8hpp_1a1a6d9eab2874e1bf6506aeb84d21506d">find_value</link> (std::map&lt; K, V &gt; const &amp;map, V const &amp;value)</para>

<para>Returns yes if the value is found in the map. </para>
</listitem>
            <listitem><para>template&lt;typename K , typename V &gt; </para><para>bool <link linkend="_lib_co_8hpp_1aaff2134bba0ee7c0b4a509699674251a">find_value</link> (std::unordered_map&lt; K, V &gt; const &amp;map, V const &amp;value)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </para><para>float <link linkend="_lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d">float_cast</link> (T const &amp;t)</para>

<para>Casts a number into a float. </para>
</listitem>
            <listitem><para>template&lt;typename K , typename V &gt; </para><para>std::pair&lt; K, V &gt; <link linkend="_lib_co_8hpp_1ad15d46f1c6897c587cd64a3efba23585">get_max_element</link> (std::map&lt; K, V &gt; const &amp;map)</para>

<para>Returns the element with the maximum value. </para>
</listitem>
            <listitem><para>template&lt;typename K , typename V &gt; </para><para>K <link linkend="_lib_co_8hpp_1aecb45c04cc3a1a2386b973014e4fef50">get_max_key</link> (std::map&lt; K, V &gt; const &amp;map)</para>

<para>Returns the maximum key stored in the map. </para>
</listitem>
            <listitem><para>template&lt;typename K , typename V &gt; </para><para>V <link linkend="_lib_co_8hpp_1ad4ab9f9247e670a4d9db36ca683e6270">get_max_value</link> (std::map&lt; K, V &gt; const &amp;map)</para>

<para>Returns the maximum value stored in the map. </para>
</listitem>
            <listitem><para>template&lt;typename K , typename V &gt; </para><para>std::pair&lt; K, V &gt; <link linkend="_lib_co_8hpp_1a6f43d67b9c0e4bb6bf5a58906ae0d812">get_min</link> (std::map&lt; K, V &gt; const &amp;map)</para>
</listitem>
            <listitem><para>template&lt;typename K , typename V &gt; </para><para>K <link linkend="_lib_co_8hpp_1aeec208b7dcadd19e1317814c1de441d9">get_min_key</link> (std::map&lt; K, V &gt; const &amp;map)</para>
</listitem>
            <listitem><para>template&lt;typename K , typename V &gt; </para><para>V <link linkend="_lib_co_8hpp_1ad1d07d5a6e5c5182a7dc644148cd6fcd">get_min_value</link> (std::map&lt; K, V &gt; const &amp;map)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </para><para>int <link linkend="_lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a">int_cast</link> (T const &amp;t)</para>

<para>Casts a number into an int. </para>
</listitem>
            <listitem><para>bool <link linkend="_lib_co_8hpp_1a55120ef582763ab1404545ce4e2845b9">is_int</link> (double const &amp;x)</para>

<para>Check if the given double holds an integer. </para>
</listitem>
            <listitem><para>template&lt;typename K , typename V &gt; </para><para>std::vector&lt; K &gt; <link linkend="_lib_co_8hpp_1a0437363026eeb97df583c38d88cf68b1">list_of_keys</link> (std::map&lt; K, V &gt; const &amp;map)</para>

<para>Returns the list of keys in a map. </para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </para><para>long <link linkend="_lib_co_8hpp_1a695ead22582e1da41880ee67c2c61d07">long_cast</link> (T const &amp;t)</para>

<para>Casts a number into an long. </para>
</listitem>
            <listitem><para>void <link linkend="_namespace_co_bazar_1a5a85829d9980d46c04dfe66c15ca395a">CoBazar::long_progress_bar</link> (float const &amp;progress_procent)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </para><para><link linkend="_lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729">longlong</link> <link linkend="_lib_co_8hpp_1a86b2b990fa7ee3c102db83cdecc9d129">longlong_cast</link> (T const &amp;t)</para>

<para>Casts a number into long long (longlong) </para>
</listitem>
            <listitem><para>template&lt;class... ARGS&gt; </para><para>double <link linkend="_namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e">CoBazar::mean</link> (ARGS... args)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_lib_co_8hpp_1aea023a62fe74d109a9fe9da1040708fc">operator&lt;&lt;</link> (std::ostream &amp;cout, <link linkend="_class_bools">Bools</link> const &amp;bools)</para>
</listitem>
            <listitem><para>template&lt;class E , size_t size&gt; </para><para>std::ostream &amp; <link linkend="_lib_co_8hpp_1a021f6cc0c03903546e6a63851944f2e8">operator&lt;&lt;</link> (std::ostream &amp;cout, std::array&lt; E, size &gt; const &amp;a)</para>
</listitem>
            <listitem><para>template&lt;class K , class V &gt; </para><para>std::ostream &amp; <link linkend="_lib_co_8hpp_1a1fc2e1be374c41706525b8d606242646">operator&lt;&lt;</link> (std::ostream &amp;cout, std::map&lt; K, V &gt; const &amp;m)</para>
</listitem>
            <listitem><para>template&lt;class F , class S &gt; </para><para>std::ostream &amp; <link linkend="_lib_co_8hpp_1a305d037b6a2823d9d8d935b1cd5dd2c0">operator&lt;&lt;</link> (std::ostream &amp;cout, std::pair&lt; F, S &gt; const &amp;p)</para>
</listitem>
            <listitem><para>template&lt;class K , class V &gt; </para><para>std::ostream &amp; <link linkend="_lib_co_8hpp_1ac877d4b5e0dd4b6c1cba14fea177d092">operator&lt;&lt;</link> (std::ostream &amp;cout, std::unordered_map&lt; K, V &gt; const &amp;m)</para>
</listitem>
            <listitem><para>template&lt;class E &gt; </para><para>std::ostream &amp; <link linkend="_lib_co_8hpp_1a03b9abfe3f12543c365e9a25848ba566">operator&lt;&lt;</link> (std::ostream &amp;cout, std::vector&lt; E &gt; const &amp;v)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_lib_co_8hpp_1ae7a3135c43a9bae996dfeb1775184a45">operator&lt;&lt;</link> (std::ostream &amp;cout, <link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> const &amp;uc)</para>
</listitem>
            <listitem><para>auto <link linkend="_lib_co_8hpp_1a6cca31a5d1658456b486e6fa135c690b">pauseCo</link> ()</para>
</listitem>
            <listitem><para>auto <link linkend="_lib_co_8hpp_1ab102b1ac90e2714661a2e757b7f6692e">pauseCo</link> (std::string const &amp;message)</para>
</listitem>
            <listitem><para>void <link linkend="_lib_co_8hpp_1aad6095f67a0bcb2c5dbaf1484e98d326">pauseDebug</link> (std::string const &amp;message=&quot;&quot;)</para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>T <link linkend="_lib_co_8hpp_1acffb7404540d3e0a654fd7929081bb70">positive_modulo</link> (T const &amp;dividend, T const &amp;divisor)</para>
</listitem>
            <listitem><para>void <link linkend="_namespace_co_bazar_1a24cffd290231166ac66b8c2fc0f9ee65">CoBazar::progress_bar</link> (float const &amp;progress_procent, int width=50)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </para><para>short <link linkend="_lib_co_8hpp_1af4d9dac78db5e48b5e2c5253754aaa8c">short_cast</link> (T const &amp;t)</para>

<para>Casts a number into an short. </para>
</listitem>
            <listitem><para>void <link linkend="_namespace_co_bazar_1a10289b78525ae5d515e9d00181ecee64">CoBazar::short_progress_bar</link> (float const &amp;progress_procent)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </para><para><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_lib_co_8hpp_1a237f678c718382f74a68364c0fc1779a">size_cast</link> (T const &amp;t)</para>

<para>Casts a number into std::size_t. </para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>T <link linkend="_lib_co_8hpp_1a860090f450f9d024cd3e5cd721101418">string_to</link> (std::string const &amp;string)</para>
</listitem>
            <listitem><para>template&lt;class T , class... ARGS&gt; </para><para>T <link linkend="_namespace_co_bazar_1a1e08093363d904d8875d5907b48464f0">CoBazar::sum</link> (T i, ARGS... args)</para>
</listitem>
            <listitem><para>void <link linkend="_lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d">throw_error</link> (std::string const &amp;message)</para>
</listitem>
            <listitem><para>std::string <link linkend="_lib_co_8hpp_1adaf1adad3b86299b92ed406d55b1fa77">time_string</link> ()</para>

<para>Returns a string in the format mm_hh_dd_mm_yy. </para>
</listitem>
            <listitem><para>std::string <link linkend="_lib_co_8hpp_1abd9cea94f34b8212279bfabe71df818b">time_string_inverse</link> ()</para>

<para>Returns a string in the format yy_mm_dd_hh_mm. </para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </para><para><link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> <link linkend="_lib_co_8hpp_1ade77d1f37b1311b3f80ce429a33fd226">uchar_cast</link> (T const &amp;t)</para>

<para>Casts a number into unsigned char (uchar) </para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </para><para><link linkend="_lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d">uint</link> <link linkend="_lib_co_8hpp_1ad4f41fb682fba59b9adc6142282db5a2">uint_cast</link> (T const &amp;t)</para>

<para>Casts a number into unsigned int (uint) </para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </para><para><link linkend="_lib_co_8hpp_1a92c2ca60527219506deb3325507baee0">ulong</link> <link linkend="_lib_co_8hpp_1ac939b8397e82173edff13b3d00dc9d09">ulong_cast</link> (T const &amp;t)</para>

<para>Casts a number into unsigned long (ulong) </para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </para><para><link linkend="_lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52">ulonglong</link> <link linkend="_lib_co_8hpp_1a6064e403b0588c46cce0f1cb82471acf">ulonglong_cast</link> (T const &amp;t)</para>

<para>Casts a number into unsigned long long (ulonglong) </para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </para><para><link linkend="_lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a">ushort</link> <link linkend="_lib_co_8hpp_1ab2f8f9033c2742c4f5ac6d3cce6caf9a">ushort_cast</link> (T const &amp;t)</para>

<para>Casts a number into unsigned short (ushort) </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>std::map&lt; std::string, std::string &gt; <link linkend="_lib_co_8hpp_1af522b6efd63a7f871a8307755b1297bf">error_message</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_lib_co_8hpp_1acbf3245277a73b810032219100559ae2"/>    <section>
    <title>_GLIBCXX_USE_CXX11_ABI</title>
<indexterm><primary>_GLIBCXX_USE_CXX11_ABI</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>_GLIBCXX_USE_CXX11_ABI</secondary></indexterm>
<para><computeroutput>#define _GLIBCXX_USE_CXX11_ABI   0/1</computeroutput></para></section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_lib_co_8hpp_1a54161053f7c12fa7dd7bddf119708644"/>    <section>
    <title>Ints</title>
<indexterm><primary>Ints</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>Ints</secondary></indexterm>
<para><computeroutput>using <link linkend="_lib_co_8hpp_1a54161053f7c12fa7dd7bddf119708644">Ints</link> =  std::vector&lt;int&gt;</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729"/>    <section>
    <title>longlong</title>
<indexterm><primary>longlong</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>longlong</secondary></indexterm>
<para><computeroutput>using <link linkend="_lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729">longlong</link> =  long long int</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638"/>    <section>
    <title>size_t</title>
<indexterm><primary>size_t</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>size_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> =  std::size_t</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1a632090884b4aa0585e747446a2683963"/>    <section>
    <title>Strings</title>
<indexterm><primary>Strings</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>Strings</secondary></indexterm>
<para><computeroutput>using <link linkend="_lib_co_8hpp_1a632090884b4aa0585e747446a2683963">Strings</link> =  std::vector&lt;std::string&gt;</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1acbcaeec4b92056a813c1a11e65d5df7d"/>    <section>
    <title>T_is_number</title>
<indexterm><primary>T_is_number</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>T_is_number</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>using <link linkend="_lib_co_8hpp_1acbcaeec4b92056a813c1a11e65d5df7d">T_is_number</link> =  void</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21"/>    <section>
    <title>uchar</title>
<indexterm><primary>uchar</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>uchar</secondary></indexterm>
<para><computeroutput>using <link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> =  unsigned char</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d"/>    <section>
    <title>uint</title>
<indexterm><primary>uint</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>uint</secondary></indexterm>
<para><computeroutput>using <link linkend="_lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d">uint</link> =  unsigned int</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1a92c2ca60527219506deb3325507baee0"/>    <section>
    <title>ulong</title>
<indexterm><primary>ulong</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>ulong</secondary></indexterm>
<para><computeroutput>using <link linkend="_lib_co_8hpp_1a92c2ca60527219506deb3325507baee0">ulong</link> =  unsigned long int</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52"/>    <section>
    <title>ulonglong</title>
<indexterm><primary>ulonglong</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>ulonglong</secondary></indexterm>
<para><computeroutput>using <link linkend="_lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52">ulonglong</link> =  unsigned long long int</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a"/>    <section>
    <title>ushort</title>
<indexterm><primary>ushort</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>ushort</secondary></indexterm>
<para><computeroutput>using <link linkend="_lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a">ushort</link> =  unsigned short int</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_lib_co_8hpp_1a1783566268ead87d4fdd8c61b6af7ede"/>    <section>
    <title>bool_cast()</title>
<indexterm><primary>bool_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>bool_cast</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool bool_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a any type into an bool. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_a1783566268ead87d4fdd8c61b6af7ede_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1afe72de0c3fabeb8944bfd72ccdbe0d73"/>    <section>
    <title>char_cast()</title>
<indexterm><primary>char_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>char_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput>char char_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a number into an char. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_afe72de0c3fabeb8944bfd72ccdbe0d73_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c"/>    <section>
    <title>double_cast()</title>
<indexterm><primary>double_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>double_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput>double double_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a number into an double. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_a2052317e56aa118e7ffcdb2e398f551c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1a664347fcb6b16fdc63cd601ebcfc2c8e"/>    <section>
    <title>find_key()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>find_key</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>find_key</secondary></indexterm>
<computeroutput>template&lt;typename K , typename V &gt; </computeroutput><para><computeroutput>bool find_key (std::map&lt; K, V &gt; const &amp; map, K const &amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns yes if the key is found in the map. </para>
</para>

<para>This method is only looking in the keys, not in the values </para>
    </section><anchor xml:id="_lib_co_8hpp_1a3b8ddb099e22657a31515fbcd8d1bf67"/>    <section>
    <title>find_key()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>find_key</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>find_key</secondary></indexterm>
<computeroutput>template&lt;typename K , typename V &gt; </computeroutput><para><computeroutput>bool find_key (std::unordered_map&lt; K, V &gt; const &amp; map, K const &amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_a3b8ddb099e22657a31515fbcd8d1bf67_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1a1a6d9eab2874e1bf6506aeb84d21506d"/>    <section>
    <title>find_value()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>find_value</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>find_value</secondary></indexterm>
<computeroutput>template&lt;typename K , typename V &gt; </computeroutput><para><computeroutput>bool find_value (std::map&lt; K, V &gt; const &amp; map, V const &amp; value)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns yes if the value is found in the map. </para>
</para>

<para>This method is only looking in the values, not in the keys </para>
    </section><anchor xml:id="_lib_co_8hpp_1aaff2134bba0ee7c0b4a509699674251a"/>    <section>
    <title>find_value()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>find_value</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>find_value</secondary></indexterm>
<computeroutput>template&lt;typename K , typename V &gt; </computeroutput><para><computeroutput>bool find_value (std::unordered_map&lt; K, V &gt; const &amp; map, V const &amp; value)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d"/>    <section>
    <title>float_cast()</title>
<indexterm><primary>float_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>float_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput>float float_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a number into a float. </para>
</para>
<simplesect><title>Examples</title><link linkend="__2media_2sf__one_drive_2_c_n_r_s_2_nuball2_2lib_2_classes_2_co_progress_bar_8hpp-example">/media/sf_OneDrive/CNRS/Nuball2/lib/Classes/CoProgressBar.hpp</link>.</simplesect>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_a075a3c229a21ca4d0e91f72e99a6bf6d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1ad15d46f1c6897c587cd64a3efba23585"/>    <section>
    <title>get_max_element()</title>
<indexterm><primary>get_max_element</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>get_max_element</secondary></indexterm>
<computeroutput>template&lt;typename K , typename V &gt; </computeroutput><para><computeroutput>std::pair&lt;K,V&gt; get_max_element (std::map&lt; K, V &gt; const &amp; map)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns the element with the maximum value. </para>
</para>

<para>This method is only comparing values, not keys </para>
    </section><anchor xml:id="_lib_co_8hpp_1aecb45c04cc3a1a2386b973014e4fef50"/>    <section>
    <title>get_max_key()</title>
<indexterm><primary>get_max_key</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>get_max_key</secondary></indexterm>
<computeroutput>template&lt;typename K , typename V &gt; </computeroutput><para><computeroutput>K get_max_key (std::map&lt; K, V &gt; const &amp; map)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns the maximum key stored in the map. </para>
</para>

<para>This method is only looking for values, not keys </para>
    </section><anchor xml:id="_lib_co_8hpp_1ad4ab9f9247e670a4d9db36ca683e6270"/>    <section>
    <title>get_max_value()</title>
<indexterm><primary>get_max_value</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>get_max_value</secondary></indexterm>
<computeroutput>template&lt;typename K , typename V &gt; </computeroutput><para><computeroutput>V get_max_value (std::map&lt; K, V &gt; const &amp; map)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns the maximum value stored in the map. </para>
</para>

<para>This method is only lookinf for values, not keys </para>
    </section><anchor xml:id="_lib_co_8hpp_1a6f43d67b9c0e4bb6bf5a58906ae0d812"/>    <section>
    <title>get_min()</title>
<indexterm><primary>get_min</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>get_min</secondary></indexterm>
<computeroutput>template&lt;typename K , typename V &gt; </computeroutput><para><computeroutput>std::pair&lt;K,V&gt; get_min (std::map&lt; K, V &gt; const &amp; map)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1aeec208b7dcadd19e1317814c1de441d9"/>    <section>
    <title>get_min_key()</title>
<indexterm><primary>get_min_key</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>get_min_key</secondary></indexterm>
<computeroutput>template&lt;typename K , typename V &gt; </computeroutput><para><computeroutput>K get_min_key (std::map&lt; K, V &gt; const &amp; map)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1ad1d07d5a6e5c5182a7dc644148cd6fcd"/>    <section>
    <title>get_min_value()</title>
<indexterm><primary>get_min_value</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>get_min_value</secondary></indexterm>
<computeroutput>template&lt;typename K , typename V &gt; </computeroutput><para><computeroutput>V get_min_value (std::map&lt; K, V &gt; const &amp; map)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a"/>    <section>
    <title>int_cast()</title>
<indexterm><primary>int_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>int_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput>int int_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a number into an int. </para>
</para>
<simplesect><title>Examples</title><link linkend="__2media_2sf__one_drive_2_c_n_r_s_2_nuball2_2lib_2_classes_2_co_progress_bar_8hpp-example">/media/sf_OneDrive/CNRS/Nuball2/lib/Classes/CoProgressBar.hpp</link>.</simplesect>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_a48e80fbfd11f9fb219b92ba1c29c1b2a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1a55120ef582763ab1404545ce4e2845b9"/>    <section>
    <title>is_int()</title>
<indexterm><primary>is_int</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>is_int</secondary></indexterm>
<para><computeroutput>bool is_int (double const &amp; x)</computeroutput></para><para>

<para>Check if the given double holds an integer. </para>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1a0437363026eeb97df583c38d88cf68b1"/>    <section>
    <title>list_of_keys()</title>
<indexterm><primary>list_of_keys</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>list_of_keys</secondary></indexterm>
<computeroutput>template&lt;typename K , typename V &gt; </computeroutput><para><computeroutput>std::vector&lt;K&gt; list_of_keys (std::map&lt; K, V &gt; const &amp; map)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns the list of keys in a map. </para>
</para>

<para>This method is only looking in the keys, not the values </para>
    </section><anchor xml:id="_lib_co_8hpp_1a695ead22582e1da41880ee67c2c61d07"/>    <section>
    <title>long_cast()</title>
<indexterm><primary>long_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>long_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput>long long_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a number into an long. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_a695ead22582e1da41880ee67c2c61d07_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1a86b2b990fa7ee3c102db83cdecc9d129"/>    <section>
    <title>longlong_cast()</title>
<indexterm><primary>longlong_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>longlong_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="_lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729">longlong</link> longlong_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a number into long long (longlong) </para>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1aea023a62fe74d109a9fe9da1040708fc"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; cout, <link linkend="_class_bools">Bools</link> const &amp; bools)</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1a021f6cc0c03903546e6a63851944f2e8"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;class E , size_t size&gt; </computeroutput><para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; cout, std::array&lt; E, size &gt; const &amp; a)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_a021f6cc0c03903546e6a63851944f2e8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1a1fc2e1be374c41706525b8d606242646"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;class K , class V &gt; </computeroutput><para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; cout, std::map&lt; K, V &gt; const &amp; m)</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1a305d037b6a2823d9d8d935b1cd5dd2c0"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;class F , class S &gt; </computeroutput><para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; cout, std::pair&lt; F, S &gt; const &amp; p)</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1ac877d4b5e0dd4b6c1cba14fea177d092"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;class K , class V &gt; </computeroutput><para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; cout, std::unordered_map&lt; K, V &gt; const &amp; m)</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1a03b9abfe3f12543c365e9a25848ba566"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;class E &gt; </computeroutput><para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; cout, std::vector&lt; E &gt; const &amp; v)</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1ae7a3135c43a9bae996dfeb1775184a45"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; cout, <link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> const &amp; uc)</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1a6cca31a5d1658456b486e6fa135c690b"/>    <section>
    <title>pauseCo()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>pauseCo</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>pauseCo</secondary></indexterm>
<para><computeroutput>auto pauseCo ( )</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_a6cca31a5d1658456b486e6fa135c690b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1ab102b1ac90e2714661a2e757b7f6692e"/>    <section>
    <title>pauseCo()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>pauseCo</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>pauseCo</secondary></indexterm>
<para><computeroutput>auto pauseCo (std::string const &amp; message)</computeroutput></para>    </section><anchor xml:id="_lib_co_8hpp_1aad6095f67a0bcb2c5dbaf1484e98d326"/>    <section>
    <title>pauseDebug()</title>
<indexterm><primary>pauseDebug</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>pauseDebug</secondary></indexterm>
<para><computeroutput>void pauseDebug (std::string const &amp; message = <computeroutput>&quot;&quot;</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_aad6095f67a0bcb2c5dbaf1484e98d326_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1acffb7404540d3e0a654fd7929081bb70"/>    <section>
    <title>positive_modulo()</title>
<indexterm><primary>positive_modulo</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>positive_modulo</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>T positive_modulo (T const &amp; dividend, T const &amp; divisor)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_acffb7404540d3e0a654fd7929081bb70_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1af4d9dac78db5e48b5e2c5253754aaa8c"/>    <section>
    <title>short_cast()</title>
<indexterm><primary>short_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>short_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput>short short_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a number into an short. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_af4d9dac78db5e48b5e2c5253754aaa8c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1a237f678c718382f74a68364c0fc1779a"/>    <section>
    <title>size_cast()</title>
<indexterm><primary>size_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>size_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> size_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a number into std::size_t. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_a237f678c718382f74a68364c0fc1779a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1a860090f450f9d024cd3e5cd721101418"/>    <section>
    <title>string_to()</title>
<indexterm><primary>string_to</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>string_to</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>T string_to (std::string const &amp; string)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_a860090f450f9d024cd3e5cd721101418_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d"/>    <section>
    <title>throw_error()</title>
<indexterm><primary>throw_error</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>throw_error</secondary></indexterm>
<para><computeroutput>void throw_error (std::string const &amp; message)</computeroutput></para><simplesect><title>Examples</title><link linkend="__2media_2sf__one_drive_2_c_n_r_s_2_nuball2_2lib_2_classes_2_co_progress_bar_8hpp-example">/media/sf_OneDrive/CNRS/Nuball2/lib/Classes/CoProgressBar.hpp</link>.</simplesect>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_a6df2dcd4b1f61c75dc292942bc5ca74d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_a6df2dcd4b1f61c75dc292942bc5ca74d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1adaf1adad3b86299b92ed406d55b1fa77"/>    <section>
    <title>time_string()</title>
<indexterm><primary>time_string</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>time_string</secondary></indexterm>
<para><computeroutput>std::string time_string ( )</computeroutput></para><para>

<para>Returns a string in the format mm_hh_dd_mm_yy. </para>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1abd9cea94f34b8212279bfabe71df818b"/>    <section>
    <title>time_string_inverse()</title>
<indexterm><primary>time_string_inverse</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>time_string_inverse</secondary></indexterm>
<para><computeroutput>std::string time_string_inverse ( )</computeroutput></para><para>

<para>Returns a string in the format yy_mm_dd_hh_mm. </para>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1ade77d1f37b1311b3f80ce429a33fd226"/>    <section>
    <title>uchar_cast()</title>
<indexterm><primary>uchar_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>uchar_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> uchar_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a number into unsigned char (uchar) </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_ade77d1f37b1311b3f80ce429a33fd226_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1ad4f41fb682fba59b9adc6142282db5a2"/>    <section>
    <title>uint_cast()</title>
<indexterm><primary>uint_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>uint_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="_lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d">uint</link> uint_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a number into unsigned int (uint) </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_ad4f41fb682fba59b9adc6142282db5a2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1ac939b8397e82173edff13b3d00dc9d09"/>    <section>
    <title>ulong_cast()</title>
<indexterm><primary>ulong_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>ulong_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="_lib_co_8hpp_1a92c2ca60527219506deb3325507baee0">ulong</link> ulong_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a number into unsigned long (ulong) </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_ac939b8397e82173edff13b3d00dc9d09_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1a6064e403b0588c46cce0f1cb82471acf"/>    <section>
    <title>ulonglong_cast()</title>
<indexterm><primary>ulonglong_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>ulonglong_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="_lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52">ulonglong</link> ulonglong_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a number into unsigned long long (ulonglong) </para>
</para>
    </section><anchor xml:id="_lib_co_8hpp_1ab2f8f9033c2742c4f5ac6d3cce6caf9a"/>    <section>
    <title>ushort_cast()</title>
<indexterm><primary>ushort_cast</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>ushort_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="_lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a">ushort</link> ushort_cast (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Casts a number into unsigned short (ushort) </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_co_8hpp_ab2f8f9033c2742c4f5ac6d3cce6caf9a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_lib_co_8hpp_1af522b6efd63a7f871a8307755b1297bf"/>    <section>
    <title>error_message</title>
<indexterm><primary>error_message</primary><secondary>libCo.hpp</secondary></indexterm>
<indexterm><primary>libCo.hpp</primary><secondary>error_message</secondary></indexterm>
<para><computeroutput>std::map&lt;std::string, std::string&gt; error_message</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting>=&#32;
{
&#32;&#32;{<emphasis role="stringliteral">&quot;DEV&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ASK&#32;DEV&#32;or&#32;do&#32;it&#32;yourself,&#32;sry&quot;</emphasis>}
}
</programlisting></section>
</section>
</section>
