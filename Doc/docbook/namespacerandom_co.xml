<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespacerandom_co" xml:lang="en-US">
<title>randomCo Namespace Reference</title>
<indexterm><primary>randomCo</primary></indexterm>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>double <link linkend="_namespacerandom_co_1ab5d8d1aa5c84a6ca5d44c2e60cfc8c8d">gaussian</link> (double mean, double stddev)</para>
</listitem>
            <listitem><para>void <link linkend="_namespacerandom_co_1a09c0c41c36066ccce76265856856dff4">setSeed</link> (int const &amp;_seed)</para>
</listitem>
            <listitem><para>double <link linkend="_namespacerandom_co_1af7496cee21570d25ebf9babc7cf1bcae">uniform</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_namespacerandom_co_1a09df1fe62625fa364e82b64227bb2807">uniform</link> (const double &amp;min, const double &amp;max)</para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>double <link linkend="_namespacerandom_co_1a48bc9803dd8f0a7515755b9b84ed3330">uniform_t</link> ()</para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>double <link linkend="_namespacerandom_co_1ae3ed73e012391122405d66b75b1d233c">uniform_t</link> (T const &amp;min, T const &amp;max)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>static thread_local std::mt19937 <link linkend="_namespacerandom_co_1a1cbd16b1a0fb6d2e1649c253da6ecd00">generator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespacerandom_co_1ab5d8d1aa5c84a6ca5d44c2e60cfc8c8d"/>    <section>
    <title>gaussian()</title>
<indexterm><primary>gaussian</primary><secondary>randomCo</secondary></indexterm>
<indexterm><primary>randomCo</primary><secondary>gaussian</secondary></indexterm>
<para><computeroutput>double randomCo::gaussian (double mean, double stddev)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacerandom_co_ab5d8d1aa5c84a6ca5d44c2e60cfc8c8d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_namespacerandom_co_1a09c0c41c36066ccce76265856856dff4"/>    <section>
    <title>setSeed()</title>
<indexterm><primary>setSeed</primary><secondary>randomCo</secondary></indexterm>
<indexterm><primary>randomCo</primary><secondary>setSeed</secondary></indexterm>
<para><computeroutput>void randomCo::setSeed (int const &amp; _seed)</computeroutput></para>    </section><anchor xml:id="_namespacerandom_co_1af7496cee21570d25ebf9babc7cf1bcae"/>    <section>
    <title>uniform()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>uniform</primary><secondary>randomCo</secondary></indexterm>
<indexterm><primary>randomCo</primary><secondary>uniform</secondary></indexterm>
<para><computeroutput>double randomCo::uniform ( )</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacerandom_co_af7496cee21570d25ebf9babc7cf1bcae_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_namespacerandom_co_1a09df1fe62625fa364e82b64227bb2807"/>    <section>
    <title>uniform()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>uniform</primary><secondary>randomCo</secondary></indexterm>
<indexterm><primary>randomCo</primary><secondary>uniform</secondary></indexterm>
<para><computeroutput>double randomCo::uniform (const double &amp; min, const double &amp; max)</computeroutput></para>    </section><anchor xml:id="_namespacerandom_co_1a48bc9803dd8f0a7515755b9b84ed3330"/>    <section>
    <title>uniform_t()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>uniform_t</primary><secondary>randomCo</secondary></indexterm>
<indexterm><primary>randomCo</primary><secondary>uniform_t</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>double randomCo::uniform_t ( )</computeroutput></para>    </section><anchor xml:id="_namespacerandom_co_1ae3ed73e012391122405d66b75b1d233c"/>    <section>
    <title>uniform_t()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>uniform_t</primary><secondary>randomCo</secondary></indexterm>
<indexterm><primary>randomCo</primary><secondary>uniform_t</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>double randomCo::uniform_t (T const &amp; min, T const &amp; max)</computeroutput></para></section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_namespacerandom_co_1a1cbd16b1a0fb6d2e1649c253da6ecd00"/>    <section>
    <title>generator</title>
<indexterm><primary>generator</primary><secondary>randomCo</secondary></indexterm>
<indexterm><primary>randomCo</primary><secondary>generator</secondary></indexterm>
<para><computeroutput>thread_local std::mt19937 randomCo::generator<computeroutput>[static]</computeroutput></computeroutput></para></section>
</section>
</section>
