<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_timeshifts" xml:lang="en-US">
<title>Timeshifts Class Reference</title>
<indexterm><primary>Timeshifts</primary></indexterm>
<para>
<computeroutput>#include &lt;Timeshifts.hpp&gt;</computeroutput>
</para>
Collaboration diagram for Timeshifts:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_timeshifts_1a3d3ab1b3498ca45832d8a8735f16e188">calculate</link> (std::string const &amp;folder, int const &amp;nb_files=-1)</para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a648f30a01a30b44ef675666ddae79f80">checkForPreprompt</link> (bool const &amp;check=true)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1a715283a5be42b86ca70b4e468ccb2931">CheckParameters</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1aea8a9a1e849fca3bf3712385bd2155c3">dT_with_raising_edge</link> (<link linkend="__detectors_8hpp_1a7ea6a1daded60b9200989100a41bbc3a">dType</link> const &amp;type)</para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a2b3ce3e274b28b65f01e336efe99670e">dT_with_RF</link> (<link linkend="__detectors_8hpp_1a7ea6a1daded60b9200989100a41bbc3a">dType</link> const &amp;type)</para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link> &gt; const  &amp; <link linkend="_class_timeshifts_1a5161a4c343623e92b4e26522ad7ee16a">get</link> () const</para>
</listitem>
            <listitem><para><link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link> const  &amp; <link linkend="_class_timeshifts_1a2b9a1cbb93f280215432c4d323d1114d">get</link> (int const &amp;i) const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1a28163efe8d487669cf50d5f6e1060d71">load</link> (std::string const &amp;filename)</para>

<para>Use this method to load timeshifts from a .dT file. </para>
</listitem>
            <listitem><para><link linkend="_class_timeshifts_1a60689326cebd96ae4996522530ffefab">operator bool</link> () const &amp;</para>
</listitem>
            <listitem><para><link linkend="_class_timeshifts">Timeshifts</link> &amp; <link linkend="_class_timeshifts_1a38aac2aef62c8999bb5da97e397ea64c">operator=</link> (<link linkend="_class_timeshifts">Timeshifts</link> const &amp;timeshifts)</para>
</listitem>
            <listitem><para><link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link> const  &amp; <link linkend="_class_timeshifts_1a942984c1af943a864baf8744babb2d15">operator[]</link> (int const &amp;i) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a0ab2718e733f94acda46780191295e3b">rebin</link> (std::string const &amp;detector, <link linkend="__hit_8hpp_1ad7cd28c849adeb8fec74d20155b0113d">Time_ns</link> const &amp;bin_size_ns)</para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a82ddafa1c3f1d2c21c33749e70fab876">setEminADC</link> (<link linkend="__hit_8hpp_1a04b75a9e083a1c44419fdb7c3f87c361">ADC</link> const &amp;EminADC)</para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1afa21cadd8eac07728df7f51d0dbaa908">setMaxHits</link> (<link linkend="_lib_co_8hpp_1a92c2ca60527219506deb3325507baee0">ulong</link> const &amp;max_hits=-1)</para>

<para>Set maximum hits to be read in a file. </para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a6206d2b698c88e80bc42bdf4b51fce14">setMult</link> (int const &amp;min_mult, int const &amp;max_mult)</para>

<para>Set the multiplicity gate for the events used for coincidence timeshift calculation. </para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1ab877131bc1bd7394f55c3d46729ac9e6">setOutData</link> (std::string const &amp;outdata)</para>

<para>Use setName instead. Set output file name of the timeshifts data. </para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a26367484f20648d7c3f5b3bbe5679ca8">setOutDir</link> (std::string const &amp;outDir)</para>

<para>Set the output directory (full path);. </para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a082a54cde1bb45feca487f15ab4a14c7">setOutName</link> (std::string const &amp;outdata)</para>

<para>Set output file name of the timeshifts data and root file. </para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1aa9f0f8cc1d96a5408f233449767ef0f6">setOutRoot</link> (std::string const &amp;outroot)</para>

<para>Use setName instead. Set output root file containing the raw and corrected time spectra. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1acca1130b271301c5477d4b4a23ae4e5b">setParameters</link> (std::string const &amp;parameter)</para>

<para>Use this method to setup the parameters from a string in order to calculate the timeshifts. </para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1ac2c3e8e47598e28d49932a3720a6fd58">setRFOffset</link> (<link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link> const &amp;offset_ps)</para>

<para>Set RF offset (synonymous to <link linkend="_class_timeshifts_1af6cb9cffa9322eabb7fe712c6e6ae798">Timeshifts::setRFShift</link>) </para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a0faeccde5623d6808435414d020d1385">setRFOffset_ns</link> (<link linkend="__hit_8hpp_1ad7cd28c849adeb8fec74d20155b0113d">Time_ns</link> const &amp;offset_ns)</para>

<para>Set RF offset (synonymous to <link linkend="_class_timeshifts_1af6cb9cffa9322eabb7fe712c6e6ae798">Timeshifts::setRFShift</link>) </para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1af6cb9cffa9322eabb7fe712c6e6ae798">setRFShift</link> (<link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link> const &amp;shift)</para>

<para>Set RF shift (synonymous to <link linkend="_class_timeshifts_1ac2c3e8e47598e28d49932a3720a6fd58">Timeshifts::setRFOffset</link>) </para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1aa7cb3acf23e80927fa85be636f55a99d">setTimeReference</link> (<link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> const &amp;timeRef_label)</para>

<para>Set the time reference label. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1aa9f8bdcbeef03f8be872602e6c717d4d">setTimeReference</link> (std::string const &amp;timeRef_name)</para>

<para>Set the time reference. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1af9da5337ea83092b9a6bb56cdb83f4cb">setTimeWindow_ns</link> (std::string const &amp;timewindow_ns_str)</para>

<para>Set the time window in ns. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1a304c1076d703a78153cfe72d61b28425">setTimeWindow_ns</link> (<link linkend="__hit_8hpp_1ad7cd28c849adeb8fec74d20155b0113d">Time_ns</link> const &amp;timewindow_ns)</para>

<para>Setup the time window for the coincidence in ns. </para>
</listitem>
            <listitem><para>TH1F * <link linkend="_class_timeshifts_1a89dbca371bce4601ee60122f544faf95">shiftTimeSpectra</link> (TH1F *histo, <link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> const &amp;label, std::string const &amp;unit=&quot;ps&quot;)</para>
</listitem>
            <listitem><para><link linkend="_class_timeshifts_1ad85f4cabf723d28843393cda47abc2b3">Timeshifts</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_timeshifts_1a1b9c3b0d8ef43a69bd6e7ce1bd4de5b4">Timeshifts</link> (const char *filename)</para>

<para>Call the <link linkend="_class_timeshifts_1a28163efe8d487669cf50d5f6e1060d71">Timeshifts::load()</link> method to load the timeshifts from a .dT file. </para>
</listitem>
            <listitem><para><link linkend="_class_timeshifts_1ae47e90a384a5dd891bdc5eed10450971">Timeshifts</link> (std::string const &amp;filename)</para>

<para>Call the <link linkend="_class_timeshifts_1a28163efe8d487669cf50d5f6e1060d71">Timeshifts::load()</link> method to load the timeshifts from a .dT file. </para>
</listitem>
            <listitem><para><link linkend="_class_timeshifts_1a8b7481d4a5405315c9988812a01428ef">Timeshifts</link> (std::string const &amp;path, std::string const &amp;name)</para>

<para>For faster to root conversion only : <link linkend="_class_timeshifts_1a28163efe8d487669cf50d5f6e1060d71">Timeshifts::load()</link> loads the timeshifts from a .dT file. </para>
</listitem>
            <listitem><para><link linkend="_class_timeshifts_1a4c01a876efaee62fa348581470509736">Timeshifts</link> (<link linkend="_class_timeshifts">Timeshifts</link> const &amp;timeshifts)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a1b6e129787ae7641ecbcb990f6e86bb9">verbose</link> (bool const &amp;_verbose=true)</para>

<para>Set verbosity level. </para>
</listitem>
            <listitem><para>bool const  &amp; <link linkend="_class_timeshifts_1abc70d7dc0c400a76d84f2c5cc30edf77">verification</link> (bool const &amp;verif=true)</para>

<para>Used to create. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1a6520eab7a8824f41a2be8517d83fc835">verify</link> (std::string const &amp;folder, int const &amp;nb_files=-1)</para>

<para>To verify an already calculated timeshift .dT data file. </para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a79f5376cf7071865b264989ef46d886f">write</link> (std::string const &amp;name)</para>

<para>To write down the histograms and the data. </para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1ad19fdc64b6f8dd54e94665a7170a49a7">writeData</link> (std::string const &amp;name)</para>

<para>To write down the data. </para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a579c8583bd37c3988ffb5cb6df7849f7">writeRoot</link> (std::string const &amp;name)</para>

<para>To write down the histograms. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; bool &gt; <link linkend="_class_timeshifts_1ab098d455164964ba60b9f5c555de74e4">m_edge_preferred_label</link></para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> &gt; <link linkend="_class_timeshifts_1a53bfccafc7cfbd834754b752a9a4c313">m_nb_shifts_RF_peak</link></para>
</listitem>
            <listitem><para>std::vector&lt; bool &gt; <link linkend="_class_timeshifts_1a4338a0a481ffac2a8f8dffbafca76e7d">m_RF_preferred_label</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_timeshifts_1a608d9443a15dd669920e10dd8baee23a">analyse</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a5c037c5bb4b409c3040982c451c6733d">Fill</link> (<link linkend="_class_event">Event</link> const &amp;event, <link linkend="_class_r_f___manager">RF_Manager</link> &amp;rf)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1a0753528955e94c43043cd7d68193f960">Initialize</link> (bool const &amp;initializeRaw=false, bool const &amp;initializeCorrected=false)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1a05ac31a6c49360d94eeff184dc896c6b">InitializeCorrected</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1a40254b2aa53028b1b5c941ee1cb3833d">InitializeRaw</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1abef7234fe827ae3c7758788cf22b6921">treatFasterFile</link> (std::string const &amp;filename)</para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1aaef5b6fdd23be94ed37a2b4e7fe47b48">treatFile</link> (std::string const &amp;filename)</para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a21dc1e7bf232c6b0637b16aa04e43701">treatFolder</link> (std::string const &amp;folder, int const &amp;nb_files=-1)</para>
</listitem>
            <listitem><para>void <link linkend="_class_timeshifts_1a32079af1345e308feddd58e0950998ab">treatRootFile</link> (std::string const &amp;filename)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>static void <link linkend="_class_timeshifts_1a79fe955b7d1bbc12fd4c659691727df3">treatFilesMT</link> (<link linkend="_class_timeshifts">Timeshifts</link> &amp;ts, <link linkend="__m_t_list_8hpp_1a5645cb48b623bfc2e6e274c70952a8e2">MTList</link> &amp;files_MT)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>std::map&lt; <link linkend="__detectors_8hpp_1a7ea6a1daded60b9200989100a41bbc3a">dType</link>, <link linkend="__hit_8hpp_1ad7cd28c849adeb8fec74d20155b0113d">Time_ns</link> &gt; <link linkend="_class_timeshifts_1a4dd5b35444834dca94e9432619e24c47">m_bins_per_ns</link></para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1afdd59f1f2d548c6bd8ef89d998e8ed1e">m_check_preprompt</link> = false</para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1af8a8bb48626abf6a9a634b3c826b0e44">m_corrected</link> = false</para>
</listitem>
            <listitem><para>std::map&lt; <link linkend="__detectors_8hpp_1a7ea6a1daded60b9200989100a41bbc3a">dType</link>, bool &gt; <link linkend="_class_timeshifts_1a0c81995b961c33e22c49d3d180b3cec5">m_edge_preferred</link></para>
</listitem>
            <listitem><para><link linkend="__hit_8hpp_1a04b75a9e083a1c44419fdb7c3f87c361">ADC</link> <link linkend="_class_timeshifts_1abc19fb99a4d950501fb53430497e34c2">m_Emin_ADC</link> = 0.</para>
</listitem>
            <listitem><para><link linkend="_class_m_t_t_hist">MTTHist</link>&lt; TH1F &gt; <link linkend="_class_timeshifts_1a1a70cc43f750599c993c689e62cfb29f">m_EnergyRef</link></para>
</listitem>
            <listitem><para><link linkend="_class_m_t_t_hist">MTTHist</link>&lt; TH2F &gt; <link linkend="_class_timeshifts_1a18d1ff66fe0d6be096467ff874c139dc">m_EnergyRef_bidim</link></para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1a025f10899ed33302dee33f2e98d40b3a">m_energySpectraInitialized</link> = false</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_timeshifts_1a1a77bd589fc081641e19c5da8b4e19b6">m_filename</link> = &quot;&quot;</para>
</listitem>
            <listitem><para><link linkend="_class_files_manager">FilesManager</link> <link linkend="_class_timeshifts_1a4f155373f7d1a70f3f1d06233ebf10c1">m_files</link></para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1ad6bda9ede24fd63e7a43ad12bd861a98">m_initialized</link> = false</para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1ae3b75fce1fde95be5ca45b20cfbb8350">m_initializedCorrected</link> = false</para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1a8c7b6bfda5c2dacef69d0b7657d89fce">m_initializedRaw</link> = false</para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1a92c2ca60527219506deb3325507baee0">ulong</link> <link linkend="_class_timeshifts_1a7363de3261a770287e981328276f21dd">m_max_hits</link> = -1</para>
</listitem>
            <listitem><para>int <link linkend="_class_timeshifts_1a46a97751e517cc9f21d54d04bb16c5f5">m_max_mult</link> = 2</para>
</listitem>
            <listitem><para>int <link linkend="_class_timeshifts_1ad2182e6c34ecf5b760f67d58167df53e">m_min_mult</link> = 2</para>
</listitem>
            <listitem><para>int <link linkend="_class_timeshifts_1a9858ca34e3981520e2c1d5982bb185fd">m_nb_detectors</link> = 0</para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1a0bf7feef945319722118991949b033d4">m_ok</link> = false</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_timeshifts_1a04a95b4e6269c5a02010909206b24730">m_outData</link> = &quot;&quot;</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_timeshifts_1a8165d76fc5a92d7d49498624ae2b32b5">m_outDir</link> = &quot;&quot;</para>
</listitem>
            <listitem><para><link linkend="_class_path">Path</link> <link linkend="_class_timeshifts_1a7a9d72db7cd915c282014f63c6020d8e">m_outPath</link></para>
</listitem>
            <listitem><para>std::string <link linkend="_class_timeshifts_1ae3640104ddce3ee9548d83186f4032e6">m_outRoot</link> = &quot;timeshifts.root&quot;</para>
</listitem>
            <listitem><para>std::map&lt; <link linkend="__detectors_8hpp_1a7ea6a1daded60b9200989100a41bbc3a">dType</link>, bool &gt; <link linkend="_class_timeshifts_1af643b4246a7e7efb0857cec8f705eeb1">m_RF_preferred</link></para>
</listitem>
            <listitem><para><link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> <link linkend="_class_timeshifts_1a149e0f0885280b888df3f2b35ac29af8">m_time_ref_label</link> = 252</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_timeshifts_1a057b1fc1611ed270db718db0b72b801d">m_time_ref_name</link> = &quot;R1A9_FATIMA_LaBr3&quot;</para>
</listitem>
            <listitem><para><link linkend="__m_t_t_hist_8hpp_1ab7cfdf0e608b8024114dc2729684173e">Vector_MTTHist</link>&lt; TH1F &gt; <link linkend="_class_timeshifts_1aa45cc86b7201c47bb97f0422dff23725">m_time_spectra</link></para>
</listitem>
            <listitem><para><link linkend="__m_t_t_hist_8hpp_1ab7cfdf0e608b8024114dc2729684173e">Vector_MTTHist</link>&lt; TH1F &gt; <link linkend="_class_timeshifts_1ae8fe2221ac14c7c9920ba2dee69ec719">m_time_spectra_corrected</link></para>
</listitem>
            <listitem><para><link linkend="_class_m_t_t_hist">MTTHist</link>&lt; TH2F &gt; <link linkend="_class_timeshifts_1ab9b0b763dbe5e2be797d89e9bcb05c1e">m_time_spectra_corrected_bidim</link></para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link> &gt; <link linkend="_class_timeshifts_1ad10b3d7e16a2d51d3e73d7f2e7b1e0fa">m_timeshifts</link></para>
</listitem>
            <listitem><para><link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link> <link linkend="_class_timeshifts_1a73dda60d3425a0de61719829231e6d55">m_timewindow</link> = <link linkend="__hit_8hpp_1a4ea1ea3a29989c67afc2c4db41e36b15">Time_cast</link>(<link linkend="_class_timeshifts_1a221c8bebd939cf4a9442f5c9dddfeefb">m_timewindow_ns</link>*1000)</para>
</listitem>
            <listitem><para><link linkend="__hit_8hpp_1ad7cd28c849adeb8fec74d20155b0113d">Time_ns</link> <link linkend="_class_timeshifts_1a221c8bebd939cf4a9442f5c9dddfeefb">m_timewindow_ns</link> = <link linkend="__hit_8hpp_1a04b1f65fe07e6d731225feecab2b66f6">Time_ns_cast</link>(1500)</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_timeshifts_1af567d75bbe3263cece04cf3e6eff5256">m_ts_outdir</link> = &quot;Timeshifts/&quot;</para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1a985a81e5fa8d1a8866988c6af1b2ff1c">m_verbose</link> = false</para>
</listitem>
            <listitem><para>bool <link linkend="_class_timeshifts_1ab4329368cc98918cfd4489788dc4a4f8">m_verification</link> = true</para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="__hit_8hpp_1a36a1e53eff51015f34900948053c0d69">Timestamp</link> &gt; <link linkend="_class_timeshifts_1a64966ebd9e0538d9e3160bbfaf4a74de">mt_ref_time</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_timeshifts_1ad85f4cabf723d28843393cda47abc2b3"/>    <section>
    <title>Timeshifts()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>Timeshifts</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>Timeshifts</secondary></indexterm>
<para><computeroutput>Timeshifts::Timeshifts ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1ae47e90a384a5dd891bdc5eed10450971"/>    <section>
    <title>Timeshifts()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>Timeshifts</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>Timeshifts</secondary></indexterm>
<para><computeroutput>Timeshifts::Timeshifts (std::string const &amp; filename)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Call the <link linkend="_class_timeshifts_1a28163efe8d487669cf50d5f6e1060d71">Timeshifts::load()</link> method to load the timeshifts from a .dT file. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_ae47e90a384a5dd891bdc5eed10450971_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a1b9c3b0d8ef43a69bd6e7ce1bd4de5b4"/>    <section>
    <title>Timeshifts()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>Timeshifts</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>Timeshifts</secondary></indexterm>
<para><computeroutput>Timeshifts::Timeshifts (const char * filename)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Call the <link linkend="_class_timeshifts_1a28163efe8d487669cf50d5f6e1060d71">Timeshifts::load()</link> method to load the timeshifts from a .dT file. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a1b9c3b0d8ef43a69bd6e7ce1bd4de5b4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a8b7481d4a5405315c9988812a01428ef"/>    <section>
    <title>Timeshifts()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>Timeshifts</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>Timeshifts</secondary></indexterm>
<para><computeroutput>Timeshifts::Timeshifts (std::string const &amp; path, std::string const &amp; name)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>For faster to root conversion only : <link linkend="_class_timeshifts_1a28163efe8d487669cf50d5f6e1060d71">Timeshifts::load()</link> loads the timeshifts from a .dT file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>path</entry>
                                <entry>
<para>The path of the out root directory (/path/to/run_name) </para>
</entry>
                            </row>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>The name of the .dT file without the extension (e.g. run_10)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Will read a file in /path/Timeshitfs/name.dT </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a8b7481d4a5405315c9988812a01428ef_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a4c01a876efaee62fa348581470509736"/>    <section>
    <title>Timeshifts()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>Timeshifts</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>Timeshifts</secondary></indexterm>
<para><computeroutput>Timeshifts::Timeshifts (<link linkend="_class_timeshifts">Timeshifts</link> const &amp; timeshifts)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy constructor. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_timeshifts_1a608d9443a15dd669920e10dd8baee23a"/>    <section>
    <title>analyse()</title>
<indexterm><primary>analyse</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>analyse</secondary></indexterm>
<para><computeroutput>void Timeshifts::analyse ( )<computeroutput>[private]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a608d9443a15dd669920e10dd8baee23a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a608d9443a15dd669920e10dd8baee23a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a3d3ab1b3498ca45832d8a8735f16e188"/>    <section>
    <title>calculate()</title>
<indexterm><primary>calculate</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>calculate</secondary></indexterm>
<para><computeroutput>bool Timeshifts::calculate (std::string const &amp; folder, int const &amp; nb_files = <computeroutput>-1</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a3d3ab1b3498ca45832d8a8735f16e188_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a648f30a01a30b44ef675666ddae79f80"/>    <section>
    <title>checkForPreprompt()</title>
<indexterm><primary>checkForPreprompt</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>checkForPreprompt</secondary></indexterm>
<para><computeroutput>void Timeshifts::checkForPreprompt (bool const &amp; check = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>check</entry>
                                <entry>
<para>default true. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_class_timeshifts_1a715283a5be42b86ca70b4e468ccb2931"/>    <section>
    <title>CheckParameters()</title>
<indexterm><primary>CheckParameters</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>CheckParameters</secondary></indexterm>
<para><computeroutput>bool Timeshifts::CheckParameters ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a715283a5be42b86ca70b4e468ccb2931_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a715283a5be42b86ca70b4e468ccb2931_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1aea8a9a1e849fca3bf3712385bd2155c3"/>    <section>
    <title>dT_with_raising_edge()</title>
<indexterm><primary>dT_with_raising_edge</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>dT_with_raising_edge</secondary></indexterm>
<para><computeroutput>void Timeshifts::dT_with_raising_edge (<link linkend="__detectors_8hpp_1a7ea6a1daded60b9200989100a41bbc3a">dType</link> const &amp; type)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a2b3ce3e274b28b65f01e336efe99670e"/>    <section>
    <title>dT_with_RF()</title>
<indexterm><primary>dT_with_RF</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>dT_with_RF</secondary></indexterm>
<para><computeroutput>void Timeshifts::dT_with_RF (<link linkend="__detectors_8hpp_1a7ea6a1daded60b9200989100a41bbc3a">dType</link> const &amp; type)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a5c037c5bb4b409c3040982c451c6733d"/>    <section>
    <title>Fill()</title>
<indexterm><primary>Fill</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>Fill</secondary></indexterm>
<para><computeroutput>void Timeshifts::Fill (<link linkend="_class_event">Event</link> const &amp; event, <link linkend="_class_r_f___manager">RF_Manager</link> &amp; rf)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>event</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a5c037c5bb4b409c3040982c451c6733d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a5c037c5bb4b409c3040982c451c6733d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a5161a4c343623e92b4e26522ad7ee16a"/>    <section>
    <title>get()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>get</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>get</secondary></indexterm>
<para><computeroutput>std::vector&lt;<link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link>&gt; const&amp; Timeshifts::get ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a5161a4c343623e92b4e26522ad7ee16a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a2b9a1cbb93f280215432c4d323d1114d"/>    <section>
    <title>get()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>get</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>get</secondary></indexterm>
<para><computeroutput><link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link> const&amp; Timeshifts::get (int const &amp; i) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a0753528955e94c43043cd7d68193f960"/>    <section>
    <title>Initialize()</title>
<indexterm><primary>Initialize</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>Initialize</secondary></indexterm>
<para><computeroutput>bool Timeshifts::Initialize (bool const &amp; initializeRaw = <computeroutput>false</computeroutput>
, bool const &amp; initializeCorrected = <computeroutput>false</computeroutput>
)<computeroutput>[private]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a0753528955e94c43043cd7d68193f960_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a0753528955e94c43043cd7d68193f960_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a05ac31a6c49360d94eeff184dc896c6b"/>    <section>
    <title>InitializeCorrected()</title>
<indexterm><primary>InitializeCorrected</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>InitializeCorrected</secondary></indexterm>
<para><computeroutput>bool Timeshifts::InitializeCorrected ( )<computeroutput>[private]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a05ac31a6c49360d94eeff184dc896c6b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a05ac31a6c49360d94eeff184dc896c6b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a40254b2aa53028b1b5c941ee1cb3833d"/>    <section>
    <title>InitializeRaw()</title>
<indexterm><primary>InitializeRaw</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>InitializeRaw</secondary></indexterm>
<para><computeroutput>bool Timeshifts::InitializeRaw ( )<computeroutput>[private]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a40254b2aa53028b1b5c941ee1cb3833d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a40254b2aa53028b1b5c941ee1cb3833d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a28163efe8d487669cf50d5f6e1060d71"/>    <section>
    <title>load()</title>
<indexterm><primary>load</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>load</secondary></indexterm>
<para><computeroutput>bool Timeshifts::load (std::string const &amp; filename)</computeroutput></para><para>

<para>Use this method to load timeshifts from a .dT file. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a28163efe8d487669cf50d5f6e1060d71_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a28163efe8d487669cf50d5f6e1060d71_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a60689326cebd96ae4996522530ffefab"/>    <section>
    <title>operator bool()</title>
<indexterm><primary>operator bool</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>operator bool</secondary></indexterm>
<para><computeroutput>Timeshifts::operator bool ( ) const &amp;<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a38aac2aef62c8999bb5da97e397ea64c"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_timeshifts">Timeshifts</link>&amp; Timeshifts::operator= (<link linkend="_class_timeshifts">Timeshifts</link> const &amp; timeshifts)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a942984c1af943a864baf8744babb2d15"/>    <section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link> const&amp; Timeshifts::operator[] (int const &amp; i) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a0ab2718e733f94acda46780191295e3b"/>    <section>
    <title>rebin()</title>
<indexterm><primary>rebin</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>rebin</secondary></indexterm>
<para><computeroutput>void Timeshifts::rebin (std::string const &amp; detector, <link linkend="__hit_8hpp_1ad7cd28c849adeb8fec74d20155b0113d">Time_ns</link> const &amp; bin_size_ns)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a0ab2718e733f94acda46780191295e3b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a82ddafa1c3f1d2c21c33749e70fab876"/>    <section>
    <title>setEminADC()</title>
<indexterm><primary>setEminADC</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setEminADC</secondary></indexterm>
<para><computeroutput>void Timeshifts::setEminADC (<link linkend="__hit_8hpp_1a04b75a9e083a1c44419fdb7c3f87c361">ADC</link> const &amp; EminADC)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1afa21cadd8eac07728df7f51d0dbaa908"/>    <section>
    <title>setMaxHits()</title>
<indexterm><primary>setMaxHits</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setMaxHits</secondary></indexterm>
<para><computeroutput>void Timeshifts::setMaxHits (<link linkend="_lib_co_8hpp_1a92c2ca60527219506deb3325507baee0">ulong</link> const &amp; max_hits = <computeroutput>-1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set maximum hits to be read in a file. </para>
</para>

<para><note><title>Note</title>

<para>Use only if calculate timeshifts </para>
</note>
</para>
    </section><anchor xml:id="_class_timeshifts_1a6206d2b698c88e80bc42bdf4b51fce14"/>    <section>
    <title>setMult()</title>
<indexterm><primary>setMult</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setMult</secondary></indexterm>
<para><computeroutput>void Timeshifts::setMult (int const &amp; min_mult, int const &amp; max_mult)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set the multiplicity gate for the events used for coincidence timeshift calculation. </para>
</para>

<para><note><title>Note</title>

<para>Mandatory only if calculate timeshifts</para>
</note>
min_mult and max_mult included.</para>

<para>example : multiplicity = 2 : setMult(2, 2)</para>

<para>example : multiplicity = {2;3;4} : setMult(2, 4)</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>min_mult</entry>
                                <entry>
<para>default min_mult = 2 </para>
</entry>
                            </row>
                            <row>
                                <entry>max_mult</entry>
                                <entry>
<para>default max_mult = 2 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a6206d2b698c88e80bc42bdf4b51fce14_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1ab877131bc1bd7394f55c3d46729ac9e6"/>    <section>
    <title>setOutData()</title>
<indexterm><primary>setOutData</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setOutData</secondary></indexterm>
<para><computeroutput>void Timeshifts::setOutData (std::string const &amp; outdata)</computeroutput></para><para>

<para>Use setName instead. Set output file name of the timeshifts data. </para>
</para>

<para><note><title>Note</title>

<para>Mandatory only if calculate timeshifts</para>
</note>
If not set, it is automatically named after the root file. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_ab877131bc1bd7394f55c3d46729ac9e6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_ab877131bc1bd7394f55c3d46729ac9e6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a26367484f20648d7c3f5b3bbe5679ca8"/>    <section>
    <title>setOutDir()</title>
<indexterm><primary>setOutDir</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setOutDir</secondary></indexterm>
<para><computeroutput>void Timeshifts::setOutDir (std::string const &amp; outDir)</computeroutput></para><para>

<para>Set the output directory (full path);. </para>
</para>

<para><note><title>Note</title>

<para>Mandatory only if calculate timeshifts </para>
</note>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a26367484f20648d7c3f5b3bbe5679ca8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a26367484f20648d7c3f5b3bbe5679ca8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a082a54cde1bb45feca487f15ab4a14c7"/>    <section>
    <title>setOutName()</title>
<indexterm><primary>setOutName</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setOutName</secondary></indexterm>
<para><computeroutput>void Timeshifts::setOutName (std::string const &amp; outdata)</computeroutput></para><para>

<para>Set output file name of the timeshifts data and root file. </para>
</para>

<para><note><title>Note</title>

<para>Mandatory only if calculate timeshifts </para>
</note>
</para>
    </section><anchor xml:id="_class_timeshifts_1aa9f0f8cc1d96a5408f233449767ef0f6"/>    <section>
    <title>setOutRoot()</title>
<indexterm><primary>setOutRoot</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setOutRoot</secondary></indexterm>
<para><computeroutput>void Timeshifts::setOutRoot (std::string const &amp; outroot)</computeroutput></para><para>

<para>Use setName instead. Set output root file containing the raw and corrected time spectra. </para>
</para>

<para><note><title>Note</title>

<para>Mandatory only if calculate timeshifts </para>
</note>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_aa9f0f8cc1d96a5408f233449767ef0f6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_aa9f0f8cc1d96a5408f233449767ef0f6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1acca1130b271301c5477d4b4a23ae4e5b"/>    <section>
    <title>setParameters()</title>
<indexterm><primary>setParameters</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setParameters</secondary></indexterm>
<para><computeroutput>bool Timeshifts::setParameters (std::string const &amp; parameter)</computeroutput></para><para>

<para>Use this method to setup the parameters from a string in order to calculate the timeshifts. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_acca1130b271301c5477d4b4a23ae4e5b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1ac2c3e8e47598e28d49932a3720a6fd58"/>    <section>
    <title>setRFOffset()</title>
<indexterm><primary>setRFOffset</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setRFOffset</secondary></indexterm>
<para><computeroutput>void Timeshifts::setRFOffset (<link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link> const &amp; offset_ps)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set RF offset (synonymous to <link linkend="_class_timeshifts_1af6cb9cffa9322eabb7fe712c6e6ae798">Timeshifts::setRFShift</link>) </para>
</para>

<para><note><title>Note</title>

<para>Use only if calculating timeshifts with RF </para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>offset</entry>
                                <entry>
<para>default 50000 ps </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_ac2c3e8e47598e28d49932a3720a6fd58_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a0faeccde5623d6808435414d020d1385"/>    <section>
    <title>setRFOffset_ns()</title>
<indexterm><primary>setRFOffset_ns</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setRFOffset_ns</secondary></indexterm>
<para><computeroutput>void Timeshifts::setRFOffset_ns (<link linkend="__hit_8hpp_1ad7cd28c849adeb8fec74d20155b0113d">Time_ns</link> const &amp; offset_ns)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set RF offset (synonymous to <link linkend="_class_timeshifts_1af6cb9cffa9322eabb7fe712c6e6ae798">Timeshifts::setRFShift</link>) </para>
</para>

<para><note><title>Note</title>

<para>Use only if calculating timeshifts with RF </para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>offset</entry>
                                <entry>
<para>default 50 ns </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a0faeccde5623d6808435414d020d1385_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1af6cb9cffa9322eabb7fe712c6e6ae798"/>    <section>
    <title>setRFShift()</title>
<indexterm><primary>setRFShift</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setRFShift</secondary></indexterm>
<para><computeroutput>void Timeshifts::setRFShift (<link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link> const &amp; shift)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set RF shift (synonymous to <link linkend="_class_timeshifts_1ac2c3e8e47598e28d49932a3720a6fd58">Timeshifts::setRFOffset</link>) </para>
</para>

<para><note><title>Note</title>

<para>Use only if calculating timeshifts with RF </para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>shift</entry>
                                <entry>
<para>default 50 ns </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_af6cb9cffa9322eabb7fe712c6e6ae798_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1aa7cb3acf23e80927fa85be636f55a99d"/>    <section>
    <title>setTimeReference()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>setTimeReference</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setTimeReference</secondary></indexterm>
<para><computeroutput>bool Timeshifts::setTimeReference (<link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> const &amp; timeRef_label)</computeroutput></para><para>

<para>Set the time reference label. </para>
</para>

<para><note><title>Note</title>

<para>Mandatory only if calculate timeshifts </para>
</note>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_aa7cb3acf23e80927fa85be636f55a99d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1aa9f8bdcbeef03f8be872602e6c717d4d"/>    <section>
    <title>setTimeReference()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>setTimeReference</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setTimeReference</secondary></indexterm>
<para><computeroutput>bool Timeshifts::setTimeReference (std::string const &amp; timeRef_name)</computeroutput></para><para>

<para>Set the time reference. </para>
</para>

<para><note><title>Note</title>

<para>Mandatory only if calculate timeshifts</para>
</note>
Either the full name, or the label number </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_aa9f8bdcbeef03f8be872602e6c717d4d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1af9da5337ea83092b9a6bb56cdb83f4cb"/>    <section>
    <title>setTimeWindow_ns()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>setTimeWindow_ns</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setTimeWindow_ns</secondary></indexterm>
<para><computeroutput>bool Timeshifts::setTimeWindow_ns (std::string const &amp; timewindow_ns_str)</computeroutput></para><para>

<para>Set the time window in ns. </para>
</para>

<para><note><title>Note</title>

<para>It is better to keep it at its default value, otherwise you can miss some detectors</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>timewindow_ns</entry>
                                <entry>
<para>default value 1500.f ns </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_af9da5337ea83092b9a6bb56cdb83f4cb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a304c1076d703a78153cfe72d61b28425"/>    <section>
    <title>setTimeWindow_ns()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>setTimeWindow_ns</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>setTimeWindow_ns</secondary></indexterm>
<para><computeroutput>bool Timeshifts::setTimeWindow_ns (<link linkend="__hit_8hpp_1ad7cd28c849adeb8fec74d20155b0113d">Time_ns</link> const &amp; timewindow_ns)</computeroutput></para><para>

<para>Setup the time window for the coincidence in ns. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a304c1076d703a78153cfe72d61b28425_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a304c1076d703a78153cfe72d61b28425_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a89dbca371bce4601ee60122f544faf95"/>    <section>
    <title>shiftTimeSpectra()</title>
<indexterm><primary>shiftTimeSpectra</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>shiftTimeSpectra</secondary></indexterm>
<para><computeroutput>TH1F * Timeshifts::shiftTimeSpectra (TH1F * histo, <link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> const &amp; label, std::string const &amp; unit = <computeroutput>&quot;ps&quot;</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a89dbca371bce4601ee60122f544faf95_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1abef7234fe827ae3c7758788cf22b6921"/>    <section>
    <title>treatFasterFile()</title>
<indexterm><primary>treatFasterFile</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>treatFasterFile</secondary></indexterm>
<para><computeroutput>void Timeshifts::treatFasterFile (std::string const &amp; filename)<computeroutput>[private]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_abef7234fe827ae3c7758788cf22b6921_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_abef7234fe827ae3c7758788cf22b6921_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1aaef5b6fdd23be94ed37a2b4e7fe47b48"/>    <section>
    <title>treatFile()</title>
<indexterm><primary>treatFile</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>treatFile</secondary></indexterm>
<para><computeroutput>void Timeshifts::treatFile (std::string const &amp; filename)<computeroutput>[private]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_aaef5b6fdd23be94ed37a2b4e7fe47b48_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_aaef5b6fdd23be94ed37a2b4e7fe47b48_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a79fe955b7d1bbc12fd4c659691727df3"/>    <section>
    <title>treatFilesMT()</title>
<indexterm><primary>treatFilesMT</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>treatFilesMT</secondary></indexterm>
<para><computeroutput>void Timeshifts::treatFilesMT (<link linkend="_class_timeshifts">Timeshifts</link> &amp; ts, <link linkend="__m_t_list_8hpp_1a5645cb48b623bfc2e6e274c70952a8e2">MTList</link> &amp; files_MT)<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a79fe955b7d1bbc12fd4c659691727df3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a79fe955b7d1bbc12fd4c659691727df3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a21dc1e7bf232c6b0637b16aa04e43701"/>    <section>
    <title>treatFolder()</title>
<indexterm><primary>treatFolder</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>treatFolder</secondary></indexterm>
<para><computeroutput>void Timeshifts::treatFolder (std::string const &amp; folder, int const &amp; nb_files = <computeroutput>-1</computeroutput>
)<computeroutput>[private]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a21dc1e7bf232c6b0637b16aa04e43701_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a21dc1e7bf232c6b0637b16aa04e43701_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a32079af1345e308feddd58e0950998ab"/>    <section>
    <title>treatRootFile()</title>
<indexterm><primary>treatRootFile</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>treatRootFile</secondary></indexterm>
<para><computeroutput>void Timeshifts::treatRootFile (std::string const &amp; filename)<computeroutput>[private]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a32079af1345e308feddd58e0950998ab_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a32079af1345e308feddd58e0950998ab_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a1b6e129787ae7641ecbcb990f6e86bb9"/>    <section>
    <title>verbose()</title>
<indexterm><primary>verbose</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>verbose</secondary></indexterm>
<para><computeroutput>void Timeshifts::verbose (bool const &amp; _verbose = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set verbosity level. </para>
</para>

<para><note><title>Note</title>

<para>Mandatory only if calculate timeshifts</para>
</note>
It will print the fit parameters in the terminal </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a1b6e129787ae7641ecbcb990f6e86bb9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1abc70d7dc0c400a76d84f2c5cc30edf77"/>    <section>
    <title>verification()</title>
<indexterm><primary>verification</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>verification</secondary></indexterm>
<para><computeroutput>bool const&amp; Timeshifts::verification (bool const &amp; verif = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Used to create. </para>
</para>
    </section><anchor xml:id="_class_timeshifts_1a6520eab7a8824f41a2be8517d83fc835"/>    <section>
    <title>verify()</title>
<indexterm><primary>verify</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>verify</secondary></indexterm>
<para><computeroutput>bool Timeshifts::verify (std::string const &amp; folder, int const &amp; nb_files = <computeroutput>-1</computeroutput>
)</computeroutput></para><para>

<para>To verify an already calculated timeshift .dT data file. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a6520eab7a8824f41a2be8517d83fc835_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a79f5376cf7071865b264989ef46d886f"/>    <section>
    <title>write()</title>
<indexterm><primary>write</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>write</secondary></indexterm>
<para><computeroutput>void Timeshifts::write (std::string const &amp; name)</computeroutput></para><para>

<para>To write down the histograms and the data. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>Will automatically create the following name as output : (name+&quot;.dT&quot;) and (name+&quot;_dT.root&quot;) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a79f5376cf7071865b264989ef46d886f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1ad19fdc64b6f8dd54e94665a7170a49a7"/>    <section>
    <title>writeData()</title>
<indexterm><primary>writeData</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>writeData</secondary></indexterm>
<para><computeroutput>void Timeshifts::writeData (std::string const &amp; name)</computeroutput></para><para>

<para>To write down the data. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>Name of the output data file : (name+&quot;.dT&quot;) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_ad19fdc64b6f8dd54e94665a7170a49a7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_ad19fdc64b6f8dd54e94665a7170a49a7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_timeshifts_1a579c8583bd37c3988ffb5cb6df7849f7"/>    <section>
    <title>writeRoot()</title>
<indexterm><primary>writeRoot</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>writeRoot</secondary></indexterm>
<para><computeroutput>void Timeshifts::writeRoot (std::string const &amp; name)</computeroutput></para><para>

<para>To write down the histograms. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>Name of the output data file : (name+&quot;_dT.root&quot;) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a579c8583bd37c3988ffb5cb6df7849f7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_timeshifts_a579c8583bd37c3988ffb5cb6df7849f7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_timeshifts_1a4dd5b35444834dca94e9432619e24c47"/>    <section>
    <title>m_bins_per_ns</title>
<indexterm><primary>m_bins_per_ns</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_bins_per_ns</secondary></indexterm>
<para><computeroutput>std::map&lt;<link linkend="__detectors_8hpp_1a7ea6a1daded60b9200989100a41bbc3a">dType</link>, <link linkend="__hit_8hpp_1ad7cd28c849adeb8fec74d20155b0113d">Time_ns</link>&gt; Timeshifts::m_bins_per_ns<computeroutput>[private]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting>=&#32;
&#32;&#32;{&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;labr&quot;</emphasis>,&#32;&#32;10.},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;ge&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;1.},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;bgo&quot;</emphasis>,&#32;&#32;&#32;&#32;2.},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;eden&quot;</emphasis>,&#32;&#32;&#32;2.},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;RF&quot;</emphasis>,&#32;&#32;&#32;&#32;10.},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;paris&quot;</emphasis>,&#32;10.},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;dssd&quot;</emphasis>,&#32;&#32;0.5}
&#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_timeshifts_1afdd59f1f2d548c6bd8ef89d998e8ed1e"/>    <section>
    <title>m_check_preprompt</title>
<indexterm><primary>m_check_preprompt</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_check_preprompt</secondary></indexterm>
<para><computeroutput>bool Timeshifts::m_check_preprompt = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1af8a8bb48626abf6a9a634b3c826b0e44"/>    <section>
    <title>m_corrected</title>
<indexterm><primary>m_corrected</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_corrected</secondary></indexterm>
<para><computeroutput>bool Timeshifts::m_corrected = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a0c81995b961c33e22c49d3d180b3cec5"/>    <section>
    <title>m_edge_preferred</title>
<indexterm><primary>m_edge_preferred</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_edge_preferred</secondary></indexterm>
<para><computeroutput>std::map&lt;<link linkend="__detectors_8hpp_1a7ea6a1daded60b9200989100a41bbc3a">dType</link>, bool&gt; Timeshifts::m_edge_preferred<computeroutput>[private]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting>=&#32;
&#32;&#32;{&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;labr&quot;</emphasis>,&#32;&#32;<emphasis role="keyword">false</emphasis>},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;ge&quot;</emphasis>,&#32;&#32;&#32;&#32;<emphasis role="keyword">false</emphasis>},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;bgo&quot;</emphasis>,&#32;&#32;&#32;<emphasis role="keyword">false</emphasis>},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;eden&quot;</emphasis>,&#32;&#32;<emphasis role="keyword">false</emphasis>},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;RF&quot;</emphasis>,&#32;&#32;&#32;&#32;<emphasis role="keyword">false</emphasis>},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;paris&quot;</emphasis>,&#32;<emphasis role="keyword">false</emphasis>},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;dssd&quot;</emphasis>,&#32;&#32;<emphasis role="keyword">false</emphasis>}
&#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_timeshifts_1ab098d455164964ba60b9f5c555de74e4"/>    <section>
    <title>m_edge_preferred_label</title>
<indexterm><primary>m_edge_preferred_label</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_edge_preferred_label</secondary></indexterm>
<para><computeroutput>std::vector&lt;bool&gt; Timeshifts::m_edge_preferred_label</computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1abc19fb99a4d950501fb53430497e34c2"/>    <section>
    <title>m_Emin_ADC</title>
<indexterm><primary>m_Emin_ADC</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_Emin_ADC</secondary></indexterm>
<para><computeroutput><link linkend="__hit_8hpp_1a04b75a9e083a1c44419fdb7c3f87c361">ADC</link> Timeshifts::m_Emin_ADC = 0.<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a1a70cc43f750599c993c689e62cfb29f"/>    <section>
    <title>m_EnergyRef</title>
<indexterm><primary>m_EnergyRef</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_EnergyRef</secondary></indexterm>
<para><computeroutput><link linkend="_class_m_t_t_hist">MTTHist</link>&lt;TH1F&gt; Timeshifts::m_EnergyRef<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a18d1ff66fe0d6be096467ff874c139dc"/>    <section>
    <title>m_EnergyRef_bidim</title>
<indexterm><primary>m_EnergyRef_bidim</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_EnergyRef_bidim</secondary></indexterm>
<para><computeroutput><link linkend="_class_m_t_t_hist">MTTHist</link>&lt;TH2F&gt; Timeshifts::m_EnergyRef_bidim<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a025f10899ed33302dee33f2e98d40b3a"/>    <section>
    <title>m_energySpectraInitialized</title>
<indexterm><primary>m_energySpectraInitialized</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_energySpectraInitialized</secondary></indexterm>
<para><computeroutput>bool Timeshifts::m_energySpectraInitialized = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a1a77bd589fc081641e19c5da8b4e19b6"/>    <section>
    <title>m_filename</title>
<indexterm><primary>m_filename</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_filename</secondary></indexterm>
<para><computeroutput>std::string Timeshifts::m_filename = &quot;&quot;<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a4f155373f7d1a70f3f1d06233ebf10c1"/>    <section>
    <title>m_files</title>
<indexterm><primary>m_files</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_files</secondary></indexterm>
<para><computeroutput><link linkend="_class_files_manager">FilesManager</link> Timeshifts::m_files<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1ad6bda9ede24fd63e7a43ad12bd861a98"/>    <section>
    <title>m_initialized</title>
<indexterm><primary>m_initialized</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_initialized</secondary></indexterm>
<para><computeroutput>bool Timeshifts::m_initialized = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1ae3b75fce1fde95be5ca45b20cfbb8350"/>    <section>
    <title>m_initializedCorrected</title>
<indexterm><primary>m_initializedCorrected</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_initializedCorrected</secondary></indexterm>
<para><computeroutput>bool Timeshifts::m_initializedCorrected = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a8c7b6bfda5c2dacef69d0b7657d89fce"/>    <section>
    <title>m_initializedRaw</title>
<indexterm><primary>m_initializedRaw</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_initializedRaw</secondary></indexterm>
<para><computeroutput>bool Timeshifts::m_initializedRaw = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a7363de3261a770287e981328276f21dd"/>    <section>
    <title>m_max_hits</title>
<indexterm><primary>m_max_hits</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_max_hits</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1a92c2ca60527219506deb3325507baee0">ulong</link> Timeshifts::m_max_hits = -1<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a46a97751e517cc9f21d54d04bb16c5f5"/>    <section>
    <title>m_max_mult</title>
<indexterm><primary>m_max_mult</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_max_mult</secondary></indexterm>
<para><computeroutput>int Timeshifts::m_max_mult = 2<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1ad2182e6c34ecf5b760f67d58167df53e"/>    <section>
    <title>m_min_mult</title>
<indexterm><primary>m_min_mult</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_min_mult</secondary></indexterm>
<para><computeroutput>int Timeshifts::m_min_mult = 2<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a9858ca34e3981520e2c1d5982bb185fd"/>    <section>
    <title>m_nb_detectors</title>
<indexterm><primary>m_nb_detectors</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_nb_detectors</secondary></indexterm>
<para><computeroutput>int Timeshifts::m_nb_detectors = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a53bfccafc7cfbd834754b752a9a4c313"/>    <section>
    <title>m_nb_shifts_RF_peak</title>
<indexterm><primary>m_nb_shifts_RF_peak</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_nb_shifts_RF_peak</secondary></indexterm>
<para><computeroutput>std::vector&lt;<link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link>&gt; Timeshifts::m_nb_shifts_RF_peak</computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a0bf7feef945319722118991949b033d4"/>    <section>
    <title>m_ok</title>
<indexterm><primary>m_ok</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_ok</secondary></indexterm>
<para><computeroutput>bool Timeshifts::m_ok = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a04a95b4e6269c5a02010909206b24730"/>    <section>
    <title>m_outData</title>
<indexterm><primary>m_outData</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_outData</secondary></indexterm>
<para><computeroutput>std::string Timeshifts::m_outData = &quot;&quot;<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a8165d76fc5a92d7d49498624ae2b32b5"/>    <section>
    <title>m_outDir</title>
<indexterm><primary>m_outDir</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_outDir</secondary></indexterm>
<para><computeroutput>std::string Timeshifts::m_outDir = &quot;&quot;<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a7a9d72db7cd915c282014f63c6020d8e"/>    <section>
    <title>m_outPath</title>
<indexterm><primary>m_outPath</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_outPath</secondary></indexterm>
<para><computeroutput><link linkend="_class_path">Path</link> Timeshifts::m_outPath<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1ae3640104ddce3ee9548d83186f4032e6"/>    <section>
    <title>m_outRoot</title>
<indexterm><primary>m_outRoot</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_outRoot</secondary></indexterm>
<para><computeroutput>std::string Timeshifts::m_outRoot = &quot;timeshifts.root&quot;<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1af643b4246a7e7efb0857cec8f705eeb1"/>    <section>
    <title>m_RF_preferred</title>
<indexterm><primary>m_RF_preferred</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_RF_preferred</secondary></indexterm>
<para><computeroutput>std::map&lt;<link linkend="__detectors_8hpp_1a7ea6a1daded60b9200989100a41bbc3a">dType</link>, bool&gt; Timeshifts::m_RF_preferred<computeroutput>[private]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting>=&#32;
&#32;&#32;{&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;labr&quot;</emphasis>,&#32;&#32;<emphasis role="keyword">false</emphasis>},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;ge&quot;</emphasis>,&#32;&#32;&#32;&#32;<emphasis role="keyword">false</emphasis>},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;bgo&quot;</emphasis>,&#32;&#32;&#32;<emphasis role="keyword">false</emphasis>},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;eden&quot;</emphasis>,&#32;&#32;<emphasis role="keyword">false</emphasis>},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;RF&quot;</emphasis>,&#32;&#32;&#32;&#32;<emphasis role="keyword">false</emphasis>},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;paris&quot;</emphasis>,&#32;<emphasis role="keyword">false</emphasis>},&#32;
&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;dssd&quot;</emphasis>,&#32;&#32;<emphasis role="keyword">false</emphasis>}
&#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_timeshifts_1a4338a0a481ffac2a8f8dffbafca76e7d"/>    <section>
    <title>m_RF_preferred_label</title>
<indexterm><primary>m_RF_preferred_label</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_RF_preferred_label</secondary></indexterm>
<para><computeroutput>std::vector&lt;bool&gt; Timeshifts::m_RF_preferred_label</computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a149e0f0885280b888df3f2b35ac29af8"/>    <section>
    <title>m_time_ref_label</title>
<indexterm><primary>m_time_ref_label</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_time_ref_label</secondary></indexterm>
<para><computeroutput><link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> Timeshifts::m_time_ref_label = 252<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a057b1fc1611ed270db718db0b72b801d"/>    <section>
    <title>m_time_ref_name</title>
<indexterm><primary>m_time_ref_name</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_time_ref_name</secondary></indexterm>
<para><computeroutput>std::string Timeshifts::m_time_ref_name = &quot;R1A9_FATIMA_LaBr3&quot;<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1aa45cc86b7201c47bb97f0422dff23725"/>    <section>
    <title>m_time_spectra</title>
<indexterm><primary>m_time_spectra</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_time_spectra</secondary></indexterm>
<para><computeroutput><link linkend="__m_t_t_hist_8hpp_1ab7cfdf0e608b8024114dc2729684173e">Vector_MTTHist</link>&lt;TH1F&gt; Timeshifts::m_time_spectra<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1ae8fe2221ac14c7c9920ba2dee69ec719"/>    <section>
    <title>m_time_spectra_corrected</title>
<indexterm><primary>m_time_spectra_corrected</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_time_spectra_corrected</secondary></indexterm>
<para><computeroutput><link linkend="__m_t_t_hist_8hpp_1ab7cfdf0e608b8024114dc2729684173e">Vector_MTTHist</link>&lt;TH1F&gt; Timeshifts::m_time_spectra_corrected<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1ab9b0b763dbe5e2be797d89e9bcb05c1e"/>    <section>
    <title>m_time_spectra_corrected_bidim</title>
<indexterm><primary>m_time_spectra_corrected_bidim</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_time_spectra_corrected_bidim</secondary></indexterm>
<para><computeroutput><link linkend="_class_m_t_t_hist">MTTHist</link>&lt;TH2F&gt; Timeshifts::m_time_spectra_corrected_bidim<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1ad10b3d7e16a2d51d3e73d7f2e7b1e0fa"/>    <section>
    <title>m_timeshifts</title>
<indexterm><primary>m_timeshifts</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_timeshifts</secondary></indexterm>
<para><computeroutput>std::vector&lt;<link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link>&gt; Timeshifts::m_timeshifts<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a73dda60d3425a0de61719829231e6d55"/>    <section>
    <title>m_timewindow</title>
<indexterm><primary>m_timewindow</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_timewindow</secondary></indexterm>
<para><computeroutput><link linkend="__hit_8hpp_1a808363c27c30b41f6ed40b62ebde3ee7">Time</link> Timeshifts::m_timewindow = <link linkend="__hit_8hpp_1a4ea1ea3a29989c67afc2c4db41e36b15">Time_cast</link>(<link linkend="_class_timeshifts_1a221c8bebd939cf4a9442f5c9dddfeefb">m_timewindow_ns</link>*1000)<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a221c8bebd939cf4a9442f5c9dddfeefb"/>    <section>
    <title>m_timewindow_ns</title>
<indexterm><primary>m_timewindow_ns</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_timewindow_ns</secondary></indexterm>
<para><computeroutput><link linkend="__hit_8hpp_1ad7cd28c849adeb8fec74d20155b0113d">Time_ns</link> Timeshifts::m_timewindow_ns = <link linkend="__hit_8hpp_1a04b1f65fe07e6d731225feecab2b66f6">Time_ns_cast</link>(1500)<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1af567d75bbe3263cece04cf3e6eff5256"/>    <section>
    <title>m_ts_outdir</title>
<indexterm><primary>m_ts_outdir</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_ts_outdir</secondary></indexterm>
<para><computeroutput>std::string Timeshifts::m_ts_outdir = &quot;Timeshifts/&quot;<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a985a81e5fa8d1a8866988c6af1b2ff1c"/>    <section>
    <title>m_verbose</title>
<indexterm><primary>m_verbose</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_verbose</secondary></indexterm>
<para><computeroutput>bool Timeshifts::m_verbose = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1ab4329368cc98918cfd4489788dc4a4f8"/>    <section>
    <title>m_verification</title>
<indexterm><primary>m_verification</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>m_verification</secondary></indexterm>
<para><computeroutput>bool Timeshifts::m_verification = true<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_timeshifts_1a64966ebd9e0538d9e3160bbfaf4a74de"/>    <section>
    <title>mt_ref_time</title>
<indexterm><primary>mt_ref_time</primary><secondary>Timeshifts</secondary></indexterm>
<indexterm><primary>Timeshifts</primary><secondary>mt_ref_time</secondary></indexterm>
<para><computeroutput>std::vector&lt;<link linkend="__hit_8hpp_1a36a1e53eff51015f34900948053c0d69">Timestamp</link>&gt; Timeshifts::mt_ref_time<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
lib/Modules/<link linkend="__timeshifts_8hpp">Timeshifts.hpp</link></section>
</section>
