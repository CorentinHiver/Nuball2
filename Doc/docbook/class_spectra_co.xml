<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_spectra_co" xml:lang="en-US">
<title>SpectraCo Class Reference</title>
<indexterm><primary>SpectraCo</primary></indexterm>
<para>
<computeroutput>#include &lt;SpectraCo.hpp&gt;</computeroutput>
</para>
Collaboration diagram for SpectraCo:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_spectra_co_1_1_histo_null">HistoNull</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_spectra_co_1_1_histo_zombie">HistoZombie</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_spectra_co_1_1_size_missmatch">SizeMissmatch</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1a4bb4afaf9dd3881b73e8c6e740712a30">back</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a626908f0a27928d07d980cfcec3b8454">back</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1af202a60db2de7b7a723f9863c9616dca">calibrate</link> (<link linkend="_class_calibration">Calibration</link> const &amp;calib, <link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> const &amp;label)</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1af580e2c735a90aff03e6c1c159ed9b17">calibrate</link> (std::vector&lt; double &gt; const &amp;coeffs)</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1af74c78334a7be1cc421779f9e4b30a0b">calibrateAndScale</link> (std::vector&lt; double &gt; const &amp;coeffs)</para>

<para>Calibrates using the coeffs[0:n-1] coefficient then scale it using the coeffs.back() coefficient (spectra*=coeffs.back()) </para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6">calibrateX</link> (double const &amp;intercept, double const &amp;slope=1)</para>

<para>First order calibration. </para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1aecb46bfbd2968e90d0ffd6d5848ca8b4">chi2</link> (<link linkend="_class_spectra_co">SpectraCo</link> &amp;other)</para>

<para>Calculates the chi2 between this spectra and another one. </para>
</listitem>
            <listitem><para>TH1D * <link linkend="_class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e">createTH1D</link> (std::string newName=&quot;&quot;, std::string newTitle=&quot;&quot;)</para>
</listitem>
            <listitem><para>TH1F * <link linkend="_class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f">createTH1F</link> (std::string newName=&quot;&quot;, std::string newTitle=&quot;&quot;)</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1a85cee2f57fbae02a28329584da5df1b5">data</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19">data</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a649cc895e9813d1a82c9057022228266">deleteDerivative</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> * <link linkend="_class_spectra_co_1a7b935499bbdce4b84a0f640b6518765c">derivate</link> (int smooth=1) noexcept</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> * <link linkend="_class_spectra_co_1a9be3e04ddc73df4d11336ec806313094">derivate2</link> (int smooth=1) noexcept</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> * <link linkend="_class_spectra_co_1aa9af077c307bb5e33e271bf8cbaa1741">derivative</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> * <link linkend="_class_spectra_co_1a2d1839156a996f255b74024e12257bdb">derivative</link> (std::string const &amp;<link linkend="_class_spectra_co_1a63e44855e3e049f64759cff74aa15a52">name</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> * <link linkend="_class_spectra_co_1a5db4e774152522eac0e1c58af984fc28">derivative2</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> * <link linkend="_class_spectra_co_1a213a9aea476c88a52c8c32a4eb775190">derivative2</link> (std::string const &amp;<link linkend="_class_spectra_co_1a63e44855e3e049f64759cff74aa15a52">name</link>)</para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; const  &amp; <link linkend="_class_spectra_co_1a6106089e9e4295cc71f3d45f781ac2c8">derivative2Data</link> ()</para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; const  &amp; <link linkend="_class_spectra_co_1a5c0d013692342e790580839787143f36">derivativeData</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a9f6fa49281669395c0e10f833f8e914e">draw</link> (const char *param=&quot;&quot;)</para>

<para>Creates a new TH1F to be drawn. </para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1a30feae642d436e24ff7397891030d859">factor</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d">factor</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a223f3a9be7c661c1ef700d8bfda1106f">fill</link> (double const &amp;X) noexcept</para>

<para>Fills a bin of the spectra based on the X value. </para>
</listitem>
            <listitem><para><link linkend="__spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7">SpectraPoints</link> const  &amp; <link linkend="_class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137">findPeaks</link> (int const &amp;threshold, int const &amp;nb_bins_below_threshold)</para>

<para>Uses the second derivative spectra to get the peaks. </para>
</listitem>
            <listitem><para><link linkend="__spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7">SpectraPoints</link> const  &amp; <link linkend="_class_spectra_co_1a3ba8c0e42ab3c3d3efa1f827b9465daf">findPeaks</link> (int const &amp;threshold, int const &amp;nb_bins_below_threshold, int const &amp;smooth)</para>

<para>The spectra must not have had background substraction yet. </para>
</listitem>
            <listitem><para>int <link linkend="_class_spectra_co_1a1a2f7e1b1c45f16cb77d531c90c5212b">firstBinWithValue</link> () const noexcept</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1a4d14e86e9dd8d42c0ce5a72a2f3b7dfc">get</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a9cbf03e7634f8a80d65aec65d3d9119c">get</link> () const</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a9e31bbca1885c3a48c66e7f8e2622f9a">get</link> (int const &amp;bin) const noexcept</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1ac5f6afc77e5fddc79afe224dc0a1dfec">getBin</link> (double const &amp;x) const</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1a85342e1258a9d8877fb60fa2dca6275f">getX</link> (double const &amp;bin)</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1a4a6080fd25cec92c1a6295e4d8398a44">integral</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1aad2d7fb657b00304906a0c5e3c9a3aed">integral</link> () const</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1a7986a8f7ea5491f7a69ad810e857894f">integralInRange</link> (double const &amp;value_min, double const &amp;value_max) noexcept</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1abf17675f290cad6e53ad51e59430a63c">integralInRangeBin</link> (int const &amp;bin_min, int const &amp;bin_max) noexcept</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a">interpolate</link> (double const &amp;bin) const noexcept</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1acbe779815b224c8102ec62af4403a7d9">inverse</link> ()</para>

<para>Inverses the spectra : negative values become positive and positive values become negative. </para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1ad6c387515e792a22195054cd6c174db5">lastBin</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a1b66482bf4e3ff7903bda481d6d67a8d">lastBin</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_spectra_co_1a66d66744d2d12b088005a826158e2946">lastBinWithValue</link> () const noexcept</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea">load</link> (TH1 *root_spectra)</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1aaeaea4ebc4fd51825acf90e66eb89ae4">maxX</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a244bef386237d633da441b377ca2a278">maxX</link> () const</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1a4e9df1dfede067a7a241e1209a01f4bc">meanInRange</link> (double const &amp;value_min, double const &amp;value_max) noexcept</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1a6c50f289318ed3a37218be1b2485a0aa">meanInRangeBin</link> (int const &amp;bin_min, int const &amp;bin_max) noexcept</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1abb97aec97436b5d4171015db6b47e6b4">minX</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1aed822c874938eb1f5953c6e1a412cf33">minX</link> () const</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1a79deb54e5d5e3d36f9294482fea3d08c">name</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a571209e16332182019598b86d9a5e234">name</link> () const</para>
</listitem>
            <listitem><para>auto <link linkend="_class_spectra_co_1a63e44855e3e049f64759cff74aa15a52">name</link> (std::string const &amp;name)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> <link linkend="_class_spectra_co_1a34ea7496185caf2178c8ba1c10876dd3">operator*</link> (double const &amp;<link linkend="_class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d">factor</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> &amp; <link linkend="_class_spectra_co_1a9c5ae4fa536ee968b112bdab670fa2d8">operator*=</link> (double const &amp;<link linkend="_class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d">factor</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> <link linkend="_class_spectra_co_1aa7114661992e4ae88e87cb1ccb82d6ed">operator+</link> (<link linkend="_class_spectra_co">SpectraCo</link> const &amp;other) const</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> <link linkend="_class_spectra_co_1a992b73363532d45debd7fd7befd21765">operator-</link> (<link linkend="_class_spectra_co">SpectraCo</link> const &amp;other) const</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> <link linkend="_class_spectra_co_1aa4225392a595ff8a0950ef67610096d0">operator/</link> (double const &amp;<link linkend="_class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d">factor</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> &amp; <link linkend="_class_spectra_co_1aae276b412dd31fc06933db96b65298fd">operator=</link> (<link linkend="_class_spectra_co">SpectraCo</link> const &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> &amp; <link linkend="_class_spectra_co_1ad094b13ab3d8e445b04edc68a5c12ec0">operator=</link> (TH1 *root_spectra)</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1a00b22f96c7d319af473e16e9f07efbfd">operator[]</link> (double const &amp;bin) const noexcept</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1aa32b538c1586e9f78af9ab28fed27efb">operator[]</link> (double const &amp;bin) noexcept</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1ae05d953f1aa96c7d7077ff6dda044afd">operator[]</link> (int const &amp;bin) const noexcept</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1a484fc9226bbbee3ed3b654c3aeea165b">operator[]</link> (int const &amp;bin) noexcept</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1a889fd42392232f574b687970fda7e311">peaks</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1ac96882f321f72ffe8757493da9b5b2fa">peaks</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a79c602e0c90555c37098d070863134f3">rebin</link> (int const &amp;<link linkend="_class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d">factor</link>, bool const &amp;rebin_derivatives=false)</para>

<para>TODO. </para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a085a0452438dbffc3452aed6733a9103">recalibrate</link> (<link linkend="_class_recalibration">Recalibration</link> const &amp;recal)</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1adbdfafcc8b0a95d520e491b0062b2e0b">removeBackground</link> (int const &amp;smooth, std::string const &amp;fit_options=&quot;&quot;) noexcept</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d">resizeBin</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp;new_size)</para>

<para>Resize allows one to select the number of bins. Affects only the maximum bin. </para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a0ba318153d548c02c9ab4b39465ea1b4">resizeX</link> (double const &amp;<link linkend="_class_spectra_co_1a244bef386237d633da441b377ca2a278">maxX</link>)</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1af27cbecc0fdfd5542e0186856bc4c4cf">resizeX</link> (double const &amp;<link linkend="_class_spectra_co_1aed822c874938eb1f5953c6e1a412cf33">minX</link>, double const &amp;<link linkend="_class_spectra_co_1a244bef386237d633da441b377ca2a278">maxX</link>)</para>

<para>Carefull, this resize leads to a copy of the data. </para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a4edb2ef585474bb8c1f728d0dc7731e2">setActualRange</link> ()</para>

<para>Remove the bins after the last bin with content (= detector&apos;s output max range) </para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1aaee0e2be91f5b3e3958892b8389a5003">setMaxX</link> (double const &amp;_max_x)</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a5347b79a6a914df04a1a99664fd5cc96">setMinX</link> (double const &amp;_min_x)</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1ac2141fbefadce3d8f82e5c7db09998ab">setRangeX</link> (double const &amp;_min_x, double const &amp;_max_x)</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1abb70561652a097439bbaa71fbebd70c4">size</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159">size</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1acc6c691f3d2e5f0769d00b9d6e1ffe24">SpectraCo</link> () noexcept=default</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1a46fdc41ee93d910d1e667c4715e8eb9e">SpectraCo</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp;<link linkend="_class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159">size</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1a264644c4da160d7d7eed1cbaaae5a77c">SpectraCo</link> (<link linkend="_class_spectra_co">SpectraCo</link> *other, <link linkend="_class_calibration">Calibration</link> const &amp;cal, <link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> const &amp;label)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1ac40ff3692cc98ac889886bbe16d0c337">SpectraCo</link> (<link linkend="_class_spectra_co">SpectraCo</link> *other, <link linkend="_class_recalibration">Recalibration</link> const &amp;recal)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1ad896a521e57469c1c02c47a4e7d7349b">SpectraCo</link> (<link linkend="_class_spectra_co">SpectraCo</link> *other, std::string <link linkend="_class_spectra_co_1a63e44855e3e049f64759cff74aa15a52">name</link>=&quot;&quot;, std::string <link linkend="_class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268">title</link>=&quot;&quot;)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1a488369423915a272c24b561553cea913">SpectraCo</link> (<link linkend="_class_spectra_co">SpectraCo</link> const &amp;other, <link linkend="_class_calibration">Calibration</link> const &amp;cal, <link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> const &amp;label)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1a3e4d1435fa3a80662a8c4442464988e1">SpectraCo</link> (<link linkend="_class_spectra_co">SpectraCo</link> const &amp;other, <link linkend="_class_recalibration">Recalibration</link> const &amp;recal)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1ac8127b3f1b1eaf9292400cf2efa7bbde">SpectraCo</link> (<link linkend="_class_spectra_co">SpectraCo</link> const &amp;other, std::string <link linkend="_class_spectra_co_1a63e44855e3e049f64759cff74aa15a52">name</link>=&quot;&quot;, std::string <link linkend="_class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268">title</link>=&quot;&quot;)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1ac7bfa00174710c92a077113a202ba2dd">SpectraCo</link> (std::nullptr_t) noexcept</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1aa2508fe72a91029cd85d9f6dbce5cd93">SpectraCo</link> (std::vector&lt; double &gt; const &amp;_data)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1a7d0e3629ec73c41156b8c7ca71f3705e">SpectraCo</link> (std::vector&lt; double &gt; const &amp;spectra, float const &amp;min_value=0, float const &amp;max_value=0, std::string <link linkend="_class_spectra_co_1a63e44855e3e049f64759cff74aa15a52">name</link>=&quot;&quot;, std::string <link linkend="_class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268">title</link>=&quot;&quot;)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1a7aa1ab216355e91774cbf364a7286043">SpectraCo</link> (std::vector&lt; float &gt; const &amp;spectra, float const &amp;min_value=0, float const &amp;max_value=0, std::string <link linkend="_class_spectra_co_1a63e44855e3e049f64759cff74aa15a52">name</link>=&quot;&quot;, std::string <link linkend="_class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268">title</link>=&quot;&quot;)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1a7cd88b33fa9b85c5bf2dcdd2e3d13dc2">SpectraCo</link> (TH1 *root_spectra, std::string <link linkend="_class_spectra_co_1a63e44855e3e049f64759cff74aa15a52">name</link>=&quot;&quot;, std::string <link linkend="_class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268">title</link>=&quot;&quot;)</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1aba424b38fe96dbeb3b7d69d3b10d1a21">title</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a2764c882d467992cc40a71c0e952363e">title</link> () const</para>
</listitem>
            <listitem><para>auto <link linkend="_class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268">title</link> (std::string const &amp;title)</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a6dc41ae065225471fadc69382077ceb8">write</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1aecdb9a51ee8bab5e5fbe0563161664f9">write</link> (TDirectory *directory)</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a56313f7f5ce661a5952d251e51ca3246">writeTH1D</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a3a8fdeb82862a8500d53634b5bd9acbc">writeTH1D</link> (TDirectory *directory)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1a213631f494d8361bfa9f4115266e9af7">~SpectraCo</link> () noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_spectra_co_1ac010001d3601d366b0573119a5d2be2a">calculateCoeff</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> * <link linkend="_class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef">m_derivative</link> = nullptr</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> * <link linkend="_class_spectra_co_1a332e26399e136100490dd879772fe797">m_derivative2</link> = nullptr</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac">m_factor</link> = 1</para>
</listitem>
            <listitem><para>int <link linkend="_class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7">m_integral</link> = 0</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1a80e56f3b23d5a7092dd3152f47bf3c47">m_intercept</link> = 0</para>
</listitem>
            <listitem><para>TH1 * <link linkend="_class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77">m_loaded_TH1</link> = nullptr</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5">m_max_x</link> = 0</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222">m_min_x</link> = 0</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154">m_name</link> = &quot;Unnamed&quot;</para>
</listitem>
            <listitem><para><link linkend="__spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7">SpectraPoints</link> <link linkend="_class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606">m_peaks</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1a9515b65f7b587af82030316811c1c0aa">m_rebin</link> = 1</para>
</listitem>
            <listitem><para>int <link linkend="_class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991">m_size</link> = 0</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1a67a019827e1107bc1fc2f28eb6d854f7">m_slope</link> = -1</para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4">m_spectra</link></para>
</listitem>
            <listitem><para>std::string <link linkend="_class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b">m_title</link> = &quot;Untitled&quot;</para>
</listitem>
            <listitem><para>int <link linkend="_class_spectra_co_1a5219f7157190c99448c3b14ea37fbac2">nb_histo_drawn</link> = 0</para>
</listitem>
            <listitem><para>std::vector&lt; TH1 * &gt; <link linkend="_class_spectra_co_1a7bb27d1fe53fe342a218040f28d647ba">root_spectra_pointers</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_spectra_co_1acc6c691f3d2e5f0769d00b9d6e1ffe24"/>    <section>
    <title>SpectraCo()<computeroutput>[1/13]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo ( )<computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a213631f494d8361bfa9f4115266e9af7"/>    <section>
    <title>~SpectraCo()</title>
<indexterm><primary>~SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>~SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::~SpectraCo ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para><para><link linkend="_todo_1_todo000007">Todo</link> </para></para>
    </section><anchor xml:id="_class_spectra_co_1ac7bfa00174710c92a077113a202ba2dd"/>    <section>
    <title>SpectraCo()<computeroutput>[2/13]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (std::nullptr_t )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a7aa1ab216355e91774cbf364a7286043"/>    <section>
    <title>SpectraCo()<computeroutput>[3/13]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (std::vector&lt; float &gt; const &amp; spectra, float const &amp; min_value = <computeroutput>0</computeroutput>
, float const &amp; max_value = <computeroutput>0</computeroutput>
, std::string name = <computeroutput>&quot;&quot;</computeroutput>
, std::string title = <computeroutput>&quot;&quot;</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a7aa1ab216355e91774cbf364a7286043_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a7d0e3629ec73c41156b8c7ca71f3705e"/>    <section>
    <title>SpectraCo()<computeroutput>[4/13]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (std::vector&lt; double &gt; const &amp; spectra, float const &amp; min_value = <computeroutput>0</computeroutput>
, float const &amp; max_value = <computeroutput>0</computeroutput>
, std::string name = <computeroutput>&quot;&quot;</computeroutput>
, std::string title = <computeroutput>&quot;&quot;</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a7d0e3629ec73c41156b8c7ca71f3705e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1ac8127b3f1b1eaf9292400cf2efa7bbde"/>    <section>
    <title>SpectraCo()<computeroutput>[5/13]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (<link linkend="_class_spectra_co">SpectraCo</link> const &amp; other, std::string name = <computeroutput>&quot;&quot;</computeroutput>
, std::string title = <computeroutput>&quot;&quot;</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ac8127b3f1b1eaf9292400cf2efa7bbde_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1ad896a521e57469c1c02c47a4e7d7349b"/>    <section>
    <title>SpectraCo()<computeroutput>[6/13]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (<link linkend="_class_spectra_co">SpectraCo</link> * other, std::string name = <computeroutput>&quot;&quot;</computeroutput>
, std::string title = <computeroutput>&quot;&quot;</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ad896a521e57469c1c02c47a4e7d7349b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a3e4d1435fa3a80662a8c4442464988e1"/>    <section>
    <title>SpectraCo()<computeroutput>[7/13]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (<link linkend="_class_spectra_co">SpectraCo</link> const &amp; other, <link linkend="_class_recalibration">Recalibration</link> const &amp; recal)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a3e4d1435fa3a80662a8c4442464988e1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1ac40ff3692cc98ac889886bbe16d0c337"/>    <section>
    <title>SpectraCo()<computeroutput>[8/13]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (<link linkend="_class_spectra_co">SpectraCo</link> * other, <link linkend="_class_recalibration">Recalibration</link> const &amp; recal)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ac40ff3692cc98ac889886bbe16d0c337_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a488369423915a272c24b561553cea913"/>    <section>
    <title>SpectraCo()<computeroutput>[9/13]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (<link linkend="_class_spectra_co">SpectraCo</link> const &amp; other, <link linkend="_class_calibration">Calibration</link> const &amp; cal, <link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> const &amp; label)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a488369423915a272c24b561553cea913_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a264644c4da160d7d7eed1cbaaae5a77c"/>    <section>
    <title>SpectraCo()<computeroutput>[10/13]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (<link linkend="_class_spectra_co">SpectraCo</link> * other, <link linkend="_class_calibration">Calibration</link> const &amp; cal, <link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> const &amp; label)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a264644c4da160d7d7eed1cbaaae5a77c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1aa2508fe72a91029cd85d9f6dbce5cd93"/>    <section>
    <title>SpectraCo()<computeroutput>[11/13]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (std::vector&lt; double &gt; const &amp; _data)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_aa2508fe72a91029cd85d9f6dbce5cd93_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a46fdc41ee93d910d1e667c4715e8eb9e"/>    <section>
    <title>SpectraCo()<computeroutput>[12/13]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp; size)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a46fdc41ee93d910d1e667c4715e8eb9e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a7cd88b33fa9b85c5bf2dcdd2e3d13dc2"/>    <section>
    <title>SpectraCo()<computeroutput>[13/13]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (TH1 * root_spectra, std::string name = <computeroutput>&quot;&quot;</computeroutput>
, std::string title = <computeroutput>&quot;&quot;</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a7cd88b33fa9b85c5bf2dcdd2e3d13dc2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_spectra_co_1a4bb4afaf9dd3881b73e8c6e740712a30"/>    <section>
    <title>back()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>back</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>back</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::back ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a626908f0a27928d07d980cfcec3b8454"/>    <section>
    <title>back()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>back</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>back</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::back ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ac010001d3601d366b0573119a5d2be2a"/>    <section>
    <title>calculateCoeff()</title>
<indexterm><primary>calculateCoeff</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>calculateCoeff</secondary></indexterm>
<para><computeroutput>void SpectraCo::calculateCoeff ( )<computeroutput>[private]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ac010001d3601d366b0573119a5d2be2a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1af202a60db2de7b7a723f9863c9616dca"/>    <section>
    <title>calibrate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>calibrate</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>calibrate</secondary></indexterm>
<para><computeroutput>void SpectraCo::calibrate (<link linkend="_class_calibration">Calibration</link> const &amp; calib, <link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> const &amp; label)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_af202a60db2de7b7a723f9863c9616dca_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_af202a60db2de7b7a723f9863c9616dca_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1af580e2c735a90aff03e6c1c159ed9b17"/>    <section>
    <title>calibrate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>calibrate</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>calibrate</secondary></indexterm>
<para><computeroutput>void SpectraCo::calibrate (std::vector&lt; double &gt; const &amp; coeffs)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_af580e2c735a90aff03e6c1c159ed9b17_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1af74c78334a7be1cc421779f9e4b30a0b"/>    <section>
    <title>calibrateAndScale()</title>
<indexterm><primary>calibrateAndScale</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>calibrateAndScale</secondary></indexterm>
<para><computeroutput>void SpectraCo::calibrateAndScale (std::vector&lt; double &gt; const &amp; coeffs)</computeroutput></para><para>

<para>Calibrates using the coeffs[0:n-1] coefficient then scale it using the coeffs.back() coefficient (spectra*=coeffs.back()) </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>coeffs</entry>
                                <entry>
<para>The last coefficient is used to scale, the other firsts to calibrate the x axis </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_af74c78334a7be1cc421779f9e4b30a0b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_af74c78334a7be1cc421779f9e4b30a0b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6"/>    <section>
    <title>calibrateX()</title>
<indexterm><primary>calibrateX</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>calibrateX</secondary></indexterm>
<para><computeroutput>void SpectraCo::calibrateX (double const &amp; intercept, double const &amp; slope = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>First order calibration. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_afdfa3e10eda4e3513674dddcd32ae7e6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_afdfa3e10eda4e3513674dddcd32ae7e6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1aecb46bfbd2968e90d0ffd6d5848ca8b4"/>    <section>
    <title>chi2()</title>
<indexterm><primary>chi2</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>chi2</secondary></indexterm>
<para><computeroutput>double SpectraCo::chi2 (<link linkend="_class_spectra_co">SpectraCo</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Calculates the chi2 between this spectra and another one. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_aecb46bfbd2968e90d0ffd6d5848ca8b4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e"/>    <section>
    <title>createTH1D()</title>
<indexterm><primary>createTH1D</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>createTH1D</secondary></indexterm>
<para><computeroutput>TH1D * SpectraCo::createTH1D (std::string newName = <computeroutput>&quot;&quot;</computeroutput>
, std::string newTitle = <computeroutput>&quot;&quot;</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_aa12a2fe0635e8b3e73eb47b09810f75e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_aa12a2fe0635e8b3e73eb47b09810f75e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f"/>    <section>
    <title>createTH1F()</title>
<indexterm><primary>createTH1F</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>createTH1F</secondary></indexterm>
<para><computeroutput>TH1F * SpectraCo::createTH1F (std::string newName = <computeroutput>&quot;&quot;</computeroutput>
, std::string newTitle = <computeroutput>&quot;&quot;</computeroutput>
)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ab09637ebd15e54488eb34b5d7470e83f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a85cee2f57fbae02a28329584da5df1b5"/>    <section>
    <title>data()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>data</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>data</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::data ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19"/>    <section>
    <title>data()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>data</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>data</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::data ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_aa2db7539ef66b96a3a4ad94fe4e0ce19_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a649cc895e9813d1a82c9057022228266"/>    <section>
    <title>deleteDerivative()</title>
<indexterm><primary>deleteDerivative</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>deleteDerivative</secondary></indexterm>
<para><computeroutput>void SpectraCo::deleteDerivative ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a7b935499bbdce4b84a0f640b6518765c"/>    <section>
    <title>derivate()</title>
<indexterm><primary>derivate</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>derivate</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link> * SpectraCo::derivate (int smooth = <computeroutput>1</computeroutput>
)<computeroutput>[noexcept]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a9be3e04ddc73df4d11336ec806313094"/>    <section>
    <title>derivate2()</title>
<indexterm><primary>derivate2</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>derivate2</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link> * SpectraCo::derivate2 (int smooth = <computeroutput>1</computeroutput>
)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a9be3e04ddc73df4d11336ec806313094_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1aa9af077c307bb5e33e271bf8cbaa1741"/>    <section>
    <title>derivative()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>derivative</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>derivative</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link>* SpectraCo::derivative ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a2d1839156a996f255b74024e12257bdb"/>    <section>
    <title>derivative()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>derivative</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>derivative</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link> * SpectraCo::derivative (std::string const &amp; name)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a2d1839156a996f255b74024e12257bdb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a5db4e774152522eac0e1c58af984fc28"/>    <section>
    <title>derivative2()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>derivative2</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>derivative2</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link>* SpectraCo::derivative2 ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a213a9aea476c88a52c8c32a4eb775190"/>    <section>
    <title>derivative2()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>derivative2</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>derivative2</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link> * SpectraCo::derivative2 (std::string const &amp; name)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a213a9aea476c88a52c8c32a4eb775190_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a6106089e9e4295cc71f3d45f781ac2c8"/>    <section>
    <title>derivative2Data()</title>
<indexterm><primary>derivative2Data</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>derivative2Data</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; const&amp; SpectraCo::derivative2Data ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para><caution><title>Attention</title>

<para>One has to check that the second derivative has already been calculated; </para>
</caution>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a6106089e9e4295cc71f3d45f781ac2c8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a5c0d013692342e790580839787143f36"/>    <section>
    <title>derivativeData()</title>
<indexterm><primary>derivativeData</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>derivativeData</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; const&amp; SpectraCo::derivativeData ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para><caution><title>Attention</title>

<para>One has to check that the derivative has already been calculated; </para>
</caution>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a5c0d013692342e790580839787143f36_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a9f6fa49281669395c0e10f833f8e914e"/>    <section>
    <title>draw()</title>
<indexterm><primary>draw</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>draw</secondary></indexterm>
<para><computeroutput>void SpectraCo::draw (const char * param = <computeroutput>&quot;&quot;</computeroutput>
)</computeroutput></para><para>

<para>Creates a new TH1F to be drawn. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a9f6fa49281669395c0e10f833f8e914e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a30feae642d436e24ff7397891030d859"/>    <section>
    <title>factor()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>factor</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>factor</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::factor ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d"/>    <section>
    <title>factor()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>factor</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>factor</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::factor ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_acc6765bf7da4178c376b46d8e5e6393d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a223f3a9be7c661c1ef700d8bfda1106f"/>    <section>
    <title>fill()</title>
<indexterm><primary>fill</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>fill</secondary></indexterm>
<para><computeroutput>void SpectraCo::fill (double const &amp; X)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Fills a bin of the spectra based on the X value. </para>
</para>

<para><caution><title>Attention</title>

<para>Has not been tested </para>
</caution>
<para><link linkend="_todo_1_todo000001">Todo</link> 
<para>test it </para>
</para></para>
    </section><anchor xml:id="_class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137"/>    <section>
    <title>findPeaks()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>findPeaks</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>findPeaks</secondary></indexterm>
<para><computeroutput><link linkend="__spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7">SpectraPoints</link> const  &amp; SpectraCo::findPeaks (int const &amp; threshold, int const &amp; nb_bins_below_threshold)</computeroutput></para><para>

<para>Uses the second derivative spectra to get the peaks. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>threshold</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                            <row>
                                <entry>nb_bins_below_threshold</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>SpectraPoints: a vector&lt;pair&lt;int, double&gt;&gt; with the keys the bin and the values the height of the second derivative peak </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_adfe0baad93402b4ae44a6c8ea14bc137_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_adfe0baad93402b4ae44a6c8ea14bc137_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a3ba8c0e42ab3c3d3efa1f827b9465daf"/>    <section>
    <title>findPeaks()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>findPeaks</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>findPeaks</secondary></indexterm>
<para><computeroutput><link linkend="__spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7">SpectraPoints</link> const  &amp; SpectraCo::findPeaks (int const &amp; threshold, int const &amp; nb_bins_below_threshold, int const &amp; smooth)</computeroutput></para><para>

<para>The spectra must not have had background substraction yet. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a3ba8c0e42ab3c3d3efa1f827b9465daf_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a1a2f7e1b1c45f16cb77d531c90c5212b"/>    <section>
    <title>firstBinWithValue()</title>
<indexterm><primary>firstBinWithValue</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>firstBinWithValue</secondary></indexterm>
<para><computeroutput>int SpectraCo::firstBinWithValue ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a4d14e86e9dd8d42c0ce5a72a2f3b7dfc"/>    <section>
    <title>get()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>get</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>get</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::get ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a9cbf03e7634f8a80d65aec65d3d9119c"/>    <section>
    <title>get()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>get</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>get</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::get ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a9e31bbca1885c3a48c66e7f8e2622f9a"/>    <section>
    <title>get()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>get</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>get</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::get (int const &amp; bin) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ac5f6afc77e5fddc79afe224dc0a1dfec"/>    <section>
    <title>getBin()</title>
<indexterm><primary>getBin</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>getBin</secondary></indexterm>
<para><computeroutput>double SpectraCo::getBin (double const &amp; x) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ac5f6afc77e5fddc79afe224dc0a1dfec_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ac5f6afc77e5fddc79afe224dc0a1dfec_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a85342e1258a9d8877fb60fa2dca6275f"/>    <section>
    <title>getX()</title>
<indexterm><primary>getX</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>getX</secondary></indexterm>
<para><computeroutput>double SpectraCo::getX (double const &amp; bin)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a85342e1258a9d8877fb60fa2dca6275f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a4a6080fd25cec92c1a6295e4d8398a44"/>    <section>
    <title>integral()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>integral</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>integral</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::integral ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1aad2d7fb657b00304906a0c5e3c9a3aed"/>    <section>
    <title>integral()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>integral</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>integral</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::integral ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_aad2d7fb657b00304906a0c5e3c9a3aed_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a7986a8f7ea5491f7a69ad810e857894f"/>    <section>
    <title>integralInRange()</title>
<indexterm><primary>integralInRange</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>integralInRange</secondary></indexterm>
<para><computeroutput>double SpectraCo::integralInRange (double const &amp; value_min, double const &amp; value_max)<computeroutput>[noexcept]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1abf17675f290cad6e53ad51e59430a63c"/>    <section>
    <title>integralInRangeBin()</title>
<indexterm><primary>integralInRangeBin</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>integralInRangeBin</secondary></indexterm>
<para><computeroutput>double SpectraCo::integralInRangeBin (int const &amp; bin_min, int const &amp; bin_max)<computeroutput>[noexcept]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a"/>    <section>
    <title>interpolate()</title>
<indexterm><primary>interpolate</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>interpolate</secondary></indexterm>
<para><computeroutput>double SpectraCo::interpolate (double const &amp; bin) const<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ab50cbac4f854c7bf6d807fe476b1e92a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1acbe779815b224c8102ec62af4403a7d9"/>    <section>
    <title>inverse()</title>
<indexterm><primary>inverse</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>inverse</secondary></indexterm>
<para><computeroutput>void SpectraCo::inverse ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inverses the spectra : negative values become positive and positive values become negative. </para>
</para>

<para>Do not touch the derivatives </para>
    </section><anchor xml:id="_class_spectra_co_1ad6c387515e792a22195054cd6c174db5"/>    <section>
    <title>lastBin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>lastBin</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>lastBin</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::lastBin ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a1b66482bf4e3ff7903bda481d6d67a8d"/>    <section>
    <title>lastBin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>lastBin</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>lastBin</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::lastBin ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a66d66744d2d12b088005a826158e2946"/>    <section>
    <title>lastBinWithValue()</title>
<indexterm><primary>lastBinWithValue</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>lastBinWithValue</secondary></indexterm>
<para><computeroutput>int SpectraCo::lastBinWithValue ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a66d66744d2d12b088005a826158e2946_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea"/>    <section>
    <title>load()</title>
<indexterm><primary>load</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>load</secondary></indexterm>
<para><computeroutput>void SpectraCo::load (TH1 * root_spectra)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ad357dfc02fbb9ad6fc308ecf07f07fea_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ad357dfc02fbb9ad6fc308ecf07f07fea_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1aaeaea4ebc4fd51825acf90e66eb89ae4"/>    <section>
    <title>maxX()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>maxX</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>maxX</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::maxX ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a244bef386237d633da441b377ca2a278"/>    <section>
    <title>maxX()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>maxX</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>maxX</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::maxX ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a244bef386237d633da441b377ca2a278_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a4e9df1dfede067a7a241e1209a01f4bc"/>    <section>
    <title>meanInRange()</title>
<indexterm><primary>meanInRange</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>meanInRange</secondary></indexterm>
<para><computeroutput>double SpectraCo::meanInRange (double const &amp; value_min, double const &amp; value_max)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a4e9df1dfede067a7a241e1209a01f4bc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a6c50f289318ed3a37218be1b2485a0aa"/>    <section>
    <title>meanInRangeBin()</title>
<indexterm><primary>meanInRangeBin</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>meanInRangeBin</secondary></indexterm>
<para><computeroutput>double SpectraCo::meanInRangeBin (int const &amp; bin_min, int const &amp; bin_max)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a6c50f289318ed3a37218be1b2485a0aa_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1abb97aec97436b5d4171015db6b47e6b4"/>    <section>
    <title>minX()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>minX</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>minX</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::minX ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1aed822c874938eb1f5953c6e1a412cf33"/>    <section>
    <title>minX()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>minX</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>minX</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::minX ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_aed822c874938eb1f5953c6e1a412cf33_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a79deb54e5d5e3d36f9294482fea3d08c"/>    <section>
    <title>name()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>name</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>name</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::name ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a571209e16332182019598b86d9a5e234"/>    <section>
    <title>name()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>name</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>name</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::name ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a571209e16332182019598b86d9a5e234_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a63e44855e3e049f64759cff74aa15a52"/>    <section>
    <title>name()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>name</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>name</secondary></indexterm>
<para><computeroutput>auto SpectraCo::name (std::string const &amp; name)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a63e44855e3e049f64759cff74aa15a52_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a63e44855e3e049f64759cff74aa15a52_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a34ea7496185caf2178c8ba1c10876dd3"/>    <section>
    <title>operator*()</title>
<indexterm><primary>operator*</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link> SpectraCo::operator* (double const &amp; factor)</computeroutput></para>
<para><para><link linkend="_todo_1_todo000003">Todo</link> 
<para>can be optimized </para>
</para></para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a34ea7496185caf2178c8ba1c10876dd3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a9c5ae4fa536ee968b112bdab670fa2d8"/>    <section>
    <title>operator*=()</title>
<indexterm><primary>operator*=</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator*=</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link> &amp; SpectraCo::operator*= (double const &amp; factor)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a9c5ae4fa536ee968b112bdab670fa2d8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1aa7114661992e4ae88e87cb1ccb82d6ed"/>    <section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link> SpectraCo::operator+ (<link linkend="_class_spectra_co">SpectraCo</link> const &amp; other) const</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_aa7114661992e4ae88e87cb1ccb82d6ed_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a992b73363532d45debd7fd7befd21765"/>    <section>
    <title>operator-()</title>
<indexterm><primary>operator-</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link> SpectraCo::operator- (<link linkend="_class_spectra_co">SpectraCo</link> const &amp; other) const</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a992b73363532d45debd7fd7befd21765_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1aa4225392a595ff8a0950ef67610096d0"/>    <section>
    <title>operator/()</title>
<indexterm><primary>operator/</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator/</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link> SpectraCo::operator/ (double const &amp; factor)</computeroutput></para>
<para><para><link linkend="_todo_1_todo000004">Todo</link> 
<para>can be optimized </para>
</para></para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_aa4225392a595ff8a0950ef67610096d0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1aae276b412dd31fc06933db96b65298fd"/>    <section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link>&amp; SpectraCo::operator= (<link linkend="_class_spectra_co">SpectraCo</link> const &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_aae276b412dd31fc06933db96b65298fd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1ad094b13ab3d8e445b04edc68a5c12ec0"/>    <section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link>&amp; SpectraCo::operator= (TH1 * root_spectra)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ad094b13ab3d8e445b04edc68a5c12ec0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a00b22f96c7d319af473e16e9f07efbfd"/>    <section>
    <title>operator[]()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput>double SpectraCo::operator[] (double const &amp; bin) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a00b22f96c7d319af473e16e9f07efbfd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1aa32b538c1586e9f78af9ab28fed27efb"/>    <section>
    <title>operator[]()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput>double SpectraCo::operator[] (double const &amp; bin)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_aa32b538c1586e9f78af9ab28fed27efb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1ae05d953f1aa96c7d7077ff6dda044afd"/>    <section>
    <title>operator[]()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::operator[] (int const &amp; bin) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a484fc9226bbbee3ed3b654c3aeea165b"/>    <section>
    <title>operator[]()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::operator[] (int const &amp; bin)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a889fd42392232f574b687970fda7e311"/>    <section>
    <title>peaks()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>peaks</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>peaks</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::peaks ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ac96882f321f72ffe8757493da9b5b2fa"/>    <section>
    <title>peaks()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>peaks</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>peaks</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::peaks ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ac96882f321f72ffe8757493da9b5b2fa_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a79c602e0c90555c37098d070863134f3"/>    <section>
    <title>rebin()</title>
<indexterm><primary>rebin</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>rebin</secondary></indexterm>
<para><computeroutput>void SpectraCo::rebin (int const &amp; factor, bool const &amp; rebin_derivatives = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>TODO. </para>
</para>

<para>Uses the TH1::Rebin method;.</para>

<para><para><link linkend="_todo_1_todo000002">Todo</link> 
<para>create a custom method without the use of ROOT (attempt commented at the bottom of the file) </para>
</para></para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a79c602e0c90555c37098d070863134f3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a79c602e0c90555c37098d070863134f3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a085a0452438dbffc3452aed6733a9103"/>    <section>
    <title>recalibrate()</title>
<indexterm><primary>recalibrate</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>recalibrate</secondary></indexterm>
<para><computeroutput>void SpectraCo::recalibrate (<link linkend="_class_recalibration">Recalibration</link> const &amp; recal)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a085a0452438dbffc3452aed6733a9103_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a085a0452438dbffc3452aed6733a9103_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1adbdfafcc8b0a95d520e491b0062b2e0b"/>    <section>
    <title>removeBackground()</title>
<indexterm><primary>removeBackground</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>removeBackground</secondary></indexterm>
<para><computeroutput>void SpectraCo::removeBackground (int const &amp; smooth, std::string const &amp; fit_options = <computeroutput>&quot;&quot;</computeroutput>
)<computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para><para><link linkend="_todo_1_todo000005">Todo</link> 
<para>Try to adapt not to have to use root for this function</para>
</para></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>smooth</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                            <row>
                                <entry>fit_options</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_adbdfafcc8b0a95d520e491b0062b2e0b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_adbdfafcc8b0a95d520e491b0062b2e0b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d"/>    <section>
    <title>resizeBin()</title>
<indexterm><primary>resizeBin</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>resizeBin</secondary></indexterm>
<para><computeroutput>void SpectraCo::resizeBin (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp; new_size)</computeroutput></para><para>

<para>Resize allows one to select the number of bins. Affects only the maximum bin. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ab733430ea1ac8bafd68b6709f19d1d0d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ab733430ea1ac8bafd68b6709f19d1d0d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a0ba318153d548c02c9ab4b39465ea1b4"/>    <section>
    <title>resizeX()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>resizeX</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>resizeX</secondary></indexterm>
<para><computeroutput>void SpectraCo::resizeX (double const &amp; maxX)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a0ba318153d548c02c9ab4b39465ea1b4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1af27cbecc0fdfd5542e0186856bc4c4cf"/>    <section>
    <title>resizeX()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>resizeX</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>resizeX</secondary></indexterm>
<para><computeroutput>void SpectraCo::resizeX (double const &amp; minX, double const &amp; maxX)</computeroutput></para><para>

<para>Carefull, this resize leads to a copy of the data. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>minX</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                            <row>
                                <entry>maxX</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_af27cbecc0fdfd5542e0186856bc4c4cf_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a4edb2ef585474bb8c1f728d0dc7731e2"/>    <section>
    <title>setActualRange()</title>
<indexterm><primary>setActualRange</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>setActualRange</secondary></indexterm>
<para><computeroutput>void SpectraCo::setActualRange ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Remove the bins after the last bin with content (= detector&apos;s output max range) </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a4edb2ef585474bb8c1f728d0dc7731e2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1aaee0e2be91f5b3e3958892b8389a5003"/>    <section>
    <title>setMaxX()</title>
<indexterm><primary>setMaxX</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>setMaxX</secondary></indexterm>
<para><computeroutput>void SpectraCo::setMaxX (double const &amp; _max_x)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_aaee0e2be91f5b3e3958892b8389a5003_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a5347b79a6a914df04a1a99664fd5cc96"/>    <section>
    <title>setMinX()</title>
<indexterm><primary>setMinX</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>setMinX</secondary></indexterm>
<para><computeroutput>void SpectraCo::setMinX (double const &amp; _min_x)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a5347b79a6a914df04a1a99664fd5cc96_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1ac2141fbefadce3d8f82e5c7db09998ab"/>    <section>
    <title>setRangeX()</title>
<indexterm><primary>setRangeX</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>setRangeX</secondary></indexterm>
<para><computeroutput>void SpectraCo::setRangeX (double const &amp; _min_x, double const &amp; _max_x)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ac2141fbefadce3d8f82e5c7db09998ab_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1abb70561652a097439bbaa71fbebd70c4"/>    <section>
    <title>size()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>size</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>size</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::size ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159"/>    <section>
    <title>size()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>size</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>size</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_af819f84c4dfd2a2bf9ee87809dec1159_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1aba424b38fe96dbeb3b7d69d3b10d1a21"/>    <section>
    <title>title()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>title</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>title</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::title ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a2764c882d467992cc40a71c0e952363e"/>    <section>
    <title>title()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>title</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>title</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::title ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a2764c882d467992cc40a71c0e952363e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268"/>    <section>
    <title>title()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>title</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>title</secondary></indexterm>
<para><computeroutput>auto SpectraCo::title (std::string const &amp; title)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a723f0ea2cd8230e4b5e94b8d07127268_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a723f0ea2cd8230e4b5e94b8d07127268_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a6dc41ae065225471fadc69382077ceb8"/>    <section>
    <title>write()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>write</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>write</secondary></indexterm>
<para><computeroutput>void SpectraCo::write ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a6dc41ae065225471fadc69382077ceb8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1aecdb9a51ee8bab5e5fbe0563161664f9"/>    <section>
    <title>write()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>write</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>write</secondary></indexterm>
<para><computeroutput>void SpectraCo::write (TDirectory * directory)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_aecdb9a51ee8bab5e5fbe0563161664f9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a56313f7f5ce661a5952d251e51ca3246"/>    <section>
    <title>writeTH1D()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>writeTH1D</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>writeTH1D</secondary></indexterm>
<para><computeroutput>void SpectraCo::writeTH1D ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a56313f7f5ce661a5952d251e51ca3246_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a3a8fdeb82862a8500d53634b5bd9acbc"/>    <section>
    <title>writeTH1D()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>writeTH1D</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>writeTH1D</secondary></indexterm>
<para><computeroutput>void SpectraCo::writeTH1D (TDirectory * directory)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a3a8fdeb82862a8500d53634b5bd9acbc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef"/>    <section>
    <title>m_derivative</title>
<indexterm><primary>m_derivative</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_derivative</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link>* SpectraCo::m_derivative = nullptr<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a332e26399e136100490dd879772fe797"/>    <section>
    <title>m_derivative2</title>
<indexterm><primary>m_derivative2</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_derivative2</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link>* SpectraCo::m_derivative2 = nullptr<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac"/>    <section>
    <title>m_factor</title>
<indexterm><primary>m_factor</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_factor</secondary></indexterm>
<para><computeroutput>double SpectraCo::m_factor = 1<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7"/>    <section>
    <title>m_integral</title>
<indexterm><primary>m_integral</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_integral</secondary></indexterm>
<para><computeroutput>int SpectraCo::m_integral = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a80e56f3b23d5a7092dd3152f47bf3c47"/>    <section>
    <title>m_intercept</title>
<indexterm><primary>m_intercept</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_intercept</secondary></indexterm>
<para><computeroutput>double SpectraCo::m_intercept = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77"/>    <section>
    <title>m_loaded_TH1</title>
<indexterm><primary>m_loaded_TH1</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_loaded_TH1</secondary></indexterm>
<para><computeroutput>TH1* SpectraCo::m_loaded_TH1 = nullptr<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5"/>    <section>
    <title>m_max_x</title>
<indexterm><primary>m_max_x</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_max_x</secondary></indexterm>
<para><computeroutput>double SpectraCo::m_max_x = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222"/>    <section>
    <title>m_min_x</title>
<indexterm><primary>m_min_x</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_min_x</secondary></indexterm>
<para><computeroutput>double SpectraCo::m_min_x = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154"/>    <section>
    <title>m_name</title>
<indexterm><primary>m_name</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_name</secondary></indexterm>
<para><computeroutput>std::string SpectraCo::m_name = &quot;Unnamed&quot;<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606"/>    <section>
    <title>m_peaks</title>
<indexterm><primary>m_peaks</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_peaks</secondary></indexterm>
<para><computeroutput><link linkend="__spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7">SpectraPoints</link> SpectraCo::m_peaks<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a9515b65f7b587af82030316811c1c0aa"/>    <section>
    <title>m_rebin</title>
<indexterm><primary>m_rebin</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_rebin</secondary></indexterm>
<para><computeroutput>double SpectraCo::m_rebin = 1<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991"/>    <section>
    <title>m_size</title>
<indexterm><primary>m_size</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_size</secondary></indexterm>
<para><computeroutput>int SpectraCo::m_size = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a67a019827e1107bc1fc2f28eb6d854f7"/>    <section>
    <title>m_slope</title>
<indexterm><primary>m_slope</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_slope</secondary></indexterm>
<para><computeroutput>double SpectraCo::m_slope = -1<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4"/>    <section>
    <title>m_spectra</title>
<indexterm><primary>m_spectra</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_spectra</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; SpectraCo::m_spectra<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b"/>    <section>
    <title>m_title</title>
<indexterm><primary>m_title</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_title</secondary></indexterm>
<para><computeroutput>std::string SpectraCo::m_title = &quot;Untitled&quot;<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a5219f7157190c99448c3b14ea37fbac2"/>    <section>
    <title>nb_histo_drawn</title>
<indexterm><primary>nb_histo_drawn</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>nb_histo_drawn</secondary></indexterm>
<para><computeroutput>int SpectraCo::nb_histo_drawn = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a7bb27d1fe53fe342a218040f28d647ba"/>    <section>
    <title>root_spectra_pointers</title>
<indexterm><primary>root_spectra_pointers</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>root_spectra_pointers</secondary></indexterm>
<para><computeroutput>std::vector&lt;TH1*&gt; SpectraCo::root_spectra_pointers<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
lib/Analyse/<link linkend="__spectra_co_8hpp">SpectraCo.hpp</link></section>
</section>
