<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_spectra_co" xml:lang="en-US">
<title>SpectraCo Class Reference</title>
<indexterm><primary>SpectraCo</primary></indexterm>
<para>
<computeroutput>#include &lt;SpectraAlignator.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a626908f0a27928d07d980cfcec3b8454">back</link> () const</para>
</listitem>
            <listitem><para>TH1D * <link linkend="_class_spectra_co_1afa082bf0e51974bc36aa4146e49f7b67">createTH1D</link> (std::string newName=&quot;&quot;, std::string newTitle=&quot;&quot;)</para>
</listitem>
            <listitem><para>TH1F * <link linkend="_class_spectra_co_1a108392b2f02481c7e779c1d7b57a49ce">createTH1F</link> (std::string newName=&quot;&quot;, std::string newTitle=&quot;&quot;)</para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; const  &amp; <link linkend="_class_spectra_co_1a856d2c283dcce4570a7610e0ee88297a">derivate</link> (int const &amp;smooth=1)</para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; const  &amp; <link linkend="_class_spectra_co_1acae7e2189022b271400874d523ccbf30">derivate2</link> (int const &amp;smooth=1)</para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; const  &amp; <link linkend="_class_spectra_co_1ab5b718f73fbb499af3b81c52d31a734a">derivative</link> ()</para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; const  &amp; <link linkend="_class_spectra_co_1a047126db866b95f6cc6c8bd92db37588">derivative2</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a0a11253e22b5d0d3e265685f6f54a916">Draw</link> (const char *param=&quot;&quot;)</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1a4d14e86e9dd8d42c0ce5a72a2f3b7dfc">get</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a9cbf03e7634f8a80d65aec65d3d9119c">get</link> () const</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a117a00a1dba583c4b3171be6a3854832">get</link> (int const &amp;bin) const</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1aad2d7fb657b00304906a0c5e3c9a3aed">integral</link> () const</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1a4c094686833d7c19460df10ae16c34ba">interpolate</link> (double const &amp;bin) const</para>

<para>wrapper around operator[] </para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a1b66482bf4e3ff7903bda481d6d67a8d">lastBin</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea">load</link> (TH1 *root_spectra)</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1af5ec8bba0e514f659750d5ccde3e40a4">maxValue</link> () const</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a3c8d8bf91f0b24d1fe73e9a1392c7c7c">minValue</link> () const</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a571209e16332182019598b86d9a5e234">name</link> () const</para>
</listitem>
            <listitem><para>auto <link linkend="_class_spectra_co_1a63e44855e3e049f64759cff74aa15a52">name</link> (std::string const &amp;name)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> <link linkend="_class_spectra_co_1ad2f1bf0e5e8ac584e0aac00e753e8395">operator+</link> (<link linkend="_class_spectra_co">SpectraCo</link> const &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> <link linkend="_class_spectra_co_1af251452bf4de93adc2ddc7b7ae594415">operator-</link> (<link linkend="_class_spectra_co">SpectraCo</link> const &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co">SpectraCo</link> &amp; <link linkend="_class_spectra_co_1ad094b13ab3d8e445b04edc68a5c12ec0">operator=</link> (TH1 *root_spectra)</para>
</listitem>
            <listitem><para>double <link linkend="_class_spectra_co_1a885e4ddea8b0bbeb5bace4fe2f8123f9">operator[]</link> (double const &amp;bin) const</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_spectra_co_1ae49c5b411286f40051406ad83824217d">operator[]</link> (int const &amp;bin)</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1aaa6bb97ab64f7a60d0afcf62aaabeb65">operator[]</link> (int const &amp;bin) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a085a0452438dbffc3452aed6733a9103">recalibrate</link> (<link linkend="_class_recalibration">Recalibration</link> const &amp;recal)</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1a24e38db30865e8a8e3f341fa958fe125">setMaxValue</link> (double const &amp;_max_value)</para>
</listitem>
            <listitem><para>void <link linkend="_class_spectra_co_1acaf5d71eb3c562fb0f99a67a6740c6d6">setMinValue</link> (double const &amp;_min_value)</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159">size</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1a570ba99fb9ea9f066b85089222d08fd7">SpectraCo</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1ac8b2232b16c1ef5379b614aff60d8538">SpectraCo</link> (<link linkend="_class_spectra_co">SpectraCo</link> const &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1a3e4d1435fa3a80662a8c4442464988e1">SpectraCo</link> (<link linkend="_class_spectra_co">SpectraCo</link> const &amp;other, <link linkend="_class_recalibration">Recalibration</link> const &amp;recal)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1a06daa646799145f445d02f3d2c193d52">SpectraCo</link> (std::vector&lt; double &gt; const &amp;data)</para>
</listitem>
            <listitem><para><link linkend="_class_spectra_co_1a5b36618b661bac6d8d8c6cfb809eeb74">SpectraCo</link> (TH1 *root_spectra)</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_spectra_co_1a2764c882d467992cc40a71c0e952363e">title</link> () const</para>
</listitem>
            <listitem><para>auto <link linkend="_class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268">title</link> (std::string const &amp;title)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_spectra_co_1abb9f6f024b15f071563ebcaa4dcd5720">m_derivative</link></para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_spectra_co_1ad72044a11386a8d712d0b2620e111cf2">m_derivative2</link></para>
</listitem>
            <listitem><para>int <link linkend="_class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7">m_integral</link> = 0</para>
</listitem>
            <listitem><para>int <link linkend="_class_spectra_co_1a84d2c65395a0f25fd84d6c5019e9d149">m_max_value</link> = 0</para>
</listitem>
            <listitem><para>int <link linkend="_class_spectra_co_1a027efc7bfb6426b5d3f90813e182885e">m_min_value</link> = 0</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154">m_name</link> = &quot;Unnamed&quot;</para>
</listitem>
            <listitem><para>int <link linkend="_class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991">m_size</link> = -1</para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4">m_spectra</link></para>
</listitem>
            <listitem><para>std::string <link linkend="_class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b">m_title</link> = &quot;Untitled&quot;</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_spectra_co_1a570ba99fb9ea9f066b85089222d08fd7"/>    <section>
    <title>SpectraCo()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo ( )<computeroutput>[default]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a5b36618b661bac6d8d8c6cfb809eeb74"/>    <section>
    <title>SpectraCo()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (TH1 * root_spectra)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a5b36618b661bac6d8d8c6cfb809eeb74_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1ac8b2232b16c1ef5379b614aff60d8538"/>    <section>
    <title>SpectraCo()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (<link linkend="_class_spectra_co">SpectraCo</link> const &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a3e4d1435fa3a80662a8c4442464988e1"/>    <section>
    <title>SpectraCo()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (<link linkend="_class_spectra_co">SpectraCo</link> const &amp; other, <link linkend="_class_recalibration">Recalibration</link> const &amp; recal)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a3e4d1435fa3a80662a8c4442464988e1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a06daa646799145f445d02f3d2c193d52"/>    <section>
    <title>SpectraCo()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>SpectraCo</secondary></indexterm>
<para><computeroutput>SpectraCo::SpectraCo (std::vector&lt; double &gt; const &amp; data)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_spectra_co_1a626908f0a27928d07d980cfcec3b8454"/>    <section>
    <title>back()</title>
<indexterm><primary>back</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>back</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::back ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1afa082bf0e51974bc36aa4146e49f7b67"/>    <section>
    <title>createTH1D()</title>
<indexterm><primary>createTH1D</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>createTH1D</secondary></indexterm>
<para><computeroutput>TH1D* SpectraCo::createTH1D (std::string newName = <computeroutput>&quot;&quot;</computeroutput>
, std::string newTitle = <computeroutput>&quot;&quot;</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a108392b2f02481c7e779c1d7b57a49ce"/>    <section>
    <title>createTH1F()</title>
<indexterm><primary>createTH1F</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>createTH1F</secondary></indexterm>
<para><computeroutput>TH1F* SpectraCo::createTH1F (std::string newName = <computeroutput>&quot;&quot;</computeroutput>
, std::string newTitle = <computeroutput>&quot;&quot;</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a108392b2f02481c7e779c1d7b57a49ce_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a856d2c283dcce4570a7610e0ee88297a"/>    <section>
    <title>derivate()</title>
<indexterm><primary>derivate</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>derivate</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; const&amp; SpectraCo::derivate (int const &amp; smooth = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a856d2c283dcce4570a7610e0ee88297a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1acae7e2189022b271400874d523ccbf30"/>    <section>
    <title>derivate2()</title>
<indexterm><primary>derivate2</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>derivate2</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; const&amp; SpectraCo::derivate2 (int const &amp; smooth = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_acae7e2189022b271400874d523ccbf30_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_acae7e2189022b271400874d523ccbf30_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1ab5b718f73fbb499af3b81c52d31a734a"/>    <section>
    <title>derivative()</title>
<indexterm><primary>derivative</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>derivative</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; const&amp; SpectraCo::derivative ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a047126db866b95f6cc6c8bd92db37588"/>    <section>
    <title>derivative2()</title>
<indexterm><primary>derivative2</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>derivative2</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; const&amp; SpectraCo::derivative2 ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a047126db866b95f6cc6c8bd92db37588_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a0a11253e22b5d0d3e265685f6f54a916"/>    <section>
    <title>Draw()</title>
<indexterm><primary>Draw</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>Draw</secondary></indexterm>
<para><computeroutput>void SpectraCo::Draw (const char * param = <computeroutput>&quot;&quot;</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a0a11253e22b5d0d3e265685f6f54a916_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a4d14e86e9dd8d42c0ce5a72a2f3b7dfc"/>    <section>
    <title>get()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>get</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>get</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::get ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a9cbf03e7634f8a80d65aec65d3d9119c"/>    <section>
    <title>get()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>get</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>get</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::get ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a117a00a1dba583c4b3171be6a3854832"/>    <section>
    <title>get()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>get</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>get</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::get (int const &amp; bin) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1aad2d7fb657b00304906a0c5e3c9a3aed"/>    <section>
    <title>integral()</title>
<indexterm><primary>integral</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>integral</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::integral ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a4c094686833d7c19460df10ae16c34ba"/>    <section>
    <title>interpolate()</title>
<indexterm><primary>interpolate</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>interpolate</secondary></indexterm>
<para><computeroutput>double SpectraCo::interpolate (double const &amp; bin) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>wrapper around operator[] </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a4c094686833d7c19460df10ae16c34ba_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a1b66482bf4e3ff7903bda481d6d67a8d"/>    <section>
    <title>lastBin()</title>
<indexterm><primary>lastBin</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>lastBin</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::lastBin ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea"/>    <section>
    <title>load()</title>
<indexterm><primary>load</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>load</secondary></indexterm>
<para><computeroutput>void SpectraCo::load (TH1 * root_spectra)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ad357dfc02fbb9ad6fc308ecf07f07fea_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ad357dfc02fbb9ad6fc308ecf07f07fea_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1af5ec8bba0e514f659750d5ccde3e40a4"/>    <section>
    <title>maxValue()</title>
<indexterm><primary>maxValue</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>maxValue</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::maxValue ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a3c8d8bf91f0b24d1fe73e9a1392c7c7c"/>    <section>
    <title>minValue()</title>
<indexterm><primary>minValue</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>minValue</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::minValue ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a571209e16332182019598b86d9a5e234"/>    <section>
    <title>name()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>name</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>name</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::name ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a571209e16332182019598b86d9a5e234_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a63e44855e3e049f64759cff74aa15a52"/>    <section>
    <title>name()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>name</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>name</secondary></indexterm>
<para><computeroutput>auto SpectraCo::name (std::string const &amp; name)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a63e44855e3e049f64759cff74aa15a52_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a63e44855e3e049f64759cff74aa15a52_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1ad2f1bf0e5e8ac584e0aac00e753e8395"/>    <section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link> SpectraCo::operator+ (<link linkend="_class_spectra_co">SpectraCo</link> const &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ad2f1bf0e5e8ac584e0aac00e753e8395_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1af251452bf4de93adc2ddc7b7ae594415"/>    <section>
    <title>operator-()</title>
<indexterm><primary>operator-</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link> SpectraCo::operator- (<link linkend="_class_spectra_co">SpectraCo</link> const &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_af251452bf4de93adc2ddc7b7ae594415_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1ad094b13ab3d8e445b04edc68a5c12ec0"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_spectra_co">SpectraCo</link>&amp; SpectraCo::operator= (TH1 * root_spectra)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_ad094b13ab3d8e445b04edc68a5c12ec0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a885e4ddea8b0bbeb5bace4fe2f8123f9"/>    <section>
    <title>operator[]()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput>double SpectraCo::operator[] (double const &amp; bin) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ae49c5b411286f40051406ad83824217d"/>    <section>
    <title>operator[]()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput>auto&amp; SpectraCo::operator[] (int const &amp; bin)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1aaa6bb97ab64f7a60d0afcf62aaabeb65"/>    <section>
    <title>operator[]()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::operator[] (int const &amp; bin) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a085a0452438dbffc3452aed6733a9103"/>    <section>
    <title>recalibrate()</title>
<indexterm><primary>recalibrate</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>recalibrate</secondary></indexterm>
<para><computeroutput>void SpectraCo::recalibrate (<link linkend="_class_recalibration">Recalibration</link> const &amp; recal)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a085a0452438dbffc3452aed6733a9103_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a085a0452438dbffc3452aed6733a9103_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a24e38db30865e8a8e3f341fa958fe125"/>    <section>
    <title>setMaxValue()</title>
<indexterm><primary>setMaxValue</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>setMaxValue</secondary></indexterm>
<para><computeroutput>void SpectraCo::setMaxValue (double const &amp; _max_value)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1acaf5d71eb3c562fb0f99a67a6740c6d6"/>    <section>
    <title>setMinValue()</title>
<indexterm><primary>setMinValue</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>setMinValue</secondary></indexterm>
<para><computeroutput>void SpectraCo::setMinValue (double const &amp; _min_value)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>size</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_af819f84c4dfd2a2bf9ee87809dec1159_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a2764c882d467992cc40a71c0e952363e"/>    <section>
    <title>title()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>title</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>title</secondary></indexterm>
<para><computeroutput>auto const&amp; SpectraCo::title ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a2764c882d467992cc40a71c0e952363e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268"/>    <section>
    <title>title()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>title</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>title</secondary></indexterm>
<para><computeroutput>auto SpectraCo::title (std::string const &amp; title)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a723f0ea2cd8230e4b5e94b8d07127268_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_spectra_co_a723f0ea2cd8230e4b5e94b8d07127268_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_spectra_co_1abb9f6f024b15f071563ebcaa4dcd5720"/>    <section>
    <title>m_derivative</title>
<indexterm><primary>m_derivative</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_derivative</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; SpectraCo::m_derivative<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ad72044a11386a8d712d0b2620e111cf2"/>    <section>
    <title>m_derivative2</title>
<indexterm><primary>m_derivative2</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_derivative2</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; SpectraCo::m_derivative2<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7"/>    <section>
    <title>m_integral</title>
<indexterm><primary>m_integral</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_integral</secondary></indexterm>
<para><computeroutput>int SpectraCo::m_integral = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a84d2c65395a0f25fd84d6c5019e9d149"/>    <section>
    <title>m_max_value</title>
<indexterm><primary>m_max_value</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_max_value</secondary></indexterm>
<para><computeroutput>int SpectraCo::m_max_value = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1a027efc7bfb6426b5d3f90813e182885e"/>    <section>
    <title>m_min_value</title>
<indexterm><primary>m_min_value</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_min_value</secondary></indexterm>
<para><computeroutput>int SpectraCo::m_min_value = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154"/>    <section>
    <title>m_name</title>
<indexterm><primary>m_name</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_name</secondary></indexterm>
<para><computeroutput>std::string SpectraCo::m_name = &quot;Unnamed&quot;<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991"/>    <section>
    <title>m_size</title>
<indexterm><primary>m_size</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_size</secondary></indexterm>
<para><computeroutput>int SpectraCo::m_size = -1<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4"/>    <section>
    <title>m_spectra</title>
<indexterm><primary>m_spectra</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_spectra</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; SpectraCo::m_spectra<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b"/>    <section>
    <title>m_title</title>
<indexterm><primary>m_title</primary><secondary>SpectraCo</secondary></indexterm>
<indexterm><primary>SpectraCo</primary><secondary>m_title</secondary></indexterm>
<para><computeroutput>std::string SpectraCo::m_title = &quot;Untitled&quot;<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
lib/Classes/<link linkend="__spectra_alignator_8hpp">SpectraAlignator.hpp</link></section>
</section>
