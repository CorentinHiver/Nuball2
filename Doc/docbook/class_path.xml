<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_path" xml:lang="en-US">
<title>Path Class Reference</title>
<indexterm><primary>Path</primary></indexterm>
<para>

<para>EXPERIMENTAL Object used to hold the complete path of a giver folder. </para>
 
</para>
<para>
<computeroutput>#include &lt;files_functions.hpp&gt;</computeroutput>
</para>
Collaboration diagram for Path:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_path">Path</link> &amp; <link linkend="_class_path_1a99656cd73eb5c5fa461d7570b86eb66d">addFolder</link> (<link linkend="_class_folder">Folder</link> const &amp;<link linkend="_class_path_1a859f02f9224a864b541b15e8db325409">folder</link>)</para>
</listitem>
            <listitem><para>auto <link linkend="_class_path_1a7c25cd5ebf26bf022d3477d9a42f387f">c_str</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_path_1ac40c8c627d0412be849f1e6cd4cdc556">cleanPath</link> ()</para>

<para>To remove extraneous ./ or ../. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_path_1aecd02f464b364bc26631bcb65e44843b">exists</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_folder">Folder</link> const  &amp; <link linkend="_class_path_1a859f02f9224a864b541b15e8db325409">folder</link> () const</para>
</listitem>
            <listitem><para>std::string const  &amp; <link linkend="_class_path_1a4e4d7d7670941e8ddc58261a4fac0916">get</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_folders">Folders</link> const  &amp; <link linkend="_class_path_1a6aca68097e64629ee5d1e2c02f1b85ee">getFolders</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_path_1aa9b3a53718dcd8ba66d90d50b112ddb9">load</link> (bool const &amp;create=false)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_path_1a1f94b3b7d475723ead35e54c87078ed7">make</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_path_1ac9b837b0071ab41b4b0868590786eeae">makeFolderList</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_path_1a67161dbd774db3274fadc0c438b0cdf2">nbFiles</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_path_1a0db652f355256181825b11d0199ed0ae">operator bool</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_path_1a6b32e82eaa18b7d2d12bc4eac45b8a4b">operator std::string</link> () const &amp;</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_path_1acb9812e5cc077adf9cecd471b5397a83">operator+</link> (const char *addString)</para>
</listitem>
            <listitem><para><link linkend="_class_path">Path</link> <link linkend="_class_path_1a3d0909258a10a05b04d3c08ec42f562c">operator+</link> (<link linkend="_class_folder">Folder</link> const &amp;<link linkend="_class_path_1a859f02f9224a864b541b15e8db325409">folder</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_path_1a6dafc9642cd2096f67ce9dc80a7a11bf">operator+</link> (std::string const &amp;addString)</para>
</listitem>
            <listitem><para><link linkend="_class_path">Path</link> &amp; <link linkend="_class_path_1aea2baf3449b7fc955e7320f851ec29e5">operator+=</link> (std::string const &amp;addString)</para>
</listitem>
            <listitem><para><link linkend="_class_path">Path</link> &amp; <link linkend="_class_path_1a71da17bb5e324fd092daeca8f56f81ed">operator=</link> (const char *<link linkend="_class_path_1a7797092ad2d61166d4adcecff31e34bb">path</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_path">Path</link> &amp; <link linkend="_class_path_1a5bb409bfa25a8efe99b9d07e0ea2cf7a">operator=</link> (<link linkend="_class_path">Path</link> &amp;<link linkend="_class_path_1a7797092ad2d61166d4adcecff31e34bb">path</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_path">Path</link> &amp; <link linkend="_class_path_1a42f3cfe8b84c3e11afc5d54b47522ab3">operator=</link> (std::string const &amp;inputString)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_path_1a104457a3f7fbf2dcdb86d8c5a168f344">operator==</link> (std::string const &amp;cmprStr)</para>
</listitem>
            <listitem><para><link linkend="_class_folder">Folder</link> const  &amp; <link linkend="_class_path_1a145897ef8010831f6823ef7173ac4a0c">operator[]</link> (<link linkend="_lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d">uint</link> const &amp;i) const</para>
</listitem>
            <listitem><para><link linkend="_class_path_1af26cfab021ddf49af73da3b2beca85ac">Path</link> ()</para>
</listitem>
            <listitem><para>std::string const  &amp; <link linkend="_class_path_1a7797092ad2d61166d4adcecff31e34bb">path</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_path_1ac5e21de774118e980dea1c985155f110">Path</link> (const char *<link linkend="_class_path_1a7c25cd5ebf26bf022d3477d9a42f387f">c_str</link>, bool const &amp;create=false)</para>

<para>Turns a C string to a path, creating it if create = true and it doesn&apos;t already exists. </para>
</listitem>
            <listitem><para><link linkend="_class_path_1ac26c0c210a4c30bade6daca9c0853fc1">Path</link> (<link linkend="_class_path">Path</link> const &amp;<link linkend="_class_path_1a7797092ad2d61166d4adcecff31e34bb">path</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_path_1ae9ae307831520e338154143243a24a67">Path</link> (std::string const &amp;<link linkend="_class_path_1a7797092ad2d61166d4adcecff31e34bb">path</link>, bool const &amp;create=false)</para>

<para>Turns a string to a path, creating it if create = true and it doesn&apos;t already exists. </para>
</listitem>
            <listitem><para>auto const <link linkend="_class_path_1a34073c3753fbd7873238808f7f5a655b">size</link> () const</para>
</listitem>
            <listitem><para>std::string const  &amp; <link linkend="_class_path_1aa2f2b14aafcc3fc3626c243fcc6574dc">string</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_class_path">Path</link> <link linkend="_class_path_1a08c199926ff5432cd3f35c2df4b07433">home</link> ()</para>
</listitem>
            <listitem><para>static <link linkend="_class_path">Path</link> <link linkend="_class_path_1a0374de2afee27834da4adccf704d4190">pwd</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_path_1aed6b8b1831e37ad107b290f828777dc2">m_exists</link> = false</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_path_1ad65d90486dbdf36c2759a7285f4e3a80">m_path</link></para>
</listitem>
            <listitem><para><link linkend="_class_folders">Folders</link> <link linkend="_class_path_1a3f8c60121763c0e1cca52efc144f74e1">m_recursive_folders</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>EXPERIMENTAL Object used to hold the complete path of a giver folder. </para>



<para>You can use either a full path from the root (&quot;/.../.../&quot;) or from the home directory (&quot;~/.../.../&quot;)</para>

<para>So far, relative paths are not supported (yet hopefully) </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_path_1af26cfab021ddf49af73da3b2beca85ac"/>    <section>
    <title>Path()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>Path</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>Path</secondary></indexterm>
<para><computeroutput>Path::Path ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_af26cfab021ddf49af73da3b2beca85ac_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1ac26c0c210a4c30bade6daca9c0853fc1"/>    <section>
    <title>Path()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>Path</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>Path</secondary></indexterm>
<para><computeroutput>Path::Path (<link linkend="_class_path">Path</link> const &amp; path)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_path_1ae9ae307831520e338154143243a24a67"/>    <section>
    <title>Path()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>Path</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>Path</secondary></indexterm>
<para><computeroutput>Path::Path (std::string const &amp; path, bool const &amp; create = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Turns a string to a path, creating it if create = true and it doesn&apos;t already exists. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_ae9ae307831520e338154143243a24a67_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1ac5e21de774118e980dea1c985155f110"/>    <section>
    <title>Path()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>Path</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>Path</secondary></indexterm>
<para><computeroutput>Path::Path (const char * c_str, bool const &amp; create = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Turns a C string to a path, creating it if create = true and it doesn&apos;t already exists. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_ac5e21de774118e980dea1c985155f110_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_path_1a99656cd73eb5c5fa461d7570b86eb66d"/>    <section>
    <title>addFolder()</title>
<indexterm><primary>addFolder</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>addFolder</secondary></indexterm>
<para><computeroutput><link linkend="_class_path">Path</link>&amp; Path::addFolder (<link linkend="_class_folder">Folder</link> const &amp; folder)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a99656cd73eb5c5fa461d7570b86eb66d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a7c25cd5ebf26bf022d3477d9a42f387f"/>    <section>
    <title>c_str()</title>
<indexterm><primary>c_str</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>c_str</secondary></indexterm>
<para><computeroutput>auto Path::c_str ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_path_1ac40c8c627d0412be849f1e6cd4cdc556"/>    <section>
    <title>cleanPath()</title>
<indexterm><primary>cleanPath</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>cleanPath</secondary></indexterm>
<para><computeroutput>void Path::cleanPath ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>To remove extraneous ./ or ../. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_ac40c8c627d0412be849f1e6cd4cdc556_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_ac40c8c627d0412be849f1e6cd4cdc556_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1aecd02f464b364bc26631bcb65e44843b"/>    <section>
    <title>exists()</title>
<indexterm><primary>exists</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>exists</secondary></indexterm>
<para><computeroutput>bool Path::exists ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_aecd02f464b364bc26631bcb65e44843b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_aecd02f464b364bc26631bcb65e44843b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a859f02f9224a864b541b15e8db325409"/>    <section>
    <title>folder()</title>
<indexterm><primary>folder</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>folder</secondary></indexterm>
<para><computeroutput><link linkend="_class_folder">Folder</link> const&amp; Path::folder ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a859f02f9224a864b541b15e8db325409_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a859f02f9224a864b541b15e8db325409_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a4e4d7d7670941e8ddc58261a4fac0916"/>    <section>
    <title>get()</title>
<indexterm><primary>get</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>get</secondary></indexterm>
<para><computeroutput>std::string const&amp; Path::get ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a4e4d7d7670941e8ddc58261a4fac0916_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a6aca68097e64629ee5d1e2c02f1b85ee"/>    <section>
    <title>getFolders()</title>
<indexterm><primary>getFolders</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>getFolders</secondary></indexterm>
<para><computeroutput><link linkend="_class_folders">Folders</link> const&amp; Path::getFolders ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_path_1a08c199926ff5432cd3f35c2df4b07433"/>    <section>
    <title>home()</title>
<indexterm><primary>home</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>home</secondary></indexterm>
<para><computeroutput>static <link linkend="_class_path">Path</link> Path::home ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a08c199926ff5432cd3f35c2df4b07433_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a08c199926ff5432cd3f35c2df4b07433_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1aa9b3a53718dcd8ba66d90d50b112ddb9"/>    <section>
    <title>load()</title>
<indexterm><primary>load</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>load</secondary></indexterm>
<para><computeroutput>void Path::load (bool const &amp; create = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_aa9b3a53718dcd8ba66d90d50b112ddb9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_aa9b3a53718dcd8ba66d90d50b112ddb9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a1f94b3b7d475723ead35e54c87078ed7"/>    <section>
    <title>make()</title>
<indexterm><primary>make</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>make</secondary></indexterm>
<para><computeroutput>bool Path::make ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a1f94b3b7d475723ead35e54c87078ed7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a1f94b3b7d475723ead35e54c87078ed7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1ac9b837b0071ab41b4b0868590786eeae"/>    <section>
    <title>makeFolderList()</title>
<indexterm><primary>makeFolderList</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>makeFolderList</secondary></indexterm>
<para><computeroutput>void Path::makeFolderList ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_ac9b837b0071ab41b4b0868590786eeae_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_ac9b837b0071ab41b4b0868590786eeae_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a67161dbd774db3274fadc0c438b0cdf2"/>    <section>
    <title>nbFiles()</title>
<indexterm><primary>nbFiles</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>nbFiles</secondary></indexterm>
<para><computeroutput>int Path::nbFiles ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a67161dbd774db3274fadc0c438b0cdf2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a0db652f355256181825b11d0199ed0ae"/>    <section>
    <title>operator bool()</title>
<indexterm><primary>operator bool</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>operator bool</secondary></indexterm>
<para><computeroutput>Path::operator bool ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a0db652f355256181825b11d0199ed0ae_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a6b32e82eaa18b7d2d12bc4eac45b8a4b"/>    <section>
    <title>operator std::string()</title>
<indexterm><primary>operator std::string</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>operator std::string</secondary></indexterm>
<para><computeroutput>Path::operator std::string ( ) const &amp;<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a6b32e82eaa18b7d2d12bc4eac45b8a4b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1acb9812e5cc077adf9cecd471b5397a83"/>    <section>
    <title>operator+()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput>std::string Path::operator+ (const char * addString)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_path_1a3d0909258a10a05b04d3c08ec42f562c"/>    <section>
    <title>operator+()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_class_path">Path</link> Path::operator+ (<link linkend="_class_folder">Folder</link> const &amp; folder)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a3d0909258a10a05b04d3c08ec42f562c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a6dafc9642cd2096f67ce9dc80a7a11bf"/>    <section>
    <title>operator+()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput>std::string Path::operator+ (std::string const &amp; addString)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_path_1aea2baf3449b7fc955e7320f851ec29e5"/>    <section>
    <title>operator+=()</title>
<indexterm><primary>operator+=</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_class_path">Path</link>&amp; Path::operator+= (std::string const &amp; addString)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_aea2baf3449b7fc955e7320f851ec29e5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a71da17bb5e324fd092daeca8f56f81ed"/>    <section>
    <title>operator=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_path">Path</link>&amp; Path::operator= (const char * path)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a71da17bb5e324fd092daeca8f56f81ed_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a5bb409bfa25a8efe99b9d07e0ea2cf7a"/>    <section>
    <title>operator=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_path">Path</link>&amp; Path::operator= (<link linkend="_class_path">Path</link> &amp; path)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a5bb409bfa25a8efe99b9d07e0ea2cf7a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a42f3cfe8b84c3e11afc5d54b47522ab3"/>    <section>
    <title>operator=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_path">Path</link>&amp; Path::operator= (std::string const &amp; inputString)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a42f3cfe8b84c3e11afc5d54b47522ab3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a104457a3f7fbf2dcdb86d8c5a168f344"/>    <section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Path::operator== (std::string const &amp; cmprStr)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_path_1a145897ef8010831f6823ef7173ac4a0c"/>    <section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_class_folder">Folder</link> const&amp; Path::operator[] (<link linkend="_lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d">uint</link> const &amp; i) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_path_1a7797092ad2d61166d4adcecff31e34bb"/>    <section>
    <title>path()</title>
<indexterm><primary>path</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>path</secondary></indexterm>
<para><computeroutput>std::string const&amp; Path::path ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a7797092ad2d61166d4adcecff31e34bb_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a0374de2afee27834da4adccf704d4190"/>    <section>
    <title>pwd()</title>
<indexterm><primary>pwd</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>pwd</secondary></indexterm>
<para><computeroutput>static <link linkend="_class_path">Path</link> Path::pwd ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a0374de2afee27834da4adccf704d4190_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a0374de2afee27834da4adccf704d4190_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a34073c3753fbd7873238808f7f5a655b"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>size</secondary></indexterm>
<para><computeroutput>auto const Path::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a34073c3753fbd7873238808f7f5a655b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1aa2f2b14aafcc3fc3626c243fcc6574dc"/>    <section>
    <title>string()</title>
<indexterm><primary>string</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>string</secondary></indexterm>
<para><computeroutput>std::string const&amp; Path::string ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_aa2f2b14aafcc3fc3626c243fcc6574dc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_aa2f2b14aafcc3fc3626c243fcc6574dc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_path_1aed6b8b1831e37ad107b290f828777dc2"/>    <section>
    <title>m_exists</title>
<indexterm><primary>m_exists</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>m_exists</secondary></indexterm>
<para><computeroutput>bool Path::m_exists = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_path_1ad65d90486dbdf36c2759a7285f4e3a80"/>    <section>
    <title>m_path</title>
<indexterm><primary>m_path</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>m_path</secondary></indexterm>
<para><computeroutput>std::string Path::m_path<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_path_1a3f8c60121763c0e1cca52efc144f74e1"/>    <section>
    <title>m_recursive_folders</title>
<indexterm><primary>m_recursive_folders</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>m_recursive_folders</secondary></indexterm>
<para><computeroutput><link linkend="_class_folders">Folders</link> Path::m_recursive_folders<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
lib/<link linkend="_files__functions_8hpp">files_functions.hpp</link></section>
</section>
