<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_faster2_root" xml:lang="en-US">
<title>Faster2Root Class Reference</title>
<indexterm><primary>Faster2Root</primary></indexterm>
<para>

<para>Basic class to perform faster to root tree data conversion. </para>
 
</para>
<para>
<computeroutput>#include &lt;Faster2Root.hpp&gt;</computeroutput>
</para>
Inheritance diagram for Faster2Root:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for Faster2Root:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_faster2_root_1a5eadd66ea26d632b75a92aa9c2878bf3">buildEvents</link> (int time_window_ns)</para>
</listitem>
            <listitem><para>void <link linkend="_class_faster2_root_1a7d6d5249c6ced2548a58406eca085cdb">convert</link> (std::string const &amp;dataFolder, std::string const &amp;outputFolder, int const &amp;nb_files=-1)</para>
</listitem>
            <listitem><para><link linkend="_class_faster2_root_1a8306673fb7007ca6c7c586ba2df764b9">Faster2Root</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_faster2_root_1aacd4d3fa480eba9bc86b49f4b2040c60">Faster2Root</link> (int argc, char **argv)</para>
</listitem>
            <listitem><para><link linkend="_class_faster2_root_1a61a5cc14735e615b6a6389a1ece4f694">Faster2Root</link> (int argc, char **argv, <link linkend="__faster2_root_8hpp_1a75162947cdf43694952e4c0a53735199">Trigger</link> trigger)</para>
</listitem>
            <listitem><para><link linkend="_class_faster2_root_1ad07b97d280479aabc26e04d920726ddb">Faster2Root</link> (<link linkend="_class_path">Path</link> const &amp;inputFolder, <link linkend="_class_path">Path</link> const &amp;outputFolder, int const &amp;nb_files=-1, bool const &amp;<link linkend="_class_faster2_root_1a5eadd66ea26d632b75a92aa9c2878bf3">buildEvents</link>=false)</para>

<para>Raw conversion : </para>
</listitem>
            <listitem><para>void <link linkend="_class_faster2_root_1afaec1876151390b71c475885157670a3">loadCalibration</link> (std::string const &amp;calibFile)</para>
</listitem>
            <listitem><para>void <link linkend="_class_faster2_root_1a3953ee6d843802ca12997e146fd7046d">loadTimeshifts</link> (std::string const &amp;dTfile)</para>
</listitem>
            <listitem><para>void <link linkend="_class_faster2_root_1a5b8a78ef8c54117807c770d21fa4acf0">loadTriggerFile</link> (std::string const &amp;file)</para>
</listitem>
            <listitem><para>void <link linkend="_class_faster2_root_1a19537e5417a0537a0327b91b78982ca2">overwrite</link> (bool const &amp;_overwrite)</para>
</listitem>
            <listitem><para>void <link linkend="_class_faster2_root_1a957a45ae197b565da07521a27ee73f53">setCalibration</link> (<link linkend="_class_calibration">Calibration</link> const &amp;calibration)</para>
</listitem>
            <listitem><para>void <link linkend="_class_faster2_root_1a943441baaa37c600a49913339a63e89d">setNbFiles</link> (int const &amp;nb_files=-1)</para>
</listitem>
            <listitem><para>void <link linkend="_class_faster2_root_1a0717c962ce832333110607b30f8370fc">setNbThreads</link> (int const &amp;nb_threads=-1)</para>
</listitem>
            <listitem><para>void <link linkend="_class_faster2_root_1ace1cc6bfc486195e5808e946770d5954">setTimeshifts</link> (<link linkend="_class_timeshifts">Timeshifts</link> const &amp;timeshifts)</para>
</listitem>
            <listitem><para>void <link linkend="_class_faster2_root_1aaa5d89a939efb05b6408e65b5f0117c2">setTrigger</link> (std::function&lt; bool(const <link linkend="_class_event">Event</link> &amp;)&gt; other)</para>
</listitem>
            <listitem><para>void <link linkend="_class_faster2_root_1a01cccc30e85ee668bbff3827c838173e">throwSingles</link> (bool const &amp;_throw_single=true)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_faster2_root_1a2ba93a4814723b6103dc25a701f3dc89">convertFile</link> (<link linkend="_class_hit">Hit</link> &amp;hit, <link linkend="_class_faster_reader">FasterReader</link> &amp;reader, <link linkend="_class_path">Path</link> const &amp;outPath)</para>
</listitem>
            <listitem><para>void <link linkend="_class_faster2_root_1ad30ccf937150bbd3504ec3a354b76c8f">load</link> (int argc, char **argv)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_faster2_root_1a6cc6f4731958e8c74ad0e07f4d97f4a0">printParameters</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>static void <link linkend="_class_faster2_root_1a50fd46a075ae0a1a1f52b5bb6405047b">s_convertFile</link> (<link linkend="_class_hit">Hit</link> &amp;hit, <link linkend="_class_faster_reader">FasterReader</link> &amp;reader, <link linkend="_class_faster2_root">Faster2Root</link> &amp;convertor, <link linkend="_class_path">Path</link> const &amp;outPath)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_faster2_root_1a3c9782dbe54c5b10f21487d2189f4c16">m_calibrate</link> = false</para>
</listitem>
            <listitem><para><link linkend="_class_calibration">Calibration</link> <link linkend="_class_faster2_root_1a58af91c50f99bd37c48380988292af03">m_calibration</link></para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster2_root_1a50b697e84534b9326fcf678b28b5609a">m_eventbuilding</link> = false</para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster2_root_1a9b7e63609b4123f6f798f70c2de1128b">m_loaded_trigger</link> = false</para>
</listitem>
            <listitem><para>int <link linkend="_class_faster2_root_1a0eb51359b6d1390a15d2113950bb4bf2">m_nb_files</link> = -1</para>
</listitem>
            <listitem><para>int <link linkend="_class_faster2_root_1aacad03770af4357e587c8138da57a203">m_nb_threads</link> = 1</para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster2_root_1a88e6c196d62d573ba95bf4f62d8cb15d">m_ok</link> = false</para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster2_root_1a987fb5d9ee8469817296265b1232bb63">m_overwrite</link> = false</para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster2_root_1a76455ed5fcb82744bb34e0de2f524a0c">m_throw_single</link> = false</para>
</listitem>
            <listitem><para>Long64_t <link linkend="_class_faster2_root_1a4b32ed9d91512912420c58bab5d4897a">m_time_window</link> = 1500000</para>
</listitem>
            <listitem><para><link linkend="_class_timeshifts">Timeshifts</link> <link linkend="_class_faster2_root_1a1d145e66d56ef7a8f11cd58185b5666c">m_timeshifts</link></para>
</listitem>
            <listitem><para><link linkend="_class_m_t_counter">MTCounter</link> <link linkend="_class_faster2_root_1aecbddf92ed9e6e9f518627e024e43e3e">m_total_events</link></para>
</listitem>
            <listitem><para><link linkend="_class_m_t_counter">MTCounter</link> <link linkend="_class_faster2_root_1adb999cc71caadb30a61f64659ba88a2c">m_total_hits</link></para>
</listitem>
            <listitem><para><link linkend="_class_timer">Timer</link> <link linkend="_class_faster2_root_1ae62d8cbcbd702ac3691ebdc54677be47">m_total_timer</link></para>
</listitem>
            <listitem><para><link linkend="_class_m_t_counter">MTCounter</link> <link linkend="_class_faster2_root_1a1589ca0222d305ef05b8d622e79fbb8b">m_trigg_events</link></para>
</listitem>
            <listitem><para>std::function&lt; bool(const <link linkend="_class_event">Event</link> &amp;)&gt; <link linkend="_class_faster2_root_1a5807435c6403ac0a7fba6da6b43fefce">m_trigger</link> = [](const <link linkend="_class_event">Event</link>&amp;) { return true; }</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_faster2_root_1ae3fce7a9419f8ed5044f8a8cc7302a6b">m_trigger_file</link></para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> &gt; <link linkend="_class_faster2_root_1acf62aae9afb7e5e49508c4a018039fc3">m_triggering_labels</link></para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster2_root_1a07ce8dd1383dcf7b466ab99604516cd1">m_use_RF</link> = false</para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster2_root_1a29bd04235f0c5c32d1f96695135daba5">m_use_trigger</link> = false</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Basic class to perform faster to root tree data conversion. </para>



<para>Section 1 : Options</para>

<para>Use this class to perform raw conversion. Without any option, no calibration, no time alignement and no event building are performed. If you want to do more, you have to load the ID file with the -l option. This file has the following format :</para>

<para>label_nb name label_nb name ... label_nb name</para>

<para>You can build it from the index.pid file</para>

<para>You can import a calibration file using -c option. Considering the equation E_cal = a + b*ADC + c*ADC² ..., the file has the following structure :</para>

<para>label_nb a b (c) (d)</para>

<para>If a detector has no calibration data, then leaving its line empty will automatically fills a = 0 and b = 1. c and d are optional, they will be filled with 0. You can choose the number of parameter line by line, because each detector needs a different correction order !</para>

<para>Now, let&apos;s attack the most difficult part : timing and event building. So far, the data are still shuffled because of time shifts induced by faster hardware. So there are different options :</para>

<para>-e [time_window_ns] : Simple event building. If no time realignment, the time shift can be big, it is recommended to use at least 1500 ns This option will always result in more time and memory consumption because the conversion is done in 3 step : First the hits are time shifted (and put in a memory resident root tree). But this will result in a shuffle, because some hits can be shifted before the previous hit. Therefore, the data have to be realigned. And finally the conversion will take place with truly time aligned data.</para>

<para>-m [threads_number] : Multithreading. use this option to choose the number of files to treat in parallel.</para>

<para>-t [timeshift_file] : Load the timeshifts file.</para>

<para>Recap &amp; ancillary parameters :</para>

<para>-c [calibration_file] : Load the calibration -e [time_window_ns] : Perform event building with time_window_ns = 1500 ns by default -i [ID_file] : Load ID file. For Nuball2 data, allows for nice lookup tables to know the type of detector like isDSSD[label] or isGe[label] -m [threads_number] : Choose the number of files to treat in parallel -n [files_number] : Choose the total number of files to treat inside a data folder -t [time_window_ns] : Loads timeshift data &#8211;throw_single : If you are not interested in single hits (hits not alone in their time range)</para>

<para><caution><title>Attention</title>

<para>The two first parameters must be /path/to/data/ and /path/to/output/ Example 1 : <literallayout><computeroutput> Faster2Root(&quot;/path/to/data /path/to/output -i index_129.id -c calib.calib -e 200 -m 4 -t timeshifts.dT &quot;)
</computeroutput></literallayout> Example 2 :</para>
</caution>
We want to create a <link linkend="_class_d_s_s_d">DSSD</link> trigger : <literallayout><computeroutput>int main(int argc, argv** argv)
{
  Faster2Root convertor(argc, argv, [](const Event&amp; event)
  {
    for (int hit = 0; hit&lt;event.mult; hit++)
    {
      if (isDSSD[event.labels[hit]]) return true;
    }
    return false;
  });
}
</computeroutput></literallayout> Then compile the code and call : ./executable /path/to/data /path/to/output -i index_129.id -c calib.calib -e 200 -m 4 -t timeshifts.dT</para>

<para>Section 2 : Format</para>

<para>The root tree is made of 6 leaves :</para>

<para>type name Description int mult Multiplicity : number of hits in the event unsigned short [] label Labels int/float [] ADC/nrj (ADC/QDC1) / Calibrated energy int/float [] QDC2/nrj2 QDC2 / Calibrated energy in QDC2 bool [] pileup Pileup/Saturation bit</para>

<para>The output will therefore depend on wether you calibrated the data or not</para>

<para>In the code, the main object handling the event data is <link linkend="_class_event">Event</link>. You have to have a look at its complete description if you are to read the data </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_faster2_root_1a8306673fb7007ca6c7c586ba2df764b9"/>    <section>
    <title>Faster2Root()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>Faster2Root</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>Faster2Root</secondary></indexterm>
<para><computeroutput>Faster2Root::Faster2Root ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1aacd4d3fa480eba9bc86b49f4b2040c60"/>    <section>
    <title>Faster2Root()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>Faster2Root</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>Faster2Root</secondary></indexterm>
<para><computeroutput>Faster2Root::Faster2Root (int argc, char ** argv)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_aacd4d3fa480eba9bc86b49f4b2040c60_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1a61a5cc14735e615b6a6389a1ece4f694"/>    <section>
    <title>Faster2Root()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>Faster2Root</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>Faster2Root</secondary></indexterm>
<para><computeroutput>Faster2Root::Faster2Root (int argc, char ** argv, <link linkend="__faster2_root_8hpp_1a75162947cdf43694952e4c0a53735199">Trigger</link> trigger)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a61a5cc14735e615b6a6389a1ece4f694_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1ad07b97d280479aabc26e04d920726ddb"/>    <section>
    <title>Faster2Root()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>Faster2Root</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>Faster2Root</secondary></indexterm>
<para><computeroutput>Faster2Root::Faster2Root (<link linkend="_class_path">Path</link> const &amp; inputFolder, <link linkend="_class_path">Path</link> const &amp; outputFolder, int const &amp; nb_files = <computeroutput>-1</computeroutput>
, bool const &amp; buildEvents = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Raw conversion : </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_ad07b97d280479aabc26e04d920726ddb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_faster2_root_1a5eadd66ea26d632b75a92aa9c2878bf3"/>    <section>
    <title>buildEvents()</title>
<indexterm><primary>buildEvents</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>buildEvents</secondary></indexterm>
<para><computeroutput>void Faster2Root::buildEvents (int time_window_ns)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a5eadd66ea26d632b75a92aa9c2878bf3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a5eadd66ea26d632b75a92aa9c2878bf3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1a7d6d5249c6ced2548a58406eca085cdb"/>    <section>
    <title>convert()</title>
<indexterm><primary>convert</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>convert</secondary></indexterm>
<para><computeroutput>void Faster2Root::convert (std::string const &amp; dataFolder, std::string const &amp; outputFolder, int const &amp; nb_files = <computeroutput>-1</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a7d6d5249c6ced2548a58406eca085cdb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a7d6d5249c6ced2548a58406eca085cdb_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1a2ba93a4814723b6103dc25a701f3dc89"/>    <section>
    <title>convertFile()</title>
<indexterm><primary>convertFile</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>convertFile</secondary></indexterm>
<para><computeroutput>void Faster2Root::convertFile (<link linkend="_class_hit">Hit</link> &amp; hit, <link linkend="_class_faster_reader">FasterReader</link> &amp; reader, <link linkend="_class_path">Path</link> const &amp; outPath)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>hit</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                            <row>
                                <entry>reader</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                            <row>
                                <entry>outPath</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented in <link linkend="_class_my_simple_convertor_1a81d6aadfcbadae6e83dbacc86735a0c5">MySimpleConvertor</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a2ba93a4814723b6103dc25a701f3dc89_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a2ba93a4814723b6103dc25a701f3dc89_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1ad30ccf937150bbd3504ec3a354b76c8f"/>    <section>
    <title>load()</title>
<indexterm><primary>load</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>load</secondary></indexterm>
<para><computeroutput>void Faster2Root::load (int argc, char ** argv)<computeroutput>[protected]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_ad30ccf937150bbd3504ec3a354b76c8f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_ad30ccf937150bbd3504ec3a354b76c8f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1afaec1876151390b71c475885157670a3"/>    <section>
    <title>loadCalibration()</title>
<indexterm><primary>loadCalibration</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>loadCalibration</secondary></indexterm>
<para><computeroutput>void Faster2Root::loadCalibration (std::string const &amp; calibFile)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_afaec1876151390b71c475885157670a3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_afaec1876151390b71c475885157670a3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1a3953ee6d843802ca12997e146fd7046d"/>    <section>
    <title>loadTimeshifts()</title>
<indexterm><primary>loadTimeshifts</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>loadTimeshifts</secondary></indexterm>
<para><computeroutput>void Faster2Root::loadTimeshifts (std::string const &amp; dTfile)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a3953ee6d843802ca12997e146fd7046d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a3953ee6d843802ca12997e146fd7046d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1a5b8a78ef8c54117807c770d21fa4acf0"/>    <section>
    <title>loadTriggerFile()</title>
<indexterm><primary>loadTriggerFile</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>loadTriggerFile</secondary></indexterm>
<para><computeroutput>void Faster2Root::loadTriggerFile (std::string const &amp; file)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a5b8a78ef8c54117807c770d21fa4acf0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a5b8a78ef8c54117807c770d21fa4acf0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1a19537e5417a0537a0327b91b78982ca2"/>    <section>
    <title>overwrite()</title>
<indexterm><primary>overwrite</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>overwrite</secondary></indexterm>
<para><computeroutput>void Faster2Root::overwrite (bool const &amp; _overwrite)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a19537e5417a0537a0327b91b78982ca2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1a6cc6f4731958e8c74ad0e07f4d97f4a0"/>    <section>
    <title>printParameters()</title>
<indexterm><primary>printParameters</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>printParameters</secondary></indexterm>
<para><computeroutput>void Faster2Root::printParameters ( ) const<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a6cc6f4731958e8c74ad0e07f4d97f4a0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a6cc6f4731958e8c74ad0e07f4d97f4a0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1a50fd46a075ae0a1a1f52b5bb6405047b"/>    <section>
    <title>s_convertFile()</title>
<indexterm><primary>s_convertFile</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>s_convertFile</secondary></indexterm>
<para><computeroutput>static void Faster2Root::s_convertFile (<link linkend="_class_hit">Hit</link> &amp; hit, <link linkend="_class_faster_reader">FasterReader</link> &amp; reader, <link linkend="_class_faster2_root">Faster2Root</link> &amp; convertor, <link linkend="_class_path">Path</link> const &amp; outPath)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a50fd46a075ae0a1a1f52b5bb6405047b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a50fd46a075ae0a1a1f52b5bb6405047b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1a957a45ae197b565da07521a27ee73f53"/>    <section>
    <title>setCalibration()</title>
<indexterm><primary>setCalibration</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>setCalibration</secondary></indexterm>
<para><computeroutput>void Faster2Root::setCalibration (<link linkend="_class_calibration">Calibration</link> const &amp; calibration)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a943441baaa37c600a49913339a63e89d"/>    <section>
    <title>setNbFiles()</title>
<indexterm><primary>setNbFiles</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>setNbFiles</secondary></indexterm>
<para><computeroutput>void Faster2Root::setNbFiles (int const &amp; nb_files = <computeroutput>-1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a943441baaa37c600a49913339a63e89d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1a0717c962ce832333110607b30f8370fc"/>    <section>
    <title>setNbThreads()</title>
<indexterm><primary>setNbThreads</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>setNbThreads</secondary></indexterm>
<para><computeroutput>void Faster2Root::setNbThreads (int const &amp; nb_threads = <computeroutput>-1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_a0717c962ce832333110607b30f8370fc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1ace1cc6bfc486195e5808e946770d5954"/>    <section>
    <title>setTimeshifts()</title>
<indexterm><primary>setTimeshifts</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>setTimeshifts</secondary></indexterm>
<para><computeroutput>void Faster2Root::setTimeshifts (<link linkend="_class_timeshifts">Timeshifts</link> const &amp; timeshifts)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1aaa5d89a939efb05b6408e65b5f0117c2"/>    <section>
    <title>setTrigger()</title>
<indexterm><primary>setTrigger</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>setTrigger</secondary></indexterm>
<para><computeroutput>void Faster2Root::setTrigger (std::function&lt; bool(const <link linkend="_class_event">Event</link> &amp;)&gt; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster2_root_aaa5d89a939efb05b6408e65b5f0117c2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster2_root_1a01cccc30e85ee668bbff3827c838173e"/>    <section>
    <title>throwSingles()</title>
<indexterm><primary>throwSingles</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>throwSingles</secondary></indexterm>
<para><computeroutput>void Faster2Root::throwSingles (bool const &amp; _throw_single = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_faster2_root_1a3c9782dbe54c5b10f21487d2189f4c16"/>    <section>
    <title>m_calibrate</title>
<indexterm><primary>m_calibrate</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_calibrate</secondary></indexterm>
<para><computeroutput>bool Faster2Root::m_calibrate = false<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a58af91c50f99bd37c48380988292af03"/>    <section>
    <title>m_calibration</title>
<indexterm><primary>m_calibration</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_calibration</secondary></indexterm>
<para><computeroutput><link linkend="_class_calibration">Calibration</link> Faster2Root::m_calibration<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a50b697e84534b9326fcf678b28b5609a"/>    <section>
    <title>m_eventbuilding</title>
<indexterm><primary>m_eventbuilding</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_eventbuilding</secondary></indexterm>
<para><computeroutput>bool Faster2Root::m_eventbuilding = false<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a9b7e63609b4123f6f798f70c2de1128b"/>    <section>
    <title>m_loaded_trigger</title>
<indexterm><primary>m_loaded_trigger</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_loaded_trigger</secondary></indexterm>
<para><computeroutput>bool Faster2Root::m_loaded_trigger = false<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a0eb51359b6d1390a15d2113950bb4bf2"/>    <section>
    <title>m_nb_files</title>
<indexterm><primary>m_nb_files</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_nb_files</secondary></indexterm>
<para><computeroutput>int Faster2Root::m_nb_files = -1<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1aacad03770af4357e587c8138da57a203"/>    <section>
    <title>m_nb_threads</title>
<indexterm><primary>m_nb_threads</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_nb_threads</secondary></indexterm>
<para><computeroutput>int Faster2Root::m_nb_threads = 1<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a88e6c196d62d573ba95bf4f62d8cb15d"/>    <section>
    <title>m_ok</title>
<indexterm><primary>m_ok</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_ok</secondary></indexterm>
<para><computeroutput>bool Faster2Root::m_ok = false<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a987fb5d9ee8469817296265b1232bb63"/>    <section>
    <title>m_overwrite</title>
<indexterm><primary>m_overwrite</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_overwrite</secondary></indexterm>
<para><computeroutput>bool Faster2Root::m_overwrite = false<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a76455ed5fcb82744bb34e0de2f524a0c"/>    <section>
    <title>m_throw_single</title>
<indexterm><primary>m_throw_single</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_throw_single</secondary></indexterm>
<para><computeroutput>bool Faster2Root::m_throw_single = false<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a4b32ed9d91512912420c58bab5d4897a"/>    <section>
    <title>m_time_window</title>
<indexterm><primary>m_time_window</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_time_window</secondary></indexterm>
<para><computeroutput>Long64_t Faster2Root::m_time_window = 1500000<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a1d145e66d56ef7a8f11cd58185b5666c"/>    <section>
    <title>m_timeshifts</title>
<indexterm><primary>m_timeshifts</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_timeshifts</secondary></indexterm>
<para><computeroutput><link linkend="_class_timeshifts">Timeshifts</link> Faster2Root::m_timeshifts<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1aecbddf92ed9e6e9f518627e024e43e3e"/>    <section>
    <title>m_total_events</title>
<indexterm><primary>m_total_events</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_total_events</secondary></indexterm>
<para><computeroutput><link linkend="_class_m_t_counter">MTCounter</link> Faster2Root::m_total_events<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1adb999cc71caadb30a61f64659ba88a2c"/>    <section>
    <title>m_total_hits</title>
<indexterm><primary>m_total_hits</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_total_hits</secondary></indexterm>
<para><computeroutput><link linkend="_class_m_t_counter">MTCounter</link> Faster2Root::m_total_hits<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1ae62d8cbcbd702ac3691ebdc54677be47"/>    <section>
    <title>m_total_timer</title>
<indexterm><primary>m_total_timer</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_total_timer</secondary></indexterm>
<para><computeroutput><link linkend="_class_timer">Timer</link> Faster2Root::m_total_timer<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a1589ca0222d305ef05b8d622e79fbb8b"/>    <section>
    <title>m_trigg_events</title>
<indexterm><primary>m_trigg_events</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_trigg_events</secondary></indexterm>
<para><computeroutput><link linkend="_class_m_t_counter">MTCounter</link> Faster2Root::m_trigg_events<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a5807435c6403ac0a7fba6da6b43fefce"/>    <section>
    <title>m_trigger</title>
<indexterm><primary>m_trigger</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_trigger</secondary></indexterm>
<para><computeroutput>std::function&lt;bool(const <link linkend="_class_event">Event</link>&amp;)&gt; Faster2Root::m_trigger = [](const <link linkend="_class_event">Event</link>&amp;) { return true; }<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1ae3fce7a9419f8ed5044f8a8cc7302a6b"/>    <section>
    <title>m_trigger_file</title>
<indexterm><primary>m_trigger_file</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_trigger_file</secondary></indexterm>
<para><computeroutput>std::string Faster2Root::m_trigger_file<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1acf62aae9afb7e5e49508c4a018039fc3"/>    <section>
    <title>m_triggering_labels</title>
<indexterm><primary>m_triggering_labels</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_triggering_labels</secondary></indexterm>
<para><computeroutput>std::vector&lt;<link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link>&gt; Faster2Root::m_triggering_labels<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a07ce8dd1383dcf7b466ab99604516cd1"/>    <section>
    <title>m_use_RF</title>
<indexterm><primary>m_use_RF</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_use_RF</secondary></indexterm>
<para><computeroutput>bool Faster2Root::m_use_RF = false<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster2_root_1a29bd04235f0c5c32d1f96695135daba5"/>    <section>
    <title>m_use_trigger</title>
<indexterm><primary>m_use_trigger</primary><secondary>Faster2Root</secondary></indexterm>
<indexterm><primary>Faster2Root</primary><secondary>m_use_trigger</secondary></indexterm>
<para><computeroutput>bool Faster2Root::m_use_trigger = false<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
lib/Modules/<link linkend="__faster2_root_8hpp">Faster2Root.hpp</link></section>
</section>
