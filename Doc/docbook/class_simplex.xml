<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_simplex" xml:lang="en-US">
<title>Simplex Class Reference</title>
<indexterm><primary>Simplex</primary></indexterm>
<para>
<computeroutput>#include &lt;SpectraAlignator.hpp&gt;</computeroutput>
</para>
Collaboration diagram for Simplex:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>auto <link linkend="_class_simplex_1af9f387b740699fc83d561b06a5e8305a">begin</link> ()</para>
</listitem>
            <listitem><para>auto <link linkend="_class_simplex_1ad5161ef4f875383b9880f2401cefe71a">begin</link> () const</para>
</listitem>
            <listitem><para>auto <link linkend="_class_simplex_1af3f0b93fc1290f891ce99f72bd0e7b59">centroid</link> ()</para>
</listitem>
            <listitem><para>auto <link linkend="_class_simplex_1a4212e98efa0b1468955d32a51387f3fc">centroid</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp;n_best)</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_simplex_1afbcd974270009d3cec5f3253ae852cbc">dim</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_simplex_1aed93fc950fa50599b289d5ac9e3356c7">dim</link> () const</para>
</listitem>
            <listitem><para>auto <link linkend="_class_simplex_1a43aa87c378225a78bf764a3c049ed381">end</link> ()</para>
</listitem>
            <listitem><para>auto <link linkend="_class_simplex_1ae3a1f652ec439b823610f75846ae8067">end</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_simplex_1a3840674dbc694d4796b28c088da4c02e">evaluate</link> (std::function&lt; double(const <link linkend="_class_vertice">Vertice</link> &amp;)&gt; objective_function)</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_simplex_1a0ceff7d3432670abaddf74f5b223e62d">getCentroid</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_simplex">Simplex</link> &amp; <link linkend="_class_simplex_1a18363c969c478336afe053dc246495ce">operator=</link> (<link linkend="_class_simplex">Simplex</link> &amp;&amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class_simplex">Simplex</link> &amp; <link linkend="_class_simplex_1a622f6bed00b73eb0b931cf65ee77d055">operator=</link> (<link linkend="_class_simplex">Simplex</link> const &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class_simplex">Simplex</link> &amp; <link linkend="_class_simplex_1ac1a2bb63bb9b56da8457ecefe34e23e8">operator=</link> (<link linkend="__spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e">Vertices</link> const &amp;vertices)</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_simplex_1a0bbdd7fe5cc1296b7c1da9232d78d182">operator[]</link> (int const &amp;i)</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_simplex_1a08239a3a6b994da2a445a7ea44c7b893">operator[]</link> (int const &amp;i) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_simplex_1aa4f7721e6989b27489d84cca5de99c07">setVertice</link> (int const &amp;bin, <link linkend="_class_vertice">Vertice</link> &amp;&amp;vertice)</para>
</listitem>
            <listitem><para>void <link linkend="_class_simplex_1ade818ac404caab90542e80143cbc63c0">setVertice</link> (int const &amp;bin, <link linkend="_class_vertice">Vertice</link> const &amp;vertice)</para>
</listitem>
            <listitem><para><link linkend="_class_simplex_1a169c2796d3adf036611cdcf6772e46d1">Simplex</link> (<link linkend="_class_simplex">Simplex</link> &amp;&amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class_simplex_1a2ff37bbc43bc7c86703f204c3510baa8">Simplex</link> (<link linkend="_class_simplex">Simplex</link> const &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class_simplex_1ad893ac9de899c841e0e6ada82ea611b9">Simplex</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp;<link linkend="_class_simplex_1aed93fc950fa50599b289d5ac9e3356c7">dim</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_simplex_1ac74b813d1b4b98e97d1c98157997d294">Simplex</link> (<link linkend="_class_vertice">Vertice</link> const &amp;vertice)</para>

<para>Construct a simplex based on a vertice. </para>
</listitem>
            <listitem><para><link linkend="_class_simplex_1abd6e34ab7ace7cf33b13fa0dab907a2a">Simplex</link> (<link linkend="__spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e">Vertices</link> const &amp;vertices)</para>
</listitem>
            <listitem><para>auto &amp; <link linkend="_class_simplex_1ab3328d220b10f9978d86a61a0f9c53c7">size</link> ()</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_simplex_1ae39ce6d0a47986ceabb9a76146a8225b">size</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_simplex_1acee756ff5f517c95c30b3dc7e99ea7d7">m_angles</link></para>
</listitem>
            <listitem><para><link linkend="_class_vertice">Vertice</link> <link linkend="_class_simplex_1a0d352c2bc1248646ccaff4236538a194">m_centroid</link> = <link linkend="_class_vertice">Vertice</link>(<link linkend="_class_simplex_1aed12d66219db915526fc70cc33c83505">m_dim</link>)</para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_class_simplex_1aed12d66219db915526fc70cc33c83505">m_dim</link> = 0</para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_class_simplex_1a78b6b0c0442a52c96872d063b999cc8f">m_size</link> = 0</para>
</listitem>
            <listitem><para><link linkend="__spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e">Vertices</link> <link linkend="_class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3">m_vertices</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_simplex_1ad893ac9de899c841e0e6ada82ea611b9"/>    <section>
    <title>Simplex()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>Simplex</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>Simplex</secondary></indexterm>
<para><computeroutput>Simplex::Simplex (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp; dim)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_ad893ac9de899c841e0e6ada82ea611b9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_simplex_1ac74b813d1b4b98e97d1c98157997d294"/>    <section>
    <title>Simplex()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>Simplex</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>Simplex</secondary></indexterm>
<para><computeroutput>Simplex::Simplex (<link linkend="_class_vertice">Vertice</link> const &amp; vertice)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Construct a simplex based on a vertice. </para>
</para>

<para>The simplex is built based on the dimension of the given vertex, which is then duplicated </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_ac74b813d1b4b98e97d1c98157997d294_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_simplex_1abd6e34ab7ace7cf33b13fa0dab907a2a"/>    <section>
    <title>Simplex()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>Simplex</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>Simplex</secondary></indexterm>
<para><computeroutput>Simplex::Simplex (<link linkend="__spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e">Vertices</link> const &amp; vertices)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_abd6e34ab7ace7cf33b13fa0dab907a2a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_simplex_1a2ff37bbc43bc7c86703f204c3510baa8"/>    <section>
    <title>Simplex()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>Simplex</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>Simplex</secondary></indexterm>
<para><computeroutput>Simplex::Simplex (<link linkend="_class_simplex">Simplex</link> const &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1a169c2796d3adf036611cdcf6772e46d1"/>    <section>
    <title>Simplex()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>Simplex</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>Simplex</secondary></indexterm>
<para><computeroutput>Simplex::Simplex (<link linkend="_class_simplex">Simplex</link> &amp;&amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_simplex_1af9f387b740699fc83d561b06a5e8305a"/>    <section>
    <title>begin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>begin</secondary></indexterm>
<para><computeroutput>auto Simplex::begin ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_af9f387b740699fc83d561b06a5e8305a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_simplex_1ad5161ef4f875383b9880f2401cefe71a"/>    <section>
    <title>begin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>begin</secondary></indexterm>
<para><computeroutput>auto Simplex::begin ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1af3f0b93fc1290f891ce99f72bd0e7b59"/>    <section>
    <title>centroid()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>centroid</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>centroid</secondary></indexterm>
<para><computeroutput>auto Simplex::centroid ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_af3f0b93fc1290f891ce99f72bd0e7b59_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_af3f0b93fc1290f891ce99f72bd0e7b59_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_simplex_1a4212e98efa0b1468955d32a51387f3fc"/>    <section>
    <title>centroid()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>centroid</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>centroid</secondary></indexterm>
<para><computeroutput>auto Simplex::centroid (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp; n_best)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_a4212e98efa0b1468955d32a51387f3fc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_a4212e98efa0b1468955d32a51387f3fc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_simplex_1afbcd974270009d3cec5f3253ae852cbc"/>    <section>
    <title>dim()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>dim</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>dim</secondary></indexterm>
<para><computeroutput>auto&amp; Simplex::dim ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1aed93fc950fa50599b289d5ac9e3356c7"/>    <section>
    <title>dim()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>dim</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>dim</secondary></indexterm>
<para><computeroutput>auto const&amp; Simplex::dim ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_aed93fc950fa50599b289d5ac9e3356c7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_simplex_1a43aa87c378225a78bf764a3c049ed381"/>    <section>
    <title>end()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>end</secondary></indexterm>
<para><computeroutput>auto Simplex::end ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_a43aa87c378225a78bf764a3c049ed381_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_simplex_1ae3a1f652ec439b823610f75846ae8067"/>    <section>
    <title>end()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>end</secondary></indexterm>
<para><computeroutput>auto Simplex::end ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1a3840674dbc694d4796b28c088da4c02e"/>    <section>
    <title>evaluate()</title>
<indexterm><primary>evaluate</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>evaluate</secondary></indexterm>
<para><computeroutput>void Simplex::evaluate (std::function&lt; double(const <link linkend="_class_vertice">Vertice</link> &amp;)&gt; objective_function)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_a3840674dbc694d4796b28c088da4c02e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_simplex_1a0ceff7d3432670abaddf74f5b223e62d"/>    <section>
    <title>getCentroid()</title>
<indexterm><primary>getCentroid</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>getCentroid</secondary></indexterm>
<para><computeroutput>auto const&amp; Simplex::getCentroid ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1a18363c969c478336afe053dc246495ce"/>    <section>
    <title>operator=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_simplex">Simplex</link>&amp; Simplex::operator= (<link linkend="_class_simplex">Simplex</link> &amp;&amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1a622f6bed00b73eb0b931cf65ee77d055"/>    <section>
    <title>operator=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_simplex">Simplex</link>&amp; Simplex::operator= (<link linkend="_class_simplex">Simplex</link> const &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1ac1a2bb63bb9b56da8457ecefe34e23e8"/>    <section>
    <title>operator=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_simplex">Simplex</link>&amp; Simplex::operator= (<link linkend="__spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e">Vertices</link> const &amp; vertices)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1a0bbdd7fe5cc1296b7c1da9232d78d182"/>    <section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput>auto&amp; Simplex::operator[] (int const &amp; i)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1a08239a3a6b994da2a445a7ea44c7b893"/>    <section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput>auto const&amp; Simplex::operator[] (int const &amp; i) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1aa4f7721e6989b27489d84cca5de99c07"/>    <section>
    <title>setVertice()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>setVertice</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>setVertice</secondary></indexterm>
<para><computeroutput>void Simplex::setVertice (int const &amp; bin, <link linkend="_class_vertice">Vertice</link> &amp;&amp; vertice)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_aa4f7721e6989b27489d84cca5de99c07_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_simplex_1ade818ac404caab90542e80143cbc63c0"/>    <section>
    <title>setVertice()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>setVertice</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>setVertice</secondary></indexterm>
<para><computeroutput>void Simplex::setVertice (int const &amp; bin, <link linkend="_class_vertice">Vertice</link> const &amp; vertice)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_ade818ac404caab90542e80143cbc63c0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_simplex_1ab3328d220b10f9978d86a61a0f9c53c7"/>    <section>
    <title>size()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>size</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>size</secondary></indexterm>
<para><computeroutput>auto&amp; Simplex::size ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1ae39ce6d0a47986ceabb9a76146a8225b"/>    <section>
    <title>size()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>size</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>size</secondary></indexterm>
<para><computeroutput>auto const&amp; Simplex::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_simplex_ae39ce6d0a47986ceabb9a76146a8225b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_simplex_1acee756ff5f517c95c30b3dc7e99ea7d7"/>    <section>
    <title>m_angles</title>
<indexterm><primary>m_angles</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>m_angles</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; Simplex::m_angles<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1a0d352c2bc1248646ccaff4236538a194"/>    <section>
    <title>m_centroid</title>
<indexterm><primary>m_centroid</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>m_centroid</secondary></indexterm>
<para><computeroutput><link linkend="_class_vertice">Vertice</link> Simplex::m_centroid = <link linkend="_class_vertice">Vertice</link>(<link linkend="_class_simplex_1aed12d66219db915526fc70cc33c83505">m_dim</link>)<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1aed12d66219db915526fc70cc33c83505"/>    <section>
    <title>m_dim</title>
<indexterm><primary>m_dim</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>m_dim</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> Simplex::m_dim = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1a78b6b0c0442a52c96872d063b999cc8f"/>    <section>
    <title>m_size</title>
<indexterm><primary>m_size</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>m_size</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> Simplex::m_size = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3"/>    <section>
    <title>m_vertices</title>
<indexterm><primary>m_vertices</primary><secondary>Simplex</secondary></indexterm>
<indexterm><primary>Simplex</primary><secondary>m_vertices</secondary></indexterm>
<para><computeroutput><link linkend="__spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e">Vertices</link> Simplex::m_vertices<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
lib/Analyse/<link linkend="__spectra_alignator_8hpp">SpectraAlignator.hpp</link></section>
</section>
