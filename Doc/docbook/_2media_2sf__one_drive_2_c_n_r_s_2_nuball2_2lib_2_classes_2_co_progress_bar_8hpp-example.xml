<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__2media_2sf__one_drive_2_c_n_r_s_2_nuball2_2lib_2_classes_2_co_progress_bar_8hpp-example" xml:lang="en-US">
<title>/media/sf_OneDrive/CNRS/Nuball2/lib/Classes/CoProgressBar.hpp</title>

<para>Displays an auto-updating progress</para>

<para><literallayout><computeroutput>   int i = 0;
   int max = 1000000;
   CoProgressBar prog(&amp;i, max);
   for (;i&lt;max; i++)
   {
     prog.show();
   }
</computeroutput></literallayout> <note><title>Note</title>

<para></para>
</note>
The various show methods go back to the beginning of the line at the end in order to update at next iteration. If you wich to display something else in between, please consider adding an extra end-line character (std::endl, &apos;\n&apos;) ...</para>

<para><literallayout><computeroutput><emphasis role="preprocessor">#ifndef&#32;COPROGRESSBAR_HPP</emphasis>
<emphasis role="preprocessor">#define&#32;COPROGRESSBAR_HPP</emphasis>

<emphasis role="preprocessor">#include&#32;&quot;../libCo.hpp&quot;</emphasis>
<emphasis role="preprocessor">#include&#32;&quot;<link linkend="__timer_8hpp">Timer.hpp</link>&quot;</emphasis>

<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_co_progress_bar">CoProgressBar</link>
{
<emphasis role="keyword">public</emphasis>:

&#32;&#32;<emphasis role="comment">//&#32;Constructors&#32;:</emphasis>
&#32;&#32;<link linkend="_class_co_progress_bar_1a81a2ac9c5cde4b3f528cc1cf207715fc">CoProgressBar</link>()&#32;noexcept&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
&#32;&#32;<link linkend="_class_co_progress_bar_1a81a2ac9c5cde4b3f528cc1cf207715fc">CoProgressBar</link>(T&#32;*&#32;value,&#32;<emphasis role="keywordtype">float</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;value_max)&#32;:&#32;<link linkend="_class_co_progress_bar_1ab54fee7f6cea3e105918836870d9e95e">m_value</link>(value),&#32;<link linkend="_class_co_progress_bar_1ae22504f867d4a07d27e6fed248cfcbaf">m_value_max</link>(value_max)&#32;{}
&#32;&#32;<link linkend="_class_co_progress_bar_1a81a2ac9c5cde4b3f528cc1cf207715fc">CoProgressBar</link>(T&#32;*&#32;value,&#32;<emphasis role="keywordtype">float</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;value_max,&#32;<emphasis role="keywordtype">int</emphasis>&#32;width)&#32;:&#32;<link linkend="_class_co_progress_bar_1ab54fee7f6cea3e105918836870d9e95e">m_value</link>(value),&#32;<link linkend="_class_co_progress_bar_1ae22504f867d4a07d27e6fed248cfcbaf">m_value_max</link>(value_max),&#32;<link linkend="_class_co_progress_bar_1a76f13195beb7ba1acce4f94ef511d7c2">m_width</link>(width)&#32;{}

&#32;&#32;<emphasis role="comment">//&#32;Settings&#32;methods&#32;:</emphasis>
&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_co_progress_bar_1a11bd8143244337b4e97858b176f43008">setValue</link>(T&#32;*&#32;value)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_class_co_progress_bar_1ab54fee7f6cea3e105918836870d9e95e">m_value</link>&#32;=&#32;value);}
&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_co_progress_bar_1a74e7041d7ecfdb4ce5963ba55c63206b">setValueMax</link>(<emphasis role="keywordtype">float</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;value_max)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_class_co_progress_bar_1ae22504f867d4a07d27e6fed248cfcbaf">m_value_max</link>&#32;=&#32;value_max);}

&#32;&#32;<emphasis role="comment">//&#32;Show&#32;methods&#32;:</emphasis>
&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_co_progress_bar_1a79b92711e75250b41c39aeeca73a1621">show</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;message&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_co_progress_bar_1a0f79e8a642786af052ee7f1356b4bf9d">showFast</link>();

<emphasis role="keyword">private</emphasis>:

&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_co_progress_bar_1a76f13195beb7ba1acce4f94ef511d7c2">m_width</link>&#32;=&#32;50;

&#32;&#32;T*&#32;<link linkend="_class_co_progress_bar_1ab54fee7f6cea3e105918836870d9e95e">m_value</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
&#32;&#32;T&#32;<link linkend="_class_co_progress_bar_1ae22504f867d4a07d27e6fed248cfcbaf">m_value_max</link>&#32;=&#32;0;
&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_co_progress_bar_1a12b03168cd124f1c597a003236748458">m_last_value</link>&#32;=&#32;0;

&#32;&#32;<link linkend="_class_timer">Timer</link>&#32;<link linkend="_class_co_progress_bar_1ab2fca97c06433ac5c2805cad130edf3a">timer</link>;

&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_co_progress_bar_1ae4588f4445f3e4cb4156d55987b93dc8">first_time</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
};

<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_co_progress_bar_1a0f79e8a642786af052ee7f1356b4bf9d">CoProgressBar&lt;T&gt;::showFast</link>()
{
&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_value)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d">throw_error</link>(<emphasis role="stringliteral">&quot;in&#32;CoProgressBar&lt;T&gt;::show()&#32;:&#32;the&#32;value&#32;has&#32;not&#32;been&#32;set&#32;!!&quot;</emphasis>);
&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_value_max&#32;==&#32;0)&#32;<link linkend="_lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d">throw_error</link>(<emphasis role="stringliteral">&quot;in&#32;CoProgressBar&lt;T&gt;::show()&#32;:&#32;the&#32;maximum&#32;value&#32;has&#32;not&#32;been&#32;set&#32;!!&quot;</emphasis>);

&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;real_procentage&#32;=&#32;<link linkend="_lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d">float_cast</link>(*m_value)/m_value_max;
&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;nb_chars&#32;=&#32;<link linkend="_lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a">int_cast</link>(real_procentage*m_width);

&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;|&quot;</emphasis>;
&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&lt;m_width;&#32;i++)&#32;
&#32;&#32;{
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&lt;nb_chars)&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>;
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
&#32;&#32;}
&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;|&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a">int_cast</link>(real_procentage*100)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;%&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\033[F&quot;</emphasis>;
&#32;&#32;std::cout.flush();
}

<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_co_progress_bar_1a79b92711e75250b41c39aeeca73a1621">CoProgressBar&lt;T&gt;::show</link>(std::string&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;message)
{
&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_value)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d">throw_error</link>(<emphasis role="stringliteral">&quot;in&#32;CoProgressBar&lt;T&gt;::show()&#32;:&#32;the&#32;value&#32;has&#32;not&#32;been&#32;set&#32;!!&quot;</emphasis>);
&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_value_max&#32;==&#32;0)&#32;<link linkend="_lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d">throw_error</link>(<emphasis role="stringliteral">&quot;in&#32;CoProgressBar&lt;T&gt;::show()&#32;:&#32;the&#32;maximum&#32;value&#32;has&#32;not&#32;been&#32;set&#32;!!&quot;</emphasis>);

&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;speed&#32;=&#32;0.f;
&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(first_time)&#32;{timer.Restart();&#32;speed&#32;=&#32;0;&#32;first_time&#32;=&#32;<emphasis role="keyword">false</emphasis>;}
&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{speed&#32;=&#32;100*((*m_value)-m_last_value)/(timer.TimeSec()*m_value_max);}

&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;real_procentage&#32;=&#32;<link linkend="_lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d">float_cast</link>(*m_value)/m_value_max;
&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;nb_chars&#32;=&#32;<link linkend="_lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a">int_cast</link>(real_procentage*m_width);

&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;|&quot;</emphasis>;
&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&lt;m_width;&#32;i++)&#32;
&#32;&#32;{
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&lt;nb_chars)&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>;
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
&#32;&#32;}
&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;|&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a">int_cast</link>(real_procentage*100)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;%&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;std::setprecision(3)&#32;&lt;&lt;&#32;speed&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;%/s)&quot;</emphasis>;
&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(message!=<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;std::cout&#32;&lt;&lt;&#32;message&#32;;
&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\033[F&quot;</emphasis>;<emphasis role="comment">//&#32;This&#32;code&#32;flushes&#32;the&#32;previous&#32;line</emphasis>
&#32;&#32;std::cout.flush();
&#32;&#32;timer.Restart();
&#32;&#32;m_last_value&#32;=&#32;*m_value;
}


<emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//COPROGRESSBAR_HPP</emphasis>
</computeroutput></literallayout> </para>
</section>
