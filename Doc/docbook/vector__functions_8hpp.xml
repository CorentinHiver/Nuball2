<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_vector__functions_8hpp" xml:lang="en-US">
<title>lib/vector_functions.hpp File Reference</title>
<indexterm><primary>lib/vector_functions.hpp</primary></indexterm>
<programlisting>#include &quot;print.hpp&quot;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
</programlisting>Include dependency graph for vector_functions.hpp:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="vector__functions_8hpp__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="vector__functions_8hpp__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_static_vector">StaticVector&lt; T &gt;</link></para>

<para>An efficient container for dynamic arrays with a known and fixed maximum size. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>template&lt;class T &gt; </para><para>using <link linkend="_vector__functions_8hpp_1aaa9a186c52f42a25042db671a3462fc0">vector2D</link> = std::vector&lt; std::vector&lt; T &gt; &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename T &gt; </para><para>std::vector&lt; int &gt; <link linkend="_vector__functions_8hpp_1ab624cd9b69dafa0701b213f5bb78f911">bubble_sort</link> (std::vector&lt; T &gt; const &amp;vector)</para>

<para>Order the vector from lower to higher value. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>std::vector&lt; int &gt; &amp; <link linkend="_vector__functions_8hpp_1a516812808c1a19cf37a17258f1789ab8">bubble_sort</link> (std::vector&lt; T &gt; const &amp;vector, std::vector&lt; int &gt; &amp;ordered_indexes)</para>

<para>Order the vector from lower to higer value. </para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>void <link linkend="_vector__functions_8hpp_1a5369c19ff7c2d997fd60b179355cf4ab">fill2D</link> (<link linkend="_vector__functions_8hpp_1aaa9a186c52f42a25042db671a3462fc0">vector2D</link>&lt; T &gt; &amp;vec2, <link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp;size_x, <link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp;size_y, T const &amp;obj)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>int <link linkend="_vector__functions_8hpp_1ad399307162129e2996e7bf6e172d97c9">first_index_in</link> (std::vector&lt; T &gt; &amp;vec, T &amp;t)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>int <link linkend="_vector__functions_8hpp_1a1c17744fe137b021b31046a91e5cc48d">first_index_in</link> (std::vector&lt; T &gt; &amp;vec, T const &amp;t)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>int <link linkend="_vector__functions_8hpp_1a33c3dce17ce8a71de19b23be1ba9a911">first_index_in</link> (std::vector&lt; T &gt; const &amp;vec, T &amp;t)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>int <link linkend="_vector__functions_8hpp_1a95e8e3cb71dee9535c987ed8ac3c6d62">first_index_in</link> (std::vector&lt; T &gt; const &amp;vec, T const &amp;t)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>bool <link linkend="_vector__functions_8hpp_1a2a2fe6c64692ae7368f063010a0ff97a">found</link> (std::vector&lt; T &gt; &amp;vec, T &amp;t)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>bool <link linkend="_vector__functions_8hpp_1aa193795728880d807cbe2bf87bdcae1c">found</link> (std::vector&lt; T &gt; &amp;vec, T const &amp;t)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>bool <link linkend="_vector__functions_8hpp_1a398a0aa495662f73ab4d2dfdd2bc2265">found</link> (std::vector&lt; T &gt; const &amp;vec, T &amp;t)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>bool <link linkend="_vector__functions_8hpp_1ae1d15cdbd76f2b9d444bc29b0cdb91bc">found</link> (std::vector&lt; T &gt; const &amp;vec, T const &amp;t)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_vector__functions_8hpp_1ae440336f79b368a77ed28266f6f8ab6e">invert</link> (std::vector&lt; T &gt; &amp;vector)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>T <link linkend="_vector__functions_8hpp_1a4baf3e978c4b72d0b3c52b064fa3c03e">maximum</link> (std::vector&lt; T &gt; const &amp;vector)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>T <link linkend="_vector__functions_8hpp_1a84e7da8df2ed95366eab92464c82cca3">maximum_index</link> (std::vector&lt; T &gt; const &amp;vector)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>T <link linkend="_vector__functions_8hpp_1a233e14aaf671f05f29c0fe50e646f171">minimum</link> (std::vector&lt; T &gt; const &amp;vector)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>T <link linkend="_vector__functions_8hpp_1a5b62e7b42c7d486ff60e1dc978b5279d">minimum_index</link> (std::vector&lt; T &gt; const &amp;vector)</para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>std::ostream &amp; <link linkend="_vector__functions_8hpp_1a8852828b5aaff87e96c53054a243209d">operator&lt;&lt;</link> (std::ostream &amp;cout, <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt; const &amp;vector)</para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>std::istream &amp; <link linkend="_vector__functions_8hpp_1af8f06ed14ec8b1697169763a8d895105">operator&gt;&gt;</link> (std::istream &amp;input, std::vector&lt; T &gt; vector)</para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>std::istringstream &amp; <link linkend="_vector__functions_8hpp_1a197f281dbd89780c3e0c6e50192cf637">operator&gt;&gt;</link> (std::istringstream &amp;is, std::vector&lt; T &gt; &amp;v)</para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>std::vector&lt; T &gt; <link linkend="_vector__functions_8hpp_1a48d303dc1acbf76836ad27b051168372">push_back</link> (std::vector&lt; T &gt; const &amp;target, std::vector&lt; T &gt; const &amp;source)</para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>std::vector&lt; T &gt; <link linkend="_vector__functions_8hpp_1a1351ef703b7cf695131924cc97eb6374">push_back</link> (std::vector&lt; T &gt; const &amp;target, T const &amp;value)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>bool <link linkend="_vector__functions_8hpp_1a0714a23fb316299fdee1e44d9f46343b">push_back_unique</link> (std::vector&lt; T &gt; &amp;vector, T const &amp;t)</para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>auto <link linkend="_vector__functions_8hpp_1a629f2e4117a0bb1dada5aa3a4fad4765">sub_vec</link> (std::vector&lt; T &gt; const &amp;vec, int const &amp;start, int const &amp;length)</para>

<para>Returns the vector in the range [start, start+length[. </para>
</listitem>
            <listitem><para>template&lt;class T &gt; </para><para>T <link linkend="_vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39">sum</link> (std::vector&lt; T &gt; const &amp;source)</para>
</listitem>
            <listitem><para>template&lt;class K , class V &gt; </para><para>void <link linkend="_vector__functions_8hpp_1a87f9787c265733ed96cea09867b8558a">unpack</link> (std::vector&lt; std::pair&lt; K, V &gt;&gt; const &amp;pairs, std::vector&lt; K &gt; &amp;keys, std::vector&lt; V &gt; &amp;values)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_vector__functions_8hpp_1aaa9a186c52f42a25042db671a3462fc0"/>    <section>
    <title>vector2D</title>
<indexterm><primary>vector2D</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>vector2D</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>using <link linkend="_vector__functions_8hpp_1aaa9a186c52f42a25042db671a3462fc0">vector2D</link> =  std::vector&lt;std::vector&lt;T&gt; &gt;</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_vector__functions_8hpp_1ab624cd9b69dafa0701b213f5bb78f911"/>    <section>
    <title>bubble_sort()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>bubble_sort</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>bubble_sort</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>std::vector&lt;int&gt; bubble_sort (std::vector&lt; T &gt; const &amp; vector)</computeroutput></para><para>

<para>Order the vector from lower to higher value. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="vector__functions_8hpp_ab624cd9b69dafa0701b213f5bb78f911_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_vector__functions_8hpp_1a516812808c1a19cf37a17258f1789ab8"/>    <section>
    <title>bubble_sort()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>bubble_sort</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>bubble_sort</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>std::vector&lt;int&gt;&amp; bubble_sort (std::vector&lt; T &gt; const &amp; vector, std::vector&lt; int &gt; &amp; ordered_indexes)</computeroutput></para><para>

<para>Order the vector from lower to higer value. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="vector__functions_8hpp_a516812808c1a19cf37a17258f1789ab8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="vector__functions_8hpp_a516812808c1a19cf37a17258f1789ab8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_vector__functions_8hpp_1a5369c19ff7c2d997fd60b179355cf4ab"/>    <section>
    <title>fill2D()</title>
<indexterm><primary>fill2D</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>fill2D</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void fill2D (<link linkend="_vector__functions_8hpp_1aaa9a186c52f42a25042db671a3462fc0">vector2D</link>&lt; T &gt; &amp; vec2, <link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp; size_x, <link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> const &amp; size_y, T const &amp; obj)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1ad399307162129e2996e7bf6e172d97c9"/>    <section>
    <title>first_index_in()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>first_index_in</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>first_index_in</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int first_index_in (std::vector&lt; T &gt; &amp; vec, T &amp; t)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="vector__functions_8hpp_ad399307162129e2996e7bf6e172d97c9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_vector__functions_8hpp_1a1c17744fe137b021b31046a91e5cc48d"/>    <section>
    <title>first_index_in()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>first_index_in</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>first_index_in</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int first_index_in (std::vector&lt; T &gt; &amp; vec, T const &amp; t)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1a33c3dce17ce8a71de19b23be1ba9a911"/>    <section>
    <title>first_index_in()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>first_index_in</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>first_index_in</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int first_index_in (std::vector&lt; T &gt; const &amp; vec, T &amp; t)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1a95e8e3cb71dee9535c987ed8ac3c6d62"/>    <section>
    <title>first_index_in()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>first_index_in</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>first_index_in</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int first_index_in (std::vector&lt; T &gt; const &amp; vec, T const &amp; t)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1a2a2fe6c64692ae7368f063010a0ff97a"/>    <section>
    <title>found()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>found</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>found</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool found (std::vector&lt; T &gt; &amp; vec, T &amp; t)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1aa193795728880d807cbe2bf87bdcae1c"/>    <section>
    <title>found()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>found</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>found</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool found (std::vector&lt; T &gt; &amp; vec, T const &amp; t)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1a398a0aa495662f73ab4d2dfdd2bc2265"/>    <section>
    <title>found()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>found</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>found</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool found (std::vector&lt; T &gt; const &amp; vec, T &amp; t)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1ae1d15cdbd76f2b9d444bc29b0cdb91bc"/>    <section>
    <title>found()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>found</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>found</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool found (std::vector&lt; T &gt; const &amp; vec, T const &amp; t)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1ae440336f79b368a77ed28266f6f8ab6e"/>    <section>
    <title>invert()</title>
<indexterm><primary>invert</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>invert</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void invert (std::vector&lt; T &gt; &amp; vector)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="vector__functions_8hpp_ae440336f79b368a77ed28266f6f8ab6e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_vector__functions_8hpp_1a4baf3e978c4b72d0b3c52b064fa3c03e"/>    <section>
    <title>maximum()</title>
<indexterm><primary>maximum</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>maximum</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T maximum (std::vector&lt; T &gt; const &amp; vector)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="vector__functions_8hpp_a4baf3e978c4b72d0b3c52b064fa3c03e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_vector__functions_8hpp_1a84e7da8df2ed95366eab92464c82cca3"/>    <section>
    <title>maximum_index()</title>
<indexterm><primary>maximum_index</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>maximum_index</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T maximum_index (std::vector&lt; T &gt; const &amp; vector)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1a233e14aaf671f05f29c0fe50e646f171"/>    <section>
    <title>minimum()</title>
<indexterm><primary>minimum</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>minimum</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T minimum (std::vector&lt; T &gt; const &amp; vector)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1a5b62e7b42c7d486ff60e1dc978b5279d"/>    <section>
    <title>minimum_index()</title>
<indexterm><primary>minimum_index</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>minimum_index</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T minimum_index (std::vector&lt; T &gt; const &amp; vector)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1a8852828b5aaff87e96c53054a243209d"/>    <section>
    <title>operator&lt;&lt;()</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; cout, <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt; const &amp; vector)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1af8f06ed14ec8b1697169763a8d895105"/>    <section>
    <title>operator&gt;&gt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>std::istream&amp; operator&gt;&gt; (std::istream &amp; input, std::vector&lt; T &gt; vector)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1a197f281dbd89780c3e0c6e50192cf637"/>    <section>
    <title>operator&gt;&gt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>std::istringstream&amp; operator&gt;&gt; (std::istringstream &amp; is, std::vector&lt; T &gt; &amp; v)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1a48d303dc1acbf76836ad27b051168372"/>    <section>
    <title>push_back()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>push_back</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>push_back</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>std::vector&lt;T&gt; push_back (std::vector&lt; T &gt; const &amp; target, std::vector&lt; T &gt; const &amp; source)</computeroutput></para>    </section><anchor xml:id="_vector__functions_8hpp_1a1351ef703b7cf695131924cc97eb6374"/>    <section>
    <title>push_back()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>push_back</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>push_back</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>std::vector&lt;T&gt; push_back (std::vector&lt; T &gt; const &amp; target, T const &amp; value)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="vector__functions_8hpp_a1351ef703b7cf695131924cc97eb6374_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_vector__functions_8hpp_1a0714a23fb316299fdee1e44d9f46343b"/>    <section>
    <title>push_back_unique()</title>
<indexterm><primary>push_back_unique</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>push_back_unique</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool push_back_unique (std::vector&lt; T &gt; &amp; vector, T const &amp; t)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="vector__functions_8hpp_a0714a23fb316299fdee1e44d9f46343b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_vector__functions_8hpp_1a629f2e4117a0bb1dada5aa3a4fad4765"/>    <section>
    <title>sub_vec()</title>
<indexterm><primary>sub_vec</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>sub_vec</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>auto sub_vec (std::vector&lt; T &gt; const &amp; vec, int const &amp; start, int const &amp; length)</computeroutput></para><para>

<para>Returns the vector in the range [start, start+length[. </para>
</para>

<para>E.g. vec = {1,2,3,4,5} ; sub_vec(vec, 1, 3) -&gt; {2, 3, 4}; </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="vector__functions_8hpp_a629f2e4117a0bb1dada5aa3a4fad4765_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39"/>    <section>
    <title>sum()</title>
<indexterm><primary>sum</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>sum</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>T sum (std::vector&lt; T &gt; const &amp; source)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="vector__functions_8hpp_a2b29a4762dbbff2cabcb7e8a62cb0d39_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_vector__functions_8hpp_1a87f9787c265733ed96cea09867b8558a"/>    <section>
    <title>unpack()</title>
<indexterm><primary>unpack</primary><secondary>vector_functions.hpp</secondary></indexterm>
<indexterm><primary>vector_functions.hpp</primary><secondary>unpack</secondary></indexterm>
<computeroutput>template&lt;class K , class V &gt; </computeroutput><para><computeroutput>void unpack (std::vector&lt; std::pair&lt; K, V &gt;&gt; const &amp; pairs, std::vector&lt; K &gt; &amp; keys, std::vector&lt; V &gt; &amp; values)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="vector__functions_8hpp_a87f9787c265733ed96cea09867b8558a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
