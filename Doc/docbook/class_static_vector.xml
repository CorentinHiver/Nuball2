<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_static_vector" xml:lang="en-US">
<title>StaticVector&lt; T &gt; Class Template Reference</title>
<indexterm><primary>StaticVector&lt; T &gt;</primary></indexterm>
<para>

<para>An efficient container for dynamic arrays with a known and fixed maximum size. </para>
 
</para>
<para>
<computeroutput>#include &lt;vector_functions.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>T const  &amp; <link linkend="_class_static_vector_1adb781bb9deb3bb03929efd86ec024ea1">at</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp;i) const</para>

<para>Return the ith element and check i do not exceed the size of the vector. </para>
</listitem>
            <listitem><para>virtual T * <link linkend="_class_static_vector_1a78db68071e02cf724af349d0e606ea4e">begin</link> ()</para>

<para>Return iterator to the beginning of the vector. </para>
</listitem>
            <listitem><para>virtual T * <link linkend="_class_static_vector_1a4adf4196edf343a347c758ac9ad61be1">begin</link> () const</para>

<para>Return iterator to the beginning of the vector. </para>
</listitem>
            <listitem><para>void <link linkend="_class_static_vector_1a581a28f823edc9d3fbfa959465004f12">checkCapacity</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_static_vector_1a28a635b7f2cbd0cbc5a042dc22ab7ea3">checkCapacity</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_static_vector_1a9c5d814a81b352ebbb5d8a07cbdd2699">clear</link> ()</para>
</listitem>
            <listitem><para>T * <link linkend="_class_static_vector_1a7d5be1902e52590f04d726d14c25db8d">data</link> ()</para>

<para>Return a pointer to the underlying data. </para>
</listitem>
            <listitem><para>void <link linkend="_class_static_vector_1a3e8eb7b20f56c54b32640267e6e797bc">deallocate</link> ()</para>

<para>Deletes the underlying data. </para>
</listitem>
            <listitem><para>virtual T * <link linkend="_class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f">end</link> ()</para>

<para>Return iterator to the end of the vector. </para>
</listitem>
            <listitem><para>virtual T * <link linkend="_class_static_vector_1aff91554484ba655f02b84fbe17276332">end</link> () const</para>

<para>Return iterator to the end of the vector. </para>
</listitem>
            <listitem><para>void <link linkend="_class_static_vector_1aeb818a6ce377300792c49ac51bec0f02">fill</link> (T const &amp;e)</para>

<para>Fills the vector with element e within user size. </para>
</listitem>
            <listitem><para>void <link linkend="_class_static_vector_1a39189c70d033178ce16024a824343409">fill_static</link> (T const &amp;e)</para>

<para>Fills the vector with element e within static size. </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_static_vector_1aa5ed2c50cf5c44e9685430f0aa6be160">has</link> (T &amp;t) const</para>

<para>Does the vector contain element e ? </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_static_vector_1ad756be87d5c09054f47d40e38ce4b45f">has</link> (T const &amp;t) const</para>

<para>Does the vector contain element e ? </para>
</listitem>
            <listitem><para>void <link linkend="_class_static_vector_1a20da4a5384ac01b54c19c563888fe3a3">move_back</link> (T &amp;&amp;e)</para>

<para>Move the element to the back of the vector. Use for performances. Unsafe. define SAFE for less performance but size checking. </para>
</listitem>
            <listitem><para><link linkend="_class_static_vector">StaticVector</link> &amp; <link linkend="_class_static_vector_1a9b1f4393056e120458e8d10da7222aa7">operator=</link> (<link linkend="_class_static_vector">StaticVector</link>&lt; T &gt; const &amp;vector)</para>

<para>Copy the values of another vector. </para>
</listitem>
            <listitem><para>T &amp; <link linkend="_class_static_vector_1ae2fa694636166997299fc80186d2c7dc">operator[]</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp;i) const</para>

<para>Return the ith element. </para>
</listitem>
            <listitem><para>void <link linkend="_class_static_vector_1a8f604b0f4165d95a6b6653907c92ceb3">push_back</link> (T const &amp;e)</para>

<para>Add element to the back of the vector. Use for performances. Unsafe. define SAFE for less performance but size checking. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_static_vector_1ae9a13402fed613a29197e99ce20396f8">push_back_unique</link> (T const &amp;t)</para>

<para>Add element to the back of the vector only if the vector do not contain it. </para>
</listitem>
            <listitem><para>void <link linkend="_class_static_vector_1aac46f946b1d5b09e8713eac121594a06">reserve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_static_vector_1ae292e425773c82dc9eb20db025963e29">resize</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp;new_size=0)</para>

<para>Only reset the user size to new_size (default 0). Do not touch the data. Use for performances. </para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_static_vector_1a44b964207cfd132dda347e246a3640c8">size</link> () const</para>

<para>Return the position of the write cursor. </para>
</listitem>
            <listitem><para>void <link linkend="_class_static_vector_1a25564f07e92dd67a4f6bc0dfeaaad31b">static_resize</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp;new_size, T const &amp;t)</para>
</listitem>
            <listitem><para>void <link linkend="_class_static_vector_1a3f31307e19e313fb7b4b93f284194f52">static_resize</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp;new_size=0)</para>

<para>Delete memory, reset the user size to 0 and allocate new_size memory. </para>
</listitem>
            <listitem><para><link linkend="_class_static_vector_1a5b3dc3f31d7b676540c171832d244304">StaticVector</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="_class_static_vector_1a27bc6181b4ef6643f3abc9c91d728349">StaticVector</link> (<link linkend="_class_static_vector">StaticVector</link>&lt; T &gt; &amp;&amp;other)</para>

<para>Move contructor. </para>
</listitem>
            <listitem><para><link linkend="_class_static_vector_1a982fd40392e5c546da6ba2360f59fe55">StaticVector</link> (<link linkend="_class_static_vector">StaticVector</link>&lt; T &gt; const &amp;vector)</para>

<para>Create a new Static_vector by copy (duplicate) </para>
</listitem>
            <listitem><para><link linkend="_class_static_vector_1a1fd1ac7d3e54a74084f25ecad026c79c">StaticVector</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp;static_size)</para>

<para>Create a new Static_vector with size static_size. </para>
</listitem>
            <listitem><para><link linkend="_class_static_vector_1a2c073e13f79566c96c4a28837cbcc358">StaticVector</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp;static_size, T const &amp;e)</para>

<para>Create a new Static_vector with size static_size and fill it with element e. </para>
</listitem>
            <listitem><para><link linkend="_class_static_vector_1a5170abb13005d53067431140a679ce4b">~StaticVector</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>T * <link linkend="_class_static_vector_1af9f68b36479f70b30a68e2a7c1503154">m_data</link></para>
</listitem>
            <listitem><para>bool <link linkend="_class_static_vector_1aad06f563cf46c8038677140a57d928ed">m_deleted</link> = false</para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a">m_dynamic_size</link> = 0</para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_class_static_vector_1aaa12257ef000a52e60da489d80027dde">m_static_size</link> = 0</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class T&gt;
class StaticVector&lt; T &gt;</title></simplesect>


<para>An efficient container for dynamic arrays with a known and fixed maximum size. </para>



<para><caution><title>Attention</title>

<para>Prototype, has some memory management issues in some cases ... </para>
</caution>
<para><link linkend="_deprecated_1_deprecated000012">Deprecated</link> 
<para>With optimisation option, std::vector is almost as efficient as this class ... </para>
</para></para>

<para>This class is meant to handle a vector of data that needs to be resized a lot. To do so, declare it this way : <literallayout><computeroutput> static_vector&lt;T&gt; my_vec = static_vector&lt;T&gt;(maximum_size);
</computeroutput></literallayout> If not in an object prototype, simply : <literallayout><computeroutput> auto my_vec = static_vector&lt;T&gt;(maximum_size);
</computeroutput></literallayout> You can fill the whole vector with some value : <literallayout><computeroutput> auto my_vec = static_vector&lt;T&gt;(maximum_size, fill_value);
 // or :
 my_vec.fill(fill_value);
</computeroutput></literallayout> Now, you can use this vector just like a regular std::vector : <literallayout><computeroutput> my_vec.push_back(t);
 my_vec.push_back(t2);
 my_vec.push_back(t3);
 // Do some stuff
 my_vec.resize(0);
</computeroutput></literallayout> <caution><title>Attention</title>

<para>keep in mind you cannot exceed the capacity of the vector.</para>
</caution>
If you want not to crash you application if the capacity is reached, use push_back_safe instead.</para>

<para>An interesting feature is push_back_unique(t). This allows one to push_back t only if it has not been found in the vector. It may require t to have a comparison operator (not tested yet).</para>

<para>Now, if for some reason you want to modify the capacity of the vector, you can use static_resize(new_size). </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_static_vector_1a5b3dc3f31d7b676540c171832d244304"/>    <section>
    <title>StaticVector()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>StaticVector</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>StaticVector</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::<link linkend="_class_static_vector">StaticVector</link> ( )<computeroutput>[default]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_static_vector_1a1fd1ac7d3e54a74084f25ecad026c79c"/>    <section>
    <title>StaticVector()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>StaticVector</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>StaticVector</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::<link linkend="_class_static_vector">StaticVector</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp; static_size)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Create a new Static_vector with size static_size. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a1fd1ac7d3e54a74084f25ecad026c79c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1a2c073e13f79566c96c4a28837cbcc358"/>    <section>
    <title>StaticVector()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>StaticVector</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>StaticVector</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::<link linkend="_class_static_vector">StaticVector</link> (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp; static_size, T const &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Create a new Static_vector with size static_size and fill it with element e. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a2c073e13f79566c96c4a28837cbcc358_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1a982fd40392e5c546da6ba2360f59fe55"/>    <section>
    <title>StaticVector()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>StaticVector</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>StaticVector</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::<link linkend="_class_static_vector">StaticVector</link> (<link linkend="_class_static_vector">StaticVector</link>&lt; T &gt; const &amp; vector)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Create a new Static_vector by copy (duplicate) </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a982fd40392e5c546da6ba2360f59fe55_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1a27bc6181b4ef6643f3abc9c91d728349"/>    <section>
    <title>StaticVector()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>StaticVector</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>StaticVector</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::<link linkend="_class_static_vector">StaticVector</link> (<link linkend="_class_static_vector">StaticVector</link>&lt; T &gt; &amp;&amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Move contructor. </para>
</para>
    </section><anchor xml:id="_class_static_vector_1a5170abb13005d53067431140a679ce4b"/>    <section>
    <title>~StaticVector()</title>
<indexterm><primary>~StaticVector</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>~StaticVector</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::~<link linkend="_class_static_vector">StaticVector</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a5170abb13005d53067431140a679ce4b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_static_vector_1adb781bb9deb3bb03929efd86ec024ea1"/>    <section>
    <title>at()</title>
<indexterm><primary>at</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>at</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>T const&amp; <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::at (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp; i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return the ith element and check i do not exceed the size of the vector. </para>
</para>
    </section><anchor xml:id="_class_static_vector_1a78db68071e02cf724af349d0e606ea4e"/>    <section>
    <title>begin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>virtual T* <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return iterator to the beginning of the vector. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a78db68071e02cf724af349d0e606ea4e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1a4adf4196edf343a347c758ac9ad61be1"/>    <section>
    <title>begin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>virtual T* <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::begin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return iterator to the beginning of the vector. </para>
</para>
    </section><anchor xml:id="_class_static_vector_1a581a28f823edc9d3fbfa959465004f12"/>    <section>
    <title>checkCapacity()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>checkCapacity</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>checkCapacity</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::checkCapacity ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_static_vector_1a28a635b7f2cbd0cbc5a042dc22ab7ea3"/>    <section>
    <title>checkCapacity()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>checkCapacity</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>checkCapacity</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::checkCapacity ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a28a635b7f2cbd0cbc5a042dc22ab7ea3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1a9c5d814a81b352ebbb5d8a07cbdd2699"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>clear</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::clear ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a9c5d814a81b352ebbb5d8a07cbdd2699_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1a7d5be1902e52590f04d726d14c25db8d"/>    <section>
    <title>data()</title>
<indexterm><primary>data</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>data</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>T* <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::data ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return a pointer to the underlying data. </para>
</para>
    </section><anchor xml:id="_class_static_vector_1a3e8eb7b20f56c54b32640267e6e797bc"/>    <section>
    <title>deallocate()</title>
<indexterm><primary>deallocate</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>deallocate</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::deallocate ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Deletes the underlying data. </para>
</para>
    </section><anchor xml:id="_class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f"/>    <section>
    <title>end()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>end</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>virtual T* <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return iterator to the end of the vector. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_ae80eaa7fb165b6408406870253bd8e5f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1aff91554484ba655f02b84fbe17276332"/>    <section>
    <title>end()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>end</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>virtual T* <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::end ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return iterator to the end of the vector. </para>
</para>
    </section><anchor xml:id="_class_static_vector_1aeb818a6ce377300792c49ac51bec0f02"/>    <section>
    <title>fill()</title>
<indexterm><primary>fill</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>fill</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::fill (T const &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Fills the vector with element e within user size. </para>
</para>
    </section><anchor xml:id="_class_static_vector_1a39189c70d033178ce16024a824343409"/>    <section>
    <title>fill_static()</title>
<indexterm><primary>fill_static</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>fill_static</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::fill_static (T const &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Fills the vector with element e within static size. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a39189c70d033178ce16024a824343409_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1aa5ed2c50cf5c44e9685430f0aa6be160"/>    <section>
    <title>has()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>has</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>has</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>virtual bool <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::has (T &amp; t) const<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Does the vector contain element e ? </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>t</entry>
                                <entry>
<para>direct access to the variable </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_aa5ed2c50cf5c44e9685430f0aa6be160_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1ad756be87d5c09054f47d40e38ce4b45f"/>    <section>
    <title>has()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>has</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>has</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>virtual bool <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::has (T const &amp; t) const<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Does the vector contain element e ? </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>t</entry>
                                <entry>
<para>variable in read-only mode </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_ad756be87d5c09054f47d40e38ce4b45f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_ad756be87d5c09054f47d40e38ce4b45f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1a20da4a5384ac01b54c19c563888fe3a3"/>    <section>
    <title>move_back()</title>
<indexterm><primary>move_back</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>move_back</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::move_back (T &amp;&amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Move the element to the back of the vector. Use for performances. Unsafe. define SAFE for less performance but size checking. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a20da4a5384ac01b54c19c563888fe3a3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1a9b1f4393056e120458e8d10da7222aa7"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_class_static_vector">StaticVector</link>&amp; <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::operator= (<link linkend="_class_static_vector">StaticVector</link>&lt; T &gt; const &amp; vector)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy the values of another vector. </para>
</para>
    </section><anchor xml:id="_class_static_vector_1ae2fa694636166997299fc80186d2c7dc"/>    <section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>T&amp; <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::operator[] (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp; i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return the ith element. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_ae2fa694636166997299fc80186d2c7dc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1a8f604b0f4165d95a6b6653907c92ceb3"/>    <section>
    <title>push_back()</title>
<indexterm><primary>push_back</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>push_back</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::push_back (T const &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Add element to the back of the vector. Use for performances. Unsafe. define SAFE for less performance but size checking. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a8f604b0f4165d95a6b6653907c92ceb3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a8f604b0f4165d95a6b6653907c92ceb3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1ae9a13402fed613a29197e99ce20396f8"/>    <section>
    <title>push_back_unique()</title>
<indexterm><primary>push_back_unique</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>push_back_unique</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::push_back_unique (T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Add element to the back of the vector only if the vector do not contain it. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_ae9a13402fed613a29197e99ce20396f8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_ae9a13402fed613a29197e99ce20396f8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1aac46f946b1d5b09e8713eac121594a06"/>    <section>
    <title>reserve()</title>
<indexterm><primary>reserve</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>reserve</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::reserve ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_aac46f946b1d5b09e8713eac121594a06_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1ae292e425773c82dc9eb20db025963e29"/>    <section>
    <title>resize()</title>
<indexterm><primary>resize</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>resize</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::resize (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp; new_size = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Only reset the user size to new_size (default 0). Do not touch the data. Use for performances. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_ae292e425773c82dc9eb20db025963e29_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1a44b964207cfd132dda347e246a3640c8"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>auto const&amp; <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return the position of the write cursor. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a44b964207cfd132dda347e246a3640c8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1a25564f07e92dd67a4f6bc0dfeaaad31b"/>    <section>
    <title>static_resize()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>static_resize</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>static_resize</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::static_resize (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp; new_size, T const &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a25564f07e92dd67a4f6bc0dfeaaad31b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_static_vector_1a3f31307e19e313fb7b4b93f284194f52"/>    <section>
    <title>static_resize()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>static_resize</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>static_resize</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::static_resize (<link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">std::size_t</link> const &amp; new_size = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Delete memory, reset the user size to 0 and allocate new_size memory. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a3f31307e19e313fb7b4b93f284194f52_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_static_vector_a3f31307e19e313fb7b4b93f284194f52_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_static_vector_1af9f68b36479f70b30a68e2a7c1503154"/>    <section>
    <title>m_data</title>
<indexterm><primary>m_data</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>m_data</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>T* <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::m_data<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_static_vector_1aad06f563cf46c8038677140a57d928ed"/>    <section>
    <title>m_deleted</title>
<indexterm><primary>m_deleted</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>m_deleted</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::m_deleted = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a"/>    <section>
    <title>m_dynamic_size</title>
<indexterm><primary>m_dynamic_size</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>m_dynamic_size</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::m_dynamic_size = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_static_vector_1aaa12257ef000a52e60da489d80027dde"/>    <section>
    <title>m_static_size</title>
<indexterm><primary>m_static_size</primary><secondary>StaticVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>StaticVector&lt; T &gt;</primary><secondary>m_static_size</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_class_static_vector">StaticVector</link>&lt; T &gt;::m_static_size = 0<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
lib/<link linkend="_vector__functions_8hpp">vector_functions.hpp</link></section>
</section>
