<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_co_data_frame" xml:lang="en-US">
<title>CoDataFrame&lt; Index, T &gt; Class Template Reference</title>
<indexterm><primary>CoDataFrame&lt; Index, T &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;files_functions.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_co_data_frame_1a8b4711944af95ac655a64d7c6ae642ad">CoDataFrame</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="_class_co_data_frame_1acefddf32b3e68daa5e8616c50adf670a">CoDataFrame</link> (std::string const &amp;<link linkend="_class_co_data_frame_1a1aff8a5a81105e495961fe2610c60c35">filename</link>, std::string const &amp;type=&quot;csv&quot;)</para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_co_data_frame_1a1aff8a5a81105e495961fe2610c60c35">filename</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_co_data_frame_1a0bcdc865bd25f1835e17f471349e2d6f">load</link> (std::string const &amp;<link linkend="_class_co_data_frame_1a1aff8a5a81105e495961fe2610c60c35">filename</link>, std::string const &amp;type)</para>
</listitem>
            <listitem><para>void <link linkend="_class_co_data_frame_1a62ae554984ec74b6217dc716bff3bf06">operator&lt;&lt;</link> (std::istringstream &amp;iss)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_co_data_frame_1a06bba67b6dee06535e14218320751c2c">good</link> = false</para>
</listitem>
            <listitem><para>std::vector&lt; std::vector&lt; T &gt; &gt; <link linkend="_class_co_data_frame_1af2798a5ea665091240b51eb2373f3c35">m_data</link></para>
</listitem>
            <listitem><para>std::string <link linkend="_class_co_data_frame_1aab49f63af655fd9bea2efb8952dfcac4">m_filename</link></para>
</listitem>
            <listitem><para>std::vector&lt; Index &gt; <link linkend="_class_co_data_frame_1a00eee215324aa22e4001d8f1e09dc2b0">m_index</link></para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_class_co_data_frame_1a73c25cc0f8b810b051f3e0c5c3dedfcc">size</link> = 0</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_co_data_frame_1a8b4711944af95ac655a64d7c6ae642ad"/>    <section>
    <title>CoDataFrame()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>CoDataFrame</primary><secondary>CoDataFrame&lt; Index, T &gt;</secondary></indexterm>
<indexterm><primary>CoDataFrame&lt; Index, T &gt;</primary><secondary>CoDataFrame</secondary></indexterm>
<computeroutput>template&lt;class Index , class T &gt; </computeroutput><para><computeroutput><link linkend="_class_co_data_frame">CoDataFrame</link>&lt; Index, T &gt;::<link linkend="_class_co_data_frame">CoDataFrame</link> ( )<computeroutput>[default]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_co_data_frame_1acefddf32b3e68daa5e8616c50adf670a"/>    <section>
    <title>CoDataFrame()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>CoDataFrame</primary><secondary>CoDataFrame&lt; Index, T &gt;</secondary></indexterm>
<indexterm><primary>CoDataFrame&lt; Index, T &gt;</primary><secondary>CoDataFrame</secondary></indexterm>
<computeroutput>template&lt;class Index , class T &gt; </computeroutput><para><computeroutput><link linkend="_class_co_data_frame">CoDataFrame</link>&lt; Index, T &gt;::<link linkend="_class_co_data_frame">CoDataFrame</link> (std::string const &amp; filename, std::string const &amp; type = <computeroutput>&quot;csv&quot;</computeroutput>
)</computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_co_data_frame_1a1aff8a5a81105e495961fe2610c60c35"/>    <section>
    <title>filename()</title>
<indexterm><primary>filename</primary><secondary>CoDataFrame&lt; Index, T &gt;</secondary></indexterm>
<indexterm><primary>CoDataFrame&lt; Index, T &gt;</primary><secondary>filename</secondary></indexterm>
<computeroutput>template&lt;class Index , class T &gt; </computeroutput><para><computeroutput>auto const&amp; <link linkend="_class_co_data_frame">CoDataFrame</link>&lt; Index, T &gt;::filename ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_co_data_frame_1a0bcdc865bd25f1835e17f471349e2d6f"/>    <section>
    <title>load()</title>
<indexterm><primary>load</primary><secondary>CoDataFrame&lt; Index, T &gt;</secondary></indexterm>
<indexterm><primary>CoDataFrame&lt; Index, T &gt;</primary><secondary>load</secondary></indexterm>
<computeroutput>template&lt;class Index , class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_co_data_frame">CoDataFrame</link>&lt; Index, T &gt;::load (std::string const &amp; filename, std::string const &amp; type)</computeroutput></para>    </section><anchor xml:id="_class_co_data_frame_1a62ae554984ec74b6217dc716bff3bf06"/>    <section>
    <title>operator&lt;&lt;()</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>CoDataFrame&lt; Index, T &gt;</secondary></indexterm>
<indexterm><primary>CoDataFrame&lt; Index, T &gt;</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;class Index , class T &gt; </computeroutput><para><computeroutput>void <link linkend="_class_co_data_frame">CoDataFrame</link>&lt; Index, T &gt;::operator&lt;&lt; (std::istringstream &amp; iss)</computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_co_data_frame_1a06bba67b6dee06535e14218320751c2c"/>    <section>
    <title>good</title>
<indexterm><primary>good</primary><secondary>CoDataFrame&lt; Index, T &gt;</secondary></indexterm>
<indexterm><primary>CoDataFrame&lt; Index, T &gt;</primary><secondary>good</secondary></indexterm>
<computeroutput>template&lt;class Index , class T &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_co_data_frame">CoDataFrame</link>&lt; Index, T &gt;::good = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_co_data_frame_1af2798a5ea665091240b51eb2373f3c35"/>    <section>
    <title>m_data</title>
<indexterm><primary>m_data</primary><secondary>CoDataFrame&lt; Index, T &gt;</secondary></indexterm>
<indexterm><primary>CoDataFrame&lt; Index, T &gt;</primary><secondary>m_data</secondary></indexterm>
<computeroutput>template&lt;class Index , class T &gt; </computeroutput><para><computeroutput>std::vector&lt;std::vector&lt;T&gt; &gt; <link linkend="_class_co_data_frame">CoDataFrame</link>&lt; Index, T &gt;::m_data<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_co_data_frame_1aab49f63af655fd9bea2efb8952dfcac4"/>    <section>
    <title>m_filename</title>
<indexterm><primary>m_filename</primary><secondary>CoDataFrame&lt; Index, T &gt;</secondary></indexterm>
<indexterm><primary>CoDataFrame&lt; Index, T &gt;</primary><secondary>m_filename</secondary></indexterm>
<computeroutput>template&lt;class Index , class T &gt; </computeroutput><para><computeroutput>std::string <link linkend="_class_co_data_frame">CoDataFrame</link>&lt; Index, T &gt;::m_filename<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_co_data_frame_1a00eee215324aa22e4001d8f1e09dc2b0"/>    <section>
    <title>m_index</title>
<indexterm><primary>m_index</primary><secondary>CoDataFrame&lt; Index, T &gt;</secondary></indexterm>
<indexterm><primary>CoDataFrame&lt; Index, T &gt;</primary><secondary>m_index</secondary></indexterm>
<computeroutput>template&lt;class Index , class T &gt; </computeroutput><para><computeroutput>std::vector&lt;Index&gt; <link linkend="_class_co_data_frame">CoDataFrame</link>&lt; Index, T &gt;::m_index<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_co_data_frame_1a73c25cc0f8b810b051f3e0c5c3dedfcc"/>    <section>
    <title>size</title>
<indexterm><primary>size</primary><secondary>CoDataFrame&lt; Index, T &gt;</secondary></indexterm>
<indexterm><primary>CoDataFrame&lt; Index, T &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;class Index , class T &gt; </computeroutput><para><computeroutput><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_class_co_data_frame">CoDataFrame</link>&lt; Index, T &gt;::size = 0<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
lib/<link linkend="_files__functions_8hpp">files_functions.hpp</link></section>
</section>
