<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_filename" xml:lang="en-US">
<title>Filename Class Reference</title>
<indexterm><primary>Filename</primary></indexterm>
<para>

<para>EXPERIMENTAL Contains the short name and the extension of a given file, without any knowledge of its path. </para>
 
</para>
<para>
<computeroutput>#include &lt;files_functions.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>std::string const  &amp; <link linkend="_class_filename_1a9a5a8b12e6ffac9d53e54e6410b59c02">extension</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_filename_1a2bba4cdf51d4f8042d55850e0699e80b">Filename</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_filename_1a81f6faf691f9eec75771b37b7d29fffc">Filename</link> (<link linkend="_class_filename">Filename</link> const &amp;_filename)</para>
</listitem>
            <listitem><para><link linkend="_class_filename_1ac695bd1e796829d4a40c81111dd8935b">Filename</link> (std::string const &amp;_filename)</para>
</listitem>
            <listitem><para>std::string const  &amp; <link linkend="_class_filename_1a00a9c3c47a6c091bc1c49982c6d57233">fullName</link> () const</para>
</listitem>
            <listitem><para>std::string const  &amp; <link linkend="_class_filename_1a6d397a1dc62b7bc35bf84e6e72b9bd03">get</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_filename_1acb0d63ddf4b17fc590a9617a8096bd47">operator std::string</link> () const &amp;</para>
</listitem>
            <listitem><para><link linkend="_class_filename">Filename</link> &amp; <link linkend="_class_filename_1ac7be05fb6397494870cbeff3bb85030e">operator=</link> (const char *_filename)</para>
</listitem>
            <listitem><para><link linkend="_class_filename">Filename</link> &amp; <link linkend="_class_filename_1afc649319b4ccdeef296670531a0b4265">operator=</link> (<link linkend="_class_filename">Filename</link> const &amp;_filename)</para>
</listitem>
            <listitem><para><link linkend="_class_filename">Filename</link> &amp; <link linkend="_class_filename_1af717b51b864f3465eace889d46cb9ffe">operator=</link> (std::string const &amp;_filename)</para>
</listitem>
            <listitem><para>void <link linkend="_class_filename_1a2d925b1dc8e2afbd09e729be3f3603b2">setExtension</link> (std::string const &amp;new_extension)</para>
</listitem>
            <listitem><para>std::string const  &amp; <link linkend="_class_filename_1a16a859ce80a8efeabbf8b28add13c55f">shortName</link> () const</para>
</listitem>
            <listitem><para>std::string const  &amp; <link linkend="_class_filename_1a46cfb960345a190b3971553c65f702b4">string</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_filename_1a4f624193292726bfe15c0c16322ccd07">fill</link> (std::string const &amp;filename)</para>
</listitem>
            <listitem><para>void <link linkend="_class_filename_1aaebbbc0d7ac17984013bffbd87d05763">update</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>std::string <link linkend="_class_filename_1a8aacdd28091a89bf0e326989383770ec">m_extension</link></para>
</listitem>
            <listitem><para>std::string <link linkend="_class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d">m_fullName</link></para>
</listitem>
            <listitem><para>std::string <link linkend="_class_filename_1adb51101927c9d3a81522d1686464b1b5">m_shortName</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>EXPERIMENTAL Contains the short name and the extension of a given file, without any knowledge of its path. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_filename_1a2bba4cdf51d4f8042d55850e0699e80b"/>    <section>
    <title>Filename()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>Filename</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>Filename</secondary></indexterm>
<para><computeroutput>Filename::Filename ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_filename_1ac695bd1e796829d4a40c81111dd8935b"/>    <section>
    <title>Filename()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>Filename</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>Filename</secondary></indexterm>
<para><computeroutput>Filename::Filename (std::string const &amp; _filename)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_filename_ac695bd1e796829d4a40c81111dd8935b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_filename_1a81f6faf691f9eec75771b37b7d29fffc"/>    <section>
    <title>Filename()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>Filename</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>Filename</secondary></indexterm>
<para><computeroutput>Filename::Filename (<link linkend="_class_filename">Filename</link> const &amp; _filename)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_filename_1a9a5a8b12e6ffac9d53e54e6410b59c02"/>    <section>
    <title>extension()</title>
<indexterm><primary>extension</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>extension</secondary></indexterm>
<para><computeroutput>std::string const&amp; Filename::extension ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_filename_a9a5a8b12e6ffac9d53e54e6410b59c02_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_filename_1a4f624193292726bfe15c0c16322ccd07"/>    <section>
    <title>fill()</title>
<indexterm><primary>fill</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>fill</secondary></indexterm>
<para><computeroutput>void Filename::fill (std::string const &amp; filename)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_filename_a4f624193292726bfe15c0c16322ccd07_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_filename_a4f624193292726bfe15c0c16322ccd07_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_filename_1a00a9c3c47a6c091bc1c49982c6d57233"/>    <section>
    <title>fullName()</title>
<indexterm><primary>fullName</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>fullName</secondary></indexterm>
<para><computeroutput>std::string const&amp; Filename::fullName ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_filename_a00a9c3c47a6c091bc1c49982c6d57233_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_filename_1a6d397a1dc62b7bc35bf84e6e72b9bd03"/>    <section>
    <title>get()</title>
<indexterm><primary>get</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>get</secondary></indexterm>
<para><computeroutput>std::string const&amp; Filename::get ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_filename_a6d397a1dc62b7bc35bf84e6e72b9bd03_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_filename_1acb0d63ddf4b17fc590a9617a8096bd47"/>    <section>
    <title>operator std::string()</title>
<indexterm><primary>operator std::string</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>operator std::string</secondary></indexterm>
<para><computeroutput>Filename::operator std::string ( ) const &amp;<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_filename_1ac7be05fb6397494870cbeff3bb85030e"/>    <section>
    <title>operator=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_filename">Filename</link>&amp; Filename::operator= (const char * _filename)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_filename_ac7be05fb6397494870cbeff3bb85030e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_filename_1afc649319b4ccdeef296670531a0b4265"/>    <section>
    <title>operator=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_filename">Filename</link>&amp; Filename::operator= (<link linkend="_class_filename">Filename</link> const &amp; _filename)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_filename_1af717b51b864f3465eace889d46cb9ffe"/>    <section>
    <title>operator=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_filename">Filename</link>&amp; Filename::operator= (std::string const &amp; _filename)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_filename_af717b51b864f3465eace889d46cb9ffe_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_filename_1a2d925b1dc8e2afbd09e729be3f3603b2"/>    <section>
    <title>setExtension()</title>
<indexterm><primary>setExtension</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>setExtension</secondary></indexterm>
<para><computeroutput>void Filename::setExtension (std::string const &amp; new_extension)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_filename_a2d925b1dc8e2afbd09e729be3f3603b2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_filename_a2d925b1dc8e2afbd09e729be3f3603b2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_filename_1a16a859ce80a8efeabbf8b28add13c55f"/>    <section>
    <title>shortName()</title>
<indexterm><primary>shortName</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>shortName</secondary></indexterm>
<para><computeroutput>std::string const&amp; Filename::shortName ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_filename_a16a859ce80a8efeabbf8b28add13c55f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_filename_1a46cfb960345a190b3971553c65f702b4"/>    <section>
    <title>string()</title>
<indexterm><primary>string</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>string</secondary></indexterm>
<para><computeroutput>std::string const&amp; Filename::string ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_filename_a46cfb960345a190b3971553c65f702b4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_filename_1aaebbbc0d7ac17984013bffbd87d05763"/>    <section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void Filename::update ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_filename_aaebbbc0d7ac17984013bffbd87d05763_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_filename_1a8aacdd28091a89bf0e326989383770ec"/>    <section>
    <title>m_extension</title>
<indexterm><primary>m_extension</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>m_extension</secondary></indexterm>
<para><computeroutput>std::string Filename::m_extension<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d"/>    <section>
    <title>m_fullName</title>
<indexterm><primary>m_fullName</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>m_fullName</secondary></indexterm>
<para><computeroutput>std::string Filename::m_fullName<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_filename_1adb51101927c9d3a81522d1686464b1b5"/>    <section>
    <title>m_shortName</title>
<indexterm><primary>m_shortName</primary><secondary>Filename</secondary></indexterm>
<indexterm><primary>Filename</primary><secondary>m_shortName</secondary></indexterm>
<para><computeroutput>std::string Filename::m_shortName<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
lib/<link linkend="_files__functions_8hpp">files_functions.hpp</link></section>
</section>
