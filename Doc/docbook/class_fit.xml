<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_fit" xml:lang="en-US">
<title>Fit Class Reference</title>
<indexterm><primary>Fit</primary></indexterm>
<para>

<para>Allows one to manipulate the results of peak fitting. </para>
 
</para>
<para>
<computeroutput>#include &lt;Fit.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_fit_1a8c319eaa8c1924d691ca348e60032392">clear</link> ()</para>
</listitem>
            <listitem><para>auto <link linkend="_class_fit_1ace2faca83c11b880a44c1e5f7c89ad8e">enough_counts</link> () const</para>

<para>Returns true if fit had enough counts. </para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_fit_1acd04ad290cb58f48b9925152587c380e">exists</link> () const</para>

<para>Returns true if fit succeeded. </para>
</listitem>
            <listitem><para>bool const  &amp; <link linkend="_class_fit_1aace9236c432ee27bd3c208911b7a396d">exists</link> (bool exist)</para>

<para>Set if the fit succeeded : </para>
</listitem>
            <listitem><para><link linkend="_class_fit_1abd77d8fae160b06c58643a7f11e64625">Fit</link> ()</para>
</listitem>
            <listitem><para>auto <link linkend="_class_fit_1a4a492179d25c42f4964e9aa32aebeece">found_peaks</link> () const</para>

<para>Returns true if the fit found the peaks. </para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_fit_1a65785d0daa5a0aa76f1ca5924c36fa28">label</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_fit_1a861a69c651863dcb3b41a788fe73f69d">peaks_found</link> (bool <link linkend="_vector__functions_8hpp_1a2a2fe6c64692ae7368f063010a0ff97a">found</link>)</para>

<para>Set if there was not enough counts : </para>
</listitem>
            <listitem><para>void <link linkend="_class_fit_1a9b69dacd5f0264c1760f38d9dd19f5dd">resize</link> (int <link linkend="_class_fit_1a912700f52a0a3a3c66c90966ed81581b">size</link>)</para>
</listitem>
            <listitem><para>void <link linkend="_class_fit_1a5f9e21546ed32f5b53c0692d2c199f1d">setLabel</link> (<link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> const &amp;<link linkend="_class_fit_1a65785d0daa5a0aa76f1ca5924c36fa28">label</link>)</para>

<para>Set the label. </para>
</listitem>
            <listitem><para>auto <link linkend="_class_fit_1a912700f52a0a3a3c66c90966ed81581b">size</link> () const</para>

<para>Returns the number of peaks used for calibration. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_fit_1ad12c75a87a239da0768c9c6b869da431">too_few_counts</link> (bool few_counts)</para>

<para>Set if there was not enough counts : </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>double <link linkend="_class_fit_1ac128f10e2e52aa39445e4363168d5f73">chi2</link> = -1.0</para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_fit_1ac752a6bea753f20d4a8ed0a887447d7c">cmeasures</link></para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_fit_1afffcdcd0341476a634e763b8bb2158ce">ex</link></para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_fit_1a6777a3d0b233e491b99c6b22ba1b7290">ey</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_fit_1a73dca59c79cb77deda29c834c50e00b6">integral</link> = -1.0</para>
</listitem>
            <listitem><para>double <link linkend="_class_fit_1a8f850d65b0e25b4f54f321308370b938">keVperADC</link> = 0.0</para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_fit_1a75cecf55da1498d8bdd870108123245e">mean</link></para>
</listitem>
            <listitem><para>std::string <link linkend="_class_fit_1a964131fabef1652357c6f1dd08f9f2de">name</link></para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> <link linkend="_class_fit_1a09a8cb0e9a300f8aeef67fcd267cb8f2">order</link> = 0</para>
</listitem>
            <listitem><para>double <link linkend="_class_fit_1a6dd1941f173b91a904be34afca6cd5d0">parameter0</link> = 0.0</para>
</listitem>
            <listitem><para>double <link linkend="_class_fit_1abe17456d5a2ccb50497d776f4f63f98b">parameter1</link> = 1</para>
</listitem>
            <listitem><para>double <link linkend="_class_fit_1a394d86d19fb25ad5facea296ed71bb1e">parameter2</link> = 0.0</para>
</listitem>
            <listitem><para>double <link linkend="_class_fit_1a4367b73a3883f085dea1ed2e67a97ac9">parameter3</link> = 0.0</para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_fit_1a8f443c41d92e502b2fe55453560457e2">peaks</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_fit_1a522102240db21bfd9dd69f15ea3b3656">scalefactor</link> = 0.0</para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_fit_1a32663082748ab547b85b14a6f198f086">sigma</link></para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_fit_1a5a9406e4e285484650609f696d96ffa2">x</link></para>
</listitem>
            <listitem><para>std::vector&lt; double &gt; <link linkend="_class_fit_1a36eda8829f68c74fdf657a065481a3f8">y</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_fit_1af46c866fd64724443acf723c14270584">m_enough_counts</link> = false</para>
</listitem>
            <listitem><para>bool <link linkend="_class_fit_1a9d7412f72df96bb282ed09d2657e949a">m_exist</link> = false</para>
</listitem>
            <listitem><para><link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> <link linkend="_class_fit_1a6d22c746466b2251a9f9d9e1f5f54ba8">m_label</link> = 0</para>
</listitem>
            <listitem><para>bool <link linkend="_class_fit_1af724fb046ea4e5c1bf6cdffd5f9cacb5">m_peaks_found</link> = false</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Allows one to manipulate the results of peak fitting. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_fit_1abd77d8fae160b06c58643a7f11e64625"/>    <section>
    <title>Fit()</title>
<indexterm><primary>Fit</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>Fit</secondary></indexterm>
<para><computeroutput>Fit::Fit ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_fit_1a8c319eaa8c1924d691ca348e60032392"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>clear</secondary></indexterm>
<para><computeroutput>void Fit::clear ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_fit_1ace2faca83c11b880a44c1e5f7c89ad8e"/>    <section>
    <title>enough_counts()</title>
<indexterm><primary>enough_counts</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>enough_counts</secondary></indexterm>
<para><computeroutput>auto Fit::enough_counts ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns true if fit had enough counts. </para>
</para>
    </section><anchor xml:id="_class_fit_1acd04ad290cb58f48b9925152587c380e"/>    <section>
    <title>exists()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>exists</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>exists</secondary></indexterm>
<para><computeroutput>auto const&amp; Fit::exists ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns true if fit succeeded. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_fit_acd04ad290cb58f48b9925152587c380e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_fit_1aace9236c432ee27bd3c208911b7a396d"/>    <section>
    <title>exists()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>exists</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>exists</secondary></indexterm>
<para><computeroutput>bool const&amp; Fit::exists (bool exist)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set if the fit succeeded : </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_fit_aace9236c432ee27bd3c208911b7a396d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_fit_1a4a492179d25c42f4964e9aa32aebeece"/>    <section>
    <title>found_peaks()</title>
<indexterm><primary>found_peaks</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>found_peaks</secondary></indexterm>
<para><computeroutput>auto Fit::found_peaks ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns true if the fit found the peaks. </para>
</para>
    </section><anchor xml:id="_class_fit_1a65785d0daa5a0aa76f1ca5924c36fa28"/>    <section>
    <title>label()</title>
<indexterm><primary>label</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>label</secondary></indexterm>
<para><computeroutput>auto const&amp; Fit::label ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_fit_a65785d0daa5a0aa76f1ca5924c36fa28_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_fit_1a861a69c651863dcb3b41a788fe73f69d"/>    <section>
    <title>peaks_found()</title>
<indexterm><primary>peaks_found</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>peaks_found</secondary></indexterm>
<para><computeroutput>bool Fit::peaks_found (bool found)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set if there was not enough counts : </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_fit_a861a69c651863dcb3b41a788fe73f69d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_fit_1a9b69dacd5f0264c1760f38d9dd19f5dd"/>    <section>
    <title>resize()</title>
<indexterm><primary>resize</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>resize</secondary></indexterm>
<para><computeroutput>void Fit::resize (int size)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_fit_a9b69dacd5f0264c1760f38d9dd19f5dd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_fit_1a5f9e21546ed32f5b53c0692d2c199f1d"/>    <section>
    <title>setLabel()</title>
<indexterm><primary>setLabel</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>setLabel</secondary></indexterm>
<para><computeroutput>void Fit::setLabel (<link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> const &amp; label)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set the label. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_fit_a5f9e21546ed32f5b53c0692d2c199f1d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_fit_1a912700f52a0a3a3c66c90966ed81581b"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>size</secondary></indexterm>
<para><computeroutput>auto Fit::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns the number of peaks used for calibration. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_fit_a912700f52a0a3a3c66c90966ed81581b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_fit_1ad12c75a87a239da0768c9c6b869da431"/>    <section>
    <title>too_few_counts()</title>
<indexterm><primary>too_few_counts</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>too_few_counts</secondary></indexterm>
<para><computeroutput>bool Fit::too_few_counts (bool few_counts)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set if there was not enough counts : </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_fit_ad12c75a87a239da0768c9c6b869da431_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_fit_1ac128f10e2e52aa39445e4363168d5f73"/>    <section>
    <title>chi2</title>
<indexterm><primary>chi2</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>chi2</secondary></indexterm>
<para><computeroutput>double Fit::chi2 = -1.0</computeroutput></para>    </section><anchor xml:id="_class_fit_1ac752a6bea753f20d4a8ed0a887447d7c"/>    <section>
    <title>cmeasures</title>
<indexterm><primary>cmeasures</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>cmeasures</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; Fit::cmeasures</computeroutput></para>    </section><anchor xml:id="_class_fit_1afffcdcd0341476a634e763b8bb2158ce"/>    <section>
    <title>ex</title>
<indexterm><primary>ex</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>ex</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; Fit::ex</computeroutput></para>    </section><anchor xml:id="_class_fit_1a6777a3d0b233e491b99c6b22ba1b7290"/>    <section>
    <title>ey</title>
<indexterm><primary>ey</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>ey</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; Fit::ey</computeroutput></para>    </section><anchor xml:id="_class_fit_1a73dca59c79cb77deda29c834c50e00b6"/>    <section>
    <title>integral</title>
<indexterm><primary>integral</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>integral</secondary></indexterm>
<para><computeroutput>double Fit::integral = -1.0</computeroutput></para>    </section><anchor xml:id="_class_fit_1a8f850d65b0e25b4f54f321308370b938"/>    <section>
    <title>keVperADC</title>
<indexterm><primary>keVperADC</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>keVperADC</secondary></indexterm>
<para><computeroutput>double Fit::keVperADC = 0.0</computeroutput></para>    </section><anchor xml:id="_class_fit_1af46c866fd64724443acf723c14270584"/>    <section>
    <title>m_enough_counts</title>
<indexterm><primary>m_enough_counts</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>m_enough_counts</secondary></indexterm>
<para><computeroutput>bool Fit::m_enough_counts = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_fit_1a9d7412f72df96bb282ed09d2657e949a"/>    <section>
    <title>m_exist</title>
<indexterm><primary>m_exist</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>m_exist</secondary></indexterm>
<para><computeroutput>bool Fit::m_exist = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_fit_1a6d22c746466b2251a9f9d9e1f5f54ba8"/>    <section>
    <title>m_label</title>
<indexterm><primary>m_label</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>m_label</secondary></indexterm>
<para><computeroutput><link linkend="__hit_8hpp_1ab5dd24876acad09ec52c250c1668466c">Label</link> Fit::m_label = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_fit_1af724fb046ea4e5c1bf6cdffd5f9cacb5"/>    <section>
    <title>m_peaks_found</title>
<indexterm><primary>m_peaks_found</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>m_peaks_found</secondary></indexterm>
<para><computeroutput>bool Fit::m_peaks_found = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_fit_1a75cecf55da1498d8bdd870108123245e"/>    <section>
    <title>mean</title>
<indexterm><primary>mean</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>mean</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; Fit::mean</computeroutput></para>    </section><anchor xml:id="_class_fit_1a964131fabef1652357c6f1dd08f9f2de"/>    <section>
    <title>name</title>
<indexterm><primary>name</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>name</secondary></indexterm>
<para><computeroutput>std::string Fit::name</computeroutput></para>    </section><anchor xml:id="_class_fit_1a09a8cb0e9a300f8aeef67fcd267cb8f2"/>    <section>
    <title>order</title>
<indexterm><primary>order</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>order</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> Fit::order = 0</computeroutput></para>    </section><anchor xml:id="_class_fit_1a6dd1941f173b91a904be34afca6cd5d0"/>    <section>
    <title>parameter0</title>
<indexterm><primary>parameter0</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>parameter0</secondary></indexterm>
<para><computeroutput>double Fit::parameter0 = 0.0</computeroutput></para>    </section><anchor xml:id="_class_fit_1abe17456d5a2ccb50497d776f4f63f98b"/>    <section>
    <title>parameter1</title>
<indexterm><primary>parameter1</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>parameter1</secondary></indexterm>
<para><computeroutput>double Fit::parameter1 = 1</computeroutput></para>    </section><anchor xml:id="_class_fit_1a394d86d19fb25ad5facea296ed71bb1e"/>    <section>
    <title>parameter2</title>
<indexterm><primary>parameter2</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>parameter2</secondary></indexterm>
<para><computeroutput>double Fit::parameter2 = 0.0</computeroutput></para>    </section><anchor xml:id="_class_fit_1a4367b73a3883f085dea1ed2e67a97ac9"/>    <section>
    <title>parameter3</title>
<indexterm><primary>parameter3</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>parameter3</secondary></indexterm>
<para><computeroutput>double Fit::parameter3 = 0.0</computeroutput></para>    </section><anchor xml:id="_class_fit_1a8f443c41d92e502b2fe55453560457e2"/>    <section>
    <title>peaks</title>
<indexterm><primary>peaks</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>peaks</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; Fit::peaks</computeroutput></para>    </section><anchor xml:id="_class_fit_1a522102240db21bfd9dd69f15ea3b3656"/>    <section>
    <title>scalefactor</title>
<indexterm><primary>scalefactor</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>scalefactor</secondary></indexterm>
<para><computeroutput>double Fit::scalefactor = 0.0</computeroutput></para>    </section><anchor xml:id="_class_fit_1a32663082748ab547b85b14a6f198f086"/>    <section>
    <title>sigma</title>
<indexterm><primary>sigma</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>sigma</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; Fit::sigma</computeroutput></para>    </section><anchor xml:id="_class_fit_1a5a9406e4e285484650609f696d96ffa2"/>    <section>
    <title>x</title>
<indexterm><primary>x</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>x</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; Fit::x</computeroutput></para>    </section><anchor xml:id="_class_fit_1a36eda8829f68c74fdf657a065481a3f8"/>    <section>
    <title>y</title>
<indexterm><primary>y</primary><secondary>Fit</secondary></indexterm>
<indexterm><primary>Fit</primary><secondary>y</secondary></indexterm>
<para><computeroutput>std::vector&lt;double&gt; Fit::y</computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
lib/Classes/<link linkend="__fit_8hpp">Fit.hpp</link></section>
</section>
