<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_faster_reader" xml:lang="en-US">
<title>FasterReader Class Reference</title>
<indexterm><primary>FasterReader</primary></indexterm>
<para>

<para>Class used to read .fast files. </para>
 
</para>
<para>
<computeroutput>#include &lt;FasterReader.hpp&gt;</computeroutput>
</para>
Collaboration diagram for FasterReader:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_faster_reader_1af4dd68bbc6c027e1c35bfd5b52525002">FasterReader</link> (<link linkend="_class_hit">Hit</link> *_hit, std::string _filename)</para>

<para>Construct a new Faster Reader object. </para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_faster_reader_1add1cd47aee08955e9a1fb11782129714">filename</link> () const</para>

<para>Get the name of the file being read. </para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_faster_reader_1a0e799cf6b890a3ca281819efeb2df29e">getCounter</link> () const</para>

<para>Returns the hits counter. </para>
</listitem>
            <listitem><para>auto const  &amp; <link linkend="_class_faster_reader_1aab416287bd95c5dad74fff1ebb45d3c8">getFilename</link> () const</para>

<para>Get the name of the file being read. </para>
</listitem>
            <listitem><para><link linkend="_class_hit">Hit</link> * <link linkend="_class_faster_reader_1a152cfc9a0973c4a754e248c3e0326bea">getHit</link> () const</para>
</listitem>
            <listitem><para>bool const  &amp; <link linkend="_class_faster_reader_1a5aefeb0380dfdd42d1e63b987989a118">isReady</link> () const</para>

<para>If the initialization went badly then returns false. </para>
</listitem>
            <listitem><para><link linkend="_class_faster_reader_1a613b5de02c11764659a3b90b8e8f0b0b">operator bool</link> () const &amp;</para>

<para>If the initialization went badly then returns false. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster_reader_1a2d05907241b80ed637b2ae5a01503756">Read</link> ()</para>

<para>Main method. Extract the next hit from the data file and fills the <link linkend="_class_hit">Hit</link> *m_hit object. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster_reader_1a14f1b927723963d833b5180c39bc9957">Reset</link> ()</para>

<para>Reset the cursor to the begining of the document. </para>
</listitem>
            <listitem><para>void <link linkend="_class_faster_reader_1ad88f1dfb85bb64d8526770ffbeca5607">setHit</link> (<link linkend="_class_hit">Hit</link> *hit)</para>
</listitem>
            <listitem><para><link linkend="_class_faster_reader_1af0c896c5302be52b2f839fd1885d1ecc">~FasterReader</link> ()</para>

<para>Destroy the Faster Reader object. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static void <link linkend="_class_faster_reader_1aa1fcb8d6721212bc982cac0ae4e597eb">setMaxHits</link> (<link linkend="_lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52">ulonglong</link> maxHits)</para>

<para>Set the number of hits to read inside each file. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_faster_reader_1a949601e8d70fc3aaabe66824d22bdf69">Initialize</link> ()</para>

<para>Setup the fasterac.h library to read the data. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster_reader_1a21a9202f79d43b9fd41cd1e1c276fe2c">InitializeReader</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster_reader_1a0b2cd239d03d34e69b10418cb6292858">ReadData</link> (faster_data_p const &amp;_data)</para>

<para>Treats faster data. </para>
</listitem>
            <listitem><para>void <link linkend="_class_faster_reader_1a64fb4fc3d241141f5d27df99906780fc">ReadDataGroup</link> (faster_data_p const &amp;_data)</para>

<para>Treats the faster data groups. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster_reader_1aef9fb9be5f288b88bdb17616aab801bd">ReadGroup</link> ()</para>

<para>Replace the standard ReadSimple if the faster data contains groups First of all, the m_write variable is used to make sure only the handled types are managed (see <link linkend="_class_faster_reader_1af3c8f411415fb3d9fe20cd8551bc24ed">switch_alias()</link> definition) First hit read : goes inside <link linkend="_class_faster_reader_1a0b2cd239d03d34e69b10418cb6292858">ReadData()</link> if it isn&apos;t a GROUP_TYPE_ALIAS then read it normally else : recursively read the data inside of the group and fill in m_hit_group_buffer returns the first hit // TO CHECK THIS !!! and sets m_inGroup to true The other hits : if we still are in a group (m_inGroup is true): reads the next hit in m_hit_group_buffer else : if it isn&apos;t a GROUP_TYPE_ALIAS then read it normally else : recursively read the data inside of the group and fill in m_hit_group_buffer returns the first hit // TO CHECK THIS !!! and sets m_inGroup to true. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster_reader_1a60f1f638732c48c1b78cfe4dcd23d39b">ReadSimple</link> ()</para>

<para>Read triggerless data. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster_reader_1af3c8f411415fb3d9fe20cd8551bc24ed">switch_alias</link> (<link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> const &amp;_alias, faster_data_p const &amp;_data)</para>

<para>Treat the specific part of data (QDC gates, spectro ADC ...) </para>
</listitem>
            <listitem><para>void <link linkend="_class_faster_reader_1aa0d1eaa1b39778def2b7cd25581accef">TreatCRRC4</link> (faster_data_p const &amp;_data)</para>

<para>Load CRRC4 data. </para>
</listitem>
            <listitem><para>void <link linkend="_class_faster_reader_1aa5890b8ac1fdbcd4e2c544c1eeca537b">TreatQDC1</link> (faster_data_p const &amp;_data)</para>

<para>Load QDC1 data. </para>
</listitem>
            <listitem><para>void <link linkend="_class_faster_reader_1a94fd509a6352735984a20c03fb046254">TreatQDC2</link> (faster_data_p const &amp;_data)</para>

<para>Load qdc2 data. </para>
</listitem>
            <listitem><para>void <link linkend="_class_faster_reader_1afa7cbf1733ff68804ef4f7706bf58416">TreatQDC3</link> (faster_data_p const &amp;_data)</para>

<para>Load qdc3 data. </para>
</listitem>
            <listitem><para>void <link linkend="_class_faster_reader_1ad2d7d3acd1a874f09f44f2adfa69d42c">TreatRF</link> (faster_data_p const &amp;_data)</para>

<para>Load RF data. </para>
</listitem>
            <listitem><para>void <link linkend="_class_faster_reader_1a3ee31b1e6a4c60d72f8d989d2e08bcdf">TreatTrapez</link> (faster_data_p const &amp;_data)</para>

<para>Load Trapez data. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>std::unordered_map&lt; std::string, bool &gt; <link linkend="_class_faster_reader_1ae21a765c80bcf2f928bfd6e4f6b8abbf">error_message</link></para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> <link linkend="_class_faster_reader_1ac285d052a5dea4e6c61537c9c95dcd28">m_alias</link> = 0</para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52">ulonglong</link> <link linkend="_class_faster_reader_1a9709ea4e034d6cf92c107d8c5bff232a">m_counter</link> = 0</para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52">ulonglong</link> <link linkend="_class_faster_reader_1a681170463697b5dd3856328eacb0a39d">m_cursor</link> = 0</para>
</listitem>
            <listitem><para>faster_data_p <link linkend="_class_faster_reader_1a95a022f50153b44f711a81e8109583ce">m_data</link></para>
</listitem>
            <listitem><para><link linkend="_class_hit">Hit</link> <link linkend="_class_faster_reader_1a8150da77ef499006286e92ae4d65436d">m_empty_hit</link></para>
</listitem>
            <listitem><para>std::string <link linkend="_class_faster_reader_1a818df2ca2de45cbbabf1efc83b98cb53">m_filename</link> = &quot;&quot;</para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a">ushort</link> <link linkend="_class_faster_reader_1ae9b49fa4ed0663ab809a48193877beb4">m_group_read_cursor</link> = 0</para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a">ushort</link> <link linkend="_class_faster_reader_1acae297c3fa67057ecf6e6c25b87e5e2b">m_group_write_cursor</link> = 0</para>
</listitem>
            <listitem><para><link linkend="_class_hit">Hit</link> * <link linkend="_class_faster_reader_1ad4e298455ea7776ad41d803f50796432">m_hit</link> = nullptr</para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_hit">Hit</link> * &gt; <link linkend="_class_faster_reader_1a96edba4f7a1a64796627bfd1fbdf1c92">m_hit_group_buffer</link></para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a">ushort</link> <link linkend="_class_faster_reader_1a49b96919779759c068b03b24f379d024">m_inGroup</link> = false</para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster_reader_1a2d5ba6a3aa8089fcabdbc7fb88555ea3">m_kReady</link> = false</para>
</listitem>
            <listitem><para>faster_file_reader_p <link linkend="_class_faster_reader_1ac10e47db05e3067528e3ce53d5b3da38">m_reader</link> = NULL</para>
</listitem>
            <listitem><para>bool <link linkend="_class_faster_reader_1abd85697a856dc998d235a5edc0ebb530">m_write</link> = false</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Attributes    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52">ulonglong</link> <link linkend="_class_faster_reader_1a8554231dbef9df122f04313f4adb594a">m_maxHits</link> = -1</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Class used to read .fast files. </para>



<para>This class is to be used in combination with the <link linkend="_class_hit">Hit</link> struct Here is the minimal code you can use to scan the files : <literallayout><computeroutput> Hit hit;
 std::string filename;
 FasterReader reader(&amp;hit, filename);

 while(reader.Read())
 {
   print(hit);
 }
</computeroutput></literallayout> This method deals with the 5 following members of the <link linkend="_class_hit">Hit</link> structure:(NOT UP TO DATE !!!) <literallayout><computeroutput>   struct Hit
   {
     unsigned short label;  // The label number of the detector
     Float_t        adc;    // The ADC/QDC value of the hit. For RF, contains the frequency.
     Float_t        qdc2;   // The qdc2 value (usually the longer gate)
     ULong64_t      time;   // High precision time in ps (time tick of 7,8125 ps)
     bool           pileup; // Contains either pileup or saturated bit
   }
</computeroutput></literallayout> -------&#8212; Define section -------&#8212;</para>

<para>Some options can be activated at compilation time. You have to #define them before including this library. e.g. : <literallayout><computeroutput>   ... other includes
   #define FASTER_GROUP
   #include &lt;FasterReader.hpp&gt;
   rest of the code....
</computeroutput></literallayout></para>

<para>&#8211; QDC1MAX</para>

<para>By default the qdc2 is handled. If no detector uses the qdc2 then declare QDC1MAX</para>

<para>&#8211; FASTER_GROUP</para>

<para>If the data is grouped using a hardware trigger. From the user point of view, nothing changes but the execution speed. Simply #define FASTER_GROUP and then use the class as usual.</para>

<para>The reading is done in two steps : first extracts all the hits of the group and put it in a vector, then each call of <link linkend="_class_faster_reader_1a2d05907241b80ed637b2ae5a01503756">Read()</link> moves in the group. No extra information is extracted : from outside of the class, everything goes as if there was no group.</para>

<para><caution><title>Attention</title>

<para>The pileup bit for CRRC4 is not handled </para>
</caution>
</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_faster_reader_1af4dd68bbc6c027e1c35bfd5b52525002"/>    <section>
    <title>FasterReader()</title>
<indexterm><primary>FasterReader</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>FasterReader</secondary></indexterm>
<para><computeroutput>FasterReader::FasterReader (<link linkend="_class_hit">Hit</link> * _hit, std::string _filename)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Construct a new Faster Reader object. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_af4dd68bbc6c027e1c35bfd5b52525002_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1af0c896c5302be52b2f839fd1885d1ecc"/>    <section>
    <title>~FasterReader()</title>
<indexterm><primary>~FasterReader</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>~FasterReader</secondary></indexterm>
<para><computeroutput>FasterReader::~FasterReader ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Destroy the Faster Reader object. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_faster_reader_1add1cd47aee08955e9a1fb11782129714"/>    <section>
    <title>filename()</title>
<indexterm><primary>filename</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>filename</secondary></indexterm>
<para><computeroutput>auto const&amp; FasterReader::filename ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the name of the file being read. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_add1cd47aee08955e9a1fb11782129714_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1a0e799cf6b890a3ca281819efeb2df29e"/>    <section>
    <title>getCounter()</title>
<indexterm><primary>getCounter</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>getCounter</secondary></indexterm>
<para><computeroutput>auto const&amp; FasterReader::getCounter ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns the hits counter. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a0e799cf6b890a3ca281819efeb2df29e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1aab416287bd95c5dad74fff1ebb45d3c8"/>    <section>
    <title>getFilename()</title>
<indexterm><primary>getFilename</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>getFilename</secondary></indexterm>
<para><computeroutput>auto const&amp; FasterReader::getFilename ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the name of the file being read. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_aab416287bd95c5dad74fff1ebb45d3c8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1a152cfc9a0973c4a754e248c3e0326bea"/>    <section>
    <title>getHit()</title>
<indexterm><primary>getHit</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>getHit</secondary></indexterm>
<para><computeroutput><link linkend="_class_hit">Hit</link>* FasterReader::getHit ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para><para><link linkend="_deprecated_1_deprecated000001">Deprecated</link> 
<para>Get the current <link linkend="_class_hit">Hit</link> </para>
</para></para>
    </section><anchor xml:id="_class_faster_reader_1a949601e8d70fc3aaabe66824d22bdf69"/>    <section>
    <title>Initialize()</title>
<indexterm><primary>Initialize</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>Initialize</secondary></indexterm>
<para><computeroutput>bool FasterReader::Initialize ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Setup the fasterac.h library to read the data. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a949601e8d70fc3aaabe66824d22bdf69_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a949601e8d70fc3aaabe66824d22bdf69_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1a21a9202f79d43b9fd41cd1e1c276fe2c"/>    <section>
    <title>InitializeReader()</title>
<indexterm><primary>InitializeReader</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>InitializeReader</secondary></indexterm>
<para><computeroutput>bool FasterReader::InitializeReader ( )<computeroutput>[private]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a21a9202f79d43b9fd41cd1e1c276fe2c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1a5aefeb0380dfdd42d1e63b987989a118"/>    <section>
    <title>isReady()</title>
<indexterm><primary>isReady</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>isReady</secondary></indexterm>
<para><computeroutput>bool const&amp; FasterReader::isReady ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>If the initialization went badly then returns false. </para>
</para>
    </section><anchor xml:id="_class_faster_reader_1a613b5de02c11764659a3b90b8e8f0b0b"/>    <section>
    <title>operator bool()</title>
<indexterm><primary>operator bool</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>operator bool</secondary></indexterm>
<para><computeroutput>FasterReader::operator bool ( ) const &amp;<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>If the initialization went badly then returns false. </para>
</para>
    </section><anchor xml:id="_class_faster_reader_1a2d05907241b80ed637b2ae5a01503756"/>    <section>
    <title>Read()</title>
<indexterm><primary>Read</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>Read</secondary></indexterm>
<para><computeroutput>bool FasterReader::Read ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Main method. Extract the next hit from the data file and fills the <link linkend="_class_hit">Hit</link> *m_hit object. </para>
</para>

<para><link linkend="_class_hit">Hit</link> hit;</para>

<para><link linkend="_class_faster_reader">FasterReader</link> reader(&amp;hit, filename); <literallayout><computeroutput> while(reader.Read())
 {
    // This hit is filled/updated at each iteration by the data read in the ReadData() private method
    print(hit); 
 }
</computeroutput></literallayout></para>

<para><formalpara><title>Returns</title>

<para>true if the end of the file is reached, false otherwise </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a2d05907241b80ed637b2ae5a01503756_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a2d05907241b80ed637b2ae5a01503756_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1a0b2cd239d03d34e69b10418cb6292858"/>    <section>
    <title>ReadData()</title>
<indexterm><primary>ReadData</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>ReadData</secondary></indexterm>
<para><computeroutput>bool FasterReader::ReadData (faster_data_p const &amp; _data)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Treats faster data. </para>
</para>

<para>FASTER_GROUP</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a0b2cd239d03d34e69b10418cb6292858_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a0b2cd239d03d34e69b10418cb6292858_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1a64fb4fc3d241141f5d27df99906780fc"/>    <section>
    <title>ReadDataGroup()</title>
<indexterm><primary>ReadDataGroup</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>ReadDataGroup</secondary></indexterm>
<para><computeroutput>void FasterReader::ReadDataGroup (faster_data_p const &amp; _data)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Treats the faster data groups. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a64fb4fc3d241141f5d27df99906780fc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a64fb4fc3d241141f5d27df99906780fc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1aef9fb9be5f288b88bdb17616aab801bd"/>    <section>
    <title>ReadGroup()</title>
<indexterm><primary>ReadGroup</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>ReadGroup</secondary></indexterm>
<para><computeroutput>bool FasterReader::ReadGroup ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Replace the standard ReadSimple if the faster data contains groups First of all, the m_write variable is used to make sure only the handled types are managed (see <link linkend="_class_faster_reader_1af3c8f411415fb3d9fe20cd8551bc24ed">switch_alias()</link> definition) First hit read : goes inside <link linkend="_class_faster_reader_1a0b2cd239d03d34e69b10418cb6292858">ReadData()</link> if it isn&apos;t a GROUP_TYPE_ALIAS then read it normally else : recursively read the data inside of the group and fill in m_hit_group_buffer returns the first hit // TO CHECK THIS !!! and sets m_inGroup to true The other hits : if we still are in a group (m_inGroup is true): reads the next hit in m_hit_group_buffer else : if it isn&apos;t a GROUP_TYPE_ALIAS then read it normally else : recursively read the data inside of the group and fill in m_hit_group_buffer returns the first hit // TO CHECK THIS !!! and sets m_inGroup to true. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_aef9fb9be5f288b88bdb17616aab801bd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_aef9fb9be5f288b88bdb17616aab801bd_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1a60f1f638732c48c1b78cfe4dcd23d39b"/>    <section>
    <title>ReadSimple()</title>
<indexterm><primary>ReadSimple</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>ReadSimple</secondary></indexterm>
<para><computeroutput>bool FasterReader::ReadSimple ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Read triggerless data. </para>
</para>

<para>This function is replaced by ReadGroup if the faster data contains groups, this one is simply faster </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a60f1f638732c48c1b78cfe4dcd23d39b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a60f1f638732c48c1b78cfe4dcd23d39b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1a14f1b927723963d833b5180c39bc9957"/>    <section>
    <title>Reset()</title>
<indexterm><primary>Reset</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>Reset</secondary></indexterm>
<para><computeroutput>bool FasterReader::Reset ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Reset the cursor to the begining of the document. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a14f1b927723963d833b5180c39bc9957_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1ad88f1dfb85bb64d8526770ffbeca5607"/>    <section>
    <title>setHit()</title>
<indexterm><primary>setHit</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>setHit</secondary></indexterm>
<para><computeroutput>void FasterReader::setHit (<link linkend="_class_hit">Hit</link> * hit)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para><para><link linkend="_test_1_test000001">Test</link> 
<para>Set the <link linkend="_class_hit">Hit</link> object \nNever tested, but should work ! </para>
</para></para>
    </section><anchor xml:id="_class_faster_reader_1aa1fcb8d6721212bc982cac0ae4e597eb"/>    <section>
    <title>setMaxHits()</title>
<indexterm><primary>setMaxHits</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>setMaxHits</secondary></indexterm>
<para><computeroutput>static void FasterReader::setMaxHits (<link linkend="_lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52">ulonglong</link> maxHits)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Set the number of hits to read inside each file. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_aa1fcb8d6721212bc982cac0ae4e597eb_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1af3c8f411415fb3d9fe20cd8551bc24ed"/>    <section>
    <title>switch_alias()</title>
<indexterm><primary>switch_alias</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>switch_alias</secondary></indexterm>
<para><computeroutput>bool FasterReader::switch_alias (<link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> const &amp; _alias, faster_data_p const &amp; _data)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Treat the specific part of data (QDC gates, spectro ADC ...) </para>
</para>

<para>Internal method that is used to fill hit.adc depending on the alias of the data, that correspond to a certain kind of faster data. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_af3c8f411415fb3d9fe20cd8551bc24ed_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_af3c8f411415fb3d9fe20cd8551bc24ed_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1aa0d1eaa1b39778def2b7cd25581accef"/>    <section>
    <title>TreatCRRC4()</title>
<indexterm><primary>TreatCRRC4</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>TreatCRRC4</secondary></indexterm>
<para><computeroutput>void FasterReader::TreatCRRC4 (faster_data_p const &amp; _data)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Load CRRC4 data. </para>
</para>

<para>Internal method used to extract ADC value from CRRC4 filter</para>

<para><caution><title>Attention</title>

<para>m_hit-&gt;pileup = (false); //TO BE LOOKED AT </para>
</caution>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_aa0d1eaa1b39778def2b7cd25581accef_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1aa5890b8ac1fdbcd4e2c544c1eeca537b"/>    <section>
    <title>TreatQDC1()</title>
<indexterm><primary>TreatQDC1</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>TreatQDC1</secondary></indexterm>
<para><computeroutput>void FasterReader::TreatQDC1 (faster_data_p const &amp; _data)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Load QDC1 data. </para>
</para>

<para>Internal method used to extract QDC values with 1 gate </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_aa5890b8ac1fdbcd4e2c544c1eeca537b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1a94fd509a6352735984a20c03fb046254"/>    <section>
    <title>TreatQDC2()</title>
<indexterm><primary>TreatQDC2</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>TreatQDC2</secondary></indexterm>
<para><computeroutput>void FasterReader::TreatQDC2 (faster_data_p const &amp; _data)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Load qdc2 data. </para>
</para>

<para>Internal method used to extract QDC values with 2 gates </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a94fd509a6352735984a20c03fb046254_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1afa7cbf1733ff68804ef4f7706bf58416"/>    <section>
    <title>TreatQDC3()</title>
<indexterm><primary>TreatQDC3</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>TreatQDC3</secondary></indexterm>
<para><computeroutput>void FasterReader::TreatQDC3 (faster_data_p const &amp; _data)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Load qdc3 data. </para>
</para>

<para>Internal method used to extract QDC values with 2 gates </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_afa7cbf1733ff68804ef4f7706bf58416_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1ad2d7d3acd1a874f09f44f2adfa69d42c"/>    <section>
    <title>TreatRF()</title>
<indexterm><primary>TreatRF</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>TreatRF</secondary></indexterm>
<para><computeroutput>void FasterReader::TreatRF (faster_data_p const &amp; _data)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Load RF data. </para>
</para>

<para>Internal method used to extract RF period </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_ad2d7d3acd1a874f09f44f2adfa69d42c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_ad2d7d3acd1a874f09f44f2adfa69d42c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_faster_reader_1a3ee31b1e6a4c60d72f8d989d2e08bcdf"/>    <section>
    <title>TreatTrapez()</title>
<indexterm><primary>TreatTrapez</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>TreatTrapez</secondary></indexterm>
<para><computeroutput>void FasterReader::TreatTrapez (faster_data_p const &amp; _data)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Load Trapez data. </para>
</para>

<para>Internal method used to extract ADC value from trapezoid filter </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_faster_reader_a3ee31b1e6a4c60d72f8d989d2e08bcdf_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_faster_reader_1ae21a765c80bcf2f928bfd6e4f6b8abbf"/>    <section>
    <title>error_message</title>
<indexterm><primary>error_message</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>error_message</secondary></indexterm>
<para><computeroutput>std::unordered_map&lt;std::string, bool&gt; FasterReader::error_message<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1ac285d052a5dea4e6c61537c9c95dcd28"/>    <section>
    <title>m_alias</title>
<indexterm><primary>m_alias</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_alias</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> FasterReader::m_alias = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1a9709ea4e034d6cf92c107d8c5bff232a"/>    <section>
    <title>m_counter</title>
<indexterm><primary>m_counter</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_counter</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52">ulonglong</link> FasterReader::m_counter = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1a681170463697b5dd3856328eacb0a39d"/>    <section>
    <title>m_cursor</title>
<indexterm><primary>m_cursor</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_cursor</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52">ulonglong</link> FasterReader::m_cursor = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1a95a022f50153b44f711a81e8109583ce"/>    <section>
    <title>m_data</title>
<indexterm><primary>m_data</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_data</secondary></indexterm>
<para><computeroutput>faster_data_p FasterReader::m_data<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1a8150da77ef499006286e92ae4d65436d"/>    <section>
    <title>m_empty_hit</title>
<indexterm><primary>m_empty_hit</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_empty_hit</secondary></indexterm>
<para><computeroutput><link linkend="_class_hit">Hit</link> FasterReader::m_empty_hit<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1a818df2ca2de45cbbabf1efc83b98cb53"/>    <section>
    <title>m_filename</title>
<indexterm><primary>m_filename</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_filename</secondary></indexterm>
<para><computeroutput>std::string FasterReader::m_filename = &quot;&quot;<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1ae9b49fa4ed0663ab809a48193877beb4"/>    <section>
    <title>m_group_read_cursor</title>
<indexterm><primary>m_group_read_cursor</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_group_read_cursor</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a">ushort</link> FasterReader::m_group_read_cursor = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1acae297c3fa67057ecf6e6c25b87e5e2b"/>    <section>
    <title>m_group_write_cursor</title>
<indexterm><primary>m_group_write_cursor</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_group_write_cursor</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a">ushort</link> FasterReader::m_group_write_cursor = 0<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1ad4e298455ea7776ad41d803f50796432"/>    <section>
    <title>m_hit</title>
<indexterm><primary>m_hit</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_hit</secondary></indexterm>
<para><computeroutput><link linkend="_class_hit">Hit</link>* FasterReader::m_hit = nullptr<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1a96edba4f7a1a64796627bfd1fbdf1c92"/>    <section>
    <title>m_hit_group_buffer</title>
<indexterm><primary>m_hit_group_buffer</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_hit_group_buffer</secondary></indexterm>
<para><computeroutput>std::vector&lt;<link linkend="_class_hit">Hit</link>*&gt; FasterReader::m_hit_group_buffer<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1a49b96919779759c068b03b24f379d024"/>    <section>
    <title>m_inGroup</title>
<indexterm><primary>m_inGroup</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_inGroup</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a">ushort</link> FasterReader::m_inGroup = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1a2d5ba6a3aa8089fcabdbc7fb88555ea3"/>    <section>
    <title>m_kReady</title>
<indexterm><primary>m_kReady</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_kReady</secondary></indexterm>
<para><computeroutput>bool FasterReader::m_kReady = false<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1a8554231dbef9df122f04313f4adb594a"/>    <section>
    <title>m_maxHits</title>
<indexterm><primary>m_maxHits</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_maxHits</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52">ulonglong</link> FasterReader::m_maxHits = -1<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1ac10e47db05e3067528e3ce53d5b3da38"/>    <section>
    <title>m_reader</title>
<indexterm><primary>m_reader</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_reader</secondary></indexterm>
<para><computeroutput>faster_file_reader_p FasterReader::m_reader = NULL<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_faster_reader_1abd85697a856dc998d235a5edc0ebb530"/>    <section>
    <title>m_write</title>
<indexterm><primary>m_write</primary><secondary>FasterReader</secondary></indexterm>
<indexterm><primary>FasterReader</primary><secondary>m_write</secondary></indexterm>
<para><computeroutput>bool FasterReader::m_write = false<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
lib/Classes/<link linkend="__faster_reader_8hpp">FasterReader.hpp</link></section>
</section>
