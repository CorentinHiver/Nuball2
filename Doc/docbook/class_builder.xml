<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_builder" xml:lang="en-US">
<title>Builder Class Reference</title>
<indexterm><primary>Builder</primary></indexterm>
<para>

<para>Base class of event builders (pure virtual class) </para>
 
</para>
<para>
<computeroutput>#include &lt;Builder.hpp&gt;</computeroutput>
</para>
Inheritance diagram for Builder:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_builder__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for Builder:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_builder__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual bool <link linkend="_class_builder_1a6174fb0019ff2eafed26644d05e374a5">build</link> (<link linkend="_class_hit">Hit</link> const &amp;_hit)=0</para>

<para>Add Hits to the event. Return true when an event is complete, i.e. current hit is outside of time window. </para>
</listitem>
            <listitem><para><link linkend="_class_builder_1af8e018e77879c6136e6dabbd5eab0634">Builder</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_builder_1a9cda698e8695141734f5e695a7f24975">Builder</link> (<link linkend="_class_event">Event</link> *event)</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_builder_1aacd0df1ffcecbfb4bbc009e6efd0b541">coincidence</link> (<link linkend="_class_hit">Hit</link> const &amp;hit)=0</para>
</listitem>
            <listitem><para><link linkend="_class_event">Event</link> * <link linkend="_class_builder_1a8fd6226096d712de58f78e9ef123c45d">getEvent</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_hit">Hit</link> const  &amp; <link linkend="_class_builder_1abeb8339305e7a10fb2c67cc0fed9237b">getLastHit</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_builder_1a414690f7964ed158937df8a65b1d4760">isBuilding</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_builder_1af7ce79872abc82e734c72e03380a1f34">isBuilt</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_builder_1aa476b7d1fd2fe31882a3380769eb60a9">isSingle</link> () const</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_builder_1ae2d72f1157ccaaddc45b6963c7971f30">reset</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_builder_1aebad9a247ffe8dfa74d2738ee7cad755">set_first_hit</link> (<link linkend="_class_hit">Hit</link> const &amp;hit)</para>
</listitem>
            <listitem><para>void <link linkend="_class_builder_1acc042a420547dc2ee6eb85e6daf43b07">set_last_hit</link> (<link linkend="_class_hit">Hit</link> const &amp;hit)</para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> <link linkend="_class_builder_1a3097a8df520a8ab39c953cb8b659b2ee">size</link> () const</para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> const  &amp; <link linkend="_class_builder_1af86b7b9639bb301f191e6263dd871bf7">status</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static void <link linkend="_class_builder_1a4d557d96189a42cbc0a4a0d32db45d6c">keepSingles</link> (bool const &amp;b=true)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_event">Event</link> * <link linkend="_class_builder_1a76749e4cc31025fde18f9cdbeb232cbf">m_event</link> = nullptr</para>
</listitem>
            <listitem><para><link linkend="_class_hit">Hit</link> <link linkend="_class_builder_1a5cce09bc1a95dd0bcaa4f857f1a1b3da">m_last_hit</link></para>
</listitem>
            <listitem><para><link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> <link linkend="_class_builder_1a81c56e91c1951d25faecf88f390b5bcb">m_status</link> = 0</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>static bool <link linkend="_class_builder_1a7b1399ae5a1a58620dd564754d691348">m_keep_singles</link> = false</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Base class of event builders (pure virtual class) </para>



<para>The first thing to do is to set the first hit of the file using Builder::set_first_hit(hit); Then add the following hits using Builder::build(hit);</para>

<para>The builder can be in four states :</para>

<para>Let&apos;s start from the first hit. The next is either in or out of the time window.</para>

<para>Out of the time window :</para>

<para>Then the first hit is single. The status is therefore 0. The second hit is then used to determine if the third one is in coincidence with it or not.</para>

<para>In the time window :</para>

<para>An event is created, extracting the values of the two first hits in the two first rows of the event. We are in status 1.</para>

<para>Then we have to handle the third hit. It either is in or out of the time window.</para>

<para>If the third hit is out of the time window, then the event is made only of the two previous hits. We are in status 2. We can perform a trigger and write down the event.</para>

<para>If the third hit is in the time window, the values of the third hit are extracted inside of the third row of the event. We are in status 1 still. We then have to handle the next hits and add them to the event until a hit falls out of the time window.</para>

<para>Now, you&apos;ll have to create your own event builder by deriving it from this base class : <literallayout><computeroutput>   class MyEventBuilder : public Builder
   {
       ....
       build(...);
   };
</computeroutput></literallayout> You will have to overload the build method </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_builder_1af8e018e77879c6136e6dabbd5eab0634"/>    <section>
    <title>Builder()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Builder</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>Builder</secondary></indexterm>
<para><computeroutput>Builder::Builder ( )<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_builder_1a9cda698e8695141734f5e695a7f24975"/>    <section>
    <title>Builder()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Builder</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>Builder</secondary></indexterm>
<para><computeroutput>Builder::Builder (<link linkend="_class_event">Event</link> * event)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_builder_1a6174fb0019ff2eafed26644d05e374a5"/>    <section>
    <title>build()</title>
<indexterm><primary>build</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>build</secondary></indexterm>
<para><computeroutput>virtual bool Builder::build (<link linkend="_class_hit">Hit</link> const &amp; _hit)<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Add Hits to the event. Return true when an event is complete, i.e. current hit is outside of time window. </para>
</para>

<para>3 status : 0: single | 1: begin of coincidence | 2: coincidence complete </para>
<para>
Implemented in <link linkend="_class_event_builder_1a721b4b60a459c5a5c00ed3e1b513d636">EventBuilder</link>, and <link linkend="_class_coinc_builder_1a6fbd7caa8ab6ac6bbf4d14eb094b6417">CoincBuilder</link>.</para>
    </section><anchor xml:id="_class_builder_1aacd0df1ffcecbfb4bbc009e6efd0b541"/>    <section>
    <title>coincidence()</title>
<indexterm><primary>coincidence</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>coincidence</secondary></indexterm>
<para><computeroutput>virtual bool Builder::coincidence (<link linkend="_class_hit">Hit</link> const &amp; hit)<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>
Implemented in <link linkend="_class_coinc_builder_1a7bb003c28d9b4b43bbd10a09771226ae">CoincBuilder</link>.</para>
    </section><anchor xml:id="_class_builder_1a8fd6226096d712de58f78e9ef123c45d"/>    <section>
    <title>getEvent()</title>
<indexterm><primary>getEvent</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>getEvent</secondary></indexterm>
<para><computeroutput><link linkend="_class_event">Event</link>* Builder::getEvent ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_builder_1abeb8339305e7a10fb2c67cc0fed9237b"/>    <section>
    <title>getLastHit()</title>
<indexterm><primary>getLastHit</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>getLastHit</secondary></indexterm>
<para><computeroutput><link linkend="_class_hit">Hit</link> const&amp; Builder::getLastHit ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_builder_1a414690f7964ed158937df8a65b1d4760"/>    <section>
    <title>isBuilding()</title>
<indexterm><primary>isBuilding</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>isBuilding</secondary></indexterm>
<para><computeroutput>bool Builder::isBuilding ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_builder_1af7ce79872abc82e734c72e03380a1f34"/>    <section>
    <title>isBuilt()</title>
<indexterm><primary>isBuilt</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>isBuilt</secondary></indexterm>
<para><computeroutput>bool Builder::isBuilt ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_builder_1aa476b7d1fd2fe31882a3380769eb60a9"/>    <section>
    <title>isSingle()</title>
<indexterm><primary>isSingle</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>isSingle</secondary></indexterm>
<para><computeroutput>bool Builder::isSingle ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_builder_aa476b7d1fd2fe31882a3380769eb60a9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_builder_1a4d557d96189a42cbc0a4a0d32db45d6c"/>    <section>
    <title>keepSingles()</title>
<indexterm><primary>keepSingles</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>keepSingles</secondary></indexterm>
<para><computeroutput>static void Builder::keepSingles (bool const &amp; b = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_builder_a4d557d96189a42cbc0a4a0d32db45d6c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_builder_1ae2d72f1157ccaaddc45b6963c7971f30"/>    <section>
    <title>reset()</title>
<indexterm><primary>reset</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>reset</secondary></indexterm>
<para><computeroutput>virtual void Builder::reset ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Reimplemented in <link linkend="_class_event_builder_1a96d24bbdba6a9cc0770bc1ec81c7c9e0">EventBuilder</link>, and <link linkend="_class_coinc_builder_1ad777d92b1242cafdb594e3fb315ae3a9">CoincBuilder</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_builder_ae2d72f1157ccaaddc45b6963c7971f30_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_builder_1aebad9a247ffe8dfa74d2738ee7cad755"/>    <section>
    <title>set_first_hit()</title>
<indexterm><primary>set_first_hit</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>set_first_hit</secondary></indexterm>
<para><computeroutput>void Builder::set_first_hit (<link linkend="_class_hit">Hit</link> const &amp; hit)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_builder_1acc042a420547dc2ee6eb85e6daf43b07"/>    <section>
    <title>set_last_hit()</title>
<indexterm><primary>set_last_hit</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>set_last_hit</secondary></indexterm>
<para><computeroutput>void Builder::set_last_hit (<link linkend="_class_hit">Hit</link> const &amp; hit)<computeroutput>[inline]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_builder_1a3097a8df520a8ab39c953cb8b659b2ee"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>size</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638">size_t</link> Builder::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_builder_a3097a8df520a8ab39c953cb8b659b2ee_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_builder_a3097a8df520a8ab39c953cb8b659b2ee_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_builder_1af86b7b9639bb301f191e6263dd871bf7"/>    <section>
    <title>status()</title>
<indexterm><primary>status</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>status</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> const&amp; Builder::status ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_builder_1a76749e4cc31025fde18f9cdbeb232cbf"/>    <section>
    <title>m_event</title>
<indexterm><primary>m_event</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>m_event</secondary></indexterm>
<para><computeroutput><link linkend="_class_event">Event</link>* Builder::m_event = nullptr<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_builder_1a7b1399ae5a1a58620dd564754d691348"/>    <section>
    <title>m_keep_singles</title>
<indexterm><primary>m_keep_singles</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>m_keep_singles</secondary></indexterm>
<para><computeroutput>bool Builder::m_keep_singles = false<computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_builder_1a5cce09bc1a95dd0bcaa4f857f1a1b3da"/>    <section>
    <title>m_last_hit</title>
<indexterm><primary>m_last_hit</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>m_last_hit</secondary></indexterm>
<para><computeroutput><link linkend="_class_hit">Hit</link> Builder::m_last_hit<computeroutput>[protected]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_builder_1a81c56e91c1951d25faecf88f390b5bcb"/>    <section>
    <title>m_status</title>
<indexterm><primary>m_status</primary><secondary>Builder</secondary></indexterm>
<indexterm><primary>Builder</primary><secondary>m_status</secondary></indexterm>
<para><computeroutput><link linkend="_lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21">uchar</link> Builder::m_status = 0<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
lib/Classes/<link linkend="__builder_8hpp">Builder.hpp</link></section>
</section>
