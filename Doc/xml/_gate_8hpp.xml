<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_gate_8hpp" kind="file" language="C++">
    <compoundname>Gate.hpp</compoundname>
    <includes refid="lib_co_8hpp" local="yes">../libCo.hpp</includes>
    <includedby refid="_clovers_8hpp" local="yes">lib/Analyse/Clovers.hpp</includedby>
    <includedby refid="_histo_analyse_8hpp" local="no">lib/Analyse/HistoAnalyse.hpp</includedby>
    <incdepgraph>
      <node id="27">
        <label>glob.h</label>
      </node>
      <node id="10">
        <label>iomanip</label>
      </node>
      <node id="9">
        <label>functional</label>
      </node>
      <node id="16">
        <label>queue</label>
      </node>
      <node id="32">
        <label>random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>filesystem</label>
      </node>
      <node id="29">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>lib/Classes/Gate.hpp</label>
        <link refid="_gate_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>stdexcept</label>
      </node>
      <node id="15">
        <label>numeric</label>
      </node>
      <node id="19">
        <label>string</label>
      </node>
      <node id="12">
        <label>map</label>
      </node>
      <node id="2">
        <label>../libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>print.hpp</label>
        <link refid="print_8hpp"/>
      </node>
      <node id="8">
        <label>fstream</label>
      </node>
      <node id="3">
        <label>any</label>
      </node>
      <node id="35">
        <label>files_functions.hpp</label>
        <link refid="files__functions_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>random</label>
      </node>
      <node id="30">
        <label>string.h</label>
      </node>
      <node id="23">
        <label>typeinfo</label>
      </node>
      <node id="25">
        <label>vector</label>
      </node>
      <node id="20">
        <label>stack</label>
      </node>
      <node id="36">
        <label>vector_functions.hpp</label>
        <link refid="vector__functions_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>array</label>
      </node>
      <node id="17">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>cstdlib</label>
      </node>
      <node id="11">
        <label>iostream</label>
      </node>
      <node id="34">
        <label>string_functions.hpp</label>
        <link refid="string__functions_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>unordered_map</label>
      </node>
      <node id="14">
        <label>mutex</label>
      </node>
      <node id="21">
        <label>thread</label>
      </node>
      <node id="5">
        <label>algorithm</label>
      </node>
      <node id="28">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>cstring</label>
      </node>
      <node id="13">
        <label>memory</label>
      </node>
      <node id="22">
        <label>typeindex</label>
      </node>
      <node id="26">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>lib/Classes/Gate.hpp</label>
        <link refid="_gate_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>lib/Analyse/EventAnalyse.hpp</label>
        <link refid="_event_analyse_8hpp"/>
      </node>
      <node id="2">
        <label>lib/Analyse/Clovers.hpp</label>
        <link refid="_clovers_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>lib/Modules/CloverSpectra.hpp</label>
        <link refid="_clover_spectra_8hpp"/>
      </node>
      <node id="7">
        <label>lib/Analyse/HistoAnalyse.hpp</label>
        <link refid="_histo_analyse_8hpp"/>
      </node>
      <node id="4">
        <label>lib/Analyse/Sorted_Event.hpp</label>
        <link refid="_sorted___event_8hpp"/>
      </node>
      <node id="6">
        <label>lib/Modules/RunMatrixator.hpp</label>
        <link refid="_run_matrixator_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_gate__t" prot="public">Gate_t</innerclass>
    <innerclass refid="class_gates__t" prot="public">Gates_t</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_gate_8hpp_1aec153c0c98a059999caa4cfb803777c8" prot="public" static="no">
        <type><ref refid="class_gate__t" kindref="compound">Gate_t</ref>&lt; float &gt;</type>
        <definition>using Gate =  Gate_t&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Gate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Gate.hpp" line="37" column="1" bodyfile="lib/Classes/Gate.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_gate_8hpp_1a2b91fd9abbd8bef0ba1f2f2ba1205c1f" prot="public" static="no">
        <type><ref refid="class_gates__t" kindref="compound">Gates_t</ref>&lt; float &gt;</type>
        <definition>using Gates =  Gates_t&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Gates</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Gate.hpp" line="79" column="1" bodyfile="lib/Classes/Gate.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>GATE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GATE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../libCo.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="7" refid="class_gate__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_gate__t" kindref="compound">Gate_t</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10" refid="class_gate__t_1ad0a2a66e0b675d9b7548e1ee2c821912" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_gate__t_1ad0a2a66e0b675d9b7548e1ee2c821912" kindref="member">Gate_t</ref>(){}</highlight></codeline>
<codeline lineno="11" refid="class_gate__t_1a4f8e29c161dd85d2dd5081292f5705b0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_gate__t_1a4f8e29c161dd85d2dd5081292f5705b0" kindref="member">Gate_t</ref>(std::initializer_list&lt;T&gt;<sp/>inputs)<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputs.size()<sp/>==<sp/>2)<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>inputs.begin();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gate__t_1a1c49ae7aa44c27b9357e718432c2f93a" kindref="member">start</ref><sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gate__t_1aa48ef2734b80f70fbbd37f2760e18724" kindref="member">stop</ref><sp/>=<sp/>*(++it);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="class_gate__t_1ab746fcf7141d6ad21d142e57e052ff6f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gate__t_1ab746fcf7141d6ad21d142e57e052ff6f" kindref="member">operator= </ref>(std::pair<sp/>&lt;T,T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>gate)<sp/>{<ref refid="class_gate__t_1a1c49ae7aa44c27b9357e718432c2f93a" kindref="member">start</ref><sp/>=<sp/>gate.first;<sp/><ref refid="class_gate__t_1aa48ef2734b80f70fbbd37f2760e18724" kindref="member">stop</ref><sp/>=<sp/>gate.second;}</highlight></codeline>
<codeline lineno="22" refid="class_gate__t_1a5970841a2974301d638fa215a2e1b136" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gate__t_1ab746fcf7141d6ad21d142e57e052ff6f" kindref="member">operator= </ref>(<ref refid="class_gate__t" kindref="compound">Gate_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>timegate)<sp/>{<ref refid="class_gate__t_1a1c49ae7aa44c27b9357e718432c2f93a" kindref="member">start</ref><sp/>=<sp/>timegate.<ref refid="class_gate__t_1a1c49ae7aa44c27b9357e718432c2f93a" kindref="member">start</ref>;<sp/><ref refid="class_gate__t_1aa48ef2734b80f70fbbd37f2760e18724" kindref="member">stop</ref><sp/>=<sp/>timegate.<ref refid="class_gate__t_1aa48ef2734b80f70fbbd37f2760e18724" kindref="member">stop</ref>;}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="class_gate__t_1ae9d46dcc1612852d610d153dbdb2e543" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_gate__t_1ae9d46dcc1612852d610d153dbdb2e543" kindref="member">operator() </ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(e&gt;<ref refid="class_gate__t_1a1c49ae7aa44c27b9357e718432c2f93a" kindref="member">start</ref><sp/>&amp;&amp;<sp/>e&lt;<ref refid="class_gate__t_1aa48ef2734b80f70fbbd37f2760e18724" kindref="member">stop</ref>);}</highlight></codeline>
<codeline lineno="25" refid="class_gate__t_1a6ece805d91b1c54d4b84cc36e652bc0f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_gate__t_1a6ece805d91b1c54d4b84cc36e652bc0f" kindref="member">isIn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(e&gt;<ref refid="class_gate__t_1a1c49ae7aa44c27b9357e718432c2f93a" kindref="member">start</ref><sp/>&amp;&amp;<sp/>e&lt;<ref refid="class_gate__t_1aa48ef2734b80f70fbbd37f2760e18724" kindref="member">stop</ref>);}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="class_gate__t_1a1c49ae7aa44c27b9357e718432c2f93a" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="class_gate__t_1a1c49ae7aa44c27b9357e718432c2f93a" kindref="member">start</ref><sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="28" refid="class_gate__t_1aa48ef2734b80f70fbbd37f2760e18724" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="class_gate__t_1aa48ef2734b80f70fbbd37f2760e18724" kindref="member">stop</ref><sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="class_gate__t_1afc3fa31b695acb0407ee6ea2cad637c2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gate__t_1afc3fa31b695acb0407ee6ea2cad637c2" kindref="member">use</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_use<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{<ref refid="class_gate__t_1a793714954181bacd4564a3a866a3d1db" kindref="member">m_use</ref><sp/>=<sp/>_use;}</highlight></codeline>
<codeline lineno="31" refid="class_gate__t_1a038ec18fa86466548ad20abf05f63115" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_gate__t_1a038ec18fa86466548ad20abf05f63115" kindref="member">used</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_gate__t_1a793714954181bacd4564a3a866a3d1db" kindref="member">m_use</ref>;}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34" refid="class_gate__t_1a793714954181bacd4564a3a866a3d1db" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_gate__t_1a793714954181bacd4564a3a866a3d1db" kindref="member">m_use</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="_gate_8hpp_1aec153c0c98a059999caa4cfb803777c8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_gate__t" kindref="compound">Gate</ref><sp/>=<sp/><ref refid="class_gate__t" kindref="compound">Gate_t&lt;float&gt;</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="40" refid="class_gates__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_gates__t" kindref="compound">Gates_t</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43" refid="class_gates__t_1a296ccceb76e5c87c661a6814b2301e80" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_gates__t_1a296ccceb76e5c87c661a6814b2301e80" kindref="member">Gates_t</ref>(){}</highlight></codeline>
<codeline lineno="44" refid="class_gates__t_1a31ce88cdf09b7b5f9c74d13a22537815" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_gates__t_1a31ce88cdf09b7b5f9c74d13a22537815" kindref="member">Gates_t</ref>(std::initializer_list&lt;T&gt;<sp/>bounds)<sp/>:<sp/><ref refid="class_gates__t_1a78ab2e282a6644a651512e2d3d284204" kindref="member">m_size</ref>(bounds.<ref refid="class_gates__t_1a09ccdefe86716e251d36ac2d5dcea922" kindref="member">size</ref>()/2)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gates__t_1a07f860c7dcd7110ee0da5d523591b12f" kindref="member">check</ref>(bounds);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>low<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bound<sp/>:<sp/>bounds)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low)<sp/><ref refid="class_gates__t_1a8b864dce704ad3a17d47097e4e68b4c3" kindref="member">start</ref>.push_back(bound);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="class_gates__t_1aeb06a1056da00c242a9b8c8854121c3a" kindref="member">stop</ref><sp/>.push_back(bound);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>low<sp/>=<sp/>!low;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="class_gates__t_1a0bd9311137fd07879a470fdc692e6503" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_gates__t_1a0bd9311137fd07879a470fdc692e6503" kindref="member">isIn</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/>i<sp/>=<sp/>0;<sp/>i&lt;<ref refid="class_gates__t_1a78ab2e282a6644a651512e2d3d284204" kindref="member">m_size</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t&gt;<ref refid="class_gates__t_1a8b864dce704ad3a17d47097e4e68b4c3" kindref="member">start</ref>[i]<sp/>&amp;&amp;<sp/>t&lt;<ref refid="class_gates__t_1aeb06a1056da00c242a9b8c8854121c3a" kindref="member">stop</ref>[i])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="class_gates__t_1a26ce612cac177fd38e869095069452bf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_gates__t_1a26ce612cac177fd38e869095069452bf" kindref="member">operator() </ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_gates__t_1a0bd9311137fd07879a470fdc692e6503" kindref="member">isIn</ref>(t);}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="class_gates__t_1a07f860c7dcd7110ee0da5d523591b12f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gates__t_1a07f860c7dcd7110ee0da5d523591b12f" kindref="member">check</ref>(std::initializer_list&lt;T&gt;<sp/>bounds)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bounds.size()%2<sp/>==<sp/>1)<sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>Gates<sp/>initializer<sp/>must<sp/>have<sp/>an<sp/>even<sp/>number<sp/>of<sp/>bounds<sp/>(one<sp/>lower<sp/>and<sp/>one<sp/>higher<sp/>bound)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71" refid="class_gates__t_1a09ccdefe86716e251d36ac2d5dcea922" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_gates__t_1a09ccdefe86716e251d36ac2d5dcea922" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_gates__t_1a78ab2e282a6644a651512e2d3d284204" kindref="member">m_size</ref>;}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74" refid="class_gates__t_1a8b864dce704ad3a17d47097e4e68b4c3" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="class_gates__t_1a8b864dce704ad3a17d47097e4e68b4c3" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="75" refid="class_gates__t_1aeb06a1056da00c242a9b8c8854121c3a" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="class_gates__t_1aeb06a1056da00c242a9b8c8854121c3a" kindref="member">stop</ref><sp/>;</highlight></codeline>
<codeline lineno="76" refid="class_gates__t_1a78ab2e282a6644a651512e2d3d284204" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/><ref refid="class_gates__t_1a78ab2e282a6644a651512e2d3d284204" kindref="member">m_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="_gate_8hpp_1a2b91fd9abbd8bef0ba1f2f2ba1205c1f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_gates__t" kindref="compound">Gates</ref><sp/>=<sp/><ref refid="class_gates__t" kindref="compound">Gates_t&lt;float&gt;</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//GATE_HPP</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/Classes/Gate.hpp"/>
  </compounddef>
</doxygen>
