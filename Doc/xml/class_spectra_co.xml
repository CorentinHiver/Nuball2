<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_spectra_co" kind="class" language="C++" prot="public">
    <compoundname>SpectraCo</compoundname>
    <includes refid="_spectra_co_8hpp" local="no">SpectraCo.hpp</includes>
    <innerclass refid="class_spectra_co_1_1_histo_null" prot="public">SpectraCo::HistoNull</innerclass>
    <innerclass refid="class_spectra_co_1_1_histo_zombie" prot="public">SpectraCo::HistoZombie</innerclass>
    <innerclass refid="class_spectra_co_1_1_size_missmatch" prot="public">SpectraCo::SizeMissmatch</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" prot="private" static="no" mutable="no">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> *</type>
        <definition>SpectraCo* SpectraCo::m_derivative</definition>
        <argsstring></argsstring>
        <name>m_derivative</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="400" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="400" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</referencedby>
        <referencedby refid="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" compoundref="_spectra_co_8hpp" startline="318" endline="324">calibrateX</referencedby>
        <referencedby refid="class_spectra_co_1a649cc895e9813d1a82c9057022228266" compoundref="_spectra_co_8hpp" startline="349" endline="349">deleteDerivative</referencedby>
        <referencedby refid="class_spectra_co_1aa9af077c307bb5e33e271bf8cbaa1741" compoundref="_spectra_co_8hpp" startline="248" endline="248">derivative</referencedby>
        <referencedby refid="class_spectra_co_1a5c0d013692342e790580839787143f36" compoundref="_spectra_co_8hpp" startline="244" endline="244">derivativeData</referencedby>
        <referencedby refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" compoundref="_spectra_co_8hpp" startline="466" endline="473">rebin</referencedby>
        <referencedby refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" compoundref="_spectra_co_8hpp" startline="563" endline="574">recalibrate</referencedby>
        <referencedby refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" compoundref="_spectra_co_8hpp" startline="798" endline="806">resizeBin</referencedby>
        <referencedby refid="class_spectra_co_1a213631f494d8361bfa9f4115266e9af7" compoundref="_spectra_co_8hpp" startline="26" endline="31">~SpectraCo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1a332e26399e136100490dd879772fe797" prot="private" static="no" mutable="no">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> *</type>
        <definition>SpectraCo* SpectraCo::m_derivative2</definition>
        <argsstring></argsstring>
        <name>m_derivative2</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="401" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="401" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1a5db4e774152522eac0e1c58af984fc28" compoundref="_spectra_co_8hpp" startline="251" endline="251">derivative2</referencedby>
        <referencedby refid="class_spectra_co_1a6106089e9e4295cc71f3d45f781ac2c8" compoundref="_spectra_co_8hpp" startline="246" endline="246">derivative2Data</referencedby>
        <referencedby refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" compoundref="_spectra_co_8hpp" startline="926" endline="963">findPeaks</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double SpectraCo::m_factor</definition>
        <argsstring></argsstring>
        <name>m_factor</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="411" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="411" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" compoundref="_spectra_co_8hpp" startline="222" endline="222">factor</referencedby>
        <referencedby refid="class_spectra_co_1a34ea7496185caf2178c8ba1c10876dd3" compoundref="_spectra_co_8hpp" startline="521" endline="535">operator*</referencedby>
        <referencedby refid="class_spectra_co_1aa4225392a595ff8a0950ef67610096d0" compoundref="_spectra_co_8hpp" startline="546" endline="561">operator/</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int SpectraCo::m_integral</definition>
        <argsstring></argsstring>
        <name>m_integral</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="408" column="7" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="408" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1aad2d7fb657b00304906a0c5e3c9a3aed" compoundref="_spectra_co_8hpp" startline="216" endline="216">integral</referencedby>
        <referencedby refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">load</referencedby>
        <referencedby refid="class_spectra_co_1aae276b412dd31fc06933db96b65298fd" compoundref="_spectra_co_8hpp" startline="177" endline="189">operator=</referencedby>
        <referencedby refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" compoundref="_spectra_co_8hpp" startline="798" endline="806">resizeBin</referencedby>
        <referencedby refid="class_spectra_co_1ac7bfa00174710c92a077113a202ba2dd" compoundref="_spectra_co_8hpp" startline="33" endline="41">SpectraCo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1a80e56f3b23d5a7092dd3152f47bf3c47" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double SpectraCo::m_intercept</definition>
        <argsstring></argsstring>
        <name>m_intercept</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="418" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="418" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</referencedby>
        <referencedby refid="class_spectra_co_1ac5f6afc77e5fddc79afe224dc0a1dfec" compoundref="_spectra_co_8hpp" startline="311" endline="315">getBin</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" prot="private" static="no" mutable="no">
        <type>TH1 *</type>
        <definition>TH1* SpectraCo::m_loaded_TH1</definition>
        <argsstring></argsstring>
        <name>m_loaded_TH1</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="398" column="7" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="398" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">load</referencedby>
        <referencedby refid="class_spectra_co_1aae276b412dd31fc06933db96b65298fd" compoundref="_spectra_co_8hpp" startline="177" endline="189">operator=</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double SpectraCo::m_max_x</definition>
        <argsstring></argsstring>
        <name>m_max_x</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="410" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="410" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</referencedby>
        <referencedby refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</referencedby>
        <referencedby refid="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" compoundref="_spectra_co_8hpp" startline="318" endline="324">calibrateX</referencedby>
        <referencedby refid="class_spectra_co_1a85342e1258a9d8877fb60fa2dca6275f" compoundref="_spectra_co_8hpp" startline="309" endline="309">getX</referencedby>
        <referencedby refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">load</referencedby>
        <referencedby refid="class_spectra_co_1a244bef386237d633da441b377ca2a278" compoundref="_spectra_co_8hpp" startline="220" endline="220">maxX</referencedby>
        <referencedby refid="class_spectra_co_1aae276b412dd31fc06933db96b65298fd" compoundref="_spectra_co_8hpp" startline="177" endline="189">operator=</referencedby>
        <referencedby refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" compoundref="_spectra_co_8hpp" startline="798" endline="806">resizeBin</referencedby>
        <referencedby refid="class_spectra_co_1aaee0e2be91f5b3e3958892b8389a5003" compoundref="_spectra_co_8hpp" startline="203" endline="203">setMaxX</referencedby>
        <referencedby refid="class_spectra_co_1ac2141fbefadce3d8f82e5c7db09998ab" compoundref="_spectra_co_8hpp" startline="204" endline="204">setRangeX</referencedby>
        <referencedby refid="class_spectra_co_1ac7bfa00174710c92a077113a202ba2dd" compoundref="_spectra_co_8hpp" startline="33" endline="41">SpectraCo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double SpectraCo::m_min_x</definition>
        <argsstring></argsstring>
        <name>m_min_x</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="409" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="409" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</referencedby>
        <referencedby refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</referencedby>
        <referencedby refid="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" compoundref="_spectra_co_8hpp" startline="318" endline="324">calibrateX</referencedby>
        <referencedby refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">load</referencedby>
        <referencedby refid="class_spectra_co_1aed822c874938eb1f5953c6e1a412cf33" compoundref="_spectra_co_8hpp" startline="218" endline="218">minX</referencedby>
        <referencedby refid="class_spectra_co_1aae276b412dd31fc06933db96b65298fd" compoundref="_spectra_co_8hpp" startline="177" endline="189">operator=</referencedby>
        <referencedby refid="class_spectra_co_1a5347b79a6a914df04a1a99664fd5cc96" compoundref="_spectra_co_8hpp" startline="202" endline="202">setMinX</referencedby>
        <referencedby refid="class_spectra_co_1ac2141fbefadce3d8f82e5c7db09998ab" compoundref="_spectra_co_8hpp" startline="204" endline="204">setRangeX</referencedby>
        <referencedby refid="class_spectra_co_1ac7bfa00174710c92a077113a202ba2dd" compoundref="_spectra_co_8hpp" startline="33" endline="41">SpectraCo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string SpectraCo::m_name</definition>
        <argsstring></argsstring>
        <name>m_name</name>
        <initializer>= &quot;Unnamed&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="404" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="404" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</referencedby>
        <referencedby refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" compoundref="_spectra_co_8hpp" startline="824" endline="832">createTH1D</referencedby>
        <referencedby refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" compoundref="_spectra_co_8hpp" startline="834" endline="842">createTH1F</referencedby>
        <referencedby refid="class_spectra_co_1a2d1839156a996f255b74024e12257bdb" compoundref="_spectra_co_8hpp" startline="767" endline="779">derivative</referencedby>
        <referencedby refid="class_spectra_co_1a213a9aea476c88a52c8c32a4eb775190" compoundref="_spectra_co_8hpp" startline="781" endline="793">derivative2</referencedby>
        <referencedby refid="class_spectra_co_1a9f6fa49281669395c0e10f833f8e914e" compoundref="_spectra_co_8hpp" startline="454" endline="460">draw</referencedby>
        <referencedby refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">load</referencedby>
        <referencedby refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" compoundref="_spectra_co_8hpp" startline="206" endline="206">name</referencedby>
        <referencedby refid="class_spectra_co_1aae276b412dd31fc06933db96b65298fd" compoundref="_spectra_co_8hpp" startline="177" endline="189">operator=</referencedby>
        <referencedby refid="class_spectra_co_1ac7bfa00174710c92a077113a202ba2dd" compoundref="_spectra_co_8hpp" startline="33" endline="41">SpectraCo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606" prot="private" static="no" mutable="no">
        <type><ref refid="_spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7" kindref="member">SpectraPoints</ref></type>
        <definition>SpectraPoints SpectraCo::m_peaks</definition>
        <argsstring></argsstring>
        <name>m_peaks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="402" column="17" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="402" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" compoundref="_spectra_co_8hpp" startline="926" endline="963">findPeaks</referencedby>
        <referencedby refid="class_spectra_co_1ac96882f321f72ffe8757493da9b5b2fa" compoundref="_spectra_co_8hpp" startline="230" endline="230">peaks</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1a9515b65f7b587af82030316811c1c0aa" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double SpectraCo::m_rebin</definition>
        <argsstring></argsstring>
        <name>m_rebin</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="414" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="414" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" compoundref="_spectra_co_8hpp" startline="466" endline="473">rebin</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int SpectraCo::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="407" column="7" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="407" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</referencedby>
        <referencedby refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</referencedby>
        <referencedby refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" compoundref="_spectra_co_8hpp" startline="824" endline="832">createTH1D</referencedby>
        <referencedby refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" compoundref="_spectra_co_8hpp" startline="834" endline="842">createTH1F</referencedby>
        <referencedby refid="class_spectra_co_1a1a2f7e1b1c45f16cb77d531c90c5212b" compoundref="_spectra_co_8hpp" startline="267" endline="272">firstBinWithValue</referencedby>
        <referencedby refid="class_spectra_co_1a85342e1258a9d8877fb60fa2dca6275f" compoundref="_spectra_co_8hpp" startline="309" endline="309">getX</referencedby>
        <referencedby refid="class_spectra_co_1a66d66744d2d12b088005a826158e2946" compoundref="_spectra_co_8hpp" startline="260" endline="265">lastBinWithValue</referencedby>
        <referencedby refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">load</referencedby>
        <referencedby refid="class_spectra_co_1a34ea7496185caf2178c8ba1c10876dd3" compoundref="_spectra_co_8hpp" startline="521" endline="535">operator*</referencedby>
        <referencedby refid="class_spectra_co_1a9c5ae4fa536ee968b112bdab670fa2d8" compoundref="_spectra_co_8hpp" startline="537" endline="541">operator*=</referencedby>
        <referencedby refid="class_spectra_co_1aa7114661992e4ae88e87cb1ccb82d6ed" compoundref="_spectra_co_8hpp" startline="498" endline="506">operator+</referencedby>
        <referencedby refid="class_spectra_co_1a992b73363532d45debd7fd7befd21765" compoundref="_spectra_co_8hpp" startline="508" endline="516">operator-</referencedby>
        <referencedby refid="class_spectra_co_1aa4225392a595ff8a0950ef67610096d0" compoundref="_spectra_co_8hpp" startline="546" endline="561">operator/</referencedby>
        <referencedby refid="class_spectra_co_1aae276b412dd31fc06933db96b65298fd" compoundref="_spectra_co_8hpp" startline="177" endline="189">operator=</referencedby>
        <referencedby refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" compoundref="_spectra_co_8hpp" startline="563" endline="574">recalibrate</referencedby>
        <referencedby refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" compoundref="_spectra_co_8hpp" startline="798" endline="806">resizeBin</referencedby>
        <referencedby refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" compoundref="_spectra_co_8hpp" startline="214" endline="214">size</referencedby>
        <referencedby refid="class_spectra_co_1ac7bfa00174710c92a077113a202ba2dd" compoundref="_spectra_co_8hpp" startline="33" endline="41">SpectraCo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1a67a019827e1107bc1fc2f28eb6d854f7" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double SpectraCo::m_slope</definition>
        <argsstring></argsstring>
        <name>m_slope</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="417" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="417" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</referencedby>
        <referencedby refid="class_spectra_co_1ac5f6afc77e5fddc79afe224dc0a1dfec" compoundref="_spectra_co_8hpp" startline="311" endline="315">getBin</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; SpectraCo::m_spectra</definition>
        <argsstring></argsstring>
        <name>m_spectra</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="399" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="399" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1a626908f0a27928d07d980cfcec3b8454" compoundref="_spectra_co_8hpp" startline="226" endline="226">back</referencedby>
        <referencedby refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</referencedby>
        <referencedby refid="class_spectra_co_1aecb46bfbd2968e90d0ffd6d5848ca8b4" compoundref="_spectra_co_8hpp" startline="354" endline="370">chi2</referencedby>
        <referencedby refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" compoundref="_spectra_co_8hpp" startline="824" endline="832">createTH1D</referencedby>
        <referencedby refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" compoundref="_spectra_co_8hpp" startline="834" endline="842">createTH1F</referencedby>
        <referencedby refid="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" compoundref="_spectra_co_8hpp" startline="198" endline="198">data</referencedby>
        <referencedby refid="class_spectra_co_1a1a2f7e1b1c45f16cb77d531c90c5212b" compoundref="_spectra_co_8hpp" startline="267" endline="272">firstBinWithValue</referencedby>
        <referencedby refid="class_spectra_co_1a9cbf03e7634f8a80d65aec65d3d9119c" compoundref="_spectra_co_8hpp" startline="228" endline="228">get</referencedby>
        <referencedby refid="class_spectra_co_1acbe779815b224c8102ec62af4403a7d9" compoundref="_spectra_co_8hpp" startline="258" endline="258">inverse</referencedby>
        <referencedby refid="class_spectra_co_1a1b66482bf4e3ff7903bda481d6d67a8d" compoundref="_spectra_co_8hpp" startline="224" endline="224">lastBin</referencedby>
        <referencedby refid="class_spectra_co_1a66d66744d2d12b088005a826158e2946" compoundref="_spectra_co_8hpp" startline="260" endline="265">lastBinWithValue</referencedby>
        <referencedby refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">load</referencedby>
        <referencedby refid="class_spectra_co_1a9c5ae4fa536ee968b112bdab670fa2d8" compoundref="_spectra_co_8hpp" startline="537" endline="541">operator*=</referencedby>
        <referencedby refid="class_spectra_co_1aae276b412dd31fc06933db96b65298fd" compoundref="_spectra_co_8hpp" startline="177" endline="189">operator=</referencedby>
        <referencedby refid="class_spectra_co_1ae05d953f1aa96c7d7077ff6dda044afd" compoundref="_spectra_co_8hpp" startline="300" endline="300">operator[]</referencedby>
        <referencedby refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" compoundref="_spectra_co_8hpp" startline="563" endline="574">recalibrate</referencedby>
        <referencedby refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" compoundref="_spectra_co_8hpp" startline="798" endline="806">resizeBin</referencedby>
        <referencedby refid="class_spectra_co_1a7aa1ab216355e91774cbf364a7286043" compoundref="_spectra_co_8hpp" startline="43" endline="54">SpectraCo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string SpectraCo::m_title</definition>
        <argsstring></argsstring>
        <name>m_title</name>
        <initializer>= &quot;Untitled&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="405" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="405" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</referencedby>
        <referencedby refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" compoundref="_spectra_co_8hpp" startline="824" endline="832">createTH1D</referencedby>
        <referencedby refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" compoundref="_spectra_co_8hpp" startline="834" endline="842">createTH1F</referencedby>
        <referencedby refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">load</referencedby>
        <referencedby refid="class_spectra_co_1aae276b412dd31fc06933db96b65298fd" compoundref="_spectra_co_8hpp" startline="177" endline="189">operator=</referencedby>
        <referencedby refid="class_spectra_co_1ac7bfa00174710c92a077113a202ba2dd" compoundref="_spectra_co_8hpp" startline="33" endline="41">SpectraCo</referencedby>
        <referencedby refid="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" compoundref="_spectra_co_8hpp" startline="207" endline="207">title</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1a5219f7157190c99448c3b14ea37fbac2" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int SpectraCo::nb_histo_drawn</definition>
        <argsstring></argsstring>
        <name>nb_histo_drawn</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="413" column="7" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="413" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1a9f6fa49281669395c0e10f833f8e914e" compoundref="_spectra_co_8hpp" startline="454" endline="460">draw</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_spectra_co_1a7bb27d1fe53fe342a218040f28d647ba" prot="private" static="no" mutable="no">
        <type>std::vector&lt; TH1 * &gt;</type>
        <definition>std::vector&lt;TH1*&gt; SpectraCo::root_spectra_pointers</definition>
        <argsstring></argsstring>
        <name>root_spectra_pointers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="412" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="412" bodyend="-1"/>
        <referencedby refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" compoundref="_spectra_co_8hpp" startline="824" endline="832">createTH1D</referencedby>
        <referencedby refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" compoundref="_spectra_co_8hpp" startline="834" endline="842">createTH1F</referencedby>
        <referencedby refid="class_spectra_co_1a9f6fa49281669395c0e10f833f8e914e" compoundref="_spectra_co_8hpp" startline="454" endline="460">draw</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_spectra_co_1a4bb4afaf9dd3881b73e8c6e740712a30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SpectraCo::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="227" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="227" bodyend="227"/>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a626908f0a27928d07d980cfcec3b8454" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="226" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="226" bodyend="226"/>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::calibrate</definition>
        <argsstring>(Calibration const &amp;calib, Label const &amp;label)</argsstring>
        <name>calibrate</name>
        <param>
          <type><ref refid="class_calibration" kindref="compound">Calibration</ref> const &amp;</type>
          <declname>calib</declname>
        </param>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="337" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="576" bodyend="600"/>
        <references refid="class_calibration_1a6044ac4a0a17e177af66138f75aca6b6" compoundref="_calibration_8hpp" startline="178" endline="190">Calibration::apply</references>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</references>
        <references refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" compoundref="_spectra_co_8hpp" startline="644" endline="651">interpolate</references>
        <references refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" compoundref="_spectra_co_8hpp" startline="400">m_derivative</references>
        <references refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" compoundref="_spectra_co_8hpp" startline="410">m_max_x</references>
        <references refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" compoundref="_spectra_co_8hpp" startline="409">m_min_x</references>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
        <references refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" compoundref="_spectra_co_8hpp" startline="405">m_title</references>
        <references refid="class_calibration_1a91d512d3bcbc3a3439a7902326965b48" compoundref="_calibration_8hpp" startline="140" endline="140">Calibration::order</references>
        <references refid="string__functions_8hpp_1a3a78dc61d5d352a6559b927ae3167a21" compoundref="string__functions_8hpp" startline="169" endline="179">replace</references>
        <referencedby refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</referencedby>
        <referencedby refid="class_spectra_co_1af74c78334a7be1cc421779f9e4b30a0b" compoundref="_spectra_co_8hpp" startline="637" endline="642">calibrateAndScale</referencedby>
        <referencedby refid="class_spectra_co_1a488369423915a272c24b561553cea913" compoundref="_spectra_co_8hpp" startline="126" endline="138">SpectraCo</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1af580e2c735a90aff03e6c1c159ed9b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::calibrate</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;coeffs)</argsstring>
        <name>calibrate</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>coeffs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="338" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="602" bodyend="631"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</references>
        <references refid="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" compoundref="_spectra_co_8hpp" startline="318" endline="324">calibrateX</references>
        <references refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" compoundref="print_8hpp" startline="176" endline="181">error</references>
        <references refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" compoundref="lib_co_8hpp" startline="209" endline="209">int_cast</references>
        <references refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" compoundref="_spectra_co_8hpp" startline="644" endline="651">interpolate</references>
        <references refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" compoundref="_spectra_co_8hpp" startline="400">m_derivative</references>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
        <references refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" compoundref="_spectra_co_8hpp" startline="405">m_title</references>
        <references refid="string__functions_8hpp_1a3a78dc61d5d352a6559b927ae3167a21" compoundref="string__functions_8hpp" startline="169" endline="179">replace</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1af74c78334a7be1cc421779f9e4b30a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::calibrateAndScale</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;coeffs)</argsstring>
        <name>calibrateAndScale</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>coeffs</declname>
        </param>
        <briefdescription>
<para>Calibrates using the coeffs[0:n-1] coefficient then scale it using the coeffs.back() coefficient (spectra*=coeffs.back()) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>The last coefficient is used to scale, the other firsts to calibrate the x axis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="339" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="637" bodyend="642"/>
        <references refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</references>
        <references refid="vector__functions_8hpp_1a629f2e4117a0bb1dada5aa3a4fad4765" compoundref="vector__functions_8hpp" startline="246" endline="249">sub_vec</references>
        <references refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" compoundref="lib_co_8hpp" startline="156" endline="156">throw_error</references>
        <referencedby refid="class_objective_function_chi2_1ab9abe6ab2b65aa87d805b9866044eaed" compoundref="_spectra_alignator_8hpp" startline="391" endline="421">ObjectiveFunctionChi2::evaluate</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::calibrateX</definition>
        <argsstring>(double const &amp;intercept, double const &amp;slope=1)</argsstring>
        <name>calibrateX</name>
        <param>
          <type>double const &amp;</type>
          <declname>intercept</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>slope</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>First order calibration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="318" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="318" bodyend="324"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" compoundref="_spectra_co_8hpp" startline="318" endline="324">calibrateX</references>
        <references refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" compoundref="_spectra_co_8hpp" startline="400">m_derivative</references>
        <references refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" compoundref="_spectra_co_8hpp" startline="410">m_max_x</references>
        <references refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" compoundref="_spectra_co_8hpp" startline="409">m_min_x</references>
        <referencedby refid="class_spectra_co_1af580e2c735a90aff03e6c1c159ed9b17" compoundref="_spectra_co_8hpp" startline="602" endline="631">calibrate</referencedby>
        <referencedby refid="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" compoundref="_spectra_co_8hpp" startline="318" endline="324">calibrateX</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aecb46bfbd2968e90d0ffd6d5848ca8b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double SpectraCo::chi2</definition>
        <argsstring>(SpectraCo &amp;other)</argsstring>
        <name>chi2</name>
        <param>
          <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Calculates the chi2 between this spectra and another one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="354" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="354" bodyend="370"/>
        <references refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" compoundref="print_8hpp" startline="176" endline="181">error</references>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
        <references refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" compoundref="_spectra_co_8hpp" startline="214" endline="214">size</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TH1D *</type>
        <definition>TH1D * SpectraCo::createTH1D</definition>
        <argsstring>(std::string newName=&quot;&quot;, std::string newTitle=&quot;&quot;)</argsstring>
        <name>createTH1D</name>
        <param>
          <type>std::string</type>
          <declname>newName</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>newTitle</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="279" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="824" bodyend="832"/>
        <references refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" compoundref="lib_co_8hpp" startline="221" endline="221">double_cast</references>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
        <references refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" compoundref="_spectra_co_8hpp" startline="405">m_title</references>
        <references refid="class_spectra_co_1a7bb27d1fe53fe342a218040f28d647ba" compoundref="_spectra_co_8hpp" startline="412">root_spectra_pointers</references>
        <referencedby refid="class_spectra_co_1a56313f7f5ce661a5952d251e51ca3246" compoundref="_spectra_co_8hpp" startline="290" endline="290">writeTH1D</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TH1F *</type>
        <definition>TH1F * SpectraCo::createTH1F</definition>
        <argsstring>(std::string newName=&quot;&quot;, std::string newTitle=&quot;&quot;)</argsstring>
        <name>createTH1F</name>
        <param>
          <type>std::string</type>
          <declname>newName</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>newTitle</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="280" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="834" bodyend="842"/>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
        <references refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" compoundref="_spectra_co_8hpp" startline="405">m_title</references>
        <references refid="class_spectra_co_1a7bb27d1fe53fe342a218040f28d647ba" compoundref="_spectra_co_8hpp" startline="412">root_spectra_pointers</references>
        <referencedby refid="class_spectra_co_1a9f6fa49281669395c0e10f833f8e914e" compoundref="_spectra_co_8hpp" startline="454" endline="460">draw</referencedby>
        <referencedby refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" compoundref="_spectra_co_8hpp" startline="466" endline="473">rebin</referencedby>
        <referencedby refid="class_spectra_co_1a6dc41ae065225471fadc69382077ceb8" compoundref="_spectra_co_8hpp" startline="282" endline="282">write</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a85cee2f57fbae02a28329584da5df1b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SpectraCo::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="199" column="9" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="199" bodyend="199"/>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="198" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="198" bodyend="198"/>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
        <referencedby refid="class_spectra_co_1a6106089e9e4295cc71f3d45f781ac2c8" compoundref="_spectra_co_8hpp" startline="246" endline="246">derivative2Data</referencedby>
        <referencedby refid="class_spectra_co_1a5c0d013692342e790580839787143f36" compoundref="_spectra_co_8hpp" startline="244" endline="244">derivativeData</referencedby>
        <referencedby refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" compoundref="_spectra_co_8hpp" startline="926" endline="963">findPeaks</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a649cc895e9813d1a82c9057022228266" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::deleteDerivative</definition>
        <argsstring>()</argsstring>
        <name>deleteDerivative</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="349" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="349" bodyend="349"/>
        <references refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" compoundref="_spectra_co_8hpp" startline="400">m_derivative</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a7b935499bbdce4b84a0f640b6518765c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> *</type>
        <definition>SpectraCo * SpectraCo::derivate</definition>
        <argsstring>(int smooth=1) noexcept</argsstring>
        <name>derivate</name>
        <param>
          <type>int</type>
          <declname>smooth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="234" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="714" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a9be3e04ddc73df4d11336ec806313094" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> *</type>
        <definition>SpectraCo * SpectraCo::derivate2</definition>
        <argsstring>(int smooth=1) noexcept</argsstring>
        <name>derivate2</name>
        <param>
          <type>int</type>
          <declname>smooth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="235" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="759" bodyend="764"/>
        <referencedby refid="class_spectra_co_1a3ba8c0e42ab3c3d3efa1f827b9465daf" compoundref="_spectra_co_8hpp" startline="912" endline="917">findPeaks</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aa9af077c307bb5e33e271bf8cbaa1741" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> *</type>
        <definition>SpectraCo* SpectraCo::derivative</definition>
        <argsstring>()</argsstring>
        <name>derivative</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="248" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="248" bodyend="248"/>
        <references refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" compoundref="_spectra_co_8hpp" startline="400">m_derivative</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a2d1839156a996f255b74024e12257bdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> *</type>
        <definition>SpectraCo * SpectraCo::derivative</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>derivative</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="249" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="767" bodyend="779"/>
        <references refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" compoundref="print_8hpp" startline="176" endline="181">error</references>
        <references refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" compoundref="_spectra_co_8hpp" startline="400">m_derivative</references>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" compoundref="_spectra_co_8hpp" startline="206" endline="206">name</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a5db4e774152522eac0e1c58af984fc28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> *</type>
        <definition>SpectraCo* SpectraCo::derivative2</definition>
        <argsstring>()</argsstring>
        <name>derivative2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="251" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="251" bodyend="251"/>
        <references refid="class_spectra_co_1a332e26399e136100490dd879772fe797" compoundref="_spectra_co_8hpp" startline="401">m_derivative2</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a213a9aea476c88a52c8c32a4eb775190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> *</type>
        <definition>SpectraCo * SpectraCo::derivative2</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>derivative2</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="252" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="781" bodyend="793"/>
        <references refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" compoundref="print_8hpp" startline="176" endline="181">error</references>
        <references refid="class_spectra_co_1a332e26399e136100490dd879772fe797" compoundref="_spectra_co_8hpp" startline="401">m_derivative2</references>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" compoundref="_spectra_co_8hpp" startline="206" endline="206">name</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a6106089e9e4295cc71f3d45f781ac2c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt; const  &amp;</type>
        <definition>std::vector&lt;double&gt; const&amp; SpectraCo::derivative2Data</definition>
        <argsstring>()</argsstring>
        <name>derivative2Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>One has to check that the second derivative has already been calculated; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="246" column="22" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="246" bodyend="246"/>
        <references refid="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" compoundref="_spectra_co_8hpp" startline="198" endline="198">data</references>
        <references refid="class_spectra_co_1a332e26399e136100490dd879772fe797" compoundref="_spectra_co_8hpp" startline="401">m_derivative2</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a5c0d013692342e790580839787143f36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt; const  &amp;</type>
        <definition>std::vector&lt;double&gt; const&amp; SpectraCo::derivativeData</definition>
        <argsstring>()</argsstring>
        <name>derivativeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>One has to check that the derivative has already been calculated; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="244" column="22" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="244" bodyend="244"/>
        <references refid="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" compoundref="_spectra_co_8hpp" startline="198" endline="198">data</references>
        <references refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" compoundref="_spectra_co_8hpp" startline="400">m_derivative</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a9f6fa49281669395c0e10f833f8e914e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::draw</definition>
        <argsstring>(const char *param=&quot;&quot;)</argsstring>
        <name>draw</name>
        <param>
          <type>const char *</type>
          <declname>param</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Creates a new TH1F to be drawn. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="276" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="454" bodyend="460"/>
        <references refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" compoundref="string__functions_8hpp" startline="240" endline="245">concatenate</references>
        <references refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" compoundref="_spectra_co_8hpp" startline="834" endline="842">createTH1F</references>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" compoundref="_spectra_co_8hpp" startline="210" endline="210">name</references>
        <references refid="class_spectra_co_1a5219f7157190c99448c3b14ea37fbac2" compoundref="_spectra_co_8hpp" startline="413">nb_histo_drawn</references>
        <references refid="class_spectra_co_1a7bb27d1fe53fe342a218040f28d647ba" compoundref="_spectra_co_8hpp" startline="412">root_spectra_pointers</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a30feae642d436e24ff7397891030d859" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SpectraCo::factor</definition>
        <argsstring>()</argsstring>
        <name>factor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="223" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="223" bodyend="223"/>
        <references refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" compoundref="_spectra_co_8hpp" startline="411">m_factor</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::factor</definition>
        <argsstring>() const</argsstring>
        <name>factor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="222" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="222" bodyend="222"/>
        <references refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" compoundref="_spectra_co_8hpp" startline="411">m_factor</references>
        <referencedby refid="class_spectra_co_1a34ea7496185caf2178c8ba1c10876dd3" compoundref="_spectra_co_8hpp" startline="521" endline="535">operator*</referencedby>
        <referencedby refid="class_spectra_co_1a9c5ae4fa536ee968b112bdab670fa2d8" compoundref="_spectra_co_8hpp" startline="537" endline="541">operator*=</referencedby>
        <referencedby refid="class_spectra_co_1aa4225392a595ff8a0950ef67610096d0" compoundref="_spectra_co_8hpp" startline="546" endline="561">operator/</referencedby>
        <referencedby refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" compoundref="_spectra_co_8hpp" startline="466" endline="473">rebin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a223f3a9be7c661c1ef700d8bfda1106f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::fill</definition>
        <argsstring>(double const &amp;X) noexcept</argsstring>
        <name>fill</name>
        <param>
          <type>double const &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
<para>Fills a bin of the spectra based on the X value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Has not been tested </para>
</simplesect>
<xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>test it </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="275" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="447" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7" kindref="member">SpectraPoints</ref> const  &amp;</type>
        <definition>SpectraPoints const  &amp; SpectraCo::findPeaks</definition>
        <argsstring>(int const &amp;threshold, int const &amp;nb_bins_below_threshold)</argsstring>
        <name>findPeaks</name>
        <param>
          <type>int const &amp;</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nb_bins_below_threshold</declname>
        </param>
        <briefdescription>
<para>Uses the second derivative spectra to get the peaks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_bins_below_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SpectraPoints: a vector&lt;pair&lt;int, double&gt;&gt; with the keys the bin and the values the height of the second derivative peak </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="345" column="24" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="926" bodyend="963"/>
        <references refid="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" compoundref="_spectra_co_8hpp" startline="198" endline="198">data</references>
        <references refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" compoundref="print_8hpp" startline="176" endline="181">error</references>
        <references refid="_spectra_co_8hpp_1ab40ef30166a4d0b3f315e6b365bb96c6" compoundref="_spectra_co_8hpp" startline="870" endline="889">goingAbove</references>
        <references refid="_spectra_co_8hpp_1a2db236fee001966b9a9a303b1096182b" compoundref="_spectra_co_8hpp" startline="846" endline="866">goingBelow</references>
        <references refid="class_spectra_co_1a332e26399e136100490dd879772fe797" compoundref="_spectra_co_8hpp" startline="401">m_derivative2</references>
        <references refid="class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606" compoundref="_spectra_co_8hpp" startline="402">m_peaks</references>
        <references refid="_spectra_co_8hpp_1abdc3f87ff631c70010f12fd72339b8c8" compoundref="_spectra_co_8hpp" startline="891" endline="899">minimum_in_range</references>
        <referencedby refid="class_spectra_co_1a3ba8c0e42ab3c3d3efa1f827b9465daf" compoundref="_spectra_co_8hpp" startline="912" endline="917">findPeaks</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a3ba8c0e42ab3c3d3efa1f827b9465daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7" kindref="member">SpectraPoints</ref> const  &amp;</type>
        <definition>SpectraPoints const  &amp; SpectraCo::findPeaks</definition>
        <argsstring>(int const &amp;threshold, int const &amp;nb_bins_below_threshold, int const &amp;smooth)</argsstring>
        <name>findPeaks</name>
        <param>
          <type>int const &amp;</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nb_bins_below_threshold</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>smooth</declname>
        </param>
        <briefdescription>
<para>The spectra must not have had background substraction yet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="346" column="24" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="912" bodyend="917"/>
        <references refid="class_spectra_co_1a9be3e04ddc73df4d11336ec806313094" compoundref="_spectra_co_8hpp" startline="759" endline="764">derivate2</references>
        <references refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" compoundref="_spectra_co_8hpp" startline="926" endline="963">findPeaks</references>
        <references refid="class_spectra_co_1adbdfafcc8b0a95d520e491b0062b2e0b" compoundref="_spectra_co_8hpp" startline="659" endline="668">removeBackground</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a1a2f7e1b1c45f16cb77d531c90c5212b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int SpectraCo::firstBinWithValue</definition>
        <argsstring>() const noexcept</argsstring>
        <name>firstBinWithValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="267" column="7" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="267" bodyend="272"/>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a4d14e86e9dd8d42c0ce5a72a2f3b7dfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SpectraCo::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="229" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="229" bodyend="229"/>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a9cbf03e7634f8a80d65aec65d3d9119c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="228" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="228" bodyend="228"/>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a9e31bbca1885c3a48c66e7f8e2622f9a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::get</definition>
        <argsstring>(int const &amp;bin) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type>int const &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="299" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="299" bodyend="299"/>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ac5f6afc77e5fddc79afe224dc0a1dfec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double SpectraCo::getBin</definition>
        <argsstring>(double const &amp;x) const</argsstring>
        <name>getBin</name>
        <param>
          <type>double const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="311" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="311" bodyend="315"/>
        <references refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" compoundref="lib_co_8hpp" startline="209" endline="209">int_cast</references>
        <references refid="class_spectra_co_1a80e56f3b23d5a7092dd3152f47bf3c47" compoundref="_spectra_co_8hpp" startline="418">m_intercept</references>
        <references refid="class_spectra_co_1a67a019827e1107bc1fc2f28eb6d854f7" compoundref="_spectra_co_8hpp" startline="417">m_slope</references>
        <referencedby refid="class_spectra_co_1a992b73363532d45debd7fd7befd21765" compoundref="_spectra_co_8hpp" startline="508" endline="516">operator-</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a85342e1258a9d8877fb60fa2dca6275f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double SpectraCo::getX</definition>
        <argsstring>(double const &amp;bin)</argsstring>
        <name>getX</name>
        <param>
          <type>double const &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="309" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="309" bodyend="309"/>
        <references refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" compoundref="_spectra_co_8hpp" startline="410">m_max_x</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <referencedby refid="class_spectra_co_1a992b73363532d45debd7fd7befd21765" compoundref="_spectra_co_8hpp" startline="508" endline="516">operator-</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a4a6080fd25cec92c1a6295e4d8398a44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SpectraCo::integral</definition>
        <argsstring>()</argsstring>
        <name>integral</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="217" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="217" bodyend="217"/>
        <references refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" compoundref="_spectra_co_8hpp" startline="408">m_integral</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aad2d7fb657b00304906a0c5e3c9a3aed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::integral</definition>
        <argsstring>() const</argsstring>
        <name>integral</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="216" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="216" bodyend="216"/>
        <references refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" compoundref="_spectra_co_8hpp" startline="408">m_integral</references>
        <referencedby refid="_spectra_co_8hpp_1aca2246688a20da3a38fe2a0f9cd74e90" compoundref="_spectra_co_8hpp" startline="421" endline="426">operator&lt;&lt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a7986a8f7ea5491f7a69ad810e857894f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double SpectraCo::integralInRange</definition>
        <argsstring>(double const &amp;value_min, double const &amp;value_max) noexcept</argsstring>
        <name>integralInRange</name>
        <param>
          <type>double const &amp;</type>
          <declname>value_min</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>value_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="238" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="677" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1abf17675f290cad6e53ad51e59430a63c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double SpectraCo::integralInRangeBin</definition>
        <argsstring>(int const &amp;bin_min, int const &amp;bin_max) noexcept</argsstring>
        <name>integralInRangeBin</name>
        <param>
          <type>int const &amp;</type>
          <declname>bin_min</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>bin_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="237" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="670" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double SpectraCo::interpolate</definition>
        <argsstring>(double const &amp;bin) const noexcept</argsstring>
        <name>interpolate</name>
        <param>
          <type>double const &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="304" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="644" bodyend="651"/>
        <referencedby refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</referencedby>
        <referencedby refid="class_spectra_co_1aa32b538c1586e9f78af9ab28fed27efb" compoundref="_spectra_co_8hpp" startline="305" endline="305">operator[]</referencedby>
        <referencedby refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" compoundref="_spectra_co_8hpp" startline="563" endline="574">recalibrate</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1acbe779815b224c8102ec62af4403a7d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::inverse</definition>
        <argsstring>()</argsstring>
        <name>inverse</name>
        <briefdescription>
<para>Inverses the spectra : negative values become positive and positive values become negative. </para>
        </briefdescription>
        <detaileddescription>
<para>Do not touch the derivatives </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="258" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="258" bodyend="258"/>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ad6c387515e792a22195054cd6c174db5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SpectraCo::lastBin</definition>
        <argsstring>()</argsstring>
        <name>lastBin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="225" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="225" bodyend="225"/>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a1b66482bf4e3ff7903bda481d6d67a8d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::lastBin</definition>
        <argsstring>() const</argsstring>
        <name>lastBin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="224" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="224" bodyend="224"/>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a66d66744d2d12b088005a826158e2946" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int SpectraCo::lastBinWithValue</definition>
        <argsstring>() const noexcept</argsstring>
        <name>lastBinWithValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="260" column="7" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="260" bodyend="265"/>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
        <referencedby refid="class_spectra_co_1a4edb2ef585474bb8c1f728d0dc7731e2" compoundref="_spectra_co_8hpp" startline="374" endline="374">setActualRange</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::load</definition>
        <argsstring>(TH1 *root_spectra)</argsstring>
        <name>load</name>
        <param>
          <type>TH1 *</type>
          <declname>root_spectra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="197" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="475" bodyend="496"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" compoundref="lib_co_8hpp" startline="221" endline="221">double_cast</references>
        <references refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" compoundref="_spectra_co_8hpp" startline="408">m_integral</references>
        <references refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" compoundref="_spectra_co_8hpp" startline="398">m_loaded_TH1</references>
        <references refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" compoundref="_spectra_co_8hpp" startline="410">m_max_x</references>
        <references refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" compoundref="_spectra_co_8hpp" startline="409">m_min_x</references>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
        <references refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" compoundref="_spectra_co_8hpp" startline="405">m_title</references>
        <references refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" compoundref="lib_co_8hpp" startline="156" endline="156">throw_error</references>
        <referencedby refid="class_spectra_co_1ad094b13ab3d8e445b04edc68a5c12ec0" compoundref="_spectra_co_8hpp" startline="191" endline="195">operator=</referencedby>
        <referencedby refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" compoundref="_spectra_co_8hpp" startline="466" endline="473">rebin</referencedby>
        <referencedby refid="class_spectra_co_1a7cd88b33fa9b85c5bf2dcdd2e3d13dc2" compoundref="_spectra_co_8hpp" startline="170" endline="175">SpectraCo</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aaeaea4ebc4fd51825acf90e66eb89ae4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SpectraCo::maxX</definition>
        <argsstring>()</argsstring>
        <name>maxX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="221" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="221" bodyend="221"/>
        <references refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" compoundref="_spectra_co_8hpp" startline="410">m_max_x</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a244bef386237d633da441b377ca2a278" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::maxX</definition>
        <argsstring>() const</argsstring>
        <name>maxX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="220" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="220" bodyend="220"/>
        <references refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" compoundref="_spectra_co_8hpp" startline="410">m_max_x</references>
        <referencedby refid="class_spectra_co_1af27cbecc0fdfd5542e0186856bc4c4cf" compoundref="_spectra_co_8hpp" startline="814" endline="817">resizeX</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a4e9df1dfede067a7a241e1209a01f4bc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double SpectraCo::meanInRange</definition>
        <argsstring>(double const &amp;value_min, double const &amp;value_max) noexcept</argsstring>
        <name>meanInRange</name>
        <param>
          <type>double const &amp;</type>
          <declname>value_min</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>value_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="240" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="699" bodyend="711"/>
        <references refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" compoundref="lib_co_8hpp" startline="470" endline="470">CoBazar::mean</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a6c50f289318ed3a37218be1b2485a0aa" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double SpectraCo::meanInRangeBin</definition>
        <argsstring>(int const &amp;bin_min, int const &amp;bin_max) noexcept</argsstring>
        <name>meanInRangeBin</name>
        <param>
          <type>int const &amp;</type>
          <declname>bin_min</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>bin_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="239" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="687" bodyend="697"/>
        <references refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" compoundref="lib_co_8hpp" startline="470" endline="470">CoBazar::mean</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1abb97aec97436b5d4171015db6b47e6b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SpectraCo::minX</definition>
        <argsstring>()</argsstring>
        <name>minX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="219" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="219" bodyend="219"/>
        <references refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" compoundref="_spectra_co_8hpp" startline="409">m_min_x</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aed822c874938eb1f5953c6e1a412cf33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::minX</definition>
        <argsstring>() const</argsstring>
        <name>minX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="218" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="218" bodyend="218"/>
        <references refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" compoundref="_spectra_co_8hpp" startline="409">m_min_x</references>
        <referencedby refid="class_spectra_co_1af27cbecc0fdfd5542e0186856bc4c4cf" compoundref="_spectra_co_8hpp" startline="814" endline="817">resizeX</referencedby>
        <referencedby refid="_spectra_co_8hpp_1ad3085c55da700fb2917875d8efe0b377" compoundref="_spectra_co_8hpp" startline="429" endline="432">type_of&lt; SpectraCo &gt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a79deb54e5d5e3d36f9294482fea3d08c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SpectraCo::name</definition>
        <argsstring>()</argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="211" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="211" bodyend="211"/>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a571209e16332182019598b86d9a5e234" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="210" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="210" bodyend="210"/>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <referencedby refid="class_spectra_co_1a2d1839156a996f255b74024e12257bdb" compoundref="_spectra_co_8hpp" startline="767" endline="779">derivative</referencedby>
        <referencedby refid="class_spectra_co_1a213a9aea476c88a52c8c32a4eb775190" compoundref="_spectra_co_8hpp" startline="781" endline="793">derivative2</referencedby>
        <referencedby refid="class_spectra_co_1a9f6fa49281669395c0e10f833f8e914e" compoundref="_spectra_co_8hpp" startline="454" endline="460">draw</referencedby>
        <referencedby refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" compoundref="_spectra_co_8hpp" startline="206" endline="206">name</referencedby>
        <referencedby refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" compoundref="_spectra_co_8hpp" startline="466" endline="473">rebin</referencedby>
        <referencedby refid="class_spectra_co_1ac8127b3f1b1eaf9292400cf2efa7bbde" compoundref="_spectra_co_8hpp" startline="68" endline="81">SpectraCo</referencedby>
        <referencedby refid="class_spectra_co_1a6dc41ae065225471fadc69382077ceb8" compoundref="_spectra_co_8hpp" startline="282" endline="282">write</referencedby>
        <referencedby refid="class_spectra_co_1a56313f7f5ce661a5952d251e51ca3246" compoundref="_spectra_co_8hpp" startline="290" endline="290">writeTH1D</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto SpectraCo::name</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>name</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="206" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="206" bodyend="206"/>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" compoundref="_spectra_co_8hpp" startline="210" endline="210">name</references>
        <referencedby refid="class_spectra_co_1a2d1839156a996f255b74024e12257bdb" compoundref="_spectra_co_8hpp" startline="767" endline="779">derivative</referencedby>
        <referencedby refid="class_spectra_co_1a213a9aea476c88a52c8c32a4eb775190" compoundref="_spectra_co_8hpp" startline="781" endline="793">derivative2</referencedby>
        <referencedby refid="class_spectra_co_1aa7114661992e4ae88e87cb1ccb82d6ed" compoundref="_spectra_co_8hpp" startline="498" endline="506">operator+</referencedby>
        <referencedby refid="class_spectra_co_1a992b73363532d45debd7fd7befd21765" compoundref="_spectra_co_8hpp" startline="508" endline="516">operator-</referencedby>
        <referencedby refid="_spectra_co_8hpp_1aca2246688a20da3a38fe2a0f9cd74e90" compoundref="_spectra_co_8hpp" startline="421" endline="426">operator&lt;&lt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a34ea7496185caf2178c8ba1c10876dd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref></type>
        <definition>SpectraCo SpectraCo::operator*</definition>
        <argsstring>(double const &amp;factor)</argsstring>
        <name>operator*</name>
        <param>
          <type>double const &amp;</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>can be optimized </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="333" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="521" bodyend="535"/>
        <references refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" compoundref="_spectra_co_8hpp" startline="222" endline="222">factor</references>
        <references refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" compoundref="_spectra_co_8hpp" startline="411">m_factor</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a9c5ae4fa536ee968b112bdab670fa2d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> &amp;</type>
        <definition>SpectraCo &amp; SpectraCo::operator*=</definition>
        <argsstring>(double const &amp;factor)</argsstring>
        <name>operator*=</name>
        <param>
          <type>double const &amp;</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="335" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="537" bodyend="541"/>
        <references refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" compoundref="_spectra_co_8hpp" startline="222" endline="222">factor</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aa7114661992e4ae88e87cb1ccb82d6ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref></type>
        <definition>SpectraCo SpectraCo::operator+</definition>
        <argsstring>(SpectraCo const &amp;other) const</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="331" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="498" bodyend="506"/>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" compoundref="_spectra_co_8hpp" startline="206" endline="206">name</references>
        <references refid="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" compoundref="_spectra_co_8hpp" startline="207" endline="207">title</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a992b73363532d45debd7fd7befd21765" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref></type>
        <definition>SpectraCo SpectraCo::operator-</definition>
        <argsstring>(SpectraCo const &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="332" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="508" bodyend="516"/>
        <references refid="class_spectra_co_1ac5f6afc77e5fddc79afe224dc0a1dfec" compoundref="_spectra_co_8hpp" startline="311" endline="315">getBin</references>
        <references refid="class_spectra_co_1a85342e1258a9d8877fb60fa2dca6275f" compoundref="_spectra_co_8hpp" startline="309" endline="309">getX</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" compoundref="_spectra_co_8hpp" startline="206" endline="206">name</references>
        <references refid="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" compoundref="_spectra_co_8hpp" startline="207" endline="207">title</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aa4225392a595ff8a0950ef67610096d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref></type>
        <definition>SpectraCo SpectraCo::operator/</definition>
        <argsstring>(double const &amp;factor)</argsstring>
        <name>operator/</name>
        <param>
          <type>double const &amp;</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000004"><xreftitle>Todo</xreftitle><xrefdescription><para>can be optimized </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="334" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="546" bodyend="561"/>
        <references refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" compoundref="print_8hpp" startline="176" endline="181">error</references>
        <references refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" compoundref="_spectra_co_8hpp" startline="222" endline="222">factor</references>
        <references refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" compoundref="_spectra_co_8hpp" startline="411">m_factor</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aae276b412dd31fc06933db96b65298fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> &amp;</type>
        <definition>SpectraCo&amp; SpectraCo::operator=</definition>
        <argsstring>(SpectraCo const &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="177" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="177" bodyend="189"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" compoundref="_spectra_co_8hpp" startline="408">m_integral</references>
        <references refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" compoundref="_spectra_co_8hpp" startline="398">m_loaded_TH1</references>
        <references refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" compoundref="_spectra_co_8hpp" startline="410">m_max_x</references>
        <references refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" compoundref="_spectra_co_8hpp" startline="409">m_min_x</references>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
        <references refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" compoundref="_spectra_co_8hpp" startline="405">m_title</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ad094b13ab3d8e445b04edc68a5c12ec0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> &amp;</type>
        <definition>SpectraCo&amp; SpectraCo::operator=</definition>
        <argsstring>(TH1 *root_spectra)</argsstring>
        <name>operator=</name>
        <param>
          <type>TH1 *</type>
          <declname>root_spectra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="191" column="13" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="191" bodyend="195"/>
        <references refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">load</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a00b22f96c7d319af473e16e9f07efbfd" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double SpectraCo::operator[]</definition>
        <argsstring>(double const &amp;bin) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>double const &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="306" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="306" bodyend="306"/>
        <references refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" compoundref="_spectra_co_8hpp" startline="644" endline="651">interpolate</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aa32b538c1586e9f78af9ab28fed27efb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double SpectraCo::operator[]</definition>
        <argsstring>(double const &amp;bin) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>double const &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="305" column="10" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="305" bodyend="305"/>
        <references refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" compoundref="_spectra_co_8hpp" startline="644" endline="651">interpolate</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ae05d953f1aa96c7d7077ff6dda044afd" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::operator[]</definition>
        <argsstring>(int const &amp;bin) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>int const &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="300" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="300" bodyend="300"/>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a484fc9226bbbee3ed3b654c3aeea165b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SpectraCo::operator[]</definition>
        <argsstring>(int const &amp;bin) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>int const &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="301" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="301" bodyend="301"/>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a889fd42392232f574b687970fda7e311" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SpectraCo::peaks</definition>
        <argsstring>()</argsstring>
        <name>peaks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="231" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="231" bodyend="231"/>
        <references refid="class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606" compoundref="_spectra_co_8hpp" startline="402">m_peaks</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ac96882f321f72ffe8757493da9b5b2fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::peaks</definition>
        <argsstring>() const</argsstring>
        <name>peaks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="230" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="230" bodyend="230"/>
        <references refid="class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606" compoundref="_spectra_co_8hpp" startline="402">m_peaks</references>
        <referencedby refid="_spectra_co_8hpp_1aca2246688a20da3a38fe2a0f9cd74e90" compoundref="_spectra_co_8hpp" startline="421" endline="426">operator&lt;&lt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a79c602e0c90555c37098d070863134f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::rebin</definition>
        <argsstring>(int const &amp;factor, bool const &amp;rebin_derivatives=false)</argsstring>
        <name>rebin</name>
        <param>
          <type>int const &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>rebin_derivatives</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>TODO. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses the TH1::Rebin method;.</para>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>create a custom method without the use of ROOT (attempt commented at the bottom of the file) </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="278" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="466" bodyend="473"/>
        <references refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" compoundref="string__functions_8hpp" startline="240" endline="245">concatenate</references>
        <references refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" compoundref="_spectra_co_8hpp" startline="834" endline="842">createTH1F</references>
        <references refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" compoundref="_spectra_co_8hpp" startline="222" endline="222">factor</references>
        <references refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">load</references>
        <references refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" compoundref="_spectra_co_8hpp" startline="400">m_derivative</references>
        <references refid="class_spectra_co_1a9515b65f7b587af82030316811c1c0aa" compoundref="_spectra_co_8hpp" startline="414">m_rebin</references>
        <references refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" compoundref="_spectra_co_8hpp" startline="210" endline="210">name</references>
        <references refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" compoundref="_spectra_co_8hpp" startline="466" endline="473">rebin</references>
        <referencedby refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" compoundref="_spectra_co_8hpp" startline="466" endline="473">rebin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::recalibrate</definition>
        <argsstring>(Recalibration const &amp;recal)</argsstring>
        <name>recalibrate</name>
        <param>
          <type><ref refid="class_recalibration" kindref="compound">Recalibration</ref> const &amp;</type>
          <declname>recal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="336" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="563" bodyend="574"/>
        <references refid="class_recalibration_1a6ce90b10d69409fdbc385ba6f990e073" compoundref="_recalibration_8hpp" startline="51" endline="51">Recalibration::calculate</references>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" compoundref="_spectra_co_8hpp" startline="644" endline="651">interpolate</references>
        <references refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" compoundref="_spectra_co_8hpp" startline="400">m_derivative</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
        <references refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" compoundref="_spectra_co_8hpp" startline="563" endline="574">recalibrate</references>
        <referencedby refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" compoundref="_spectra_co_8hpp" startline="563" endline="574">recalibrate</referencedby>
        <referencedby refid="class_spectra_co_1a3e4d1435fa3a80662a8c4442464988e1" compoundref="_spectra_co_8hpp" startline="98" endline="110">SpectraCo</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1adbdfafcc8b0a95d520e491b0062b2e0b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::removeBackground</definition>
        <argsstring>(int const &amp;smooth, std::string const &amp;fit_options=&quot;&quot;) noexcept</argsstring>
        <name>removeBackground</name>
        <param>
          <type>int const &amp;</type>
          <declname>smooth</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>fit_options</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>Try to adapt not to have to use root for this function</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smooth</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fit_options</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="236" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="659" bodyend="668"/>
        <references refid="namespace_co_analyse_1afa2d6e36c43655ace45e8aa55a53d4da" compoundref="lib_root_8hpp" startline="1015" endline="1081">CoAnalyse::removeBackground</references>
        <referencedby refid="class_spectra_co_1a3ba8c0e42ab3c3d3efa1f827b9465daf" compoundref="_spectra_co_8hpp" startline="912" endline="917">findPeaks</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::resizeBin</definition>
        <argsstring>(size_t const &amp;new_size)</argsstring>
        <name>resizeBin</name>
        <param>
          <type><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">size_t</ref> const &amp;</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
<para>Resize allows one to select the number of bins. Affects only the maximum bin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="340" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="798" bodyend="806"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" compoundref="lib_co_8hpp" startline="221" endline="221">double_cast</references>
        <references refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" compoundref="_spectra_co_8hpp" startline="400">m_derivative</references>
        <references refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" compoundref="_spectra_co_8hpp" startline="408">m_integral</references>
        <references refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" compoundref="_spectra_co_8hpp" startline="410">m_max_x</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
        <references refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" compoundref="_spectra_co_8hpp" startline="798" endline="806">resizeBin</references>
        <references refid="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" compoundref="vector__functions_8hpp" startline="14" endline="19">sum</references>
        <referencedby refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" compoundref="_spectra_co_8hpp" startline="798" endline="806">resizeBin</referencedby>
        <referencedby refid="class_spectra_co_1a4edb2ef585474bb8c1f728d0dc7731e2" compoundref="_spectra_co_8hpp" startline="374" endline="374">setActualRange</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a0ba318153d548c02c9ab4b39465ea1b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::resizeX</definition>
        <argsstring>(double const &amp;maxX)</argsstring>
        <name>resizeX</name>
        <param>
          <type>double const &amp;</type>
          <declname>maxX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="341" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="819" bodyend="822"/>
        <references refid="class_spectra_co_1a244bef386237d633da441b377ca2a278" compoundref="_spectra_co_8hpp" startline="220" endline="220">maxX</references>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1af27cbecc0fdfd5542e0186856bc4c4cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::resizeX</definition>
        <argsstring>(double const &amp;minX, double const &amp;maxX)</argsstring>
        <name>resizeX</name>
        <param>
          <type>double const &amp;</type>
          <declname>minX</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>maxX</declname>
        </param>
        <briefdescription>
<para>Carefull, this resize leads to a copy of the data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minX</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxX</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="342" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="814" bodyend="817"/>
        <references refid="class_spectra_co_1a244bef386237d633da441b377ca2a278" compoundref="_spectra_co_8hpp" startline="220" endline="220">maxX</references>
        <references refid="class_spectra_co_1aed822c874938eb1f5953c6e1a412cf33" compoundref="_spectra_co_8hpp" startline="218" endline="218">minX</references>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a4edb2ef585474bb8c1f728d0dc7731e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::setActualRange</definition>
        <argsstring>()</argsstring>
        <name>setActualRange</name>
        <briefdescription>
<para>Remove the bins after the last bin with content (= detector&apos;s output max range) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="374" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="374" bodyend="374"/>
        <references refid="class_spectra_co_1a66d66744d2d12b088005a826158e2946" compoundref="_spectra_co_8hpp" startline="260" endline="265">lastBinWithValue</references>
        <references refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" compoundref="_spectra_co_8hpp" startline="798" endline="806">resizeBin</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aaee0e2be91f5b3e3958892b8389a5003" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::setMaxX</definition>
        <argsstring>(double const &amp;_max_x)</argsstring>
        <name>setMaxX</name>
        <param>
          <type>double const &amp;</type>
          <declname>_max_x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="203" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="203" bodyend="203"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" compoundref="_spectra_co_8hpp" startline="410">m_max_x</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a5347b79a6a914df04a1a99664fd5cc96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::setMinX</definition>
        <argsstring>(double const &amp;_min_x)</argsstring>
        <name>setMinX</name>
        <param>
          <type>double const &amp;</type>
          <declname>_min_x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="202" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="202" bodyend="202"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" compoundref="_spectra_co_8hpp" startline="409">m_min_x</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ac2141fbefadce3d8f82e5c7db09998ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::setRangeX</definition>
        <argsstring>(double const &amp;_min_x, double const &amp;_max_x)</argsstring>
        <name>setRangeX</name>
        <param>
          <type>double const &amp;</type>
          <declname>_min_x</declname>
        </param>
        <param>
          <type>double const &amp;</type>
          <declname>_max_x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="204" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="204" bodyend="204"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" compoundref="_spectra_co_8hpp" startline="410">m_max_x</references>
        <references refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" compoundref="_spectra_co_8hpp" startline="409">m_min_x</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1abb70561652a097439bbaa71fbebd70c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SpectraCo::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="215" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="215" bodyend="215"/>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="214" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="214" bodyend="214"/>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <referencedby refid="class_spectra_co_1aecb46bfbd2968e90d0ffd6d5848ca8b4" compoundref="_spectra_co_8hpp" startline="354" endline="370">chi2</referencedby>
        <referencedby refid="class_objective_function_chi2_1ab9abe6ab2b65aa87d805b9866044eaed" compoundref="_spectra_alignator_8hpp" startline="391" endline="421">ObjectiveFunctionChi2::evaluate</referencedby>
        <referencedby refid="class_spectra_co_1a46fdc41ee93d910d1e667c4715e8eb9e" compoundref="_spectra_co_8hpp" startline="162" endline="168">SpectraCo</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1acc6c691f3d2e5f0769d00b9d6e1ffe24" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::SpectraCo</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>SpectraCo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="23" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a46fdc41ee93d910d1e667c4715e8eb9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::SpectraCo</definition>
        <argsstring>(size_t const &amp;size)</argsstring>
        <name>SpectraCo</name>
        <param>
          <type><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">size_t</ref> const &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="162" column="3" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="162" bodyend="168"/>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
        <references refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" compoundref="_spectra_co_8hpp" startline="214" endline="214">size</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a264644c4da160d7d7eed1cbaaae5a77c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::SpectraCo</definition>
        <argsstring>(SpectraCo *other, Calibration const &amp;cal, Label const &amp;label)</argsstring>
        <name>SpectraCo</name>
        <param>
          <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="class_calibration" kindref="compound">Calibration</ref> const &amp;</type>
          <declname>cal</declname>
        </param>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="140" column="3" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="140" bodyend="151"/>
        <references refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ac40ff3692cc98ac889886bbe16d0c337" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::SpectraCo</definition>
        <argsstring>(SpectraCo *other, Recalibration const &amp;recal)</argsstring>
        <name>SpectraCo</name>
        <param>
          <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="class_recalibration" kindref="compound">Recalibration</ref> const &amp;</type>
          <declname>recal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="112" column="3" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="112" bodyend="124"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" compoundref="_spectra_co_8hpp" startline="563" endline="574">recalibrate</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ad896a521e57469c1c02c47a4e7d7349b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::SpectraCo</definition>
        <argsstring>(SpectraCo *other, std::string name=&quot;&quot;, std::string title=&quot;&quot;)</argsstring>
        <name>SpectraCo</name>
        <param>
          <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="83" column="3" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="83" bodyend="96"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" compoundref="_spectra_co_8hpp" startline="405">m_title</references>
        <references refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" compoundref="_spectra_co_8hpp" startline="210" endline="210">name</references>
        <references refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" compoundref="_spectra_co_8hpp" startline="212" endline="212">title</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a488369423915a272c24b561553cea913" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::SpectraCo</definition>
        <argsstring>(SpectraCo const &amp;other, Calibration const &amp;cal, Label const &amp;label)</argsstring>
        <name>SpectraCo</name>
        <param>
          <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="class_calibration" kindref="compound">Calibration</ref> const &amp;</type>
          <declname>cal</declname>
        </param>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="126" column="3" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="126" bodyend="138"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a3e4d1435fa3a80662a8c4442464988e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::SpectraCo</definition>
        <argsstring>(SpectraCo const &amp;other, Recalibration const &amp;recal)</argsstring>
        <name>SpectraCo</name>
        <param>
          <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="class_recalibration" kindref="compound">Recalibration</ref> const &amp;</type>
          <declname>recal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="98" column="3" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="98" bodyend="110"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" compoundref="_spectra_co_8hpp" startline="563" endline="574">recalibrate</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ac8127b3f1b1eaf9292400cf2efa7bbde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::SpectraCo</definition>
        <argsstring>(SpectraCo const &amp;other, std::string name=&quot;&quot;, std::string title=&quot;&quot;)</argsstring>
        <name>SpectraCo</name>
        <param>
          <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="68" column="3" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="68" bodyend="81"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" compoundref="_spectra_co_8hpp" startline="405">m_title</references>
        <references refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" compoundref="_spectra_co_8hpp" startline="210" endline="210">name</references>
        <references refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" compoundref="_spectra_co_8hpp" startline="212" endline="212">title</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1ac7bfa00174710c92a077113a202ba2dd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::SpectraCo</definition>
        <argsstring>(std::nullptr_t) noexcept</argsstring>
        <name>SpectraCo</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="33" column="3" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="33" bodyend="41"/>
        <references refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" compoundref="_spectra_co_8hpp" startline="408">m_integral</references>
        <references refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" compoundref="_spectra_co_8hpp" startline="410">m_max_x</references>
        <references refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" compoundref="_spectra_co_8hpp" startline="409">m_min_x</references>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" compoundref="_spectra_co_8hpp" startline="405">m_title</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aa2508fe72a91029cd85d9f6dbce5cd93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::SpectraCo</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;_data)</argsstring>
        <name>SpectraCo</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="153" column="3" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="153" bodyend="160"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a7d0e3629ec73c41156b8c7ca71f3705e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::SpectraCo</definition>
        <argsstring>(std::vector&lt; double &gt; const &amp;spectra, float const &amp;min_value=0, float const &amp;max_value=0, std::string name=&quot;&quot;, std::string title=&quot;&quot;)</argsstring>
        <name>SpectraCo</name>
        <param>
          <type>std::vector&lt; double &gt; const &amp;</type>
          <declname>spectra</declname>
        </param>
        <param>
          <type>float const &amp;</type>
          <declname>min_value</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>float const &amp;</type>
          <declname>max_value</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="56" column="3" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="56" bodyend="66"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a7aa1ab216355e91774cbf364a7286043" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::SpectraCo</definition>
        <argsstring>(std::vector&lt; float &gt; const &amp;spectra, float const &amp;min_value=0, float const &amp;max_value=0, std::string name=&quot;&quot;, std::string title=&quot;&quot;)</argsstring>
        <name>SpectraCo</name>
        <param>
          <type>std::vector&lt; float &gt; const &amp;</type>
          <declname>spectra</declname>
        </param>
        <param>
          <type>float const &amp;</type>
          <declname>min_value</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>float const &amp;</type>
          <declname>max_value</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="43" column="3" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="43" bodyend="54"/>
        <references refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" compoundref="_spectra_co_8hpp" startline="438" endline="443">calculateCoeff</references>
        <references refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" compoundref="lib_co_8hpp" startline="221" endline="221">double_cast</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" compoundref="_spectra_co_8hpp" startline="399">m_spectra</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a7cd88b33fa9b85c5bf2dcdd2e3d13dc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::SpectraCo</definition>
        <argsstring>(TH1 *root_spectra, std::string name=&quot;&quot;, std::string title=&quot;&quot;)</argsstring>
        <name>SpectraCo</name>
        <param>
          <type>TH1 *</type>
          <declname>root_spectra</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="170" column="3" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="170" bodyend="175"/>
        <references refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">load</references>
        <references refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" compoundref="_spectra_co_8hpp" startline="404">m_name</references>
        <references refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" compoundref="_spectra_co_8hpp" startline="405">m_title</references>
        <references refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" compoundref="_spectra_co_8hpp" startline="210" endline="210">name</references>
        <references refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" compoundref="_spectra_co_8hpp" startline="212" endline="212">title</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aba424b38fe96dbeb3b7d69d3b10d1a21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SpectraCo::title</definition>
        <argsstring>()</argsstring>
        <name>title</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="213" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="213" bodyend="213"/>
        <references refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" compoundref="_spectra_co_8hpp" startline="405">m_title</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; SpectraCo::title</definition>
        <argsstring>() const</argsstring>
        <name>title</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="212" column="15" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="212" bodyend="212"/>
        <references refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" compoundref="_spectra_co_8hpp" startline="405">m_title</references>
        <referencedby refid="class_spectra_co_1ac8127b3f1b1eaf9292400cf2efa7bbde" compoundref="_spectra_co_8hpp" startline="68" endline="81">SpectraCo</referencedby>
        <referencedby refid="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" compoundref="_spectra_co_8hpp" startline="207" endline="207">title</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto SpectraCo::title</definition>
        <argsstring>(std::string const &amp;title)</argsstring>
        <name>title</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>title</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="207" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="207" bodyend="207"/>
        <references refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" compoundref="_spectra_co_8hpp" startline="405">m_title</references>
        <references refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" compoundref="_spectra_co_8hpp" startline="212" endline="212">title</references>
        <referencedby refid="class_spectra_co_1aa7114661992e4ae88e87cb1ccb82d6ed" compoundref="_spectra_co_8hpp" startline="498" endline="506">operator+</referencedby>
        <referencedby refid="class_spectra_co_1a992b73363532d45debd7fd7befd21765" compoundref="_spectra_co_8hpp" startline="508" endline="516">operator-</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a6dc41ae065225471fadc69382077ceb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::write</definition>
        <argsstring>()</argsstring>
        <name>write</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="282" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="282" bodyend="282"/>
        <references refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" compoundref="_spectra_co_8hpp" startline="834" endline="842">createTH1F</references>
        <references refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" compoundref="_spectra_co_8hpp" startline="210" endline="210">name</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1aecdb9a51ee8bab5e5fbe0563161664f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::write</definition>
        <argsstring>(TDirectory *directory)</argsstring>
        <name>write</name>
        <param>
          <type>TDirectory *</type>
          <declname>directory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="283" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="283" bodyend="289"/>
        <references refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" compoundref="_spectra_co_8hpp" startline="834" endline="842">createTH1F</references>
        <references refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" compoundref="_spectra_co_8hpp" startline="210" endline="210">name</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a56313f7f5ce661a5952d251e51ca3246" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::writeTH1D</definition>
        <argsstring>()</argsstring>
        <name>writeTH1D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="290" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="290" bodyend="290"/>
        <references refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" compoundref="_spectra_co_8hpp" startline="824" endline="832">createTH1D</references>
        <references refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" compoundref="_spectra_co_8hpp" startline="210" endline="210">name</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a3a8fdeb82862a8500d53634b5bd9acbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::writeTH1D</definition>
        <argsstring>(TDirectory *directory)</argsstring>
        <name>writeTH1D</name>
        <param>
          <type>TDirectory *</type>
          <declname>directory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="291" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="291" bodyend="296"/>
        <references refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" compoundref="_spectra_co_8hpp" startline="824" endline="832">createTH1D</references>
        <references refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" compoundref="_spectra_co_8hpp" startline="210" endline="210">name</references>
      </memberdef>
      <memberdef kind="function" id="class_spectra_co_1a213631f494d8361bfa9f4115266e9af7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>SpectraCo::~SpectraCo</definition>
        <argsstring>() noexcept</argsstring>
        <name>~SpectraCo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000007"><xreftitle>Todo</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="26" column="3" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="26" bodyend="31"/>
        <references refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" compoundref="_spectra_co_8hpp" startline="400">m_derivative</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpectraCo::calculateCoeff</definition>
        <argsstring>()</argsstring>
        <name>calculateCoeff</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="396" column="8" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="438" bodyend="443"/>
        <references refid="class_spectra_co_1a80e56f3b23d5a7092dd3152f47bf3c47" compoundref="_spectra_co_8hpp" startline="418">m_intercept</references>
        <references refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" compoundref="_spectra_co_8hpp" startline="410">m_max_x</references>
        <references refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" compoundref="_spectra_co_8hpp" startline="409">m_min_x</references>
        <references refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" compoundref="_spectra_co_8hpp" startline="407">m_size</references>
        <references refid="class_spectra_co_1a67a019827e1107bc1fc2f28eb6d854f7" compoundref="_spectra_co_8hpp" startline="417">m_slope</references>
        <referencedby refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">calibrate</referencedby>
        <referencedby refid="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" compoundref="_spectra_co_8hpp" startline="318" endline="324">calibrateX</referencedby>
        <referencedby refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">load</referencedby>
        <referencedby refid="class_spectra_co_1aae276b412dd31fc06933db96b65298fd" compoundref="_spectra_co_8hpp" startline="177" endline="189">operator=</referencedby>
        <referencedby refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" compoundref="_spectra_co_8hpp" startline="563" endline="574">recalibrate</referencedby>
        <referencedby refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" compoundref="_spectra_co_8hpp" startline="798" endline="806">resizeBin</referencedby>
        <referencedby refid="class_spectra_co_1aaee0e2be91f5b3e3958892b8389a5003" compoundref="_spectra_co_8hpp" startline="203" endline="203">setMaxX</referencedby>
        <referencedby refid="class_spectra_co_1a5347b79a6a914df04a1a99664fd5cc96" compoundref="_spectra_co_8hpp" startline="202" endline="202">setMinX</referencedby>
        <referencedby refid="class_spectra_co_1ac2141fbefadce3d8f82e5c7db09998ab" compoundref="_spectra_co_8hpp" startline="204" endline="204">setRangeX</referencedby>
        <referencedby refid="class_spectra_co_1a7aa1ab216355e91774cbf364a7286043" compoundref="_spectra_co_8hpp" startline="43" endline="54">SpectraCo</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>SpectraCo</label>
        <link refid="class_spectra_co"/>
        <childnode refid="1" relation="usage">
          <edgelabel>m_derivative</edgelabel>
          <edgelabel>m_derivative2</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="lib/Analyse/SpectraCo.hpp" line="19" column="1" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="20" bodyend="419"/>
    <listofallmembers>
      <member refid="class_spectra_co_1a626908f0a27928d07d980cfcec3b8454" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>back</name></member>
      <member refid="class_spectra_co_1a4bb4afaf9dd3881b73e8c6e740712a30" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>back</name></member>
      <member refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>calculateCoeff</name></member>
      <member refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>calibrate</name></member>
      <member refid="class_spectra_co_1af580e2c735a90aff03e6c1c159ed9b17" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>calibrate</name></member>
      <member refid="class_spectra_co_1af74c78334a7be1cc421779f9e4b30a0b" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>calibrateAndScale</name></member>
      <member refid="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>calibrateX</name></member>
      <member refid="class_spectra_co_1aecb46bfbd2968e90d0ffd6d5848ca8b4" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>chi2</name></member>
      <member refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>createTH1D</name></member>
      <member refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>createTH1F</name></member>
      <member refid="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>data</name></member>
      <member refid="class_spectra_co_1a85cee2f57fbae02a28329584da5df1b5" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>data</name></member>
      <member refid="class_spectra_co_1a649cc895e9813d1a82c9057022228266" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>deleteDerivative</name></member>
      <member refid="class_spectra_co_1a7b935499bbdce4b84a0f640b6518765c" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>derivate</name></member>
      <member refid="class_spectra_co_1a9be3e04ddc73df4d11336ec806313094" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>derivate2</name></member>
      <member refid="class_spectra_co_1aa9af077c307bb5e33e271bf8cbaa1741" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>derivative</name></member>
      <member refid="class_spectra_co_1a2d1839156a996f255b74024e12257bdb" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>derivative</name></member>
      <member refid="class_spectra_co_1a5db4e774152522eac0e1c58af984fc28" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>derivative2</name></member>
      <member refid="class_spectra_co_1a213a9aea476c88a52c8c32a4eb775190" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>derivative2</name></member>
      <member refid="class_spectra_co_1a6106089e9e4295cc71f3d45f781ac2c8" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>derivative2Data</name></member>
      <member refid="class_spectra_co_1a5c0d013692342e790580839787143f36" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>derivativeData</name></member>
      <member refid="class_spectra_co_1a9f6fa49281669395c0e10f833f8e914e" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>draw</name></member>
      <member refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>factor</name></member>
      <member refid="class_spectra_co_1a30feae642d436e24ff7397891030d859" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>factor</name></member>
      <member refid="class_spectra_co_1a223f3a9be7c661c1ef700d8bfda1106f" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>fill</name></member>
      <member refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>findPeaks</name></member>
      <member refid="class_spectra_co_1a3ba8c0e42ab3c3d3efa1f827b9465daf" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>findPeaks</name></member>
      <member refid="class_spectra_co_1a1a2f7e1b1c45f16cb77d531c90c5212b" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>firstBinWithValue</name></member>
      <member refid="class_spectra_co_1a9cbf03e7634f8a80d65aec65d3d9119c" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>get</name></member>
      <member refid="class_spectra_co_1a4d14e86e9dd8d42c0ce5a72a2f3b7dfc" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>get</name></member>
      <member refid="class_spectra_co_1a9e31bbca1885c3a48c66e7f8e2622f9a" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>get</name></member>
      <member refid="class_spectra_co_1ac5f6afc77e5fddc79afe224dc0a1dfec" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>getBin</name></member>
      <member refid="class_spectra_co_1a85342e1258a9d8877fb60fa2dca6275f" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>getX</name></member>
      <member refid="class_spectra_co_1aad2d7fb657b00304906a0c5e3c9a3aed" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>integral</name></member>
      <member refid="class_spectra_co_1a4a6080fd25cec92c1a6295e4d8398a44" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>integral</name></member>
      <member refid="class_spectra_co_1a7986a8f7ea5491f7a69ad810e857894f" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>integralInRange</name></member>
      <member refid="class_spectra_co_1abf17675f290cad6e53ad51e59430a63c" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>integralInRangeBin</name></member>
      <member refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>interpolate</name></member>
      <member refid="class_spectra_co_1acbe779815b224c8102ec62af4403a7d9" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>inverse</name></member>
      <member refid="class_spectra_co_1a1b66482bf4e3ff7903bda481d6d67a8d" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>lastBin</name></member>
      <member refid="class_spectra_co_1ad6c387515e792a22195054cd6c174db5" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>lastBin</name></member>
      <member refid="class_spectra_co_1a66d66744d2d12b088005a826158e2946" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>lastBinWithValue</name></member>
      <member refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>load</name></member>
      <member refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_derivative</name></member>
      <member refid="class_spectra_co_1a332e26399e136100490dd879772fe797" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_derivative2</name></member>
      <member refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_factor</name></member>
      <member refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_integral</name></member>
      <member refid="class_spectra_co_1a80e56f3b23d5a7092dd3152f47bf3c47" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_intercept</name></member>
      <member refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_loaded_TH1</name></member>
      <member refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_max_x</name></member>
      <member refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_min_x</name></member>
      <member refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_name</name></member>
      <member refid="class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_peaks</name></member>
      <member refid="class_spectra_co_1a9515b65f7b587af82030316811c1c0aa" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_rebin</name></member>
      <member refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_size</name></member>
      <member refid="class_spectra_co_1a67a019827e1107bc1fc2f28eb6d854f7" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_slope</name></member>
      <member refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_spectra</name></member>
      <member refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>m_title</name></member>
      <member refid="class_spectra_co_1a244bef386237d633da441b377ca2a278" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>maxX</name></member>
      <member refid="class_spectra_co_1aaeaea4ebc4fd51825acf90e66eb89ae4" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>maxX</name></member>
      <member refid="class_spectra_co_1a4e9df1dfede067a7a241e1209a01f4bc" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>meanInRange</name></member>
      <member refid="class_spectra_co_1a6c50f289318ed3a37218be1b2485a0aa" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>meanInRangeBin</name></member>
      <member refid="class_spectra_co_1aed822c874938eb1f5953c6e1a412cf33" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>minX</name></member>
      <member refid="class_spectra_co_1abb97aec97436b5d4171015db6b47e6b4" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>minX</name></member>
      <member refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>name</name></member>
      <member refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>name</name></member>
      <member refid="class_spectra_co_1a79deb54e5d5e3d36f9294482fea3d08c" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>name</name></member>
      <member refid="class_spectra_co_1a5219f7157190c99448c3b14ea37fbac2" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>nb_histo_drawn</name></member>
      <member refid="class_spectra_co_1a34ea7496185caf2178c8ba1c10876dd3" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>operator*</name></member>
      <member refid="class_spectra_co_1a9c5ae4fa536ee968b112bdab670fa2d8" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>operator*=</name></member>
      <member refid="class_spectra_co_1aa7114661992e4ae88e87cb1ccb82d6ed" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>operator+</name></member>
      <member refid="class_spectra_co_1a992b73363532d45debd7fd7befd21765" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>operator-</name></member>
      <member refid="class_spectra_co_1aa4225392a595ff8a0950ef67610096d0" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>operator/</name></member>
      <member refid="class_spectra_co_1aae276b412dd31fc06933db96b65298fd" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>operator=</name></member>
      <member refid="class_spectra_co_1ad094b13ab3d8e445b04edc68a5c12ec0" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>operator=</name></member>
      <member refid="class_spectra_co_1ae05d953f1aa96c7d7077ff6dda044afd" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>operator[]</name></member>
      <member refid="class_spectra_co_1a484fc9226bbbee3ed3b654c3aeea165b" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>operator[]</name></member>
      <member refid="class_spectra_co_1aa32b538c1586e9f78af9ab28fed27efb" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>operator[]</name></member>
      <member refid="class_spectra_co_1a00b22f96c7d319af473e16e9f07efbfd" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>operator[]</name></member>
      <member refid="class_spectra_co_1ac96882f321f72ffe8757493da9b5b2fa" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>peaks</name></member>
      <member refid="class_spectra_co_1a889fd42392232f574b687970fda7e311" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>peaks</name></member>
      <member refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>rebin</name></member>
      <member refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>recalibrate</name></member>
      <member refid="class_spectra_co_1adbdfafcc8b0a95d520e491b0062b2e0b" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>removeBackground</name></member>
      <member refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>resizeBin</name></member>
      <member refid="class_spectra_co_1a0ba318153d548c02c9ab4b39465ea1b4" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>resizeX</name></member>
      <member refid="class_spectra_co_1af27cbecc0fdfd5542e0186856bc4c4cf" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>resizeX</name></member>
      <member refid="class_spectra_co_1a7bb27d1fe53fe342a218040f28d647ba" prot="private" virt="non-virtual"><scope>SpectraCo</scope><name>root_spectra_pointers</name></member>
      <member refid="class_spectra_co_1a4edb2ef585474bb8c1f728d0dc7731e2" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>setActualRange</name></member>
      <member refid="class_spectra_co_1aaee0e2be91f5b3e3958892b8389a5003" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>setMaxX</name></member>
      <member refid="class_spectra_co_1a5347b79a6a914df04a1a99664fd5cc96" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>setMinX</name></member>
      <member refid="class_spectra_co_1ac2141fbefadce3d8f82e5c7db09998ab" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>setRangeX</name></member>
      <member refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>size</name></member>
      <member refid="class_spectra_co_1abb70561652a097439bbaa71fbebd70c4" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>size</name></member>
      <member refid="class_spectra_co_1acc6c691f3d2e5f0769d00b9d6e1ffe24" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>SpectraCo</name></member>
      <member refid="class_spectra_co_1ac7bfa00174710c92a077113a202ba2dd" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>SpectraCo</name></member>
      <member refid="class_spectra_co_1a7aa1ab216355e91774cbf364a7286043" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>SpectraCo</name></member>
      <member refid="class_spectra_co_1a7d0e3629ec73c41156b8c7ca71f3705e" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>SpectraCo</name></member>
      <member refid="class_spectra_co_1ac8127b3f1b1eaf9292400cf2efa7bbde" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>SpectraCo</name></member>
      <member refid="class_spectra_co_1ad896a521e57469c1c02c47a4e7d7349b" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>SpectraCo</name></member>
      <member refid="class_spectra_co_1a3e4d1435fa3a80662a8c4442464988e1" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>SpectraCo</name></member>
      <member refid="class_spectra_co_1ac40ff3692cc98ac889886bbe16d0c337" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>SpectraCo</name></member>
      <member refid="class_spectra_co_1a488369423915a272c24b561553cea913" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>SpectraCo</name></member>
      <member refid="class_spectra_co_1a264644c4da160d7d7eed1cbaaae5a77c" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>SpectraCo</name></member>
      <member refid="class_spectra_co_1aa2508fe72a91029cd85d9f6dbce5cd93" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>SpectraCo</name></member>
      <member refid="class_spectra_co_1a46fdc41ee93d910d1e667c4715e8eb9e" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>SpectraCo</name></member>
      <member refid="class_spectra_co_1a7cd88b33fa9b85c5bf2dcdd2e3d13dc2" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>SpectraCo</name></member>
      <member refid="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>title</name></member>
      <member refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>title</name></member>
      <member refid="class_spectra_co_1aba424b38fe96dbeb3b7d69d3b10d1a21" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>title</name></member>
      <member refid="class_spectra_co_1a6dc41ae065225471fadc69382077ceb8" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>write</name></member>
      <member refid="class_spectra_co_1aecdb9a51ee8bab5e5fbe0563161664f9" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>write</name></member>
      <member refid="class_spectra_co_1a56313f7f5ce661a5952d251e51ca3246" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>writeTH1D</name></member>
      <member refid="class_spectra_co_1a3a8fdeb82862a8500d53634b5bd9acbc" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>writeTH1D</name></member>
      <member refid="class_spectra_co_1a213631f494d8361bfa9f4115266e9af7" prot="public" virt="non-virtual"><scope>SpectraCo</scope><name>~SpectraCo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
