<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_calibration" kind="class" language="C++" prot="public">
    <compoundname>Calibration</compoundname>
    <includes refid="_calibration_8hpp" local="no">Calibration.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_calibration_1a1a424ad63111ec123b66ac09c5f70184" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;std::vector&lt;float&gt; &gt; &gt; Calibration::calibration_tables</definition>
        <argsstring></argsstring>
        <name>calibration_tables</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="174" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_calibration_1ad5cb9c62bdcb6c6e7731678e2097dbff" prot="private" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; Calibration::m_binom</definition>
        <argsstring></argsstring>
        <name>m_binom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="172" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="172" bodyend="-1"/>
        <referencedby refid="class_calibration_1aa3ab2d95f8d0799c7910bc6163f0c2ad" compoundref="_calibration_8hpp" startline="152" endline="152">binom</referencedby>
        <referencedby refid="class_calibration_1a8a7104d462b567eee77b85d8f4f7269f" compoundref="_calibration_8hpp" startline="274" endline="281">clear</referencedby>
        <referencedby refid="class_calibration_1a444e5a870012ac2760875f19fb415eab" compoundref="_calibration_8hpp" startline="131" endline="131">getBinom</referencedby>
        <referencedby refid="class_calibration_1a8dccc9ef965732a47d4d47df551baa39" compoundref="_calibration_8hpp" startline="33" endline="44">operator=</referencedby>
        <referencedby refid="class_calibration_1a7545c0c01c4d8e1c5c28fb7930bfd3a0" compoundref="_calibration_8hpp" startline="355" endline="377">Print</referencedby>
        <referencedby refid="class_calibration_1a8cc33cfcd3004d549b87edd2540d9e1d" compoundref="_calibration_8hpp" startline="264" endline="272">resize</referencedby>
        <referencedby refid="class_calibration_1a2ad52fe16c3fef88d1de86ef8f609198" compoundref="_calibration_8hpp" startline="219" endline="249">set</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_calibration_1ada2b7de482524ffd3e0a9b6038e3d6de" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Calibration::m_filename</definition>
        <argsstring></argsstring>
        <name>m_filename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="165" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="165" bodyend="-1"/>
        <referencedby refid="class_calibration_1ac636b26d5725f63ec6d56c0ad51af338" compoundref="_calibration_8hpp" startline="114" endline="114">file</referencedby>
        <referencedby refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_calibration_1aa3662eecd6984f081c14c78ce48b426d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; Calibration::m_intercept</definition>
        <argsstring></argsstring>
        <name>m_intercept</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="170" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="170" bodyend="-1"/>
        <referencedby refid="class_calibration_1a8a7104d462b567eee77b85d8f4f7269f" compoundref="_calibration_8hpp" startline="274" endline="281">clear</referencedby>
        <referencedby refid="class_calibration_1ad6a111e94914e75259ee4f342757b31a" compoundref="_calibration_8hpp" startline="123" endline="123">getIntercept</referencedby>
        <referencedby refid="class_calibration_1a60c13a56e81bd8fb738c00a9b70e56b4" compoundref="_calibration_8hpp" startline="144" endline="144">intercept</referencedby>
        <referencedby refid="class_calibration_1a8dccc9ef965732a47d4d47df551baa39" compoundref="_calibration_8hpp" startline="33" endline="44">operator=</referencedby>
        <referencedby refid="class_calibration_1a7545c0c01c4d8e1c5c28fb7930bfd3a0" compoundref="_calibration_8hpp" startline="355" endline="377">Print</referencedby>
        <referencedby refid="class_calibration_1a8cc33cfcd3004d549b87edd2540d9e1d" compoundref="_calibration_8hpp" startline="264" endline="272">resize</referencedby>
        <referencedby refid="class_calibration_1a2ad52fe16c3fef88d1de86ef8f609198" compoundref="_calibration_8hpp" startline="219" endline="249">set</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_calibration_1a873c0737314dea95849645024deefb61" prot="private" static="no" mutable="no">
        <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref></type>
        <definition>Label Calibration::m_nb_det</definition>
        <argsstring></argsstring>
        <name>m_nb_det</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="167" column="9" bodyfile="lib/Classes/Calibration.hpp" bodystart="167" bodyend="-1"/>
        <referencedby refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</referencedby>
        <referencedby refid="class_calibration_1a3929d5f7ebd7a5d611ff297a643bc2bd" compoundref="_calibration_8hpp" startline="106" endline="106">nbDetectors</referencedby>
        <referencedby refid="class_calibration_1a8dccc9ef965732a47d4d47df551baa39" compoundref="_calibration_8hpp" startline="33" endline="44">operator=</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_calibration_1aea5e9bf6d006f5e26702953552e97dec" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Calibration::m_ok</definition>
        <argsstring></argsstring>
        <name>m_ok</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="166" column="8" bodyfile="lib/Classes/Calibration.hpp" bodystart="166" bodyend="-1"/>
        <referencedby refid="class_calibration_1ab8717ea59193176a7311b1c425edc3ec" compoundref="_calibration_8hpp" startline="110" endline="110">isFilled</referencedby>
        <referencedby refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</referencedby>
        <referencedby refid="class_calibration_1afea60036d04f264977103febc61433fa" compoundref="_calibration_8hpp" startline="96" endline="96">operator bool</referencedby>
        <referencedby refid="class_calibration_1a8dccc9ef965732a47d4d47df551baa39" compoundref="_calibration_8hpp" startline="33" endline="44">operator=</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_calibration_1aebce8e9b03e8a2c8b51c0204e81bcd76" prot="private" static="no" mutable="no">
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt;char&gt; Calibration::m_order</definition>
        <argsstring></argsstring>
        <name>m_order</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="169" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="169" bodyend="-1"/>
        <referencedby refid="class_calibration_1a8a7104d462b567eee77b85d8f4f7269f" compoundref="_calibration_8hpp" startline="274" endline="281">clear</referencedby>
        <referencedby refid="class_calibration_1a001b6fab19a0fdc4bd7a420c8eb7517a" compoundref="_calibration_8hpp" startline="119" endline="119">getOrder</referencedby>
        <referencedby refid="class_calibration_1a8dccc9ef965732a47d4d47df551baa39" compoundref="_calibration_8hpp" startline="33" endline="44">operator=</referencedby>
        <referencedby refid="class_calibration_1a91d512d3bcbc3a3439a7902326965b48" compoundref="_calibration_8hpp" startline="140" endline="140">order</referencedby>
        <referencedby refid="class_calibration_1a7545c0c01c4d8e1c5c28fb7930bfd3a0" compoundref="_calibration_8hpp" startline="355" endline="377">Print</referencedby>
        <referencedby refid="class_calibration_1a8cc33cfcd3004d549b87edd2540d9e1d" compoundref="_calibration_8hpp" startline="264" endline="272">resize</referencedby>
        <referencedby refid="class_calibration_1a2ad52fe16c3fef88d1de86ef8f609198" compoundref="_calibration_8hpp" startline="219" endline="249">set</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_calibration_1a8b66733b050e8743b1887fbed7284269" prot="private" static="no" mutable="no">
        <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref></type>
        <definition>Label Calibration::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="168" column="9" bodyfile="lib/Classes/Calibration.hpp" bodystart="168" bodyend="-1"/>
        <referencedby refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</referencedby>
        <referencedby refid="class_calibration_1afea60036d04f264977103febc61433fa" compoundref="_calibration_8hpp" startline="96" endline="96">operator bool</referencedby>
        <referencedby refid="class_calibration_1a8dccc9ef965732a47d4d47df551baa39" compoundref="_calibration_8hpp" startline="33" endline="44">operator=</referencedby>
        <referencedby refid="class_calibration_1a8cc33cfcd3004d549b87edd2540d9e1d" compoundref="_calibration_8hpp" startline="264" endline="272">resize</referencedby>
        <referencedby refid="class_calibration_1a2ad52fe16c3fef88d1de86ef8f609198" compoundref="_calibration_8hpp" startline="219" endline="249">set</referencedby>
        <referencedby refid="class_calibration_1a5070b5faea97d16c53b084a1b82161f0" compoundref="_calibration_8hpp" startline="102" endline="102">size</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_calibration_1ae2e50bdd8ff2e1cdfb8f85071f28062e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; Calibration::m_slope</definition>
        <argsstring></argsstring>
        <name>m_slope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="171" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="171" bodyend="-1"/>
        <referencedby refid="class_calibration_1a8a7104d462b567eee77b85d8f4f7269f" compoundref="_calibration_8hpp" startline="274" endline="281">clear</referencedby>
        <referencedby refid="class_calibration_1a35f805421eb01ce451a258adf3ad108c" compoundref="_calibration_8hpp" startline="127" endline="127">getSlope</referencedby>
        <referencedby refid="class_calibration_1a8dccc9ef965732a47d4d47df551baa39" compoundref="_calibration_8hpp" startline="33" endline="44">operator=</referencedby>
        <referencedby refid="class_calibration_1a7545c0c01c4d8e1c5c28fb7930bfd3a0" compoundref="_calibration_8hpp" startline="355" endline="377">Print</referencedby>
        <referencedby refid="class_calibration_1a8cc33cfcd3004d549b87edd2540d9e1d" compoundref="_calibration_8hpp" startline="264" endline="272">resize</referencedby>
        <referencedby refid="class_calibration_1a2ad52fe16c3fef88d1de86ef8f609198" compoundref="_calibration_8hpp" startline="219" endline="249">set</referencedby>
        <referencedby refid="class_calibration_1a38f8b48818a42d56682b9267847d2995" compoundref="_calibration_8hpp" startline="148" endline="148">slope</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_calibration_1a25eec3ddcb7c771493317f00d6e8b9d4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; Calibration::m_trinom</definition>
        <argsstring></argsstring>
        <name>m_trinom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="173" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="173" bodyend="-1"/>
        <referencedby refid="class_calibration_1a8a7104d462b567eee77b85d8f4f7269f" compoundref="_calibration_8hpp" startline="274" endline="281">clear</referencedby>
        <referencedby refid="class_calibration_1a57d6e4aaf0bf53a680c4d7ad427378e5" compoundref="_calibration_8hpp" startline="135" endline="135">getTrinom</referencedby>
        <referencedby refid="class_calibration_1a8dccc9ef965732a47d4d47df551baa39" compoundref="_calibration_8hpp" startline="33" endline="44">operator=</referencedby>
        <referencedby refid="class_calibration_1a7545c0c01c4d8e1c5c28fb7930bfd3a0" compoundref="_calibration_8hpp" startline="355" endline="377">Print</referencedby>
        <referencedby refid="class_calibration_1a8cc33cfcd3004d549b87edd2540d9e1d" compoundref="_calibration_8hpp" startline="264" endline="272">resize</referencedby>
        <referencedby refid="class_calibration_1a2ad52fe16c3fef88d1de86ef8f609198" compoundref="_calibration_8hpp" startline="219" endline="249">set</referencedby>
        <referencedby refid="class_calibration_1ab2e13b04241551660871aeb23266eb86" compoundref="_calibration_8hpp" startline="156" endline="156">trinom</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_calibration_1a6044ac4a0a17e177af66138f75aca6b6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Calibration::apply</definition>
        <argsstring>(float const &amp;nrj, Label const &amp;label) const noexcept</argsstring>
        <name>apply</name>
        <param>
          <type>float const &amp;</type>
          <declname>nrj</declname>
        </param>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Applies the calibration coefficients of the given label to the given energy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="89" column="9" bodyfile="lib/Classes/Calibration.hpp" bodystart="178" bodyend="190"/>
        <referencedby refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">SpectraCo::calibrate</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1aa3ab2d95f8d0799c7910bc6163f0c2ad" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; Calibration::binom</definition>
        <argsstring>(Label const &amp;label) const noexcept</argsstring>
        <name>binom</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Get the quadratic parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="152" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="152" bodyend="152"/>
        <references refid="class_calibration_1ad5cb9c62bdcb6c6e7731678e2097dbff" compoundref="_calibration_8hpp" startline="172">m_binom</references>
        <referencedby refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</referencedby>
        <referencedby refid="class_calibrator_1aad90b0e3951d4caffe11e319c7108a51" compoundref="_calibrator_8hpp" startline="960" endline="1025">Calibrator::verify</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a159877cf15817efee936b0eb3871f505" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; Calibration::binom</definition>
        <argsstring>(Label const &amp;label) noexcept</argsstring>
        <name>binom</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Get the quadratic parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="154" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="154" bodyend="154"/>
        <references refid="class_calibration_1ad5cb9c62bdcb6c6e7731678e2097dbff" compoundref="_calibration_8hpp" startline="172">m_binom</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a2758f6c22e17c9c924f25690240f1b09" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Calibration::calibrate</definition>
        <argsstring>(double const &amp;nrj, Label const &amp;label) const noexcept</argsstring>
        <name>calibrate</name>
        <param>
          <type>double const &amp;</type>
          <declname>nrj</declname>
        </param>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="84" column="9" bodyfile="lib/Classes/Calibration.hpp" bodystart="84" bodyend="84"/>
        <references refid="class_calibration_1a2758f6c22e17c9c924f25690240f1b09" compoundref="_calibration_8hpp" startline="84" endline="84">calibrate</references>
        <references refid="lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d" compoundref="lib_co_8hpp" startline="217" endline="217">float_cast</references>
        <referencedby refid="class_calibration_1a2758f6c22e17c9c924f25690240f1b09" compoundref="_calibration_8hpp" startline="84" endline="84">calibrate</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1aacb494950f95ab8c5e12f548de28afb4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Calibration::calibrate</definition>
        <argsstring>(float const &amp;nrj, Label const &amp;label) const noexcept</argsstring>
        <name>calibrate</name>
        <param>
          <type>float const &amp;</type>
          <declname>nrj</declname>
        </param>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Calibrate the nrj value using the parameters extracted from the calibration data. </para>
        </briefdescription>
        <detaileddescription>
<para>Calibrate the energy using the coefficients of the given label to the given energy. Shifts the nrj by a value between 0 and 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="83" column="9" bodyfile="lib/Classes/Calibration.hpp" bodystart="193" bodyend="200"/>
        <references refid="namespacerandom_co_1af7496cee21570d25ebf9babc7cf1bcae" compoundref="random_co_8hpp" startline="32" endline="36">randomCo::uniform</references>
        <referencedby refid="class_run_matrixator_1a8d8f01fad64864d032395e18b10c2a7e" compoundref="_run_matrixator_8hpp" startline="253" endline="299">RunMatrixator::loadData_faster</referencedby>
        <referencedby refid="class_calibration_1a218d4c3aba57678304a602248d46d407" compoundref="_calibration_8hpp" startline="93" endline="93">operator()</referencedby>
        <referencedby refid="class_cobalt_calorimeter_1a760c56b79865a37984edc07165a7bc73" compoundref="_cobalt_calorimeter_8hpp" startline="332" endline="660">CobaltCalorimeter::work</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1ac35a48d4659a122e21143e5e2a01765a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Calibration::calibrate</definition>
        <argsstring>(Hit &amp;hit) const noexcept</argsstring>
        <name>calibrate</name>
        <param>
          <type><ref refid="class_hit" kindref="compound">Hit</ref> &amp;</type>
          <declname>hit</declname>
        </param>
        <briefdescription>
<para>Calibrate a hit. </para>
        </briefdescription>
        <detaileddescription>
<para>Reads hit.adc and writes the calibrated value in hit.nrj If hit.qdc2 &gt; 0, writes the calibrated value in hit.nrj2 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="88" column="8" bodyfile="lib/Classes/Calibration.hpp" bodystart="208" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a252f473a9f8a865ab1bdb43dfd571e66" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Calibration::calibrate</definition>
        <argsstring>(int const &amp;adc, Label const &amp;label) const noexcept</argsstring>
        <name>calibrate</name>
        <param>
          <type>int const &amp;</type>
          <declname>adc</declname>
        </param>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="85" column="9" bodyfile="lib/Classes/Calibration.hpp" bodystart="85" bodyend="85"/>
        <references refid="class_calibration_1a252f473a9f8a865ab1bdb43dfd571e66" compoundref="_calibration_8hpp" startline="85" endline="85">calibrate</references>
        <references refid="lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d" compoundref="lib_co_8hpp" startline="217" endline="217">float_cast</references>
        <referencedby refid="class_calibration_1a252f473a9f8a865ab1bdb43dfd571e66" compoundref="_calibration_8hpp" startline="85" endline="85">calibrate</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1ac5e6098a62483aa931b0b0c014615fce" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Calibration::calibrate</definition>
        <argsstring>(size_t const &amp;bin, Label const &amp;label) const noexcept</argsstring>
        <name>calibrate</name>
        <param>
          <type><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">size_t</ref> const &amp;</type>
          <declname>bin</declname>
        </param>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="86" column="9" bodyfile="lib/Classes/Calibration.hpp" bodystart="86" bodyend="86"/>
        <references refid="class_calibration_1ac5e6098a62483aa931b0b0c014615fce" compoundref="_calibration_8hpp" startline="86" endline="86">calibrate</references>
        <references refid="lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d" compoundref="lib_co_8hpp" startline="217" endline="217">float_cast</references>
        <referencedby refid="class_calibration_1ac5e6098a62483aa931b0b0c014615fce" compoundref="_calibration_8hpp" startline="86" endline="86">calibrate</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a33f3a180851c479ac5ae4e07053d348c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Calibration::Calibration</definition>
        <argsstring>()=default</argsstring>
        <name>Calibration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="16" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a8e35cee6894b7e32cb4e6dcbbe26a0c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Calibration::Calibration</definition>
        <argsstring>(Calibration const &amp;otherCalib)</argsstring>
        <name>Calibration</name>
        <param>
          <type><ref refid="class_calibration" kindref="compound">Calibration</ref> const &amp;</type>
          <declname>otherCalib</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="19" column="3" bodyfile="lib/Classes/Calibration.hpp" bodystart="19" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1aa2a91c92246a15839d6428b0b9058bc8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Calibration::Calibration</definition>
        <argsstring>(File const &amp;file)</argsstring>
        <name>Calibration</name>
        <param>
          <type><ref refid="class_file" kindref="compound">File</ref> const &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Constructor loading calibration from a file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="47" column="3" bodyfile="lib/Classes/Calibration.hpp" bodystart="47" bodyend="47"/>
        <references refid="class_calibration_1ac636b26d5725f63ec6d56c0ad51af338" compoundref="_calibration_8hpp" startline="114" endline="114">file</references>
        <references refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a8a7104d462b567eee77b85d8f4f7269f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Calibration::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="62" column="8" bodyfile="lib/Classes/Calibration.hpp" bodystart="274" bodyend="281"/>
        <references refid="class_calibration_1ad5cb9c62bdcb6c6e7731678e2097dbff" compoundref="_calibration_8hpp" startline="172">m_binom</references>
        <references refid="class_calibration_1aa3662eecd6984f081c14c78ce48b426d" compoundref="_calibration_8hpp" startline="170">m_intercept</references>
        <references refid="class_calibration_1aebce8e9b03e8a2c8b51c0204e81bcd76" compoundref="_calibration_8hpp" startline="169">m_order</references>
        <references refid="class_calibration_1ae2e50bdd8ff2e1cdfb8f85071f28062e" compoundref="_calibration_8hpp" startline="171">m_slope</references>
        <references refid="class_calibration_1a25eec3ddcb7c771493317f00d6e8b9d4" compoundref="_calibration_8hpp" startline="173">m_trinom</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1ac636b26d5725f63ec6d56c0ad51af338" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; Calibration::file</definition>
        <argsstring>() const noexcept</argsstring>
        <name>file</name>
        <briefdescription>
<para>Gets the name of the file from while the data has been loaded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="114" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="114" bodyend="114"/>
        <references refid="class_calibration_1ada2b7de482524ffd3e0a9b6038e3d6de" compoundref="_calibration_8hpp" startline="165">m_filename</references>
        <referencedby refid="class_calibration_1aa2a91c92246a15839d6428b0b9058bc8" compoundref="_calibration_8hpp" startline="47" endline="47">Calibration</referencedby>
        <referencedby refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</referencedby>
        <referencedby refid="class_calibration_1a366198c5f96777e70d3262877baea623" compoundref="_calibration_8hpp" startline="49" endline="49">operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1ae971a2f379e91734a15f8acc25466802" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; Calibration::file</definition>
        <argsstring>() noexcept</argsstring>
        <name>file</name>
        <briefdescription>
<para>Gets the name of the file from while the data has been loaded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="116" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="116" bodyend="116"/>
        <references refid="class_calibration_1ada2b7de482524ffd3e0a9b6038e3d6de" compoundref="_calibration_8hpp" startline="165">m_filename</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a10ce3a8d6680709755f1bd2700876603" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; Calibration::get</definition>
        <argsstring>(Label const &amp;_label) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="53" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="251" bodyend="262"/>
        <referencedby refid="class_calibration_1a01f1a4e9586e8f43fa4afce86c4e8d2d" compoundref="_calibration_8hpp" startline="99" endline="99">operator[]</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a444e5a870012ac2760875f19fb415eab" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; Calibration::getBinom</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBinom</name>
        <briefdescription>
<para>Get the quadratic parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="131" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="131" bodyend="131"/>
        <references refid="class_calibration_1ad5cb9c62bdcb6c6e7731678e2097dbff" compoundref="_calibration_8hpp" startline="172">m_binom</references>
        <referencedby refid="_calibration_8hpp_1a6e05c096827f5bf5c7f3c52fffd2305d" compoundref="_calibration_8hpp" startline="330" endline="352">operator&lt;&lt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1abae0f70552c2cea8cb0f89e4d2bab9cc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; Calibration::getBinom</definition>
        <argsstring>() noexcept</argsstring>
        <name>getBinom</name>
        <briefdescription>
<para>Get the quadratic parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="133" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="133" bodyend="133"/>
        <references refid="class_calibration_1ad5cb9c62bdcb6c6e7731678e2097dbff" compoundref="_calibration_8hpp" startline="172">m_binom</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1ad6a111e94914e75259ee4f342757b31a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; Calibration::getIntercept</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getIntercept</name>
        <briefdescription>
<para>Get the intercept. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="123" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="123" bodyend="123"/>
        <references refid="class_calibration_1aa3662eecd6984f081c14c78ce48b426d" compoundref="_calibration_8hpp" startline="170">m_intercept</references>
        <referencedby refid="_calibration_8hpp_1a6e05c096827f5bf5c7f3c52fffd2305d" compoundref="_calibration_8hpp" startline="330" endline="352">operator&lt;&lt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1af035f8b320a9513c6b37671fa4740745" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; Calibration::getIntercept</definition>
        <argsstring>() noexcept</argsstring>
        <name>getIntercept</name>
        <briefdescription>
<para>Get the intercept. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="125" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="125" bodyend="125"/>
        <references refid="class_calibration_1aa3662eecd6984f081c14c78ce48b426d" compoundref="_calibration_8hpp" startline="170">m_intercept</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a001b6fab19a0fdc4bd7a420c8eb7517a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; Calibration::getOrder</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getOrder</name>
        <briefdescription>
<para>Get the order of the calibration (0 : linear, 1 : affine, 2 : quadratic, 3 : 3rd order) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="119" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="119" bodyend="119"/>
        <references refid="class_calibration_1aebce8e9b03e8a2c8b51c0204e81bcd76" compoundref="_calibration_8hpp" startline="169">m_order</references>
        <referencedby refid="_calibration_8hpp_1a6e05c096827f5bf5c7f3c52fffd2305d" compoundref="_calibration_8hpp" startline="330" endline="352">operator&lt;&lt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a9b33075dcaf65cff432d2ff201a17302" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; Calibration::getOrder</definition>
        <argsstring>() noexcept</argsstring>
        <name>getOrder</name>
        <briefdescription>
<para>Get the order of the calibration (0 : linear, 1 : affine, 2 : quadratic, 3 : 3rd order) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="121" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="121" bodyend="121"/>
        <references refid="class_calibration_1aebce8e9b03e8a2c8b51c0204e81bcd76" compoundref="_calibration_8hpp" startline="169">m_order</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a35f805421eb01ce451a258adf3ad108c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; Calibration::getSlope</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getSlope</name>
        <briefdescription>
<para>Get the slope parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="127" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="127" bodyend="127"/>
        <references refid="class_calibration_1ae2e50bdd8ff2e1cdfb8f85071f28062e" compoundref="_calibration_8hpp" startline="171">m_slope</references>
        <referencedby refid="_calibration_8hpp_1a6e05c096827f5bf5c7f3c52fffd2305d" compoundref="_calibration_8hpp" startline="330" endline="352">operator&lt;&lt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1acbc4cb2b28eed01cec1842c2229bb62c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; Calibration::getSlope</definition>
        <argsstring>() noexcept</argsstring>
        <name>getSlope</name>
        <briefdescription>
<para>Get the slope parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="129" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="129" bodyend="129"/>
        <references refid="class_calibration_1ae2e50bdd8ff2e1cdfb8f85071f28062e" compoundref="_calibration_8hpp" startline="171">m_slope</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a57d6e4aaf0bf53a680c4d7ad427378e5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; Calibration::getTrinom</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getTrinom</name>
        <briefdescription>
<para>Get the 3rd order parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="135" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="135" bodyend="135"/>
        <references refid="class_calibration_1a25eec3ddcb7c771493317f00d6e8b9d4" compoundref="_calibration_8hpp" startline="173">m_trinom</references>
        <referencedby refid="_calibration_8hpp_1a6e05c096827f5bf5c7f3c52fffd2305d" compoundref="_calibration_8hpp" startline="330" endline="352">operator&lt;&lt;</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a7fbd2f46700b76fc2d91bbc1a762d4b1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; Calibration::getTrinom</definition>
        <argsstring>() noexcept</argsstring>
        <name>getTrinom</name>
        <briefdescription>
<para>Get the 3rd order parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="137" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="137" bodyend="137"/>
        <references refid="class_calibration_1a25eec3ddcb7c771493317f00d6e8b9d4" compoundref="_calibration_8hpp" startline="173">m_trinom</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a60c13a56e81bd8fb738c00a9b70e56b4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; Calibration::intercept</definition>
        <argsstring>(Label const &amp;label) const noexcept</argsstring>
        <name>intercept</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Get the intercept. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="144" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="144" bodyend="144"/>
        <references refid="class_calibration_1aa3662eecd6984f081c14c78ce48b426d" compoundref="_calibration_8hpp" startline="170">m_intercept</references>
        <referencedby refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</referencedby>
        <referencedby refid="class_calibrator_1aad90b0e3951d4caffe11e319c7108a51" compoundref="_calibrator_8hpp" startline="960" endline="1025">Calibrator::verify</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1aa04775b32f01c4dd9e4501fcf332a994" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; Calibration::intercept</definition>
        <argsstring>(Label const &amp;label) noexcept</argsstring>
        <name>intercept</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Get the intercept. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="146" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="146" bodyend="146"/>
        <references refid="class_calibration_1aa3662eecd6984f081c14c78ce48b426d" compoundref="_calibration_8hpp" startline="170">m_intercept</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1ab8717ea59193176a7311b1c425edc3ec" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool const  &amp;</type>
        <definition>bool const&amp; Calibration::isFilled</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isFilled</name>
        <briefdescription>
<para>Returns true if there is at least one coefficient loaded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="110" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="110" bodyend="110"/>
        <references refid="class_calibration_1aea5e9bf6d006f5e26702953552e97dec" compoundref="_calibration_8hpp" startline="166">m_ok</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1af6585bac9039b90e931355ca9ded3256" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool &amp;</type>
        <definition>bool&amp; Calibration::isFilled</definition>
        <argsstring>() noexcept</argsstring>
        <name>isFilled</name>
        <briefdescription>
<para>Returns true if there is at least one coefficient loaded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="112" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="112" bodyend="112"/>
        <references refid="class_calibration_1aea5e9bf6d006f5e26702953552e97dec" compoundref="_calibration_8hpp" startline="166">m_ok</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a660694835089e0020f014c65f3d6f7e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Calibration::load</definition>
        <argsstring>(File const &amp;file)</argsstring>
        <name>load</name>
        <param>
          <type><ref refid="class_file" kindref="compound">File</ref> const &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Loading calibration from a file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="51" column="8" bodyfile="lib/Classes/Calibration.hpp" bodystart="283" bodyend="327"/>
        <references refid="class_calibration_1aa3ab2d95f8d0799c7910bc6163f0c2ad" compoundref="_calibration_8hpp" startline="152" endline="152">binom</references>
        <references refid="_detectors_8hpp_1a06939d30171afd1f13893e05454ed813">detectors</references>
        <references refid="class_calibration_1ac636b26d5725f63ec6d56c0ad51af338" compoundref="_calibration_8hpp" startline="114" endline="114">file</references>
        <references refid="files__functions_8hpp_1afd584978228fac5fae283c12837378dd" compoundref="files__functions_8hpp" startline="31" endline="31">file_is_empty</references>
        <references refid="class_calibration_1a60c13a56e81bd8fb738c00a9b70e56b4" compoundref="_calibration_8hpp" startline="144" endline="144">intercept</references>
        <references refid="class_calibration_1ada2b7de482524ffd3e0a9b6038e3d6de" compoundref="_calibration_8hpp" startline="165">m_filename</references>
        <references refid="class_calibration_1a873c0737314dea95849645024deefb61" compoundref="_calibration_8hpp" startline="167">m_nb_det</references>
        <references refid="class_calibration_1aea5e9bf6d006f5e26702953552e97dec" compoundref="_calibration_8hpp" startline="166">m_ok</references>
        <references refid="class_calibration_1a8b66733b050e8743b1887fbed7284269" compoundref="_calibration_8hpp" startline="168">m_size</references>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
        <references refid="class_calibration_1a8cc33cfcd3004d549b87edd2540d9e1d" compoundref="_calibration_8hpp" startline="264" endline="272">resize</references>
        <references refid="class_detectors_1af2bb20ee60f504df326b87e9ebbaef30" compoundref="_detectors_8hpp" startline="219" endline="225">Detectors::resize</references>
        <references refid="class_calibration_1a2ad52fe16c3fef88d1de86ef8f609198" compoundref="_calibration_8hpp" startline="219" endline="249">set</references>
        <references refid="class_detectors_1a8780c1daca5724bb16ba07824f3c3665" compoundref="_detectors_8hpp" startline="76" endline="76">Detectors::size</references>
        <references refid="class_calibration_1a5070b5faea97d16c53b084a1b82161f0" compoundref="_calibration_8hpp" startline="102" endline="102">size</references>
        <references refid="class_calibration_1a38f8b48818a42d56682b9267847d2995" compoundref="_calibration_8hpp" startline="148" endline="148">slope</references>
        <references refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" compoundref="lib_co_8hpp" startline="156" endline="156">throw_error</references>
        <references refid="class_calibration_1ab2e13b04241551660871aeb23266eb86" compoundref="_calibration_8hpp" startline="156" endline="156">trinom</references>
        <referencedby refid="class_calibration_1aa2a91c92246a15839d6428b0b9058bc8" compoundref="_calibration_8hpp" startline="47" endline="47">Calibration</referencedby>
        <referencedby refid="class_evolution_peaks_1ad13fac38f35247d7e2f6ba5b61f0dd9b" compoundref="_evolution_peaks_8hpp" startline="39" endline="39">EvolutionPeaks::loadCalibration</referencedby>
        <referencedby refid="class_clover_spectra_1a4631e5643c2d2d12eb2fab20c381d59c" compoundref="_clover_spectra_8hpp" startline="22" endline="22">CloverSpectra::loadCalibration</referencedby>
        <referencedby refid="class_faster2_root_1afaec1876151390b71c475885157670a3" compoundref="_faster2_root_8hpp" startline="142" endline="142">Faster2Root::loadCalibration</referencedby>
        <referencedby refid="class_faster2_histo_1a46087c5a676f688d4862304fca62cc24" compoundref="_faster2_histo_8hpp" startline="72" endline="72">Faster2Histo::loadCalibration</referencedby>
        <referencedby refid="class_calibration_1a366198c5f96777e70d3262877baea623" compoundref="_calibration_8hpp" startline="49" endline="49">operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a3929d5f7ebd7a5d611ff297a643bc2bd" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; Calibration::nbDetectors</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nbDetectors</name>
        <briefdescription>
<para>Get the number of detectors with calibration coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="106" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="106" bodyend="106"/>
        <references refid="class_calibration_1a873c0737314dea95849645024deefb61" compoundref="_calibration_8hpp" startline="167">m_nb_det</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1afdfb23b77b5e0bbd56fde61c3ef4fbb4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; Calibration::nbDetectors</definition>
        <argsstring>() noexcept</argsstring>
        <name>nbDetectors</name>
        <briefdescription>
<para>Get the number of detectors with calibration coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="108" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="108" bodyend="108"/>
        <references refid="class_calibration_1a873c0737314dea95849645024deefb61" compoundref="_calibration_8hpp" startline="167">m_nb_det</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1afea60036d04f264977103febc61433fa" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Calibration::operator bool</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Return true if the data has been loaded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="96" column="3" bodyfile="lib/Classes/Calibration.hpp" bodystart="96" bodyend="96"/>
        <references refid="class_calibration_1aea5e9bf6d006f5e26702953552e97dec" compoundref="_calibration_8hpp" startline="166">m_ok</references>
        <references refid="class_calibration_1a8b66733b050e8743b1887fbed7284269" compoundref="_calibration_8hpp" startline="168">m_size</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a218d4c3aba57678304a602248d46d407" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Calibration::operator()</definition>
        <argsstring>(ARGS &amp;&amp;... args) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>ARGS &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Wrapper around the <ref refid="class_calibration_1aacb494950f95ab8c5e12f548de28afb4" kindref="member">Calibration::calibrate()</ref> methods. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="93" column="8" bodyfile="lib/Classes/Calibration.hpp" bodystart="93" bodyend="93"/>
        <references refid="class_calibration_1aacb494950f95ab8c5e12f548de28afb4" compoundref="_calibration_8hpp" startline="193" endline="200">calibrate</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a8dccc9ef965732a47d4d47df551baa39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_calibration" kindref="compound">Calibration</ref> const  &amp;</type>
        <definition>Calibration const&amp; Calibration::operator=</definition>
        <argsstring>(Calibration const &amp;otherCalib)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_calibration" kindref="compound">Calibration</ref> const &amp;</type>
          <declname>otherCalib</declname>
        </param>
        <briefdescription>
<para>Copy operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="33" column="22" bodyfile="lib/Classes/Calibration.hpp" bodystart="33" bodyend="44"/>
        <references refid="class_calibration_1ad5cb9c62bdcb6c6e7731678e2097dbff" compoundref="_calibration_8hpp" startline="172">m_binom</references>
        <references refid="class_calibration_1aa3662eecd6984f081c14c78ce48b426d" compoundref="_calibration_8hpp" startline="170">m_intercept</references>
        <references refid="class_calibration_1a873c0737314dea95849645024deefb61" compoundref="_calibration_8hpp" startline="167">m_nb_det</references>
        <references refid="class_calibration_1aea5e9bf6d006f5e26702953552e97dec" compoundref="_calibration_8hpp" startline="166">m_ok</references>
        <references refid="class_calibration_1aebce8e9b03e8a2c8b51c0204e81bcd76" compoundref="_calibration_8hpp" startline="169">m_order</references>
        <references refid="class_calibration_1a8b66733b050e8743b1887fbed7284269" compoundref="_calibration_8hpp" startline="168">m_size</references>
        <references refid="class_calibration_1ae2e50bdd8ff2e1cdfb8f85071f28062e" compoundref="_calibration_8hpp" startline="171">m_slope</references>
        <references refid="class_calibration_1a25eec3ddcb7c771493317f00d6e8b9d4" compoundref="_calibration_8hpp" startline="173">m_trinom</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a366198c5f96777e70d3262877baea623" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_calibration" kindref="compound">Calibration</ref> const  &amp;</type>
        <definition>Calibration const&amp; Calibration::operator=</definition>
        <argsstring>(File const &amp;file)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_file" kindref="compound">File</ref> const &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Copy operator twicked to load calibration from a file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="49" column="22" bodyfile="lib/Classes/Calibration.hpp" bodystart="49" bodyend="49"/>
        <references refid="class_calibration_1ac636b26d5725f63ec6d56c0ad51af338" compoundref="_calibration_8hpp" startline="114" endline="114">file</references>
        <references refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a01f1a4e9586e8f43fa4afce86c4e8d2d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; Calibration::operator[]</definition>
        <argsstring>(Label const &amp;label) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Returns a vector holding the coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="99" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="99" bodyend="99"/>
        <references refid="class_calibration_1a10ce3a8d6680709755f1bd2700876603" compoundref="_calibration_8hpp" startline="251" endline="262">get</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a91d512d3bcbc3a3439a7902326965b48" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; Calibration::order</definition>
        <argsstring>(Label const &amp;label) const noexcept</argsstring>
        <name>order</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Get the order of the calibration (0 : linear, 1 : affine, 2 : quadratic, 3 : 3rd order) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="140" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="140" bodyend="140"/>
        <references refid="class_calibration_1aebce8e9b03e8a2c8b51c0204e81bcd76" compoundref="_calibration_8hpp" startline="169">m_order</references>
        <referencedby refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">SpectraCo::calibrate</referencedby>
        <referencedby refid="class_evolution_peaks_1a5645dd6726d0af38e8a4d849da6a8d18" compoundref="_evolution_peaks_8hpp" startline="102" endline="345">EvolutionPeaks::run</referencedby>
        <referencedby refid="class_calibrator_1aad90b0e3951d4caffe11e319c7108a51" compoundref="_calibrator_8hpp" startline="960" endline="1025">Calibrator::verify</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a1ddc5dc9bb136ae5dd1b86be4afc2bd9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; Calibration::order</definition>
        <argsstring>(Label const &amp;label) noexcept</argsstring>
        <name>order</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Get the order of the calibration (0 : linear, 1 : affine, 2 : quadratic, 3 : 3rd order) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="142" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="142" bodyend="142"/>
        <references refid="class_calibration_1aebce8e9b03e8a2c8b51c0204e81bcd76" compoundref="_calibration_8hpp" startline="169">m_order</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1aaba010db225b8b01931d013eefda800b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Calibration::Print</definition>
        <argsstring>()</argsstring>
        <name>Print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="160" column="8" bodyfile="lib/Classes/Calibration.hpp" bodystart="354" bodyend="354"/>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a7545c0c01c4d8e1c5c28fb7930bfd3a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Calibration::Print</definition>
        <argsstring>(Label const &amp;label)</argsstring>
        <name>Print</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="161" column="8" bodyfile="lib/Classes/Calibration.hpp" bodystart="355" bodyend="377"/>
        <references refid="_detectors_8hpp_1a06939d30171afd1f13893e05454ed813">detectors</references>
        <references refid="class_calibration_1ad5cb9c62bdcb6c6e7731678e2097dbff" compoundref="_calibration_8hpp" startline="172">m_binom</references>
        <references refid="class_calibration_1aa3662eecd6984f081c14c78ce48b426d" compoundref="_calibration_8hpp" startline="170">m_intercept</references>
        <references refid="class_calibration_1aebce8e9b03e8a2c8b51c0204e81bcd76" compoundref="_calibration_8hpp" startline="169">m_order</references>
        <references refid="class_calibration_1ae2e50bdd8ff2e1cdfb8f85071f28062e" compoundref="_calibration_8hpp" startline="171">m_slope</references>
        <references refid="class_calibration_1a25eec3ddcb7c771493317f00d6e8b9d4" compoundref="_calibration_8hpp" startline="173">m_trinom</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a8cc33cfcd3004d549b87edd2540d9e1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Calibration::resize</definition>
        <argsstring>(int const &amp;size)</argsstring>
        <name>resize</name>
        <param>
          <type>int const &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="61" column="8" bodyfile="lib/Classes/Calibration.hpp" bodystart="264" bodyend="272"/>
        <references refid="class_calibration_1ad5cb9c62bdcb6c6e7731678e2097dbff" compoundref="_calibration_8hpp" startline="172">m_binom</references>
        <references refid="class_calibration_1aa3662eecd6984f081c14c78ce48b426d" compoundref="_calibration_8hpp" startline="170">m_intercept</references>
        <references refid="class_calibration_1aebce8e9b03e8a2c8b51c0204e81bcd76" compoundref="_calibration_8hpp" startline="169">m_order</references>
        <references refid="class_calibration_1a8b66733b050e8743b1887fbed7284269" compoundref="_calibration_8hpp" startline="168">m_size</references>
        <references refid="class_calibration_1ae2e50bdd8ff2e1cdfb8f85071f28062e" compoundref="_calibration_8hpp" startline="171">m_slope</references>
        <references refid="class_calibration_1a25eec3ddcb7c771493317f00d6e8b9d4" compoundref="_calibration_8hpp" startline="173">m_trinom</references>
        <references refid="class_calibration_1a5070b5faea97d16c53b084a1b82161f0" compoundref="_calibration_8hpp" startline="102" endline="102">size</references>
        <referencedby refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</referencedby>
        <referencedby refid="class_calibration_1a2ad52fe16c3fef88d1de86ef8f609198" compoundref="_calibration_8hpp" startline="219" endline="249">set</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a2ad52fe16c3fef88d1de86ef8f609198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Calibration::set</definition>
        <argsstring>(Label const &amp;_label, float const &amp;_intercept, float const &amp;_slope, float const &amp;_binom, float const &amp;_trinom)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>_label</declname>
        </param>
        <param>
          <type>float const &amp;</type>
          <declname>_intercept</declname>
        </param>
        <param>
          <type>float const &amp;</type>
          <declname>_slope</declname>
        </param>
        <param>
          <type>float const &amp;</type>
          <declname>_binom</declname>
        </param>
        <param>
          <type>float const &amp;</type>
          <declname>_trinom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="52" column="8" bodyfile="lib/Classes/Calibration.hpp" bodystart="219" bodyend="249"/>
        <references refid="class_calibration_1ad5cb9c62bdcb6c6e7731678e2097dbff" compoundref="_calibration_8hpp" startline="172">m_binom</references>
        <references refid="class_calibration_1aa3662eecd6984f081c14c78ce48b426d" compoundref="_calibration_8hpp" startline="170">m_intercept</references>
        <references refid="class_calibration_1aebce8e9b03e8a2c8b51c0204e81bcd76" compoundref="_calibration_8hpp" startline="169">m_order</references>
        <references refid="class_calibration_1a8b66733b050e8743b1887fbed7284269" compoundref="_calibration_8hpp" startline="168">m_size</references>
        <references refid="class_calibration_1ae2e50bdd8ff2e1cdfb8f85071f28062e" compoundref="_calibration_8hpp" startline="171">m_slope</references>
        <references refid="class_calibration_1a25eec3ddcb7c771493317f00d6e8b9d4" compoundref="_calibration_8hpp" startline="173">m_trinom</references>
        <references refid="class_calibration_1a8cc33cfcd3004d549b87edd2540d9e1d" compoundref="_calibration_8hpp" startline="264" endline="272">resize</references>
        <referencedby refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a5070b5faea97d16c53b084a1b82161f0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; Calibration::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Get the maximum label of detectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="102" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="102" bodyend="102"/>
        <references refid="class_calibration_1a8b66733b050e8743b1887fbed7284269" compoundref="_calibration_8hpp" startline="168">m_size</references>
        <referencedby refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</referencedby>
        <referencedby refid="_calibration_8hpp_1a6e05c096827f5bf5c7f3c52fffd2305d" compoundref="_calibration_8hpp" startline="330" endline="352">operator&lt;&lt;</referencedby>
        <referencedby refid="class_calibration_1a8cc33cfcd3004d549b87edd2540d9e1d" compoundref="_calibration_8hpp" startline="264" endline="272">resize</referencedby>
        <referencedby refid="class_calibrator_1aad90b0e3951d4caffe11e319c7108a51" compoundref="_calibrator_8hpp" startline="960" endline="1025">Calibrator::verify</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a45ad5a7fa9f7ba5007dbec3a7b6a76f1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; Calibration::size</definition>
        <argsstring>() noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Get the maximum label of detectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="104" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="104" bodyend="104"/>
        <references refid="class_calibration_1a8b66733b050e8743b1887fbed7284269" compoundref="_calibration_8hpp" startline="168">m_size</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a38f8b48818a42d56682b9267847d2995" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; Calibration::slope</definition>
        <argsstring>(Label const &amp;label) const noexcept</argsstring>
        <name>slope</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Get the slope parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="148" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="148" bodyend="148"/>
        <references refid="class_calibration_1ae2e50bdd8ff2e1cdfb8f85071f28062e" compoundref="_calibration_8hpp" startline="171">m_slope</references>
        <referencedby refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</referencedby>
        <referencedby refid="class_calibrator_1aad90b0e3951d4caffe11e319c7108a51" compoundref="_calibrator_8hpp" startline="960" endline="1025">Calibrator::verify</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a4ec21083def993dc01de1097692deba1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; Calibration::slope</definition>
        <argsstring>(Label const &amp;label) noexcept</argsstring>
        <name>slope</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Get the slope parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="150" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="150" bodyend="150"/>
        <references refid="class_calibration_1ae2e50bdd8ff2e1cdfb8f85071f28062e" compoundref="_calibration_8hpp" startline="171">m_slope</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1ab2e13b04241551660871aeb23266eb86" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto const  &amp;</type>
        <definition>auto const&amp; Calibration::trinom</definition>
        <argsstring>(Label const &amp;label) const noexcept</argsstring>
        <name>trinom</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Get the 3rd order parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="156" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="156" bodyend="156"/>
        <references refid="class_calibration_1a25eec3ddcb7c771493317f00d6e8b9d4" compoundref="_calibration_8hpp" startline="173">m_trinom</references>
        <referencedby refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">load</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a27f7f427b210e48762224cd6a7b4bd76" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; Calibration::trinom</definition>
        <argsstring>(Label const &amp;label) noexcept</argsstring>
        <name>trinom</name>
        <param>
          <type><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref> const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Get the 3rd order parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="158" column="15" bodyfile="lib/Classes/Calibration.hpp" bodystart="158" bodyend="158"/>
        <references refid="class_calibration_1a25eec3ddcb7c771493317f00d6e8b9d4" compoundref="_calibration_8hpp" startline="173">m_trinom</references>
      </memberdef>
      <memberdef kind="function" id="class_calibration_1a62f73bc45da4c1cd949b4ce32b630916" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Calibration::write</definition>
        <argsstring>(std::string const &amp;outfilename)</argsstring>
        <name>write</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>outfilename</declname>
        </param>
        <briefdescription>
<para>Writes down the calibration file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Calibration.hpp" line="59" column="8" bodyfile="lib/Classes/Calibration.hpp" bodystart="380" bodyend="390"/>
        <references refid="class_file_1aec78af028103207cb2ce88c0120dd4f6" compoundref="files__functions_8hpp" startline="830" endline="830">File::makePath</references>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
        <references refid="class_file_1af4dee1c79bf496d505633211177c6ce3" compoundref="files__functions_8hpp" startline="829" endline="829">File::setExtension</references>
        <references refid="class_file_1a899e6a7c528ab2824c7c584c4ee63073" compoundref="files__functions_8hpp" startline="811" endline="811">File::string</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A convenient class for handling coefficient calibration up to 3rd order. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lib/Classes/Calibration.hpp" line="12" column="1" bodyfile="lib/Classes/Calibration.hpp" bodystart="13" bodyend="175"/>
    <listofallmembers>
      <member refid="class_calibration_1a6044ac4a0a17e177af66138f75aca6b6" prot="public" virt="non-virtual"><scope>Calibration</scope><name>apply</name></member>
      <member refid="class_calibration_1aa3ab2d95f8d0799c7910bc6163f0c2ad" prot="public" virt="non-virtual"><scope>Calibration</scope><name>binom</name></member>
      <member refid="class_calibration_1a159877cf15817efee936b0eb3871f505" prot="public" virt="non-virtual"><scope>Calibration</scope><name>binom</name></member>
      <member refid="class_calibration_1aacb494950f95ab8c5e12f548de28afb4" prot="public" virt="non-virtual"><scope>Calibration</scope><name>calibrate</name></member>
      <member refid="class_calibration_1a2758f6c22e17c9c924f25690240f1b09" prot="public" virt="non-virtual"><scope>Calibration</scope><name>calibrate</name></member>
      <member refid="class_calibration_1a252f473a9f8a865ab1bdb43dfd571e66" prot="public" virt="non-virtual"><scope>Calibration</scope><name>calibrate</name></member>
      <member refid="class_calibration_1ac5e6098a62483aa931b0b0c014615fce" prot="public" virt="non-virtual"><scope>Calibration</scope><name>calibrate</name></member>
      <member refid="class_calibration_1ac35a48d4659a122e21143e5e2a01765a" prot="public" virt="non-virtual"><scope>Calibration</scope><name>calibrate</name></member>
      <member refid="class_calibration_1a33f3a180851c479ac5ae4e07053d348c" prot="public" virt="non-virtual"><scope>Calibration</scope><name>Calibration</name></member>
      <member refid="class_calibration_1a8e35cee6894b7e32cb4e6dcbbe26a0c4" prot="public" virt="non-virtual"><scope>Calibration</scope><name>Calibration</name></member>
      <member refid="class_calibration_1aa2a91c92246a15839d6428b0b9058bc8" prot="public" virt="non-virtual"><scope>Calibration</scope><name>Calibration</name></member>
      <member refid="class_calibration_1a1a424ad63111ec123b66ac09c5f70184" prot="private" virt="non-virtual"><scope>Calibration</scope><name>calibration_tables</name></member>
      <member refid="class_calibration_1a8a7104d462b567eee77b85d8f4f7269f" prot="public" virt="non-virtual"><scope>Calibration</scope><name>clear</name></member>
      <member refid="class_calibration_1ac636b26d5725f63ec6d56c0ad51af338" prot="public" virt="non-virtual"><scope>Calibration</scope><name>file</name></member>
      <member refid="class_calibration_1ae971a2f379e91734a15f8acc25466802" prot="public" virt="non-virtual"><scope>Calibration</scope><name>file</name></member>
      <member refid="class_calibration_1a10ce3a8d6680709755f1bd2700876603" prot="public" virt="non-virtual"><scope>Calibration</scope><name>get</name></member>
      <member refid="class_calibration_1a444e5a870012ac2760875f19fb415eab" prot="public" virt="non-virtual"><scope>Calibration</scope><name>getBinom</name></member>
      <member refid="class_calibration_1abae0f70552c2cea8cb0f89e4d2bab9cc" prot="public" virt="non-virtual"><scope>Calibration</scope><name>getBinom</name></member>
      <member refid="class_calibration_1ad6a111e94914e75259ee4f342757b31a" prot="public" virt="non-virtual"><scope>Calibration</scope><name>getIntercept</name></member>
      <member refid="class_calibration_1af035f8b320a9513c6b37671fa4740745" prot="public" virt="non-virtual"><scope>Calibration</scope><name>getIntercept</name></member>
      <member refid="class_calibration_1a001b6fab19a0fdc4bd7a420c8eb7517a" prot="public" virt="non-virtual"><scope>Calibration</scope><name>getOrder</name></member>
      <member refid="class_calibration_1a9b33075dcaf65cff432d2ff201a17302" prot="public" virt="non-virtual"><scope>Calibration</scope><name>getOrder</name></member>
      <member refid="class_calibration_1a35f805421eb01ce451a258adf3ad108c" prot="public" virt="non-virtual"><scope>Calibration</scope><name>getSlope</name></member>
      <member refid="class_calibration_1acbc4cb2b28eed01cec1842c2229bb62c" prot="public" virt="non-virtual"><scope>Calibration</scope><name>getSlope</name></member>
      <member refid="class_calibration_1a57d6e4aaf0bf53a680c4d7ad427378e5" prot="public" virt="non-virtual"><scope>Calibration</scope><name>getTrinom</name></member>
      <member refid="class_calibration_1a7fbd2f46700b76fc2d91bbc1a762d4b1" prot="public" virt="non-virtual"><scope>Calibration</scope><name>getTrinom</name></member>
      <member refid="class_calibration_1a60c13a56e81bd8fb738c00a9b70e56b4" prot="public" virt="non-virtual"><scope>Calibration</scope><name>intercept</name></member>
      <member refid="class_calibration_1aa04775b32f01c4dd9e4501fcf332a994" prot="public" virt="non-virtual"><scope>Calibration</scope><name>intercept</name></member>
      <member refid="class_calibration_1ab8717ea59193176a7311b1c425edc3ec" prot="public" virt="non-virtual"><scope>Calibration</scope><name>isFilled</name></member>
      <member refid="class_calibration_1af6585bac9039b90e931355ca9ded3256" prot="public" virt="non-virtual"><scope>Calibration</scope><name>isFilled</name></member>
      <member refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" prot="public" virt="non-virtual"><scope>Calibration</scope><name>load</name></member>
      <member refid="class_calibration_1ad5cb9c62bdcb6c6e7731678e2097dbff" prot="private" virt="non-virtual"><scope>Calibration</scope><name>m_binom</name></member>
      <member refid="class_calibration_1ada2b7de482524ffd3e0a9b6038e3d6de" prot="private" virt="non-virtual"><scope>Calibration</scope><name>m_filename</name></member>
      <member refid="class_calibration_1aa3662eecd6984f081c14c78ce48b426d" prot="private" virt="non-virtual"><scope>Calibration</scope><name>m_intercept</name></member>
      <member refid="class_calibration_1a873c0737314dea95849645024deefb61" prot="private" virt="non-virtual"><scope>Calibration</scope><name>m_nb_det</name></member>
      <member refid="class_calibration_1aea5e9bf6d006f5e26702953552e97dec" prot="private" virt="non-virtual"><scope>Calibration</scope><name>m_ok</name></member>
      <member refid="class_calibration_1aebce8e9b03e8a2c8b51c0204e81bcd76" prot="private" virt="non-virtual"><scope>Calibration</scope><name>m_order</name></member>
      <member refid="class_calibration_1a8b66733b050e8743b1887fbed7284269" prot="private" virt="non-virtual"><scope>Calibration</scope><name>m_size</name></member>
      <member refid="class_calibration_1ae2e50bdd8ff2e1cdfb8f85071f28062e" prot="private" virt="non-virtual"><scope>Calibration</scope><name>m_slope</name></member>
      <member refid="class_calibration_1a25eec3ddcb7c771493317f00d6e8b9d4" prot="private" virt="non-virtual"><scope>Calibration</scope><name>m_trinom</name></member>
      <member refid="class_calibration_1a3929d5f7ebd7a5d611ff297a643bc2bd" prot="public" virt="non-virtual"><scope>Calibration</scope><name>nbDetectors</name></member>
      <member refid="class_calibration_1afdfb23b77b5e0bbd56fde61c3ef4fbb4" prot="public" virt="non-virtual"><scope>Calibration</scope><name>nbDetectors</name></member>
      <member refid="class_calibration_1afea60036d04f264977103febc61433fa" prot="public" virt="non-virtual"><scope>Calibration</scope><name>operator bool</name></member>
      <member refid="class_calibration_1a218d4c3aba57678304a602248d46d407" prot="public" virt="non-virtual"><scope>Calibration</scope><name>operator()</name></member>
      <member refid="class_calibration_1a8dccc9ef965732a47d4d47df551baa39" prot="public" virt="non-virtual"><scope>Calibration</scope><name>operator=</name></member>
      <member refid="class_calibration_1a366198c5f96777e70d3262877baea623" prot="public" virt="non-virtual"><scope>Calibration</scope><name>operator=</name></member>
      <member refid="class_calibration_1a01f1a4e9586e8f43fa4afce86c4e8d2d" prot="public" virt="non-virtual"><scope>Calibration</scope><name>operator[]</name></member>
      <member refid="class_calibration_1a91d512d3bcbc3a3439a7902326965b48" prot="public" virt="non-virtual"><scope>Calibration</scope><name>order</name></member>
      <member refid="class_calibration_1a1ddc5dc9bb136ae5dd1b86be4afc2bd9" prot="public" virt="non-virtual"><scope>Calibration</scope><name>order</name></member>
      <member refid="class_calibration_1aaba010db225b8b01931d013eefda800b" prot="public" virt="non-virtual"><scope>Calibration</scope><name>Print</name></member>
      <member refid="class_calibration_1a7545c0c01c4d8e1c5c28fb7930bfd3a0" prot="public" virt="non-virtual"><scope>Calibration</scope><name>Print</name></member>
      <member refid="class_calibration_1a8cc33cfcd3004d549b87edd2540d9e1d" prot="public" virt="non-virtual"><scope>Calibration</scope><name>resize</name></member>
      <member refid="class_calibration_1a2ad52fe16c3fef88d1de86ef8f609198" prot="public" virt="non-virtual"><scope>Calibration</scope><name>set</name></member>
      <member refid="class_calibration_1a5070b5faea97d16c53b084a1b82161f0" prot="public" virt="non-virtual"><scope>Calibration</scope><name>size</name></member>
      <member refid="class_calibration_1a45ad5a7fa9f7ba5007dbec3a7b6a76f1" prot="public" virt="non-virtual"><scope>Calibration</scope><name>size</name></member>
      <member refid="class_calibration_1a38f8b48818a42d56682b9267847d2995" prot="public" virt="non-virtual"><scope>Calibration</scope><name>slope</name></member>
      <member refid="class_calibration_1a4ec21083def993dc01de1097692deba1" prot="public" virt="non-virtual"><scope>Calibration</scope><name>slope</name></member>
      <member refid="class_calibration_1ab2e13b04241551660871aeb23266eb86" prot="public" virt="non-virtual"><scope>Calibration</scope><name>trinom</name></member>
      <member refid="class_calibration_1a27f7f427b210e48762224cd6a7b4bd76" prot="public" virt="non-virtual"><scope>Calibration</scope><name>trinom</name></member>
      <member refid="class_calibration_1a62f73bc45da4c1cd949b4ce32b630916" prot="public" virt="non-virtual"><scope>Calibration</scope><name>write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
