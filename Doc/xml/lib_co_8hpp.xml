<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="lib_co_8hpp" kind="file" language="C++">
    <compoundname>libCo.hpp</compoundname>
    <includes local="no">any</includes>
    <includes local="no">array</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">cstring</includes>
    <includes local="no">fstream</includes>
    <includes local="no">functional</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">iostream</includes>
    <includes local="no">map</includes>
    <includes local="no">memory</includes>
    <includes local="no">mutex</includes>
    <includes local="no">numeric</includes>
    <includes local="no">queue</includes>
    <includes local="no">sstream</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">stack</includes>
    <includes local="no">thread</includes>
    <includes local="no">typeindex</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includes local="no">dirent.h</includes>
    <includes local="no">glob.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="print_8hpp" local="yes">print.hpp</includes>
    <includes refid="random_8hpp" local="yes">random.hpp</includes>
    <includes refid="string__functions_8hpp" local="yes">string_functions.hpp</includes>
    <includes refid="files__functions_8hpp" local="yes">files_functions.hpp</includes>
    <includes refid="vector__functions_8hpp" local="yes">vector_functions.hpp</includes>
    <includedby refid="_analyse_2_counters_8hpp" local="no">lib/Analyse/Counters.hpp</includedby>
    <includedby refid="_d_s_s_d_8hpp" local="no">lib/Analyse/DSSD.hpp</includedby>
    <includedby refid="_builder_8hpp" local="yes">lib/Classes/Builder.hpp</includedby>
    <includedby refid="_classes_2_counters_8hpp" local="yes">lib/Classes/Counters.hpp</includedby>
    <includedby refid="_event_8hpp" local="yes">lib/Classes/Event.hpp</includedby>
    <includedby refid="_files_manager_8hpp" local="yes">lib/Classes/FilesManager.hpp</includedby>
    <includedby refid="_gate_8hpp" local="yes">lib/Classes/Gate.hpp</includedby>
    <includedby refid="_manip_8hpp" local="yes">lib/Classes/Manip.hpp</includedby>
    <includedby refid="_nuball2_tree_8hpp" local="yes">lib/Classes/Nuball2Tree.hpp</includedby>
    <includedby refid="_performances_8hpp" local="yes">lib/Classes/Performances.hpp</includedby>
    <includedby refid="_r_f___manager_8hpp" local="yes">lib/Classes/RF_Manager.hpp</includedby>
    <includedby refid="_r_w_mat_8hxx" local="yes">lib/Classes/RWMat.hxx</includedby>
    <includedby refid="lib_root_8hpp" local="yes">lib/libRoot.hpp</includedby>
    <includedby refid="_calibration_8hpp" local="yes">lib/Modules/Calibration.hpp</includedby>
    <includedby refid="_faster2_root_8hpp" local="yes">lib/Modules/Faster2Root.hpp</includedby>
    <includedby refid="_run_matrixator_8hpp" local="yes">lib/Modules/RunMatrixator.hpp</includedby>
    <includedby refid="_timeshifts_8hpp" local="yes">lib/Modules/Timeshifts.hpp</includedby>
    <includedby refid="_timewalk_8hpp" local="yes">lib/Modules/Timewalk.hpp</includedby>
    <includedby refid="_m_t_list_8hpp" local="yes">lib/MTObjects/MTList.hpp</includedby>
    <incdepgraph>
      <node id="26">
        <label>glob.h</label>
      </node>
      <node id="9">
        <label>iomanip</label>
      </node>
      <node id="8">
        <label>functional</label>
      </node>
      <node id="15">
        <label>queue</label>
      </node>
      <node id="31">
        <label>random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>filesystem</label>
      </node>
      <node id="28">
        <label>stdlib.h</label>
      </node>
      <node id="17">
        <label>stdexcept</label>
      </node>
      <node id="14">
        <label>numeric</label>
      </node>
      <node id="18">
        <label>string</label>
      </node>
      <node id="11">
        <label>map</label>
      </node>
      <node id="1">
        <label>lib/libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>print.hpp</label>
        <link refid="print_8hpp"/>
      </node>
      <node id="7">
        <label>fstream</label>
      </node>
      <node id="2">
        <label>any</label>
      </node>
      <node id="34">
        <label>files_functions.hpp</label>
        <link refid="files__functions_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>random</label>
      </node>
      <node id="29">
        <label>string.h</label>
      </node>
      <node id="22">
        <label>typeinfo</label>
      </node>
      <node id="24">
        <label>vector</label>
      </node>
      <node id="19">
        <label>stack</label>
      </node>
      <node id="35">
        <label>vector_functions.hpp</label>
        <link refid="vector__functions_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>array</label>
      </node>
      <node id="16">
        <label>sstream</label>
      </node>
      <node id="5">
        <label>cstdlib</label>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="33">
        <label>string_functions.hpp</label>
        <link refid="string__functions_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>unordered_map</label>
      </node>
      <node id="13">
        <label>mutex</label>
      </node>
      <node id="20">
        <label>thread</label>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="27">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>cstring</label>
      </node>
      <node id="12">
        <label>memory</label>
      </node>
      <node id="21">
        <label>typeindex</label>
      </node>
      <node id="25">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="44">
        <label>lib/MTObjects/MTVariable.hpp</label>
        <link refid="_m_t_variable_8hpp"/>
      </node>
      <node id="2">
        <label>lib/Analyse/Counters.hpp</label>
        <link refid="_analyse_2_counters_8hpp"/>
      </node>
      <node id="32">
        <label>lib/Classes/RWMat.hxx</label>
        <link refid="_r_w_mat_8hxx"/>
      </node>
      <node id="33">
        <label>lib/libRoot.hpp</label>
        <link refid="lib_root_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>lib/Modules/Faster2Histo.hpp</label>
        <link refid="_faster2_histo_8hpp"/>
      </node>
      <node id="25">
        <label>lib/Classes/RF_Manager.hpp</label>
        <link refid="_r_f___manager_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>lib/Classes/Manip.hpp</label>
        <link refid="_manip_8hpp"/>
      </node>
      <node id="18">
        <label>lib/MTObjects/MTFasterReader.hpp</label>
        <link refid="_m_t_faster_reader_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>lib/Classes/Nuball2Tree.hpp</label>
        <link refid="_nuball2_tree_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>lib/Classes/Gate.hpp</label>
        <link refid="_gate_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>lib/Analyse/DSSD.hpp</label>
        <link refid="_d_s_s_d_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>lib/MTObjects/MTFilesManager.hpp</label>
        <link refid="_m_t_files_manager_8hpp"/>
      </node>
      <node id="38">
        <label>lib/Classes/FasterReader.hpp</label>
        <link refid="_faster_reader_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>lib/Analyse/EventAnalyse.hpp</label>
        <link refid="_event_analyse_8hpp"/>
      </node>
      <node id="41">
        <label>lib/MTObjects/MTCounter.hpp</label>
        <link refid="_m_t_counter_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>lib/Classes/Hit.hpp</label>
        <link refid="_hit_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>lib/Classes/EventBuilder.hpp</label>
        <link refid="_event_builder_8hpp"/>
      </node>
      <node id="15">
        <label>lib/Analyse/Clovers.hpp</label>
        <link refid="_clovers_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>lib/Modules/Timewalk.hpp</label>
        <link refid="_timewalk_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>lib/Modules/CloverSpectra.hpp</label>
        <link refid="_clover_spectra_8hpp"/>
      </node>
      <node id="43">
        <label>lib/MTObjects/MTList.hpp</label>
        <link refid="_m_t_list_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>lib/MTObjects/MTTHist.hpp</label>
        <link refid="_m_t_t_hist_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>lib/Analyse/ParisCluster.hpp</label>
        <link refid="_paris_cluster_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>lib/Classes/Counters.hpp</label>
        <link refid="_classes_2_counters_8hpp"/>
      </node>
      <node id="36">
        <label>lib/Classes/Detectors.hpp</label>
        <link refid="_detectors_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>lib/Classes/SpectraAlignator.hpp</label>
        <link refid="_spectra_alignator_8hpp"/>
      </node>
      <node id="14">
        <label>lib/Classes/Event.hpp</label>
        <link refid="_event_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>lib/Modules/Histogramor.hpp</label>
        <link refid="_histogramor_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>lib/Analyse/HistoAnalyse.hpp</label>
        <link refid="_histo_analyse_8hpp"/>
      </node>
      <node id="5">
        <label>lib/Analyse/Sorted_Event.hpp</label>
        <link refid="_sorted___event_8hpp"/>
      </node>
      <node id="9">
        <label>lib/Modules/Faster2Root.hpp</label>
        <link refid="_faster2_root_8hpp"/>
      </node>
      <node id="35">
        <label>lib/Analyse/ParisPhoswitch.hpp</label>
        <link refid="_paris_phoswitch_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>lib/Modules/RunMatrixator.hpp</label>
        <link refid="_run_matrixator_8hpp"/>
      </node>
      <node id="7">
        <label>lib/Classes/CoincBuilder.hpp</label>
        <link refid="_coinc_builder_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>lib/Classes/Builder.hpp</label>
        <link refid="_builder_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>lib/MTObjects/MTObject.hpp</label>
        <link refid="_m_t_object_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>lib/Modules/NearLine.hpp</label>
        <link refid="_near_line_8hpp"/>
      </node>
      <node id="10">
        <label>lib/Modules/Timeshifts.hpp</label>
        <link refid="_timeshifts_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>lib/Analyse/Paris.hpp</label>
        <link refid="_paris_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>lib/Classes/Alignator.hpp</label>
        <link refid="_alignator_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>lib/Classes/FilesManager.hpp</label>
        <link refid="_files_manager_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>lib/MTObjects/MTRootReader.hpp</label>
        <link refid="_m_t_root_reader_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>lib/Modules/Calibration.hpp</label>
        <link refid="_calibration_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>lib/Classes/Performances.hpp</label>
        <link refid="_performances_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_bools" prot="public">Bools</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lib_co_8hpp_1a54161053f7c12fa7dd7bddf119708644" prot="public" static="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>using Ints =  std::vector&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Ints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="227" column="1" bodyfile="lib/libCo.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729" prot="public" static="no">
        <type>long long int</type>
        <definition>using longlong =  long long int</definition>
        <argsstring></argsstring>
        <name>longlong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="94" column="1" bodyfile="lib/libCo.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using size_t =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="96" column="1" bodyfile="lib/libCo.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1a632090884b4aa0585e747446a2683963" prot="public" static="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>using Strings =  std::vector&lt;std::string&gt;</definition>
        <argsstring></argsstring>
        <name>Strings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="226" column="1" bodyfile="lib/libCo.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1acbcaeec4b92056a813c1a11e65d5df7d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>using T_is_number =  void</definition>
        <argsstring></argsstring>
        <name>T_is_number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="341" column="1" bodyfile="lib/libCo.hpp" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" prot="public" static="no">
        <type>unsigned char</type>
        <definition>using uchar =  unsigned char</definition>
        <argsstring></argsstring>
        <name>uchar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="90" column="1" bodyfile="lib/libCo.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" prot="public" static="no">
        <type>unsigned int</type>
        <definition>using uint =  unsigned int</definition>
        <argsstring></argsstring>
        <name>uint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="92" column="1" bodyfile="lib/libCo.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1a92c2ca60527219506deb3325507baee0" prot="public" static="no">
        <type>unsigned long int</type>
        <definition>using ulong =  unsigned long int</definition>
        <argsstring></argsstring>
        <name>ulong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="93" column="1" bodyfile="lib/libCo.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52" prot="public" static="no">
        <type>unsigned long long int</type>
        <definition>using ulonglong =  unsigned long long int</definition>
        <argsstring></argsstring>
        <name>ulonglong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="95" column="1" bodyfile="lib/libCo.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a" prot="public" static="no">
        <type>unsigned short int</type>
        <definition>using ushort =  unsigned short int</definition>
        <argsstring></argsstring>
        <name>ushort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="91" column="1" bodyfile="lib/libCo.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="lib_co_8hpp_1a99f92dd785ee1e11e00427fdc8a4f772" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double _ns</definition>
        <argsstring></argsstring>
        <name>_ns</name>
        <initializer>= 1000.</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="54" column="8" bodyfile="lib/libCo.hpp" bodystart="54" bodyend="-1"/>
        <referencedby refid="class_sorted___event_1a526eefb6a423a59ff6096766c04c98e2" compoundref="_sorted___event_8hpp" startline="254" endline="372">Sorted_Event::sortEvent</referencedby>
      </memberdef>
      <memberdef kind="variable" id="lib_co_8hpp_1af522b6efd63a7f871a8307755b1297bf" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; error_message</definition>
        <argsstring></argsstring>
        <name>error_message</name>
        <initializer>= 
{
  {&quot;DEV&quot;, &quot;ASK DEV or do it yourself, sry&quot;}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="236" column="10" bodyfile="lib/libCo.hpp" bodystart="236" bodyend="-1"/>
        <referencedby refid="struct_calibration_1_1histograms_1a911cfd2064bd94694cd0731aa6afccfa" compoundref="_calibration_8hpp" startline="330" endline="372">Calibration::histograms::Initialize</referencedby>
        <referencedby refid="class_faster2_root_1ad30ccf937150bbd3504ec3a354b76c8f" compoundref="_faster2_root_8hpp" startline="209" endline="263">Faster2Root::load</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lib_co_8hpp_1a79092fe2f0694bdbb860894b0f983e32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool bool_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>bool_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into an bool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="62" column="13" bodyfile="lib/libCo.hpp" bodystart="62" bodyend="62"/>
        <referencedby refid="class_fit_1aace9236c432ee27bd3c208911b7a396d" compoundref="_calibration_8hpp" startline="83" endline="83">Fit::exists</referencedby>
        <referencedby refid="class_fit_1a861a69c651863dcb3b41a788fe73f69d" compoundref="_calibration_8hpp" startline="89" endline="89">Fit::peaks_found</referencedby>
        <referencedby refid="class_histo_analyse_1a3ebd877de62f44cfde794b8a7dad2a78" compoundref="_histo_analyse_8hpp" startline="19" endline="31">HistoAnalyse&lt; THist &gt;::reset</referencedby>
        <referencedby refid="class_fit_1ad12c75a87a239da0768c9c6b869da431" compoundref="_calibration_8hpp" startline="86" endline="86">Fit::too_few_counts</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1afe72de0c3fabeb8944bfd72ccdbe0d73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>char</type>
        <definition>char char_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>char_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into an char. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="66" column="13" bodyfile="lib/libCo.hpp" bodystart="66" bodyend="66"/>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="233" endline="254">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double double_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>double_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into an double. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="86" column="15" bodyfile="lib/libCo.hpp" bodystart="86" bodyend="86"/>
        <referencedby refid="class_r_f___manager_1ae63b656a158cd94800fbe542da54a389" compoundref="_r_f___manager_8hpp" startline="75" endline="81">RF_Manager::set</referencedby>
        <referencedby refid="class_timeshifts_1a89dbca371bce4601ee60122f544faf95" compoundref="_timeshifts_8hpp" startline="1065" endline="1101">Timeshifts::shiftTimeSpectra</referencedby>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="233" endline="254">TypeRootMap::TypeRootMap</referencedby>
        <referencedby refid="class_calibration_1a344dc3d6feab3580e859cc693c2fdd4a" compoundref="_calibration_8hpp" startline="1128" endline="1171">Calibration::verify</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a664347fcb6b16fdc63cd601ebcfc2c8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool find_key</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map, K const &amp;key)</argsstring>
        <name>find_key</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>K const &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="265" column="13" bodyfile="lib/libCo.hpp" bodystart="265" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a3b8ddb099e22657a31515fbcd8d1bf67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool find_key</definition>
        <argsstring>(std::unordered_map&lt; K, V &gt; const &amp;map, K const &amp;key)</argsstring>
        <name>find_key</name>
        <param>
          <type>std::unordered_map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>K const &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="246" column="13" bodyfile="lib/libCo.hpp" bodystart="246" bodyend="250"/>
        <referencedby refid="class_timeshifts_1a0ab2718e733f94acda46780191295e3b" compoundref="_timeshifts_8hpp" startline="227" endline="231">Timeshifts::rebin</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a1a6d9eab2874e1bf6506aeb84d21506d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool find_value</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map, V const &amp;value)</argsstring>
        <name>find_value</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>V const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="272" column="13" bodyfile="lib/libCo.hpp" bodystart="272" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1aaff2134bba0ee7c0b4a509699674251a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool find_value</definition>
        <argsstring>(std::unordered_map&lt; K, V &gt; const &amp;map, V const &amp;value)</argsstring>
        <name>find_value</name>
        <param>
          <type>std::unordered_map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>V const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="253" column="13" bodyfile="lib/libCo.hpp" bodystart="253" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float float_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>float_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into a float. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="82" column="14" bodyfile="lib/libCo.hpp" bodystart="82" bodyend="82"/>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="233" endline="254">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ad15d46f1c6897c587cd64a3efba23585" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; K, V &gt;</type>
        <definition>std::pair&lt;K,V&gt; get_max_element</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map)</argsstring>
        <name>get_max_element</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="280" column="18" bodyfile="lib/libCo.hpp" bodystart="280" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1aecb45c04cc3a1a2386b973014e4fef50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>K</type>
        <definition>K get_max_key</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map)</argsstring>
        <name>get_max_key</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="298" column="10" bodyfile="lib/libCo.hpp" bodystart="298" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ad4ab9f9247e670a4d9db36ca683e6270" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V get_max_value</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map)</argsstring>
        <name>get_max_value</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="289" column="10" bodyfile="lib/libCo.hpp" bodystart="289" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a6f43d67b9c0e4bb6bf5a58906ae0d812" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; K, V &gt;</type>
        <definition>std::pair&lt;K,V&gt; get_min</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map)</argsstring>
        <name>get_min</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="307" column="18" bodyfile="lib/libCo.hpp" bodystart="307" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1aeec208b7dcadd19e1317814c1de441d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>K</type>
        <definition>K get_min_key</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map)</argsstring>
        <name>get_min_key</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="325" column="10" bodyfile="lib/libCo.hpp" bodystart="325" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ad1d07d5a6e5c5182a7dc644148cd6fcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V get_min_value</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map)</argsstring>
        <name>get_min_value</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="316" column="10" bodyfile="lib/libCo.hpp" bodystart="316" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int int_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>int_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into an int. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="74" column="12" bodyfile="lib/libCo.hpp" bodystart="74" bodyend="74"/>
        <referencedby refid="class_timeshifts_1a608d9443a15dd669920e10dd8baee23a" compoundref="_timeshifts_8hpp" startline="827" endline="926">Timeshifts::analyse</referencedby>
        <referencedby refid="class_clovers_1a378e1b7fea24003b4b56eb855c8ae163" compoundref="_clovers_8hpp" startline="195" endline="195">Clovers::mult</referencedby>
        <referencedby refid="_clover_module_8hpp_1aae60fbf6c352f4c0682ec1c2a3f04181" compoundref="_clover_module_8hpp" startline="69" endline="80">operator&lt;&lt;</referencedby>
        <referencedby refid="class_calibration_1ad6db2742477c8ac64787c6fe8a687aff" compoundref="_calibration_8hpp" startline="552" endline="850">Calibration::peakFinder</referencedby>
        <referencedby refid="class_timeshifts_1a89dbca371bce4601ee60122f544faf95" compoundref="_timeshifts_8hpp" startline="1065" endline="1101">Timeshifts::shiftTimeSpectra</referencedby>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="233" endline="254">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a695ead22582e1da41880ee67c2c61d07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>long</type>
        <definition>long long_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>long_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into an long. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="78" column="13" bodyfile="lib/libCo.hpp" bodystart="78" bodyend="78"/>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="233" endline="254">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a86b2b990fa7ee3c102db83cdecc9d129" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729" kindref="member">longlong</ref></type>
        <definition>longlong longlong_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>longlong_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into long long (longlong) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="121" column="17" bodyfile="lib/libCo.hpp" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a4944be9c9377ea1853bd55f996b7cb13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::ostream &amp;cout, Bools const &amp;bools)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type><ref refid="class_bools" kindref="compound">Bools</ref> const &amp;</type>
          <declname>bools</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="220" column="14" bodyfile="lib/libCo.hpp" bodystart="220" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a6cca31a5d1658456b486e6fa135c690b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto pauseCo</definition>
        <argsstring>()</argsstring>
        <name>pauseCo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="47" column="6" bodyfile="lib/libCo.hpp" bodystart="47" bodyend="47"/>
        <referencedby refid="class_faster2_root_1a2ba93a4814723b6103dc25a701f3dc89" compoundref="_faster2_root_8hpp" startline="298" endline="393">Faster2Root::convertFile</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ab102b1ac90e2714661a2e757b7f6692e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto pauseCo</definition>
        <argsstring>(std::string const &amp;message)</argsstring>
        <name>pauseCo</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="48" column="6" bodyfile="lib/libCo.hpp" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1af4d9dac78db5e48b5e2c5253754aaa8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>short</type>
        <definition>short short_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>short_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into an short. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="70" column="14" bodyfile="lib/libCo.hpp" bodystart="70" bodyend="70"/>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="233" endline="254">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a237f678c718382f74a68364c0fc1779a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">size_t</ref></type>
        <definition>size_t size_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>size_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into std::size_t. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="125" column="15" bodyfile="lib/libCo.hpp" bodystart="125" bodyend="125"/>
        <referencedby refid="class_m_t_counter_1a62d12e221986dda2cb740d9e8da4ee55" compoundref="_m_t_counter_8hpp" startline="34" endline="34">MTCounter::add</referencedby>
        <referencedby refid="class_m_t_counter_1ad0851e43d22e6ffe02b1ecc66e4b793d" compoundref="_m_t_counter_8hpp" startline="37" endline="37">MTCounter::operator+=</referencedby>
        <referencedby refid="class_m_t_counter_1a833a2a1bedd059ba424d8150a418c351" compoundref="_m_t_counter_8hpp" startline="40" endline="40">MTCounter::operator=</referencedby>
        <referencedby refid="class_m_t_object_1a872d9518e0a1936df8e70a2dae303f4f" compoundref="_m_t_object_8hpp" startline="30" endline="30">MTObject::setThreadsNb</referencedby>
        <referencedby refid="class_event_1aadb0c0dcbb31718e69358e9c99a5b633" compoundref="_event_8hpp" startline="153" endline="153">Event::size</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void throw_error</definition>
        <argsstring>(std::string const &amp;message)</argsstring>
        <name>throw_error</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="234" column="6" bodyfile="lib/libCo.hpp" bodystart="234" bodyend="234"/>
        <referencedby refid="class_gates__t_1a07f860c7dcd7110ee0da5d523591b12f" compoundref="_gate_8hpp" startline="67" endline="70">Gates_t&lt; T &gt;::check</referencedby>
        <referencedby refid="class_faster2_root_1a2ba93a4814723b6103dc25a701f3dc89" compoundref="_faster2_root_8hpp" startline="298" endline="393">Faster2Root::convertFile</referencedby>
        <referencedby refid="class_run_matrixator_1a1f6ba04bc894d68a6d72ccedf8367ad4" compoundref="_run_matrixator_8hpp" startline="59" endline="71">RunMatrixator::dontMatrixate</referencedby>
        <referencedby refid="class_clover_spectra_1ae46c582451bada5b2b8957ee44b92e35" compoundref="_clover_spectra_8hpp" startline="65" endline="77">CloverSpectra::fillHisto</referencedby>
        <referencedby refid="class_run_matrixator_1ad32109c5c279f520ce19602340aa2293" compoundref="_run_matrixator_8hpp" startline="152" endline="239">RunMatrixator::Initialize</referencedby>
        <referencedby refid="class_clover_spectra_1a353ec66774413feefb33a784ce2159cf" compoundref="_clover_spectra_8hpp" startline="114" endline="145">CloverSpectra::Initialize</referencedby>
        <referencedby refid="class_faster2_root_1ad30ccf937150bbd3504ec3a354b76c8f" compoundref="_faster2_root_8hpp" startline="209" endline="263">Faster2Root::load</referencedby>
        <referencedby refid="class_faster2_histo_1a72f8004ae550c02db09791b810c0252d" compoundref="_faster2_histo_8hpp" startline="88" endline="121">Faster2Histo::load</referencedby>
        <referencedby refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_alignator_8hpp" startline="125" endline="142">SpectraCo::load</referencedby>
        <referencedby refid="class_calibration_1a7835b1d9192d2c9fa8dcd8efbceb8db3" compoundref="_calibration_8hpp" startline="419" endline="452">Calibration::loadRootHisto</referencedby>
        <referencedby refid="class_detectors_1ae5e6ff02bf3d79da3f034f7404e0677c" compoundref="_detectors_8hpp" startline="117" endline="121">Detectors::nbOfType</referencedby>
        <referencedby refid="class_near_line_1adf3bc13e36dd295fc5668f08e81eaf32" compoundref="_near_line_8hpp" startline="66" endline="69">NearLine::NearLine</referencedby>
        <referencedby refid="class_vertice_1a2e858710d6eb5fe7dc4029b6cc280272" compoundref="_spectra_alignator_8hpp" startline="434" endline="442">Vertice::operator*</referencedby>
        <referencedby refid="class_spectra_co_1ad2f1bf0e5e8ac584e0aac00e753e8395" compoundref="_spectra_alignator_8hpp" startline="288" endline="296">SpectraCo::operator+</referencedby>
        <referencedby refid="class_vertice_1a1897df7eb0121341d7dac0a285af7db8" compoundref="_spectra_alignator_8hpp" startline="414" endline="420">Vertice::operator+</referencedby>
        <referencedby refid="class_spectra_co_1af251452bf4de93adc2ddc7b7ae594415" compoundref="_spectra_alignator_8hpp" startline="298" endline="306">SpectraCo::operator-</referencedby>
        <referencedby refid="class_vertice_1a35359e51cb43abf68e459cbfedaeabb6" compoundref="_spectra_alignator_8hpp" startline="422" endline="431">Vertice::operator-</referencedby>
        <referencedby refid="namespace_co_analyse_1a53744e2ddfba6a4a188ada9ed1bc6272" compoundref="lib_root_8hpp" startline="584" endline="591">CoAnalyse::projectX</referencedby>
        <referencedby refid="namespace_co_analyse_1abecf48371e430ad0cc8dfb063e6d951d" compoundref="lib_root_8hpp" startline="457" endline="464">CoAnalyse::projectY</referencedby>
        <referencedby refid="class_timeshifts_1a0ab2718e733f94acda46780191295e3b" compoundref="_timeshifts_8hpp" startline="227" endline="231">Timeshifts::rebin</referencedby>
        <referencedby refid="class_run_matrixator_1aa6d13b08060fef07b50d7ab6b35be0d6" compoundref="_run_matrixator_8hpp" startline="122" endline="150">RunMatrixator::run</referencedby>
        <referencedby refid="class_vertice_1a58c2af14cebf91fc79298f4128a54856" compoundref="_spectra_alignator_8hpp" startline="383" endline="387">Vertice::set</referencedby>
        <referencedby refid="struct_calibration_1_1histograms_1a8cf05daf9b9f1ee4ec9d1763acc2c307" compoundref="_calibration_8hpp" startline="374" endline="391">Calibration::histograms::setBins</referencedby>
        <referencedby refid="namespace_co_analyse_1ad13b7eeaa3d7d9a30cdf04a8b0d17088" compoundref="lib_root_8hpp" startline="576" endline="581">CoAnalyse::setX</referencedby>
        <referencedby refid="namespace_co_analyse_1ac1aa3fcfcc46318e4f0d6f42510471a0" compoundref="lib_root_8hpp" startline="620" endline="625">CoAnalyse::setY</referencedby>
        <referencedby refid="class_simplex_1abd6e34ab7ace7cf33b13fa0dab907a2a" compoundref="_spectra_alignator_8hpp" startline="484" endline="491">Simplex::Simplex</referencedby>
        <referencedby refid="class_run_matrixator_1aeb9889ba763858dfb65e05c3a7bb142e" compoundref="_run_matrixator_8hpp" startline="501" endline="550">RunMatrixator::Write</referencedby>
        <referencedby refid="class_clover_spectra_1aea0814fac7c993ad4813804415f3ffab" compoundref="_clover_spectra_8hpp" startline="79" endline="95">CloverSpectra::writeHisto</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ade77d1f37b1311b3f80ce429a33fd226" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" kindref="member">uchar</ref></type>
        <definition>uchar uchar_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>uchar_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into unsigned char (uchar) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="101" column="14" bodyfile="lib/libCo.hpp" bodystart="101" bodyend="101"/>
        <referencedby refid="class_counters_1a1f2723ecaf63399d985ce2efd87aab6f" compoundref="_classes_2_counters_8hpp" startline="108" endline="125">Counters::clover_analyse</referencedby>
        <referencedby refid="class_counters_1a438d855f700f802261df045b1f52723e" compoundref="_analyse_2_counters_8hpp" startline="63" endline="121">Counters::count_event</referencedby>
        <referencedby refid="class_d_s_s_d_1a800770306a115e1096108cef2463a103" compoundref="_d_s_s_d_8hpp" startline="64" endline="86">DSSD::InitializeArrays</referencedby>
        <referencedby refid="class_detectors_1a8d5c0f2d189ddda12ed3c36f13887cfd" compoundref="_detectors_8hpp" startline="271" endline="372">Detectors::makeArrays</referencedby>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="233" endline="254">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ad4f41fb682fba59b9adc6142282db5a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" kindref="member">uint</ref></type>
        <definition>uint uint_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>uint_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into unsigned int (uint) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="109" column="14" bodyfile="lib/libCo.hpp" bodystart="109" bodyend="109"/>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="233" endline="254">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ac939b8397e82173edff13b3d00dc9d09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1a92c2ca60527219506deb3325507baee0" kindref="member">ulong</ref></type>
        <definition>ulong ulong_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>ulong_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into unsigned long (ulong) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="113" column="14" bodyfile="lib/libCo.hpp" bodystart="113" bodyend="113"/>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="233" endline="254">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a6064e403b0588c46cce0f1cb82471acf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52" kindref="member">ulonglong</ref></type>
        <definition>ulonglong ulonglong_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>ulonglong_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into unsigned long long (ulonglong) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="117" column="18" bodyfile="lib/libCo.hpp" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ab2f8f9033c2742c4f5ac6d3cce6caf9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a" kindref="member">ushort</ref></type>
        <definition>ushort ushort_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>ushort_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into unsigned short (ushort) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="105" column="15" bodyfile="lib/libCo.hpp" bodystart="105" bodyend="105"/>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="233" endline="254">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>LIB_HPP_CO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIB_HPP_CO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>***********<sp/>STD<sp/>includes<sp/>*********<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;any&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stack&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeindex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>**********<sp/>C<sp/>includes<sp/>************<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dirent.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;glob.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>**********<sp/>Corentin<sp/>Lib<sp/>************<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="print_8hpp" kindref="compound">print.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="random_8hpp" kindref="compound">random.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string__functions_8hpp" kindref="compound">string_functions.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="files__functions_8hpp" kindref="compound">files_functions.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vector__functions_8hpp" kindref="compound">vector_functions.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">//<sp/><sp/><sp/>UTILS<sp/><sp/>//</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="lib_co_8hpp_1a6cca31a5d1658456b486e6fa135c690b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a6cca31a5d1658456b486e6fa135c690b" kindref="member">pauseCo</ref>()<sp/>{std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Programe<sp/>paused,<sp/>please<sp/>press<sp/>enter&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::cin.get();}</highlight></codeline>
<codeline lineno="48" refid="lib_co_8hpp_1ab102b1ac90e2714661a2e757b7f6692e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a6cca31a5d1658456b486e6fa135c690b" kindref="member">pauseCo</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>message)<sp/>{std::cout<sp/>&lt;&lt;<sp/>message<sp/>&lt;&lt;<sp/>std::endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::cin.get();}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">//<sp/><sp/><sp/>UNITS<sp/><sp/>//</highlight></codeline>
<codeline lineno="53"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="lib_co_8hpp_1a99f92dd785ee1e11e00427fdc8a4f772" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a99f92dd785ee1e11e00427fdc8a4f772" kindref="member">_ns</ref><sp/>=<sp/>1000.;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">//<sp/><sp/><sp/><sp/>Types<sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="59"><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="62" refid="lib_co_8hpp_1a79092fe2f0694bdbb860894b0f983e32" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a79092fe2f0694bdbb860894b0f983e32" kindref="member">bool_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="66" refid="lib_co_8hpp_1afe72de0c3fabeb8944bfd72ccdbe0d73" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1afe72de0c3fabeb8944bfd72ccdbe0d73" kindref="member">char_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="70" refid="lib_co_8hpp_1af4d9dac78db5e48b5e2c5253754aaa8c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1af4d9dac78db5e48b5e2c5253754aaa8c" kindref="member">short_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">short</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="74" refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="78" refid="lib_co_8hpp_1a695ead22582e1da41880ee67c2c61d07" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a695ead22582e1da41880ee67c2c61d07" kindref="member">long_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="82" refid="lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d" kindref="member">float_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="86" refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" kindref="member">double_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>short<sp/>names<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" kindref="member">uchar</ref><sp/><sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char<sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="91" refid="lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a" kindref="member">ushort</ref><sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>int<sp/><sp/>;</highlight></codeline>
<codeline lineno="92" refid="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" kindref="member">uint</ref><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="93" refid="lib_co_8hpp_1a92c2ca60527219506deb3325507baee0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a92c2ca60527219506deb3325507baee0" kindref="member">ulong</ref><sp/><sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>int<sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="94" refid="lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729" kindref="member">longlong</ref><sp/><sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>int<sp/>;</highlight></codeline>
<codeline lineno="95" refid="lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52" kindref="member">ulonglong</ref><sp/><sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>int<sp/>;</highlight></codeline>
<codeline lineno="96" refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>=<sp/><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="101" refid="lib_co_8hpp_1ade77d1f37b1311b3f80ce429a33fd226" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" kindref="member">uchar</ref><sp/><ref refid="lib_co_8hpp_1ade77d1f37b1311b3f80ce429a33fd226" kindref="member">uchar_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" kindref="member">uchar</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="105" refid="lib_co_8hpp_1ab2f8f9033c2742c4f5ac6d3cce6caf9a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a" kindref="member">ushort</ref><sp/><ref refid="lib_co_8hpp_1ab2f8f9033c2742c4f5ac6d3cce6caf9a" kindref="member">ushort_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a" kindref="member">ushort</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="109" refid="lib_co_8hpp_1ad4f41fb682fba59b9adc6142282db5a2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" kindref="member">uint</ref><sp/><sp/><ref refid="lib_co_8hpp_1ad4f41fb682fba59b9adc6142282db5a2" kindref="member">uint_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" kindref="member">uint</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="113" refid="lib_co_8hpp_1ac939b8397e82173edff13b3d00dc9d09" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a92c2ca60527219506deb3325507baee0" kindref="member">ulong</ref><sp/><ref refid="lib_co_8hpp_1ac939b8397e82173edff13b3d00dc9d09" kindref="member">ulong_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="lib_co_8hpp_1a92c2ca60527219506deb3325507baee0" kindref="member">ulong</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="117" refid="lib_co_8hpp_1a6064e403b0588c46cce0f1cb82471acf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52" kindref="member">ulonglong</ref><sp/><ref refid="lib_co_8hpp_1a6064e403b0588c46cce0f1cb82471acf" kindref="member">ulonglong_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52" kindref="member">ulonglong</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="121" refid="lib_co_8hpp_1a86b2b990fa7ee3c102db83cdecc9d129" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729" kindref="member">longlong</ref><sp/><ref refid="lib_co_8hpp_1a86b2b990fa7ee3c102db83cdecc9d129" kindref="member">longlong_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729" kindref="member">longlong</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="125" refid="lib_co_8hpp_1a237f678c718382f74a68364c0fc1779a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a237f678c718382f74a68364c0fc1779a" kindref="member">size_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Containers<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="class_bools" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_bools" kindref="compound">Bools</ref><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="131" refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132" refid="class_bools_1a445a24b6837a4387946571ea76d95886" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="135" refid="class_bools_1addb0b52571d27932fa8143fcb422fe9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bools_1addb0b52571d27932fa8143fcb422fe9b" kindref="member">Bools</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="136" refid="class_bools_1a88601b65a1ae703d7bbc80e4c8586530" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bools_1a88601b65a1ae703d7bbc80e4c8586530" kindref="member">Bools</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>:<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>(<ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>,<sp/>value<sp/>?<sp/>1<sp/>:<sp/>0,<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="class_bools_1a83a4cfda502a9e83cccb5a0cefd65067" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bools_1a83a4cfda502a9e83cccb5a0cefd65067" kindref="member">Bools</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_bools" kindref="compound">Bools</ref>&amp;<sp/>other)<sp/>:<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>(other.<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>,<sp/>other.<ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>,<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="class_bools_1a320db9791cebe780ebd6486236f820fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bools_1a320db9791cebe780ebd6486236f820fd" kindref="member">Bools</ref>(<ref refid="class_bools" kindref="compound">Bools</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>:<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>(other.m_data),<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>(other.m_size)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_data<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="class_bools_1ab3902a403239bd602aafd094319f3f8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bools" kindref="compound">Bools</ref>&amp;<sp/><ref refid="class_bools_1ab3902a403239bd602aafd094319f3f8f" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_bools" kindref="compound">Bools</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>=<sp/>other.<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>];</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>,<sp/>other.<ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>,<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="class_bools_1a28a402a253cb7cef0e58445c126554ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bools" kindref="compound">Bools</ref>&amp;<sp/><ref refid="class_bools_1a28a402a253cb7cef0e58445c126554ce" kindref="member">operator=</ref>(<ref refid="class_bools" kindref="compound">Bools</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/>other.m_data;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>=<sp/>other.m_size;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_data<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="class_bools_1a0908affb9f95fbbcd517316c7c81bf53" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bools_1a0908affb9f95fbbcd517316c7c81bf53" kindref="member">~Bools</ref>()<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="class_bools_1afbd25d68b6e6fb096b95f56b665cf1b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/><ref refid="class_bools_1afbd25d68b6e6fb096b95f56b665cf1b7" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>[index];</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="class_bools_1a0d18d7e936b556355a0ecc844a0daad3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_bools_1a0d18d7e936b556355a0ecc844a0daad3" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>[index];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="class_bools_1ab34b97e65a4a23ae25a8b6f746c37a9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_bools_1ab34b97e65a4a23ae25a8b6f746c37a9d" kindref="member">resize</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>&gt;<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>==0)<sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[<ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>&lt;<ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>;<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>++)<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>[<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[<ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(temp,<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>,<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>&lt;<ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>;<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>++)<sp/>temp[<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>]<sp/>=<sp/>value;</highlight><highlight class="comment">//<sp/>Fills<sp/>new<sp/>space<sp/>with<sp/>value<sp/>AND<sp/>set<sp/>correct<sp/>value<sp/>to<sp/>m_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="class_bools_1a241564235788ec089ae157118d17e401" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a241564235788ec089ae157118d17e401" kindref="member">begin</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>;}</highlight></codeline>
<codeline lineno="213" refid="class_bools_1a940a216bf52d8c93e688e2810cd767e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a940a216bf52d8c93e688e2810cd767e8" kindref="member">end</ref>()<sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>+<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>;}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="class_bools_1adaae46464e92c6073e068b66737da266" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_bools_1adaae46464e92c6073e068b66737da266" kindref="member">begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>;}</highlight></codeline>
<codeline lineno="216" refid="class_bools_1ae285a4de44d0625f680555e524b8fb27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_bools_1ae285a4de44d0625f680555e524b8fb27" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>+<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>;}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="lib_co_8hpp_1a4944be9c9377ea1853bd55f996b7cb13" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="lib_co_8hpp_1a4944be9c9377ea1853bd55f996b7cb13" kindref="member">operator&gt;&gt;</ref>(std::ostream&amp;<sp/>cout,<sp/><ref refid="class_bools" kindref="compound">Bools</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bools)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b<sp/>:<sp/>bools)<sp/>cout<sp/>&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="lib_co_8hpp_1a632090884b4aa0585e747446a2683963" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a632090884b4aa0585e747446a2683963" kindref="member">Strings</ref><sp/>=<sp/>std::vector&lt;std::string&gt;;</highlight></codeline>
<codeline lineno="227" refid="lib_co_8hpp_1a54161053f7c12fa7dd7bddf119708644" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a54161053f7c12fa7dd7bddf119708644" kindref="member">Ints</ref><sp/>=<sp/>std::vector&lt;int&gt;;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="comment">//<sp/><sp/><sp/><sp/>STANDART<sp/>FUNCTIONS<sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="233"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>message)<sp/>{</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(message);}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="lib_co_8hpp_1af522b6efd63a7f871a8307755b1297bf" refkind="member"><highlight class="normal">std::map&lt;std::string,<sp/>std::string&gt;<sp/><ref refid="lib_co_8hpp_1af522b6efd63a7f871a8307755b1297bf" kindref="member">error_message</ref><sp/>=<sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DEV&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ASK<sp/>DEV<sp/>or<sp/>do<sp/>it<sp/>yourself,<sp/>sry&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal">};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="comment">//<sp/><sp/><sp/><sp/>UNORDERED<sp/>MAPS<sp/>FUNCTIONS<sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="244"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="246" refid="lib_co_8hpp_1a3b8ddb099e22657a31515fbcd8d1bf67" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a3b8ddb099e22657a31515fbcd8d1bf67" kindref="member">find_key</ref>(std::unordered_map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map,<sp/>K<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>key)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::unordered_map&lt;K,<sp/>V&gt;::const_iterator<sp/>it<sp/>=<sp/>map.find(key);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>!=<sp/>map.end();</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="253" refid="lib_co_8hpp_1aaff2134bba0ee7c0b4a509699674251a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1aaff2134bba0ee7c0b4a509699674251a" kindref="member">find_value</ref>(std::unordered_map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map,<sp/>V<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find_if(map.begin(),<sp/>map.end(),<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pair)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pair.second<sp/>==<sp/>value;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="comment">//<sp/><sp/><sp/><sp/>MAPS<sp/>FUNCTIONS<sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="263"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="265" refid="lib_co_8hpp_1a664347fcb6b16fdc63cd601ebcfc2c8e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a3b8ddb099e22657a31515fbcd8d1bf67" kindref="member">find_key</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map,<sp/>K<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>key)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::map&lt;K,<sp/>V&gt;::const_iterator<sp/>it<sp/>=<sp/>map.find(key);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>!=<sp/>map.end();</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="272" refid="lib_co_8hpp_1a1a6d9eab2874e1bf6506aeb84d21506d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1aaff2134bba0ee7c0b4a509699674251a" kindref="member">find_value</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map,<sp/>V<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find_if(map.begin(),<sp/>map.end(),<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pair)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pair.second<sp/>==<sp/>value;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="280" refid="lib_co_8hpp_1ad15d46f1c6897c587cd64a3efba23585" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/><ref refid="lib_co_8hpp_1ad15d46f1c6897c587cd64a3efba23585" kindref="member">get_max_element</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map)<sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std::max_element(map.begin(),<sp/>map.end(),<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p2)<sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>p1.second<sp/>&lt;<sp/>p2.second;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>});<sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="289" refid="lib_co_8hpp_1ad4ab9f9247e670a4d9db36ca683e6270" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>V<sp/><ref refid="lib_co_8hpp_1ad4ab9f9247e670a4d9db36ca683e6270" kindref="member">get_max_value</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map)<sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::max_element(map.begin(),<sp/>map.end(),<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p2)<sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>p1.second<sp/>&lt;<sp/>p2.second;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>})-&gt;second);<sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="298" refid="lib_co_8hpp_1aecb45c04cc3a1a2386b973014e4fef50" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>K<sp/><ref refid="lib_co_8hpp_1aecb45c04cc3a1a2386b973014e4fef50" kindref="member">get_max_key</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map)<sp/></highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*std::max_element(map.begin(),<sp/>map.end(),<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p2)<sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>p1.first<sp/>&lt;<sp/>p2.first;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>})-&gt;first);<sp/></highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="307" refid="lib_co_8hpp_1a6f43d67b9c0e4bb6bf5a58906ae0d812" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/><ref refid="lib_co_8hpp_1a6f43d67b9c0e4bb6bf5a58906ae0d812" kindref="member">get_min</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map)<sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std::min_element(map.begin(),<sp/>map.end(),<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p2)<sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>p1.second<sp/>&gt;<sp/>p2.second;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>});<sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="316" refid="lib_co_8hpp_1ad1d07d5a6e5c5182a7dc644148cd6fcd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>V<sp/><ref refid="lib_co_8hpp_1ad1d07d5a6e5c5182a7dc644148cd6fcd" kindref="member">get_min_value</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map)<sp/></highlight></codeline>
<codeline lineno="317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::min_element(map.begin(),<sp/>map.end(),<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p2)<sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>p1.second<sp/>&gt;<sp/>p2.second;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>})-&gt;second);<sp/></highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="325" refid="lib_co_8hpp_1aeec208b7dcadd19e1317814c1de441d9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>K<sp/><ref refid="lib_co_8hpp_1aeec208b7dcadd19e1317814c1de441d9" kindref="member">get_min_key</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map)<sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*std::min_element(map.begin(),<sp/>map.end(),<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p2)<sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>p1.first<sp/>&gt;<sp/>p2.first;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>})-&gt;first);<sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="comment">//<sp/><sp/><sp/><sp/>TEMPLATE<sp/>HANDELING<sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="336"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__cplusplus<sp/>&gt;=<sp/>201702L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1acbcaeec4b92056a813c1a11e65d5df7d" kindref="member">T_is_number</ref><sp/>=<sp/>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="lib_co_8hpp_1acbcaeec4b92056a813c1a11e65d5df7d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1acbcaeec4b92056a813c1a11e65d5df7d" kindref="member">T_is_number</ref><sp/>=<sp/>void;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__cplusplus<sp/>&gt;=<sp/>201702L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="comment">//<sp/><sp/><sp/>SLOTS<sp/>AND<sp/>SIGNALS<sp/><sp/><sp/>//<sp/>TDB</highlight></codeline>
<codeline lineno="347"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__cplusplus<sp/>&gt;=<sp/>201402L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>ARGS&gt;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Signal</highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>Signal()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Signal(std::function&lt;void(ARGS...)&gt;<sp/>&amp;&amp;<sp/>func)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Signal(std::function&lt;void(ARGS...)&gt;<sp/>&amp;<sp/>func)<sp/>{m_signals.emplace_back(func);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(ARGS<sp/>&amp;&amp;...<sp/>args){</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>signal<sp/>:<sp/>m_signals)<sp/>signal(std::forward&lt;ARGS&gt;(args)...);}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>connect(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(ARGS...)&gt;<sp/>func)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>m_signals.push_back(func);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>std::vector&lt;std::function&lt;void(ARGS...)&gt;&gt;<sp/>m_signals;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;std::function&lt;void(ARGS...)&gt;&gt;<sp/>m_signals;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">};</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Slots</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>Slots()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>ARGS&gt;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>connect(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(ARGS...)&gt;<sp/>signal,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(ARGS...)&gt;<sp/>slot)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;std::function&lt;void(ARGS...)&gt;&gt;<sp/>m_slots;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">};</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//__cplusplus<sp/>&gt;=<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#if<sp/>(__cplusplus<sp/>&gt;=<sp/>201703L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>/**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@brief<sp/>This<sp/>class<sp/>allows<sp/>one<sp/>to<sp/>read<sp/>one<sp/>specific<sp/>format<sp/>of<sp/>csv<sp/>file<sp/>(see<sp/>details)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>The<sp/>format<sp/>of<sp/>the<sp/>data<sp/>MUST<sp/>be<sp/>the<sp/>following<sp/>:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>[[Name<sp/>of<sp/>the<sp/>columns]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>[[First<sp/>row<sp/>data]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>[[....]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>[[Last<sp/>row<sp/>data]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>Then,<sp/>declare<sp/>the<sp/>reader<sp/>in<sp/>two<sp/>steps<sp/>:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>first<sp/>construct<sp/>the<sp/>reader<sp/>using<sp/>the<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;class...<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>CSVReader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>CSVReader(std::string<sp/>const<sp/>&amp;<sp/>filename,<sp/>char<sp/>const<sp/>&amp;<sp/>delim<sp/>=<sp/>&apos;;&apos;)<sp/>{this<sp/>-&gt;<sp/>open(filename,<sp/>delim);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>bool<sp/>open(std::string<sp/>const<sp/>&amp;<sp/>filename,<sp/>char<sp/>const<sp/>&amp;<sp/>delim<sp/>=<sp/>&apos;;&apos;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>operator<sp/>bool()<sp/>const<sp/>&amp;<sp/>{return<sp/>m_ok;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>private:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>m_header;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::vector&lt;std::tuple&lt;T...&gt;&gt;<sp/>m_data;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>bool<sp/>m_ok<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;class...<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool<sp/>CSVReader&lt;T...&gt;::open(std::string<sp/>const<sp/>&amp;<sp/>filename,<sp/>char<sp/>const<sp/>&amp;<sp/>delim)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Open<sp/>file<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::ifstream<sp/>file(filename,<sp/>std::ios::in);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(!file)<sp/>{print(filename,<sp/>&quot;not<sp/>found&quot;);<sp/>return<sp/>(m_ok<sp/>=<sp/>false);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Read<sp/>names<sp/>header<sp/>:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::string<sp/>reader;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::getline(file,<sp/>reader);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_header<sp/>=<sp/>getList(reader,<sp/>delim);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>print(m_header);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Read<sp/>the<sp/>types<sp/>header<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>while<sp/>(std::getline(file,<sp/>reader))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>typeNames<sp/>=<sp/>getList(reader,<sp/>delim);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(typeNames.size()<sp/>!=<sp/>sizeof...(T))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>the<sp/>case<sp/>where<sp/>the<sp/>number<sp/>of<sp/>types<sp/>in<sp/>the<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>doesn&apos;t<sp/>match<sp/>the<sp/>number<sp/>of<sp/>template<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;Error:<sp/>Number<sp/>of<sp/>types<sp/>in<sp/>the<sp/>header<sp/>doesn&apos;t<sp/>match<sp/>the<sp/>template<sp/>arguments.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(m_ok<sp/>=<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#endif<sp/>//(__cplusplus<sp/>&gt;=<sp/>201703L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//LIB_HPP_CO</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/libCo.hpp"/>
  </compounddef>
</doxygen>
