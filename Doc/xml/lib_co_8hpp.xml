<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="lib_co_8hpp" kind="file" language="C++">
    <compoundname>libCo.hpp</compoundname>
    <includes refid="print_8hpp" local="yes">print.hpp</includes>
    <includes refid="vector__functions_8hpp" local="yes">vector_functions.hpp</includes>
    <includes refid="random_co_8hpp" local="yes">randomCo.hpp</includes>
    <includes refid="string__functions_8hpp" local="yes">string_functions.hpp</includes>
    <includes refid="files__functions_8hpp" local="yes">files_functions.hpp</includes>
    <includes refid="errors_8hpp" local="yes">errors.hpp</includes>
    <includes local="no">any</includes>
    <includes local="no">array</includes>
    <includes local="no">fstream</includes>
    <includes local="no">functional</includes>
    <includes local="no">memory</includes>
    <includes local="no">mutex</includes>
    <includes local="no">numeric</includes>
    <includes local="no">queue</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">stack</includes>
    <includes local="no">thread</includes>
    <includes local="no">typeindex</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">csignal</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">cstring</includes>
    <includes local="no">ctime</includes>
    <includedby refid="_analyse_2_counters_8hpp" local="no">lib/Analyse/Counters.hpp</includedby>
    <includedby refid="_d_s_s_d_8hpp" local="yes">lib/Analyse/DSSD.hpp</includedby>
    <includedby refid="_builder_8hpp" local="yes">lib/Classes/Builder.hpp</includedby>
    <includedby refid="_calibration_8hpp" local="yes">lib/Classes/Calibration.hpp</includedby>
    <includedby refid="_co_progress_bar_8hpp" local="yes">lib/Classes/CoProgressBar.hpp</includedby>
    <includedby refid="_classes_2_counters_8hpp" local="yes">lib/Classes/Counters.hpp</includedby>
    <includedby refid="_data_file_8hpp" local="yes">lib/Classes/DataFile.hpp</includedby>
    <includedby refid="_event_8hpp" local="yes">lib/Classes/Event.hpp</includedby>
    <includedby refid="_files_manager_8hpp" local="yes">lib/Classes/FilesManager.hpp</includedby>
    <includedby refid="_fit_8hpp" local="yes">lib/Classes/Fit.hpp</includedby>
    <includedby refid="_gate_8hpp" local="yes">lib/Classes/Gate.hpp</includedby>
    <includedby refid="_manip_8hpp" local="yes">lib/Classes/Manip.hpp</includedby>
    <includedby refid="_performances_8hpp" local="yes">lib/Classes/Performances.hpp</includedby>
    <includedby refid="_r_f___manager_8hpp" local="yes">lib/Classes/RF_Manager.hpp</includedby>
    <includedby refid="_timewalk_8hpp" local="yes">lib/Classes/Timewalk.hpp</includedby>
    <includedby refid="lib_root_8hpp" local="yes">lib/libRoot.hpp</includedby>
    <includedby refid="_faster2_root_8hpp" local="yes">lib/Modules/Faster2Root.hpp</includedby>
    <includedby refid="_run_matrixator_8hpp" local="yes">lib/Modules/RunMatrixator.hpp</includedby>
    <includedby refid="_timeshifts_8hpp" local="yes">lib/Modules/Timeshifts.hpp</includedby>
    <includedby refid="_m_t_list_8hpp" local="yes">lib/MTObjects/MTList.hpp</includedby>
    <incdepgraph>
      <node id="18">
        <label>glob.h</label>
      </node>
      <node id="23">
        <label>functional</label>
      </node>
      <node id="4">
        <label>iomanip</label>
      </node>
      <node id="27">
        <label>queue</label>
      </node>
      <node id="19">
        <label>filesystem</label>
      </node>
      <node id="20">
        <label>errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>stdexcept</label>
      </node>
      <node id="26">
        <label>numeric</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="6">
        <label>map</label>
      </node>
      <node id="1">
        <label>lib/libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>print.hpp</label>
        <link refid="print_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>fstream</label>
      </node>
      <node id="21">
        <label>any</label>
      </node>
      <node id="15">
        <label>files_functions.hpp</label>
        <link refid="files__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>random</label>
      </node>
      <node id="32">
        <label>typeinfo</label>
      </node>
      <node id="36">
        <label>ctime</label>
      </node>
      <node id="29">
        <label>stack</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="7">
        <label>vector_functions.hpp</label>
        <link refid="vector__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>array</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="9">
        <label>randomCo.hpp</label>
        <link refid="random_co_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>cstdlib</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="11">
        <label>string_functions.hpp</label>
        <link refid="string__functions_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>unordered_map</label>
      </node>
      <node id="25">
        <label>mutex</label>
      </node>
      <node id="34">
        <label>csignal</label>
      </node>
      <node id="30">
        <label>thread</label>
      </node>
      <node id="8">
        <label>algorithm</label>
      </node>
      <node id="12">
        <label>cstring</label>
      </node>
      <node id="24">
        <label>memory</label>
      </node>
      <node id="31">
        <label>typeindex</label>
      </node>
      <node id="16">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>lib/Analyse/Counters.hpp</label>
        <link refid="_analyse_2_counters_8hpp"/>
      </node>
      <node id="47">
        <label>lib/Classes/RWMat.hxx</label>
        <link refid="_r_w_mat_8hxx"/>
      </node>
      <node id="39">
        <label>lib/libRoot.hpp</label>
        <link refid="lib_root_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>lib/Modules/Faster2Histo.hpp</label>
        <link refid="_faster2_histo_8hpp"/>
      </node>
      <node id="30">
        <label>lib/Classes/RF_Manager.hpp</label>
        <link refid="_r_f___manager_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>lib/Classes/Manip.hpp</label>
        <link refid="_manip_8hpp"/>
      </node>
      <node id="22">
        <label>lib/MTObjects/MTFasterReader.hpp</label>
        <link refid="_m_t_faster_reader_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>lib/Classes/Nuball2Tree.hpp</label>
        <link refid="_nuball2_tree_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>lib/Modules/EvolutionPeaks.hpp</label>
        <link refid="_evolution_peaks_8hpp"/>
      </node>
      <node id="35">
        <label>lib/Classes/Gate.hpp</label>
        <link refid="_gate_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>lib/Analyse/DSSD.hpp</label>
        <link refid="_d_s_s_d_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>lib/MTObjects/MTFilesManager.hpp</label>
        <link refid="_m_t_files_manager_8hpp"/>
      </node>
      <node id="45">
        <label>lib/Classes/FasterReader.hpp</label>
        <link refid="_faster_reader_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>lib/Analyse/EventAnalyse.hpp</label>
        <link refid="_event_analyse_8hpp"/>
      </node>
      <node id="11">
        <label>lib/Modules/CobaltCalorimeter.hpp</label>
        <link refid="_cobalt_calorimeter_8hpp"/>
      </node>
      <node id="44">
        <label>lib/Classes/Hit.hpp</label>
        <link refid="_hit_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>lib/Classes/EventBuilder.hpp</label>
        <link refid="_event_builder_8hpp"/>
      </node>
      <node id="26">
        <label>lib/Analyse/Clovers.hpp</label>
        <link refid="_clovers_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>lib/Modules/CloverSpectra.hpp</label>
        <link refid="_clover_spectra_8hpp"/>
      </node>
      <node id="48">
        <label>lib/MTObjects/MTList.hpp</label>
        <link refid="_m_t_list_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>lib/Classes/Fit.hpp</label>
        <link refid="_fit_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>lib/Analyse/ParisCluster.hpp</label>
        <link refid="_paris_cluster_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>lib/Classes/Calibration.hpp</label>
        <link refid="_calibration_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>lib/Classes/DataFile.hpp</label>
        <link refid="_data_file_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>lib/Classes/Counters.hpp</label>
        <link refid="_classes_2_counters_8hpp"/>
      </node>
      <node id="16">
        <label>lib/Analyse/SpectraCo.hpp</label>
        <link refid="_spectra_co_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>lib/Analyse/SpectraAlignator.hpp</label>
        <link refid="_spectra_alignator_8hpp"/>
      </node>
      <node id="42">
        <label>lib/Classes/Detectors.hpp</label>
        <link refid="_detectors_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>lib/Classes/Event.hpp</label>
        <link refid="_event_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>lib/Analyse/Sorted_Event.hpp</label>
        <link refid="_sorted___event_8hpp"/>
      </node>
      <node id="46">
        <label>lib/Classes/OutputTFile.hpp</label>
        <link refid="_output_t_file_8hpp"/>
      </node>
      <node id="9">
        <label>lib/Modules/Faster2Root.hpp</label>
        <link refid="_faster2_root_8hpp"/>
      </node>
      <node id="41">
        <label>lib/Analyse/ParisPhoswitch.hpp</label>
        <link refid="_paris_phoswitch_8hpp"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>lib/Modules/RunMatrixator.hpp</label>
        <link refid="_run_matrixator_8hpp"/>
      </node>
      <node id="34">
        <label>lib/Analyse/AnalysedSpectra.hpp</label>
        <link refid="_analysed_spectra_8hpp"/>
      </node>
      <node id="20">
        <label>lib/Classes/CoProgressBar.hpp</label>
        <link refid="_co_progress_bar_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>lib/Classes/CoincBuilder.hpp</label>
        <link refid="_coinc_builder_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>lib/Classes/Builder.hpp</label>
        <link refid="_builder_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>lib/Modules/NearLine.hpp</label>
        <link refid="_near_line_8hpp"/>
      </node>
      <node id="10">
        <label>lib/Modules/Timeshifts.hpp</label>
        <link refid="_timeshifts_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>lib/Classes/Timewalk.hpp</label>
        <link refid="_timewalk_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>lib/Analyse/Paris.hpp</label>
        <link refid="_paris_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>lib/Classes/Alignator.hpp</label>
        <link refid="_alignator_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>lib/Classes/FilesManager.hpp</label>
        <link refid="_files_manager_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>lib/Modules/Calibrator.hpp</label>
        <link refid="_calibrator_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>lib/MTObjects/MTRootReader.hpp</label>
        <link refid="_m_t_root_reader_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>lib/Classes/Performances.hpp</label>
        <link refid="_performances_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_bools" prot="public">Bools</innerclass>
    <innerclass refid="class_cast_impossible" prot="public">CastImpossible</innerclass>
    <innerclass refid="structis__container" prot="public">is_container</innerclass>
    <innernamespace refid="namespace_co_bazar">CoBazar</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="lib_co_8hpp_1acbf3245277a73b810032219100559ae2" prot="public" static="no">
        <name>_GLIBCXX_USE_CXX11_ABI</name>
        <initializer>0/1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="6" column="9" bodyfile="lib/libCo.hpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lib_co_8hpp_1a54161053f7c12fa7dd7bddf119708644" prot="public" static="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>using Ints =  std::vector&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>Ints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="437" column="1" bodyfile="lib/libCo.hpp" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729" prot="public" static="no">
        <type>long long int</type>
        <definition>using longlong =  long long int</definition>
        <argsstring></argsstring>
        <name>longlong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="229" column="1" bodyfile="lib/libCo.hpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using size_t =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="231" column="1" bodyfile="lib/libCo.hpp" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1a632090884b4aa0585e747446a2683963" prot="public" static="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>using Strings =  std::vector&lt;std::string&gt;</definition>
        <argsstring></argsstring>
        <name>Strings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="436" column="1" bodyfile="lib/libCo.hpp" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1acbcaeec4b92056a813c1a11e65d5df7d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>using T_is_number =  void</definition>
        <argsstring></argsstring>
        <name>T_is_number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="596" column="1" bodyfile="lib/libCo.hpp" bodystart="596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" prot="public" static="no">
        <type>unsigned char</type>
        <definition>using uchar =  unsigned char</definition>
        <argsstring></argsstring>
        <name>uchar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="225" column="1" bodyfile="lib/libCo.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" prot="public" static="no">
        <type>unsigned int</type>
        <definition>using uint =  unsigned int</definition>
        <argsstring></argsstring>
        <name>uint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="227" column="1" bodyfile="lib/libCo.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1a92c2ca60527219506deb3325507baee0" prot="public" static="no">
        <type>unsigned long int</type>
        <definition>using ulong =  unsigned long int</definition>
        <argsstring></argsstring>
        <name>ulong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="228" column="1" bodyfile="lib/libCo.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52" prot="public" static="no">
        <type>unsigned long long int</type>
        <definition>using ulonglong =  unsigned long long int</definition>
        <argsstring></argsstring>
        <name>ulonglong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="230" column="1" bodyfile="lib/libCo.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a" prot="public" static="no">
        <type>unsigned short int</type>
        <definition>using ushort =  unsigned short int</definition>
        <argsstring></argsstring>
        <name>ushort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="226" column="1" bodyfile="lib/libCo.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="lib_co_8hpp_1af522b6efd63a7f871a8307755b1297bf" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; error_message</definition>
        <argsstring></argsstring>
        <name>error_message</name>
        <initializer>= 
{
  {&quot;DEV&quot;, &quot;ASK DEV or do it yourself, sry&quot;}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="158" column="10" bodyfile="lib/libCo.hpp" bodystart="158" bodyend="-1"/>
        <referencedby refid="struct_calibrator_1_1histograms_1a4ec16b7a4a18e1f8988684e837bd4d4e" compoundref="_calibrator_8hpp" startline="156" endline="200">Calibrator::histograms::Initialise</referencedby>
        <referencedby refid="class_faster2_root_1ad30ccf937150bbd3504ec3a354b76c8f" compoundref="_faster2_root_8hpp" startline="211" endline="265">Faster2Root::load</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lib_co_8hpp_1a1783566268ead87d4fdd8c61b6af7ede" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool bool_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>bool_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a any type into an bool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="197" column="13" bodyfile="lib/libCo.hpp" bodystart="197" bodyend="197"/>
        <referencedby refid="class_fit_1aace9236c432ee27bd3c208911b7a396d" compoundref="_fit_8hpp" startline="72" endline="72">Fit::exists</referencedby>
        <referencedby refid="class_fit_1a861a69c651863dcb3b41a788fe73f69d" compoundref="_fit_8hpp" startline="78" endline="78">Fit::peaks_found</referencedby>
        <referencedby refid="class_fit_1ad12c75a87a239da0768c9c6b869da431" compoundref="_fit_8hpp" startline="75" endline="75">Fit::too_few_counts</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1afe72de0c3fabeb8944bfd72ccdbe0d73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>char</type>
        <definition>char char_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>char_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into an char. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="201" column="13" bodyfile="lib/libCo.hpp" bodystart="201" bodyend="201"/>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="373" endline="394">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double double_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>double_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into an double. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="221" column="15" bodyfile="lib/libCo.hpp" bodystart="221" bodyend="221"/>
        <referencedby refid="class_cobalt_calorimeter_1a6d189182d62a2b03d53520834c439620" compoundref="_cobalt_calorimeter_8hpp" startline="662" endline="702">CobaltCalorimeter::Analyse</referencedby>
        <referencedby refid="class_simplex_1a4212e98efa0b1468955d32a51387f3fc" compoundref="_spectra_alignator_8hpp" startline="299" endline="318">Simplex::centroid</referencedby>
        <referencedby refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" compoundref="_spectra_co_8hpp" startline="824" endline="832">SpectraCo::createTH1D</referencedby>
        <referencedby refid="lib_root_8hpp_1acd01eadb5a544a5ceb606f61569e62f1" compoundref="lib_root_8hpp" startline="253" endline="262">getData</referencedby>
        <referencedby refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">SpectraCo::load</referencedby>
        <referencedby refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" compoundref="lib_co_8hpp" startline="470" endline="470">CoBazar::mean</referencedby>
        <referencedby refid="class_cobalt_calorimeter_1a90243bae60ba112efdb9e336eed0f667" compoundref="_cobalt_calorimeter_8hpp" startline="297" endline="303">CobaltCalorimeter::NaI_pid</referencedby>
        <referencedby refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" compoundref="_spectra_co_8hpp" startline="798" endline="806">SpectraCo::resizeBin</referencedby>
        <referencedby refid="class_r_f___manager_1ae63b656a158cd94800fbe542da54a389" compoundref="_r_f___manager_8hpp" startline="76" endline="82">RF_Manager::set</referencedby>
        <referencedby refid="class_timeshifts_1a89dbca371bce4601ee60122f544faf95" compoundref="_timeshifts_8hpp" startline="1149" endline="1185">Timeshifts::shiftTimeSpectra</referencedby>
        <referencedby refid="class_spectra_co_1a7aa1ab216355e91774cbf364a7286043" compoundref="_spectra_co_8hpp" startline="43" endline="54">SpectraCo::SpectraCo</referencedby>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="373" endline="394">TypeRootMap::TypeRootMap</referencedby>
        <referencedby refid="class_calibrator_1aad90b0e3951d4caffe11e319c7108a51" compoundref="_calibrator_8hpp" startline="960" endline="1025">Calibrator::verify</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a664347fcb6b16fdc63cd601ebcfc2c8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool find_key</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map, K const &amp;key)</argsstring>
        <name>find_key</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>K const &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Returns yes if the key is found in the map. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is only looking in the keys, not in the values </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="502" column="13" bodyfile="lib/libCo.hpp" bodystart="502" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a3b8ddb099e22657a31515fbcd8d1bf67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool find_key</definition>
        <argsstring>(std::unordered_map&lt; K, V &gt; const &amp;map, K const &amp;key)</argsstring>
        <name>find_key</name>
        <param>
          <type>std::unordered_map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>K const &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="479" column="13" bodyfile="lib/libCo.hpp" bodystart="479" bodyend="483"/>
        <referencedby refid="class_calibrator_1a00806ef12bceedaa6c16dad9b653f27f" compoundref="_calibrator_8hpp" startline="796" endline="870">Calibrator::analyse2</referencedby>
        <referencedby refid="class_timeshifts_1a0ab2718e733f94acda46780191295e3b" compoundref="_timeshifts_8hpp" startline="235" endline="239">Timeshifts::rebin</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a1a6d9eab2874e1bf6506aeb84d21506d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool find_value</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map, V const &amp;value)</argsstring>
        <name>find_value</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>V const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns yes if the value is found in the map. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is only looking in the values, not in the keys </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="521" column="13" bodyfile="lib/libCo.hpp" bodystart="521" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1aaff2134bba0ee7c0b4a509699674251a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool find_value</definition>
        <argsstring>(std::unordered_map&lt; K, V &gt; const &amp;map, V const &amp;value)</argsstring>
        <name>find_value</name>
        <param>
          <type>std::unordered_map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>V const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="486" column="13" bodyfile="lib/libCo.hpp" bodystart="486" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float float_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>float_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into a float. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="217" column="14" bodyfile="lib/libCo.hpp" bodystart="217" bodyend="217"/>
        <referencedby refid="class_calibration_1a2758f6c22e17c9c924f25690240f1b09" compoundref="_calibration_8hpp" startline="84" endline="84">Calibration::calibrate</referencedby>
        <referencedby refid="lib_root_8hpp_1a88d5549923b75ad5c6c45c83dc2a22f5" compoundref="lib_root_8hpp" startline="242" endline="251">getData</referencedby>
        <referencedby refid="class_co_progress_bar_1a79b92711e75250b41c39aeeca73a1621" compoundref="_co_progress_bar_8hpp" startline="76" endline="100">CoProgressBar&lt; T &gt;::show</referencedby>
        <referencedby refid="class_co_progress_bar_1a0f79e8a642786af052ee7f1356b4bf9d" compoundref="_co_progress_bar_8hpp" startline="57" endline="73">CoProgressBar&lt; T &gt;::showFast</referencedby>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="373" endline="394">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ad15d46f1c6897c587cd64a3efba23585" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; K, V &gt;</type>
        <definition>std::pair&lt;K,V&gt; get_max_element</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map)</argsstring>
        <name>get_max_element</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Returns the element with the maximum value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is only comparing values, not keys </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="531" column="18" bodyfile="lib/libCo.hpp" bodystart="531" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1aecb45c04cc3a1a2386b973014e4fef50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>K</type>
        <definition>K get_max_key</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map)</argsstring>
        <name>get_max_key</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Returns the maximum key stored in the map. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is only looking for values, not keys </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="553" column="10" bodyfile="lib/libCo.hpp" bodystart="553" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ad4ab9f9247e670a4d9db36ca683e6270" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V get_max_value</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map)</argsstring>
        <name>get_max_value</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Returns the maximum value stored in the map. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is only lookinf for values, not keys </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="542" column="10" bodyfile="lib/libCo.hpp" bodystart="542" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a6f43d67b9c0e4bb6bf5a58906ae0d812" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; K, V &gt;</type>
        <definition>std::pair&lt;K,V&gt; get_min</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map)</argsstring>
        <name>get_min</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="562" column="18" bodyfile="lib/libCo.hpp" bodystart="562" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1aeec208b7dcadd19e1317814c1de441d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>K</type>
        <definition>K get_min_key</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map)</argsstring>
        <name>get_min_key</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="580" column="10" bodyfile="lib/libCo.hpp" bodystart="580" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ad1d07d5a6e5c5182a7dc644148cd6fcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V get_min_value</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map)</argsstring>
        <name>get_min_value</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="571" column="10" bodyfile="lib/libCo.hpp" bodystart="571" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int int_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>int_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into an int. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="209" column="12" bodyfile="lib/libCo.hpp" bodystart="209" bodyend="209"/>
        <referencedby refid="class_cobalt_calorimeter_1a6d189182d62a2b03d53520834c439620" compoundref="_cobalt_calorimeter_8hpp" startline="662" endline="702">CobaltCalorimeter::Analyse</referencedby>
        <referencedby refid="class_timeshifts_1a608d9443a15dd669920e10dd8baee23a" compoundref="_timeshifts_8hpp" startline="893" endline="1007">Timeshifts::analyse</referencedby>
        <referencedby refid="class_spectra_co_1af580e2c735a90aff03e6c1c159ed9b17" compoundref="_spectra_co_8hpp" startline="602" endline="631">SpectraCo::calibrate</referencedby>
        <referencedby refid="class_faster2_histo_1a327a8348f79c5ecf27a58baef32b81d8" compoundref="_faster2_histo_8hpp" startline="216" endline="270">Faster2Histo::fillHisto</referencedby>
        <referencedby refid="class_spectra_co_1ac5f6afc77e5fddc79afe224dc0a1dfec" compoundref="_spectra_co_8hpp" startline="311" endline="315">SpectraCo::getBin</referencedby>
        <referencedby refid="_spectra_co_8hpp_1ab40ef30166a4d0b3f315e6b365bb96c6" compoundref="_spectra_co_8hpp" startline="870" endline="889">goingAbove</referencedby>
        <referencedby refid="_spectra_co_8hpp_1a2db236fee001966b9a9a303b1096182b" compoundref="_spectra_co_8hpp" startline="846" endline="866">goingBelow</referencedby>
        <referencedby refid="class_detectors_1a8d5c0f2d189ddda12ed3c36f13887cfd" compoundref="_detectors_8hpp" startline="295" endline="396">Detectors::makeArrays</referencedby>
        <referencedby refid="class_clovers_1a378e1b7fea24003b4b56eb855c8ae163" compoundref="_clovers_8hpp" startline="185" endline="185">Clovers::mult</referencedby>
        <referencedby refid="_clover_module_8hpp_1aae60fbf6c352f4c0682ec1c2a3f04181" compoundref="_clover_module_8hpp" startline="69" endline="80">operator&lt;&lt;</referencedby>
        <referencedby refid="class_calibrator_1aa0fff626078ec3cd2e453c5cf6681462" compoundref="_calibrator_8hpp" startline="421" endline="720">Calibrator::peakFinder</referencedby>
        <referencedby refid="namespace_co_bazar_1a24cffd290231166ac66b8c2fc0f9ee65" compoundref="lib_co_8hpp" startline="652" endline="664">CoBazar::progress_bar</referencedby>
        <referencedby refid="class_data_file_1a3acd72939856b7bad0829293ffaf157f" compoundref="_data_file_8hpp" startline="47" endline="47">DataFile&lt; Index, T &gt;::setColumns</referencedby>
        <referencedby refid="class_timeshifts_1a89dbca371bce4601ee60122f544faf95" compoundref="_timeshifts_8hpp" startline="1149" endline="1185">Timeshifts::shiftTimeSpectra</referencedby>
        <referencedby refid="class_co_progress_bar_1a79b92711e75250b41c39aeeca73a1621" compoundref="_co_progress_bar_8hpp" startline="76" endline="100">CoProgressBar&lt; T &gt;::show</referencedby>
        <referencedby refid="class_co_progress_bar_1a0f79e8a642786af052ee7f1356b4bf9d" compoundref="_co_progress_bar_8hpp" startline="57" endline="73">CoProgressBar&lt; T &gt;::showFast</referencedby>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="373" endline="394">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a55120ef582763ab1404545ce4e2845b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_int</definition>
        <argsstring>(double const &amp;x)</argsstring>
        <name>is_int</name>
        <param>
          <type>double const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Check if the given double holds an integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="269" column="6" bodyfile="lib/libCo.hpp" bodystart="269" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a0437363026eeb97df583c38d88cf68b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; K &gt;</type>
        <definition>std::vector&lt;K&gt; list_of_keys</definition>
        <argsstring>(std::map&lt; K, V &gt; const &amp;map)</argsstring>
        <name>list_of_keys</name>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Returns the list of keys in a map. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is only looking in the keys, not the values </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="511" column="20" bodyfile="lib/libCo.hpp" bodystart="511" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a695ead22582e1da41880ee67c2c61d07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>long</type>
        <definition>long long_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>long_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into an long. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="213" column="13" bodyfile="lib/libCo.hpp" bodystart="213" bodyend="213"/>
        <referencedby refid="class_files_manager_1a6d05662378bde592075237b9fa0a5168" compoundref="_files_manager_8hpp" startline="143" endline="163">FilesManager::addFolder</referencedby>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="373" endline="394">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a86b2b990fa7ee3c102db83cdecc9d129" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729" kindref="member">longlong</ref></type>
        <definition>longlong longlong_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>longlong_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into long long (longlong) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="262" column="17" bodyfile="lib/libCo.hpp" bodystart="262" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1aea023a62fe74d109a9fe9da1040708fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, Bools const &amp;bools)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type><ref refid="class_bools" kindref="compound">Bools</ref> const &amp;</type>
          <declname>bools</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="430" column="1" bodyfile="lib/libCo.hpp" bodystart="430" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a021f6cc0c03903546e6a63851944f2e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class E</type>
          </param>
          <param>
            <type><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">size_t</ref></type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, std::array&lt; E, size &gt; const &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type>std::array&lt; E, size &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="90" column="1" bodyfile="lib/libCo.hpp" bodystart="90" bodyend="94"/>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a1fc2e1be374c41706525b8d606242646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class K</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, std::map&lt; K, V &gt; const &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type>std::map&lt; K, V &gt; const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="72" column="1" bodyfile="lib/libCo.hpp" bodystart="72" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a305d037b6a2823d9d8d935b1cd5dd2c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, std::pair&lt; F, S &gt; const &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type>std::pair&lt; F, S &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="65" column="1" bodyfile="lib/libCo.hpp" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ac877d4b5e0dd4b6c1cba14fea177d092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class K</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, std::unordered_map&lt; K, V &gt; const &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; K, V &gt; const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="81" column="1" bodyfile="lib/libCo.hpp" bodystart="81" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a03b9abfe3f12543c365e9a25848ba566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class E</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, std::vector&lt; E &gt; const &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type>std::vector&lt; E &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="58" column="1" bodyfile="lib/libCo.hpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ae7a3135c43a9bae996dfeb1775184a45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, uchar const &amp;uc)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type><ref refid="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" kindref="member">uchar</ref> const &amp;</type>
          <declname>uc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="234" column="1" bodyfile="lib/libCo.hpp" bodystart="234" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a6cca31a5d1658456b486e6fa135c690b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto pauseCo</definition>
        <argsstring>()</argsstring>
        <name>pauseCo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="163" column="6" bodyfile="lib/libCo.hpp" bodystart="163" bodyend="171"/>
        <references refid="class_m_t_object_1a79d86fbc8837ba0f9a4cd1405fddef1c" compoundref="_m_t_object_8hpp" startline="246">MTObject::mutex</references>
        <referencedby refid="class_cobalt_calorimeter_1a6d189182d62a2b03d53520834c439620" compoundref="_cobalt_calorimeter_8hpp" startline="662" endline="702">CobaltCalorimeter::Analyse</referencedby>
        <referencedby refid="class_output_t_file_1a3ac1415d2e385df0c55d63a33aab63ff" compoundref="_output_t_file_8hpp" startline="9" endline="17">OutputTFile::OutputTFile</referencedby>
        <referencedby refid="lib_co_8hpp_1aad6095f67a0bcb2c5dbaf1484e98d326" compoundref="lib_co_8hpp" startline="183" endline="189">pauseDebug</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ab102b1ac90e2714661a2e757b7f6692e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto pauseCo</definition>
        <argsstring>(std::string const &amp;message)</argsstring>
        <name>pauseCo</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="173" column="6" bodyfile="lib/libCo.hpp" bodystart="173" bodyend="181"/>
        <references refid="class_m_t_object_1a79d86fbc8837ba0f9a4cd1405fddef1c" compoundref="_m_t_object_8hpp" startline="246">MTObject::mutex</references>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1aad6095f67a0bcb2c5dbaf1484e98d326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pauseDebug</definition>
        <argsstring>(std::string const &amp;message=&quot;&quot;)</argsstring>
        <name>pauseDebug</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>message</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="183" column="6" bodyfile="lib/libCo.hpp" bodystart="183" bodyend="189"/>
        <references refid="lib_co_8hpp_1a6cca31a5d1658456b486e6fa135c690b" compoundref="lib_co_8hpp" startline="163" endline="171">pauseCo</references>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1acffb7404540d3e0a654fd7929081bb70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T positive_modulo</definition>
        <argsstring>(T const &amp;dividend, T const &amp;divisor)</argsstring>
        <name>positive_modulo</name>
        <param>
          <type>T const &amp;</type>
          <declname>dividend</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>divisor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="457" column="14" bodyfile="lib/libCo.hpp" bodystart="457" bodyend="462"/>
        <referencedby refid="class_clovers_1ad047177f1403bb65359a6ad07ba4473a" compoundref="_clovers_8hpp" startline="631" endline="680">Clovers::label_to_cristal</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1af4d9dac78db5e48b5e2c5253754aaa8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>short</type>
        <definition>short short_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>short_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into an short. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="205" column="14" bodyfile="lib/libCo.hpp" bodystart="205" bodyend="205"/>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="373" endline="394">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a237f678c718382f74a68364c0fc1779a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">size_t</ref></type>
        <definition>size_t size_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>size_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into std::size_t. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="266" column="15" bodyfile="lib/libCo.hpp" bodystart="266" bodyend="266"/>
        <referencedby refid="class_m_t_counter_1a62d12e221986dda2cb740d9e8da4ee55" compoundref="_m_t_counter_8hpp" startline="34" endline="34">MTCounter::add</referencedby>
        <referencedby refid="class_m_t_counter_1ad0851e43d22e6ffe02b1ecc66e4b793d" compoundref="_m_t_counter_8hpp" startline="37" endline="37">MTCounter::operator+=</referencedby>
        <referencedby refid="class_m_t_counter_1a833a2a1bedd059ba424d8150a418c351" compoundref="_m_t_counter_8hpp" startline="40" endline="40">MTCounter::operator=</referencedby>
        <referencedby refid="class_simplex_1ade818ac404caab90542e80143cbc63c0" compoundref="_spectra_alignator_8hpp" startline="296" endline="296">Simplex::setVertice</referencedby>
        <referencedby refid="class_event_1aadb0c0dcbb31718e69358e9c99a5b633" compoundref="_event_8hpp" startline="157" endline="157">Event::size</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a860090f450f9d024cd3e5cd721101418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T string_to</definition>
        <argsstring>(std::string const &amp;string)</argsstring>
        <name>string_to</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="287" column="3" bodyfile="lib/libCo.hpp" bodystart="287" bodyend="298"/>
        <references refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" compoundref="string__functions_8hpp" startline="240" endline="245">concatenate</references>
        <references refid="print_8hpp_1a90460287027986fbf0c9a1ef8e5a1bce" compoundref="print_8hpp" startline="159" endline="162">type_of</references>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void throw_error</definition>
        <argsstring>(std::string const &amp;message)</argsstring>
        <name>throw_error</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="156" column="6" bodyfile="lib/libCo.hpp" bodystart="156" bodyend="156"/>
        <references refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" compoundref="string__functions_8hpp" startline="240" endline="245">concatenate</references>
        <references refid="print_8hpp_1a8d23feea868a983c8c2b661e1e16972f" compoundref="print_8hpp" startline="22">RED</references>
        <references refid="print_8hpp_1ab702106cf3b3e96750b6845ded4e0299" compoundref="print_8hpp" startline="19">RESET</references>
        <referencedby refid="class_spectra_co_1af74c78334a7be1cc421779f9e4b30a0b" compoundref="_spectra_co_8hpp" startline="637" endline="642">SpectraCo::calibrateAndScale</referencedby>
        <referencedby refid="class_simplex_1a4212e98efa0b1468955d32a51387f3fc" compoundref="_spectra_alignator_8hpp" startline="299" endline="318">Simplex::centroid</referencedby>
        <referencedby refid="class_gates__t_1a3a7b9f42116c357f29cf1d24d46e1405" compoundref="_gate_8hpp" startline="75" endline="78">Gates_t&lt; T &gt;::check</referencedby>
        <referencedby refid="class_faster2_root_1a2ba93a4814723b6103dc25a701f3dc89" compoundref="_faster2_root_8hpp" startline="309" endline="403">Faster2Root::convertFile</referencedby>
        <referencedby refid="class_vertice_1ae4155cad8d004c954916882157c9375f" compoundref="_spectra_alignator_8hpp" startline="56" endline="62">Vertice::copy</referencedby>
        <referencedby refid="lib_root_8hpp_1ae6fdfc9173e2ab5eb99b26909696c5bf" compoundref="lib_root_8hpp" startline="1162" endline="1172">create_map_of</referencedby>
        <referencedby refid="class_run_matrixator_1a1f6ba04bc894d68a6d72ccedf8367ad4" compoundref="_run_matrixator_8hpp" startline="59" endline="71">RunMatrixator::dontMatrixate</referencedby>
        <referencedby refid="class_clover_spectra_1ae46c582451bada5b2b8957ee44b92e35" compoundref="_clover_spectra_8hpp" startline="65" endline="77">CloverSpectra::fillHisto</referencedby>
        <referencedby refid="class_run_matrixator_1a7254994e33c3a8a124a7fd4d67158a52" compoundref="_run_matrixator_8hpp" startline="152" endline="239">RunMatrixator::Initialise</referencedby>
        <referencedby refid="class_clover_spectra_1a84dbd5cac3977a0082ab763d51f938d7" compoundref="_clover_spectra_8hpp" startline="114" endline="145">CloverSpectra::Initialise</referencedby>
        <referencedby refid="class_calibration_1a660694835089e0020f014c65f3d6f7e7" compoundref="_calibration_8hpp" startline="283" endline="327">Calibration::load</referencedby>
        <referencedby refid="class_faster2_root_1ad30ccf937150bbd3504ec3a354b76c8f" compoundref="_faster2_root_8hpp" startline="211" endline="265">Faster2Root::load</referencedby>
        <referencedby refid="class_faster2_histo_1a72f8004ae550c02db09791b810c0252d" compoundref="_faster2_histo_8hpp" startline="146" endline="187">Faster2Histo::load</referencedby>
        <referencedby refid="class_paris_bidim_angles_1a904829a187c50059dda2d439ef0d6db1" compoundref="_paris_bidim_angles_8hpp" startline="98" endline="122">ParisBidimAngles::load</referencedby>
        <referencedby refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" compoundref="_spectra_co_8hpp" startline="475" endline="496">SpectraCo::load</referencedby>
        <referencedby refid="class_calibrator_1a14ec7e7a2a8f36d31e474de1a67df7ec" compoundref="_calibrator_8hpp" startline="249" endline="272">Calibrator::loadFitInfo</referencedby>
        <referencedby refid="_detectors_8hpp_1ae343a2d2d22d862f6ac7ae10ba1b3d41" compoundref="_detectors_8hpp" startline="431" endline="453">loadFormattedTH1F</referencedby>
        <referencedby refid="class_evolution_peaks_1aa6877d718198437381b3516d0593e2c6" compoundref="_evolution_peaks_8hpp" startline="74" endline="100">EvolutionPeaks::loadParameters</referencedby>
        <referencedby refid="class_calibrator_1a0d2a41f02b2c16409b58ce3ee4183792" compoundref="_calibrator_8hpp" startline="290" endline="309">Calibrator::loadRootHisto</referencedby>
        <referencedby refid="class_detectors_1ae5e6ff02bf3d79da3f034f7404e0677c" compoundref="_detectors_8hpp" startline="121" endline="125">Detectors::nbOfType</referencedby>
        <referencedby refid="class_near_line_1adf3bc13e36dd295fc5668f08e81eaf32" compoundref="_near_line_8hpp" startline="70" endline="73">NearLine::NearLine</referencedby>
        <referencedby refid="class_minimisator_1a3c467eeb96f716414dbfb6f2348c6340" compoundref="_spectra_alignator_8hpp" startline="460" endline="631">Minimisator::nelderMead</referencedby>
        <referencedby refid="class_vertice_1af7bdce52a3f6189f94f05a80127f949d" compoundref="_spectra_alignator_8hpp" startline="157" endline="165">Vertice::operator*</referencedby>
        <referencedby refid="class_vertice_1ae6bf8b5aab5ad865f4fdd9a9b91f7e92" compoundref="_spectra_alignator_8hpp" startline="137" endline="143">Vertice::operator+</referencedby>
        <referencedby refid="class_vertice_1aba263387b931496c5937f8645ded93ae" compoundref="_spectra_alignator_8hpp" startline="145" endline="154">Vertice::operator-</referencedby>
        <referencedby refid="class_peaks_calibrator_1a6d799246268d62e0e7097594ea82050b" compoundref="_analysed_spectra_8hpp" startline="338" endline="359">PeaksCalibrator::PeaksCalibrator</referencedby>
        <referencedby refid="namespace_co_analyse_1a53744e2ddfba6a4a188ada9ed1bc6272" compoundref="lib_root_8hpp" startline="732" endline="739">CoAnalyse::projectX</referencedby>
        <referencedby refid="namespace_co_analyse_1abecf48371e430ad0cc8dfb063e6d951d" compoundref="lib_root_8hpp" startline="604" endline="611">CoAnalyse::projectY</referencedby>
        <referencedby refid="class_timeshifts_1a0ab2718e733f94acda46780191295e3b" compoundref="_timeshifts_8hpp" startline="235" endline="239">Timeshifts::rebin</referencedby>
        <referencedby refid="class_paris_1a21f73f502db25f43f31426c4ea88f419" compoundref="_paris_8hpp" startline="318" endline="373">Paris::rotate</referencedby>
        <referencedby refid="class_evolution_peaks_1a5645dd6726d0af38e8a4d849da6a8d18" compoundref="_evolution_peaks_8hpp" startline="102" endline="345">EvolutionPeaks::run</referencedby>
        <referencedby refid="class_run_matrixator_1aa6d13b08060fef07b50d7ab6b35be0d6" compoundref="_run_matrixator_8hpp" startline="122" endline="150">RunMatrixator::run</referencedby>
        <referencedby refid="class_data_file_1a20ccbf2ff940a527452b137a07ff1010" compoundref="_data_file_8hpp" startline="76" endline="81">DataFile&lt; Index, T &gt;::setColumn</referencedby>
        <referencedby refid="struct_calibrator_1_1histograms_1a5c30eec7418701ef02ce4faf97fef690" compoundref="_calibrator_8hpp" startline="202" endline="219">Calibrator::histograms::setTypeBins</referencedby>
        <referencedby refid="namespace_co_analyse_1ad13b7eeaa3d7d9a30cdf04a8b0d17088" compoundref="lib_root_8hpp" startline="724" endline="729">CoAnalyse::setX</referencedby>
        <referencedby refid="namespace_co_analyse_1ac1aa3fcfcc46318e4f0d6f42510471a0" compoundref="lib_root_8hpp" startline="769" endline="774">CoAnalyse::setY</referencedby>
        <referencedby refid="class_co_progress_bar_1a79b92711e75250b41c39aeeca73a1621" compoundref="_co_progress_bar_8hpp" startline="76" endline="100">CoProgressBar&lt; T &gt;::show</referencedby>
        <referencedby refid="class_co_progress_bar_1a0f79e8a642786af052ee7f1356b4bf9d" compoundref="_co_progress_bar_8hpp" startline="57" endline="73">CoProgressBar&lt; T &gt;::showFast</referencedby>
        <referencedby refid="class_simplex_1abd6e34ab7ace7cf33b13fa0dab907a2a" compoundref="_spectra_alignator_8hpp" startline="245" endline="252">Simplex::Simplex</referencedby>
        <referencedby refid="class_cobalt_calorimeter_1a526f29997f55b17d33be2b87b30c7a76" compoundref="_cobalt_calorimeter_8hpp" startline="704" endline="811">CobaltCalorimeter::write</referencedby>
        <referencedby refid="class_run_matrixator_1aeb9889ba763858dfb65e05c3a7bb142e" compoundref="_run_matrixator_8hpp" startline="501" endline="550">RunMatrixator::Write</referencedby>
        <referencedby refid="class_clover_spectra_1aea0814fac7c993ad4813804415f3ffab" compoundref="_clover_spectra_8hpp" startline="79" endline="95">CloverSpectra::writeHisto</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1adaf1adad3b86299b92ed406d55b1fa77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string time_string</definition>
        <argsstring>()</argsstring>
        <name>time_string</name>
        <briefdescription>
<para>Returns a string in the format mm_hh_dd_mm_yy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="101" column="13" bodyfile="lib/libCo.hpp" bodystart="101" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1abd9cea94f34b8212279bfabe71df818b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string time_string_inverse</definition>
        <argsstring>()</argsstring>
        <name>time_string_inverse</name>
        <briefdescription>
<para>Returns a string in the format yy_mm_dd_hh_mm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="129" column="13" bodyfile="lib/libCo.hpp" bodystart="129" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ade77d1f37b1311b3f80ce429a33fd226" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" kindref="member">uchar</ref></type>
        <definition>uchar uchar_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>uchar_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into unsigned char (uchar) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="242" column="14" bodyfile="lib/libCo.hpp" bodystart="242" bodyend="242"/>
        <referencedby refid="class_counters_1a1f2723ecaf63399d985ce2efd87aab6f" compoundref="_classes_2_counters_8hpp" startline="108" endline="125">Counters::clover_analyse</referencedby>
        <referencedby refid="class_counters_1a438d855f700f802261df045b1f52723e" compoundref="_analyse_2_counters_8hpp" startline="63" endline="121">Counters::count_event</referencedby>
        <referencedby refid="class_d_s_s_d_1a2c9fd5c55f23797bdcf66933d7662cb1" compoundref="_d_s_s_d_8hpp" startline="56" endline="78">DSSD::InitialiseArrays</referencedby>
        <referencedby refid="class_clovers_1ad047177f1403bb65359a6ad07ba4473a" compoundref="_clovers_8hpp" startline="631" endline="680">Clovers::label_to_cristal</referencedby>
        <referencedby refid="class_detectors_1a8d5c0f2d189ddda12ed3c36f13887cfd" compoundref="_detectors_8hpp" startline="295" endline="396">Detectors::makeArrays</referencedby>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="373" endline="394">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ad4f41fb682fba59b9adc6142282db5a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" kindref="member">uint</ref></type>
        <definition>uint uint_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>uint_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into unsigned int (uint) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="250" column="14" bodyfile="lib/libCo.hpp" bodystart="250" bodyend="250"/>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="373" endline="394">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ac939b8397e82173edff13b3d00dc9d09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1a92c2ca60527219506deb3325507baee0" kindref="member">ulong</ref></type>
        <definition>ulong ulong_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>ulong_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into unsigned long (ulong) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="254" column="14" bodyfile="lib/libCo.hpp" bodystart="254" bodyend="254"/>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="373" endline="394">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1a6064e403b0588c46cce0f1cb82471acf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52" kindref="member">ulonglong</ref></type>
        <definition>ulonglong ulonglong_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>ulonglong_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into unsigned long long (ulonglong) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="258" column="18" bodyfile="lib/libCo.hpp" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="lib_co_8hpp_1ab2f8f9033c2742c4f5ac6d3cce6caf9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a" kindref="member">ushort</ref></type>
        <definition>ushort ushort_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>ushort_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into unsigned short (ushort) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libCo.hpp" line="246" column="15" bodyfile="lib/libCo.hpp" bodystart="246" bodyend="246"/>
        <referencedby refid="class_evolution_peaks_1a5645dd6726d0af38e8a4d849da6a8d18" compoundref="_evolution_peaks_8hpp" startline="102" endline="345">EvolutionPeaks::run</referencedby>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="373" endline="394">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>LIBCO_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBCO_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>in<sp/>my<sp/>PC<sp/>to<sp/>have<sp/>better<sp/>looking<sp/>std<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_GLIBCXX_USE_CXX11_ABI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="lib_co_8hpp_1acbf3245277a73b810032219100559ae2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_GLIBCXX_USE_CXX11_ABI<sp/>0/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//_GLIBCXX_USE_CXX11_ABI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>to<sp/>generate<sp/>better<sp/>debug<sp/>symbols<sp/>for<sp/>drd<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUGVALGRIND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;valgrind/drd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(addr)<sp/>ANNOTATE_HAPPENS_BEFORE(addr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(addr)<sp/><sp/>ANNOTATE_HAPPENS_AFTER(addr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//DEBUGVALGRIND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>**********<sp/>Corentin<sp/>Lib<sp/>************<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="print_8hpp" kindref="compound">print.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vector__functions_8hpp" kindref="compound">vector_functions.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="random_co_8hpp" kindref="compound">randomCo.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string__functions_8hpp" kindref="compound">string_functions.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="files__functions_8hpp" kindref="compound">files_functions.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="errors_8hpp" kindref="compound">errors.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>***********<sp/>STD<sp/>includes<sp/>*********<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;any&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stack&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeindex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>**********<sp/>C<sp/>includes<sp/>************<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;csignal&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">//<sp/>Some<sp/>specialised<sp/>print<sp/>//</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Useful<sp/>overload<sp/>of<sp/>operator&lt;&lt;<sp/>into<sp/>a<sp/>std::cout<sp/>stream<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E&gt;</highlight></codeline>
<codeline lineno="58" refid="lib_co_8hpp_1a03b9abfe3f12543c365e9a25848ba566" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="lib_co_8hpp_1a03b9abfe3f12543c365e9a25848ba566" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/>std::vector&lt;E&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e<sp/>:<sp/>v)<sp/>cout<sp/>&lt;&lt;<sp/>e<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;<sp/></highlight></codeline>
<codeline lineno="65" refid="lib_co_8hpp_1a305d037b6a2823d9d8d935b1cd5dd2c0" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="lib_co_8hpp_1a03b9abfe3f12543c365e9a25848ba566" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/>std::pair&lt;F,S&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>p)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p.second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="72" refid="lib_co_8hpp_1a1fc2e1be374c41706525b8d606242646" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="lib_co_8hpp_1a03b9abfe3f12543c365e9a25848ba566" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/>std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>m)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>pair<sp/>:<sp/>m)<sp/>cout<sp/>&lt;&lt;<sp/>pair;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="81" refid="lib_co_8hpp_1ac877d4b5e0dd4b6c1cba14fea177d092" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="lib_co_8hpp_1a03b9abfe3f12543c365e9a25848ba566" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/>std::unordered_map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>m)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>pair<sp/>:<sp/>m)<sp/>cout<sp/>&lt;&lt;<sp/>pair;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size&gt;<sp/></highlight></codeline>
<codeline lineno="90" refid="lib_co_8hpp_1a021f6cc0c03903546e6a63851944f2e8" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="lib_co_8hpp_1a03b9abfe3f12543c365e9a25848ba566" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/>std::array&lt;E,size&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;size;<sp/>i++)<sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(a[i]);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="comment">//<sp/><sp/><sp/>UTILS<sp/><sp/>//</highlight></codeline>
<codeline lineno="99"><highlight class="comment"></highlight></codeline>
<codeline lineno="101" refid="lib_co_8hpp_1adaf1adad3b86299b92ed406d55b1fa77" refkind="member"><highlight class="normal">std::string<sp/><ref refid="lib_co_8hpp_1adaf1adad3b86299b92ed406d55b1fa77" kindref="member">time_string</ref>()</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>std::time_t<sp/>currentTime<sp/>=<sp/>std::time(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>std::tm*<sp/>timeinfo<sp/>=<sp/>std::localtime(&amp;currentTime);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeinfo<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>hours,<sp/>day,<sp/>and<sp/>year</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min<sp/><sp/>=<sp/>timeinfo-&gt;tm_min;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hour<sp/>=<sp/>timeinfo-&gt;tm_hour;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>day<sp/><sp/>=<sp/>timeinfo-&gt;tm_mday;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mon<sp/><sp/>=<sp/>timeinfo-&gt;tm_mon;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>year<sp/>=<sp/>timeinfo-&gt;tm_year<sp/>%<sp/>100;<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>last<sp/>two<sp/>digits<sp/>of<sp/>the<sp/>year</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>time<sp/>in<sp/>the<sp/>desired<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>min<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>hour<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>day<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>mon<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>year;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>current<sp/>time.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="lib_co_8hpp_1abd9cea94f34b8212279bfabe71df818b" refkind="member"><highlight class="normal">std::string<sp/><ref refid="lib_co_8hpp_1abd9cea94f34b8212279bfabe71df818b" kindref="member">time_string_inverse</ref>()</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>std::time_t<sp/>currentTime<sp/>=<sp/>std::time(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>std::tm*<sp/>timeinfo<sp/>=<sp/>std::localtime(&amp;currentTime);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeinfo<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>hours,<sp/>day,<sp/>and<sp/>year</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min<sp/><sp/>=<sp/>timeinfo-&gt;tm_min;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hour<sp/>=<sp/>timeinfo-&gt;tm_hour;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>day<sp/><sp/>=<sp/>timeinfo-&gt;tm_mday;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mon<sp/><sp/>=<sp/>timeinfo-&gt;tm_mon;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>year<sp/>=<sp/>timeinfo-&gt;tm_year<sp/>%<sp/>100;<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>last<sp/>two<sp/>digits<sp/>of<sp/>the<sp/>year</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>time<sp/>in<sp/>the<sp/>desired<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>year<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>mon<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>day<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>hour<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>min;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>current<sp/>time.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>message)<sp/>{</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(<ref refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" kindref="member">concatenate</ref>(<ref refid="print_8hpp_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>,<sp/>message,<sp/><ref refid="print_8hpp_1ab702106cf3b3e96750b6845ded4e0299" kindref="member">RESET</ref>));}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="lib_co_8hpp_1af522b6efd63a7f871a8307755b1297bf" refkind="member"><highlight class="normal">std::map&lt;std::string,<sp/>std::string&gt;<sp/><ref refid="lib_co_8hpp_1af522b6efd63a7f871a8307755b1297bf" kindref="member">error_message</ref><sp/>=<sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DEV&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ASK<sp/>DEV<sp/>or<sp/>do<sp/>it<sp/>yourself,<sp/>sry&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal">};</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="lib_co_8hpp_1a6cca31a5d1658456b486e6fa135c690b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a6cca31a5d1658456b486e6fa135c690b" kindref="member">pauseCo</ref>()<sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><ref refid="_m_t_object_8hpp_1a225f8aadf270f4a69ad323e64b7eaa33" kindref="member">lock_mutex</ref><sp/>lock(<ref refid="class_m_t_object_1a79d86fbc8837ba0f9a4cd1405fddef1c" kindref="member">MTObject::mutex</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">//MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Programe<sp/>paused,<sp/>please<sp/>press<sp/>enter&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::cin.get();</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="lib_co_8hpp_1ab102b1ac90e2714661a2e757b7f6692e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a6cca31a5d1658456b486e6fa135c690b" kindref="member">pauseCo</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>message)<sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="_m_t_object_8hpp_1a225f8aadf270f4a69ad323e64b7eaa33" kindref="member">lock_mutex</ref><sp/>lock(<ref refid="class_m_t_object_1a79d86fbc8837ba0f9a4cd1405fddef1c" kindref="member">MTObject::mutex</ref>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">//MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>message<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::cin.get();</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="lib_co_8hpp_1aad6095f67a0bcb2c5dbaf1484e98d326" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1aad6095f67a0bcb2c5dbaf1484e98d326" kindref="member">pauseDebug</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/><ref refid="lib_co_8hpp_1a6cca31a5d1658456b486e6fa135c690b" kindref="member">pauseCo</ref>();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a6cca31a5d1658456b486e6fa135c690b" kindref="member">pauseCo</ref>(message);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="comment">//<sp/><sp/><sp/><sp/>Types<sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="194"><highlight class="comment"></highlight></codeline>
<codeline lineno="196"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="197" refid="lib_co_8hpp_1a1783566268ead87d4fdd8c61b6af7ede" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a1783566268ead87d4fdd8c61b6af7ede" kindref="member">bool_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="201" refid="lib_co_8hpp_1afe72de0c3fabeb8944bfd72ccdbe0d73" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1afe72de0c3fabeb8944bfd72ccdbe0d73" kindref="member">char_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="205" refid="lib_co_8hpp_1af4d9dac78db5e48b5e2c5253754aaa8c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1af4d9dac78db5e48b5e2c5253754aaa8c" kindref="member">short_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">short</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="209" refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="213" refid="lib_co_8hpp_1a695ead22582e1da41880ee67c2c61d07" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a695ead22582e1da41880ee67c2c61d07" kindref="member">long_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="217" refid="lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d" kindref="member">float_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="221" refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" kindref="member">double_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>short<sp/>names<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" kindref="member">uchar</ref><sp/><sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char<sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="226" refid="lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a" kindref="member">ushort</ref><sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>int<sp/><sp/>;</highlight></codeline>
<codeline lineno="227" refid="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" kindref="member">uint</ref><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="228" refid="lib_co_8hpp_1a92c2ca60527219506deb3325507baee0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a92c2ca60527219506deb3325507baee0" kindref="member">ulong</ref><sp/><sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>int<sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="229" refid="lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729" kindref="member">longlong</ref><sp/><sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>int<sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="230" refid="lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52" kindref="member">ulonglong</ref><sp/><sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>int<sp/>;</highlight></codeline>
<codeline lineno="231" refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>=<sp/><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>specialization<sp/>for<sp/>uchar<sp/>:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="lib_co_8hpp_1ae7a3135c43a9bae996dfeb1775184a45" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="lib_co_8hpp_1a03b9abfe3f12543c365e9a25848ba566" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/><ref refid="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" kindref="member">uchar</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>uc)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(uc);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="242" refid="lib_co_8hpp_1ade77d1f37b1311b3f80ce429a33fd226" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" kindref="member">uchar</ref><sp/><ref refid="lib_co_8hpp_1ade77d1f37b1311b3f80ce429a33fd226" kindref="member">uchar_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="lib_co_8hpp_1ae48ac2456c5ad6c956fef86e7bef3a21" kindref="member">uchar</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="246" refid="lib_co_8hpp_1ab2f8f9033c2742c4f5ac6d3cce6caf9a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a" kindref="member">ushort</ref><sp/><ref refid="lib_co_8hpp_1ab2f8f9033c2742c4f5ac6d3cce6caf9a" kindref="member">ushort_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="lib_co_8hpp_1ad29aff8b0f7fde4ef0291331012e596a" kindref="member">ushort</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="250" refid="lib_co_8hpp_1ad4f41fb682fba59b9adc6142282db5a2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" kindref="member">uint</ref><sp/><sp/><ref refid="lib_co_8hpp_1ad4f41fb682fba59b9adc6142282db5a2" kindref="member">uint_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" kindref="member">uint</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="254" refid="lib_co_8hpp_1ac939b8397e82173edff13b3d00dc9d09" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a92c2ca60527219506deb3325507baee0" kindref="member">ulong</ref><sp/><ref refid="lib_co_8hpp_1ac939b8397e82173edff13b3d00dc9d09" kindref="member">ulong_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="lib_co_8hpp_1a92c2ca60527219506deb3325507baee0" kindref="member">ulong</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="258" refid="lib_co_8hpp_1a6064e403b0588c46cce0f1cb82471acf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52" kindref="member">ulonglong</ref><sp/><ref refid="lib_co_8hpp_1a6064e403b0588c46cce0f1cb82471acf" kindref="member">ulonglong_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="lib_co_8hpp_1a36061a3a05c4802ea9393df730a50d52" kindref="member">ulonglong</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="262" refid="lib_co_8hpp_1a86b2b990fa7ee3c102db83cdecc9d129" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729" kindref="member">longlong</ref><sp/><ref refid="lib_co_8hpp_1a86b2b990fa7ee3c102db83cdecc9d129" kindref="member">longlong_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="lib_co_8hpp_1a38d84fea74b6f31e86b2e282bb232729" kindref="member">longlong</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="266" refid="lib_co_8hpp_1a237f678c718382f74a68364c0fc1779a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a237f678c718382f74a68364c0fc1779a" kindref="member">size_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="lib_co_8hpp_1a55120ef582763ab1404545ce4e2845b9" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a55120ef582763ab1404545ce4e2845b9" kindref="member">is_int</ref><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>x)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::trunc(x)<sp/>==<sp/>x;}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="comment">//<sp/>General<sp/>converters<sp/>//</highlight></codeline>
<codeline lineno="274"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="class_cast_impossible" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_cast_impossible" kindref="compound">CastImpossible</ref><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="277" refid="class_cast_impossible_1a67c544643e099ca9dfd9a3c9e61f9be6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_cast_impossible_1a67c544643e099ca9dfd9a3c9e61f9be6" kindref="member">CastImpossible</ref>()<sp/>noexcept<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="278" refid="class_cast_impossible_1a5d03d9db261611b42df4686671d3cc0a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_cast_impossible" kindref="compound">CastImpossible</ref>(std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>const<sp/>&amp;<sp/>message)<sp/>noexcept<sp/>:<sp/><ref refid="class_cast_impossible_1a0e288e95fc4c0f3796136f8aca974654" kindref="member">m_message</ref><sp/>(message)<sp/>{}</highlight></codeline>
<codeline lineno="279" refid="class_cast_impossible_1a1a1947bbb68b6388cfb03e91b9ccb5b0" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_cast_impossible_1a1a1947bbb68b6388cfb03e91b9ccb5b0" kindref="member">what</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_cast_impossible_1a0e288e95fc4c0f3796136f8aca974654" kindref="member">m_message</ref>;}</highlight></codeline>
<codeline lineno="280" refid="class_cast_impossible_1a69b6f565a53cefeee300240cb0dd4bb0" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_cast_impossible_1a69b6f565a53cefeee300240cb0dd4bb0" kindref="member">what</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_cast_impossible_1a0e288e95fc4c0f3796136f8aca974654" kindref="member">m_message</ref>;}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="283" refid="class_cast_impossible_1a0e288e95fc4c0f3796136f8aca974654" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_cast_impossible_1a0e288e95fc4c0f3796136f8aca974654" kindref="member">m_message</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal">};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="287" refid="lib_co_8hpp_1a860090f450f9d024cd3e5cd721101418" refkind="member"><highlight class="normal">T<sp/><ref refid="lib_co_8hpp_1a860090f450f9d024cd3e5cd721101418" kindref="member">string_to</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>T<sp/>t;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>std::istringstream<sp/>iss(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(iss&gt;&gt;t)<sp/>||<sp/>!iss.eof())</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_cast_impossible" kindref="compound">CastImpossible</ref>(<ref refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" kindref="member">concatenate</ref>(</highlight><highlight class="stringliteral">&quot;In<sp/>string_to&lt;T&gt;(std::string<sp/>const<sp/>&amp;<sp/>string)<sp/>with<sp/>string<sp/>=<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>the<sp/>string<sp/>can&apos;t<sp/>be<sp/>casted<sp/>to<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="print_8hpp_1a90460287027986fbf0c9a1ef8e5a1bce" kindref="member">type_of</ref>(t)));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="comment">//<sp/>Containers<sp/>//</highlight></codeline>
<codeline lineno="303"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304" refid="class_bools" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_bools" kindref="compound">Bools</ref><sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="307" refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308" refid="class_bools_1a445a24b6837a4387946571ea76d95886" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="309" refid="class_bools_1ab45766dee8407e056a0931ba20250c8f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_bools_1ab45766dee8407e056a0931ba20250c8f" kindref="member">m_reserved_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="312" refid="class_bools_1a0b275201a317d46df585387afc9536e4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_bools_1a0b275201a317d46df585387afc9536e4" kindref="member">Bools</ref>()<sp/>noexcept<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="313" refid="class_bools_1ade94b1390a513128ea7880eef711f4d6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_bools" kindref="compound">Bools</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>const<sp/>&amp;<sp/>value<sp/>=<sp/>false)<sp/>noexcept<sp/>:<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>(<ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>),<sp/><ref refid="class_bools_1ab45766dee8407e056a0931ba20250c8f" kindref="member">m_reserved_size</ref>(2*<ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[<ref refid="class_bools_1ab45766dee8407e056a0931ba20250c8f" kindref="member">m_reserved_size</ref>];</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>,<sp/>value<sp/>?<sp/>1<sp/>:<sp/>0,<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="class_bools_1a9c41e4c478f655537f0ab5450b1984aa" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_bools_1a9c41e4c478f655537f0ab5450b1984aa" kindref="member">Bools</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_bools" kindref="compound">Bools</ref>&amp;<sp/>other)<sp/>noexcept<sp/>:<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>(other.m_size),<sp/><ref refid="class_bools_1ab45766dee8407e056a0931ba20250c8f" kindref="member">m_reserved_size</ref>(2*<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>];</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>,<sp/>other.m_data,<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="class_bools_1a320db9791cebe780ebd6486236f820fd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_bools_1a320db9791cebe780ebd6486236f820fd" kindref="member">Bools</ref>(<ref refid="class_bools" kindref="compound">Bools</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>:<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>(other.m_data),<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>(other.m_size),<sp/><ref refid="class_bools_1ab45766dee8407e056a0931ba20250c8f" kindref="member">m_reserved_size</ref>(other.m_reserved_size)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Re-initialise<sp/>the<sp/>original<sp/>data<sp/>in<sp/>case<sp/>it<sp/>is<sp/>re-used<sp/>later<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>other.m_data<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>other.m_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="class_bools_1af2928ff7c4fa8bc4cd8f169220a30476" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_bools" kindref="compound">Bools</ref>&amp;<sp/><ref refid="class_bools_1af2928ff7c4fa8bc4cd8f169220a30476" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_bools" kindref="compound">Bools</ref>&amp;<sp/>other)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>=<sp/>other.m_size;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1ab45766dee8407e056a0931ba20250c8f" kindref="member">m_reserved_size</ref><sp/>=<sp/>other.m_reserved_size;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[<ref refid="class_bools_1ab45766dee8407e056a0931ba20250c8f" kindref="member">m_reserved_size</ref>];</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>,<sp/>other.m_data,<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="class_bools_1a28a402a253cb7cef0e58445c126554ce" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_bools" kindref="compound">Bools</ref>&amp;<sp/><ref refid="class_bools_1a28a402a253cb7cef0e58445c126554ce" kindref="member">operator=</ref>(<ref refid="class_bools" kindref="compound">Bools</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/>other.m_data;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>=<sp/>other.m_size;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other.m_data<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other.m_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="class_bools_1a1a4ce70103132699288bfbf5e5ce682a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a1a4ce70103132699288bfbf5e5ce682a" kindref="member">push_back</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_bools_1a628b60a5f89363e2b59de0bd58267ddc" kindref="member">resize</ref>(<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>+1);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>[<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>++]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="class_bools_1a0908affb9f95fbbcd517316c7c81bf53" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_bools_1a0908affb9f95fbbcd517316c7c81bf53" kindref="member">~Bools</ref>()<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="class_bools_1afbd25d68b6e6fb096b95f56b665cf1b7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="class_bools_1afbd25d68b6e6fb096b95f56b665cf1b7" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>index)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>[index];</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369" refid="class_bools_1a0d18d7e936b556355a0ecc844a0daad3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_bools_1a0d18d7e936b556355a0ecc844a0daad3" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>[index];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="class_bools_1a628b60a5f89363e2b59de0bd58267ddc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a628b60a5f89363e2b59de0bd58267ddc" kindref="member">resize</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>==<sp/><ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>&gt;<ref refid="class_bools_1ab45766dee8407e056a0931ba20250c8f" kindref="member">m_reserved_size</ref>)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[(<ref refid="class_bools_1ab45766dee8407e056a0931ba20250c8f" kindref="member">m_reserved_size</ref><sp/>=<sp/><ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>*2)];</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>)<sp/>std::memcpy(temp,<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>,<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>&lt;<ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>;++<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>)<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>[<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="class_bools_1ace2e721f4e079f0e36a65a1128db8d1a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_bools_1ace2e721f4e079f0e36a65a1128db8d1a" kindref="member">resize</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>&gt;<ref refid="class_bools_1ab45766dee8407e056a0931ba20250c8f" kindref="member">m_reserved_size</ref>)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[(<ref refid="class_bools_1ab45766dee8407e056a0931ba20250c8f" kindref="member">m_reserved_size</ref><sp/>=<sp/><ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>*2)];</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref><sp/>=<sp/>0;<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>&lt;<ref refid="class_bools_1ad4d74f6e2266b271a8bd060ce6d0e448" kindref="member">size</ref>;++<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>)<sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>[<ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="class_bools_1a241564235788ec089ae157118d17e401" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a241564235788ec089ae157118d17e401" kindref="member">begin</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>;}</highlight></codeline>
<codeline lineno="399" refid="class_bools_1a940a216bf52d8c93e688e2810cd767e8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a940a216bf52d8c93e688e2810cd767e8" kindref="member">end</ref>()<sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>+<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>;}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="class_bools_1adaae46464e92c6073e068b66737da266" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_bools_1adaae46464e92c6073e068b66737da266" kindref="member">begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref>;}</highlight></codeline>
<codeline lineno="402" refid="class_bools_1ae285a4de44d0625f680555e524b8fb27" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_bools_1ae285a4de44d0625f680555e524b8fb27" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_bools_1a2ac7144e4d610dde76f076eb34dc73f9" kindref="member">m_data</ref><sp/>+<sp/><ref refid="class_bools_1a445a24b6837a4387946571ea76d95886" kindref="member">m_size</ref>;}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Boolean<sp/>logic<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="406" refid="class_bools_1ab5ef6a30c2d1c889c146c748240b1732" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_bools_1ab5ef6a30c2d1c889c146c748240b1732" kindref="member">AND</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value<sp/>:<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="412" refid="class_bools_1ae0224e940a21571102c26cc861df7fec" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_bools_1ae0224e940a21571102c26cc861df7fec" kindref="member">OR</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value<sp/>:<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="class_bools_1ac636c89805e74594d6781dddd3d78401" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_bools_1ac636c89805e74594d6781dddd3d78401" kindref="member">XOR</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value<sp/>:<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_found)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_found;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal">};</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="lib_co_8hpp_1aea023a62fe74d109a9fe9da1040708fc" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="lib_co_8hpp_1a03b9abfe3f12543c365e9a25848ba566" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/><ref refid="class_bools" kindref="compound">Bools</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bools)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b<sp/>:<sp/>bools)<sp/>cout<sp/>&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="lib_co_8hpp_1a632090884b4aa0585e747446a2683963" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a632090884b4aa0585e747446a2683963" kindref="member">Strings</ref><sp/>=<sp/>std::vector&lt;std::string&gt;;</highlight></codeline>
<codeline lineno="437" refid="lib_co_8hpp_1a54161053f7c12fa7dd7bddf119708644" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a54161053f7c12fa7dd7bddf119708644" kindref="member">Ints</ref><sp/>=<sp/>std::vector&lt;int&gt;;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="440" refid="structis__container" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__container" kindref="compound">is_container</ref><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="443" refid="structis__container_1aa5aa36a7f90719cf56b0888bccb34ac4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structis__container_1aa5aa36a7f90719cf56b0888bccb34ac4" kindref="member">test</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-&gt;<sp/>decltype(std::begin(std::declval&lt;C&gt;()),<sp/>std::end(std::declval&lt;C&gt;()),<sp/>std::true_type());</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="446" refid="structis__container_1a0d9f3142d7b172650f1a4713e443aad6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/><ref refid="structis__container_1a0d9f3142d7b172650f1a4713e443aad6" kindref="member">test</ref>(...);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="449" refid="structis__container_1abe72bf896680aa10340ccf08a5d293c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structis__container_1abe72bf896680aa10340ccf08a5d293c7" kindref="member">value</ref><sp/>=<sp/>decltype(test&lt;T&gt;(0))::<ref refid="structis__container_1abe72bf896680aa10340ccf08a5d293c7" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">};</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="comment">//<sp/>MATHS<sp/>//</highlight></codeline>
<codeline lineno="456"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="lib_co_8hpp_1acffb7404540d3e0a654fd7929081bb70" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="lib_co_8hpp_1acffb7404540d3e0a654fd7929081bb70" kindref="member">positive_modulo</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>dividend,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>divisor)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>dividend<sp/>%<sp/>divisor;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret&lt;0)<sp/>ret+=divisor;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="namespace_co_bazar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_co_bazar" kindref="compound">CoBazar</ref></highlight></codeline>
<codeline lineno="465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>ARGS&gt;</highlight></codeline>
<codeline lineno="467" refid="namespace_co_bazar_1a1e08093363d904d8875d5907b48464f0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespace_co_bazar_1a1e08093363d904d8875d5907b48464f0" kindref="member">sum</ref>(T<sp/>i,<sp/>ARGS...<sp/>args)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i+<ref refid="namespace_co_bazar_1a1e08093363d904d8875d5907b48464f0" kindref="member">sum</ref>(args...);}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>ARGS&gt;</highlight></codeline>
<codeline lineno="470" refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>(ARGS...<sp/>args)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" kindref="member">double_cast</ref>(<ref refid="namespace_co_bazar_1a1e08093363d904d8875d5907b48464f0" kindref="member">sum</ref>(args...)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args));}</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="comment">//<sp/><sp/><sp/><sp/>UNORDERED<sp/>MAPS<sp/>FUNCTIONS<sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="477"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="479" refid="lib_co_8hpp_1a3b8ddb099e22657a31515fbcd8d1bf67" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a3b8ddb099e22657a31515fbcd8d1bf67" kindref="member">find_key</ref>(std::unordered_map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map,<sp/>K<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>key)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::unordered_map&lt;K,<sp/>V&gt;::const_iterator<sp/>it<sp/>=<sp/>map.find(key);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>!=<sp/>map.end();</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="486" refid="lib_co_8hpp_1aaff2134bba0ee7c0b4a509699674251a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1aaff2134bba0ee7c0b4a509699674251a" kindref="member">find_value</ref>(std::unordered_map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map,<sp/>V<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find_if(map.begin(),<sp/>map.end(),<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pair)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pair.second<sp/>==<sp/>value;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="comment">//<sp/><sp/><sp/><sp/>MAPS<sp/>FUNCTIONS<sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="498"><highlight class="comment"></highlight></codeline>
<codeline lineno="501"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="502" refid="lib_co_8hpp_1a664347fcb6b16fdc63cd601ebcfc2c8e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1a3b8ddb099e22657a31515fbcd8d1bf67" kindref="member">find_key</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map,<sp/>K<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>key)</highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::map&lt;K,<sp/>V&gt;::const_iterator<sp/>it<sp/>=<sp/>map.find(key);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>!=<sp/>map.end();</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="511" refid="lib_co_8hpp_1a0437363026eeb97df583c38d88cf68b1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::vector&lt;K&gt;<sp/><ref refid="lib_co_8hpp_1a0437363026eeb97df583c38d88cf68b1" kindref="member">list_of_keys</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map)</highlight></codeline>
<codeline lineno="512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>std::vector&lt;K&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>it<sp/>:<sp/>map)<sp/>ret.push_back(it.first);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="521" refid="lib_co_8hpp_1a1a6d9eab2874e1bf6506aeb84d21506d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1aaff2134bba0ee7c0b4a509699674251a" kindref="member">find_value</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map,<sp/>V<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value)</highlight></codeline>
<codeline lineno="522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find_if(map.begin(),<sp/>map.end(),<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pair)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pair.second<sp/>==<sp/>value;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="531" refid="lib_co_8hpp_1ad15d46f1c6897c587cd64a3efba23585" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/><ref refid="lib_co_8hpp_1ad15d46f1c6897c587cd64a3efba23585" kindref="member">get_max_element</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map)<sp/></highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std::max_element(map.begin(),<sp/>map.end(),<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p2)<sp/></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>p1.second<sp/>&lt;<sp/>p2.second;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>});<sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="542" refid="lib_co_8hpp_1ad4ab9f9247e670a4d9db36ca683e6270" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>V<sp/><ref refid="lib_co_8hpp_1ad4ab9f9247e670a4d9db36ca683e6270" kindref="member">get_max_value</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map)<sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::max_element(map.begin(),<sp/>map.end(),<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p2)<sp/></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>p1.second<sp/>&lt;<sp/>p2.second;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>})-&gt;second);<sp/></highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="553" refid="lib_co_8hpp_1aecb45c04cc3a1a2386b973014e4fef50" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>K<sp/><ref refid="lib_co_8hpp_1aecb45c04cc3a1a2386b973014e4fef50" kindref="member">get_max_key</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map)<sp/></highlight></codeline>
<codeline lineno="554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*std::max_element(map.begin(),<sp/>map.end(),<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p2)<sp/></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>p1.first<sp/>&lt;<sp/>p2.first;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>})-&gt;first);<sp/></highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="562" refid="lib_co_8hpp_1a6f43d67b9c0e4bb6bf5a58906ae0d812" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/><ref refid="lib_co_8hpp_1a6f43d67b9c0e4bb6bf5a58906ae0d812" kindref="member">get_min</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map)<sp/></highlight></codeline>
<codeline lineno="563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std::min_element(map.begin(),<sp/>map.end(),<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p2)<sp/></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>p1.second<sp/>&gt;<sp/>p2.second;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>});<sp/></highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="571" refid="lib_co_8hpp_1ad1d07d5a6e5c5182a7dc644148cd6fcd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>V<sp/><ref refid="lib_co_8hpp_1ad1d07d5a6e5c5182a7dc644148cd6fcd" kindref="member">get_min_value</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map)<sp/></highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::min_element(map.begin(),<sp/>map.end(),<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p2)<sp/></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>p1.second<sp/>&gt;<sp/>p2.second;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>})-&gt;second);<sp/></highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight></codeline>
<codeline lineno="580" refid="lib_co_8hpp_1aeec208b7dcadd19e1317814c1de441d9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>K<sp/><ref refid="lib_co_8hpp_1aeec208b7dcadd19e1317814c1de441d9" kindref="member">get_min_key</ref>(std::map&lt;K,V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>map)<sp/></highlight></codeline>
<codeline lineno="581"><highlight class="normal">{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*std::min_element(map.begin(),<sp/>map.end(),<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;K,V&gt;<sp/>&amp;<sp/>p2)<sp/></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>p1.first<sp/>&gt;<sp/>p2.first;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>})-&gt;first);<sp/></highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="comment">//<sp/><sp/><sp/><sp/>TEMPLATE<sp/>HANDELING<sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="591"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__cplusplus<sp/>&gt;=<sp/>201702L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1acbcaeec4b92056a813c1a11e65d5df7d" kindref="member">T_is_number</ref><sp/>=<sp/>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596" refid="lib_co_8hpp_1acbcaeec4b92056a813c1a11e65d5df7d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_co_8hpp_1acbcaeec4b92056a813c1a11e65d5df7d" kindref="member">T_is_number</ref><sp/>=<sp/>void;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__cplusplus<sp/>&gt;=<sp/>201702L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="comment">//<sp/><sp/><sp/>SLOTS<sp/>AND<sp/>SIGNALS<sp/><sp/><sp/>//<sp/>TDB</highlight></codeline>
<codeline lineno="602"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__cplusplus<sp/>&gt;=<sp/>201402L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>ARGS&gt;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Signal</highlight></codeline>
<codeline lineno="606"><highlight class="normal">{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>Signal()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Signal(std::function&lt;void(ARGS...)&gt;<sp/>&amp;&amp;<sp/>func)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Signal(std::function&lt;void(ARGS...)&gt;<sp/>&amp;<sp/>func)<sp/>{m_signals.emplace_back(func);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(ARGS<sp/>&amp;&amp;...<sp/>args){</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>signal<sp/>:<sp/>m_signals)<sp/>signal(std::forward&lt;ARGS&gt;(args)...);}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>connect(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(ARGS...)&gt;<sp/>func)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>m_signals.push_back(func);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>std::vector&lt;std::function&lt;void(ARGS...)&gt;&gt;<sp/>m_signals;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;std::function&lt;void(ARGS...)&gt;&gt;<sp/>m_signals;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal">};</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Slots</highlight></codeline>
<codeline lineno="628"><highlight class="normal">{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>Slots()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>template&lt;class...<sp/>ARGS&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>void<sp/>connect(std::function&lt;void(ARGS...)&gt;<sp/>signal,<sp/>std::function&lt;void(ARGS...)&gt;<sp/>slot)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;std::function&lt;void(ARGS...)&gt;&gt;<sp/>m_slots;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">};</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//__cplusplus<sp/>&gt;=<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="comment">//<sp/><sp/><sp/>SOME<sp/>COOL<sp/>STUFF<sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="649"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_co_bazar" kindref="compound">CoBazar</ref></highlight></codeline>
<codeline lineno="651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="652" refid="namespace_co_bazar_1a24cffd290231166ac66b8c2fc0f9ee65" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_bazar_1a24cffd290231166ac66b8c2fc0f9ee65" kindref="member">progress_bar</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>progress_procent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>50)</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nb_chars<sp/>=<sp/><ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(progress_procent/100.*width);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;width;<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&lt;nb_chars)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(progress_procent)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[F&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout.flush();</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666" refid="namespace_co_bazar_1a10289b78525ae5d515e9d00181ecee64" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_bazar_1a10289b78525ae5d515e9d00181ecee64" kindref="member">short_progress_bar</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>progress_procent)<sp/>{<ref refid="namespace_co_bazar_1a24cffd290231166ac66b8c2fc0f9ee65" kindref="member">progress_bar</ref>(progress_procent,<sp/>10<sp/>);}</highlight></codeline>
<codeline lineno="667" refid="namespace_co_bazar_1a5a85829d9980d46c04dfe66c15ca395a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_bazar_1a5a85829d9980d46c04dfe66c15ca395a" kindref="member">long_progress_bar</ref><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>progress_procent)<sp/>{<ref refid="namespace_co_bazar_1a24cffd290231166ac66b8c2fc0f9ee65" kindref="member">progress_bar</ref>(progress_procent,<sp/>100);}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#if<sp/>(__cplusplus<sp/>&gt;=<sp/>201703L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>/**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@brief<sp/>This<sp/>class<sp/>allows<sp/>one<sp/>to<sp/>read<sp/>one<sp/>specific<sp/>format<sp/>of<sp/>csv<sp/>file<sp/>(see<sp/>details)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>The<sp/>format<sp/>of<sp/>the<sp/>data<sp/>MUST<sp/>be<sp/>the<sp/>following<sp/>:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>[[Name<sp/>of<sp/>the<sp/>columns]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>[[First<sp/>row<sp/>data]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>[[....]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>[[Last<sp/>row<sp/>data]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>Then,<sp/>declare<sp/>the<sp/>reader<sp/>in<sp/>two<sp/>steps<sp/>:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>first<sp/>construct<sp/>the<sp/>reader<sp/>using<sp/>the<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;class...<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>CSVReader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>CSVReader(std::string<sp/>const<sp/>&amp;<sp/>filename,<sp/>char<sp/>const<sp/>&amp;<sp/>delim<sp/>=<sp/>&apos;;&apos;)<sp/>{this<sp/>-&gt;<sp/>open(filename,<sp/>delim);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>bool<sp/>open(std::string<sp/>const<sp/>&amp;<sp/>filename,<sp/>char<sp/>const<sp/>&amp;<sp/>delim<sp/>=<sp/>&apos;;&apos;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>operator<sp/>bool()<sp/>const<sp/>&amp;<sp/>{return<sp/>m_ok;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>private:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>m_header;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::vector&lt;std::tuple&lt;T...&gt;&gt;<sp/>m_data;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>bool<sp/>m_ok<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;class...<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool<sp/>CSVReader&lt;T...&gt;::open(std::string<sp/>const<sp/>&amp;<sp/>filename,<sp/>char<sp/>const<sp/>&amp;<sp/>delim)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Open<sp/>file<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::ifstream<sp/>file(filename,<sp/>std::ios::in);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(!file)<sp/>{print(filename,<sp/>&quot;not<sp/>found&quot;);<sp/>return<sp/>(m_ok<sp/>=<sp/>false);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Read<sp/>names<sp/>header<sp/>:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::string<sp/>reader;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::getline(file,<sp/>reader);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_header<sp/>=<sp/>getList(reader,<sp/>delim);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>print(m_header);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Read<sp/>the<sp/>types<sp/>header<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>while<sp/>(std::getline(file,<sp/>reader))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>typeNames<sp/>=<sp/>getList(reader,<sp/>delim);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(typeNames.size()<sp/>!=<sp/>sizeof...(T))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>the<sp/>case<sp/>where<sp/>the<sp/>number<sp/>of<sp/>types<sp/>in<sp/>the<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>doesn&apos;t<sp/>match<sp/>the<sp/>number<sp/>of<sp/>template<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;Error:<sp/>Number<sp/>of<sp/>types<sp/>in<sp/>the<sp/>header<sp/>doesn&apos;t<sp/>match<sp/>the<sp/>template<sp/>arguments.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(m_ok<sp/>=<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#endif<sp/>//(__cplusplus<sp/>&gt;=<sp/>201703L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//LIBCO_HPP</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/libCo.hpp"/>
  </compounddef>
</doxygen>
