<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_data_file_8hpp" kind="file" language="C++">
    <compoundname>DataFile.hpp</compoundname>
    <includes refid="lib_co_8hpp" local="yes">../libCo.hpp</includes>
    <includedby refid="_evolution_peaks_8hpp" local="yes">lib/Modules/EvolutionPeaks.hpp</includedby>
    <incdepgraph>
      <node id="19">
        <label>glob.h</label>
      </node>
      <node id="24">
        <label>functional</label>
      </node>
      <node id="5">
        <label>iomanip</label>
      </node>
      <node id="28">
        <label>queue</label>
      </node>
      <node id="20">
        <label>filesystem</label>
      </node>
      <node id="21">
        <label>errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>stdexcept</label>
      </node>
      <node id="27">
        <label>numeric</label>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="2">
        <label>../libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>print.hpp</label>
        <link refid="print_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>fstream</label>
      </node>
      <node id="22">
        <label>any</label>
      </node>
      <node id="16">
        <label>files_functions.hpp</label>
        <link refid="files__functions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>random</label>
      </node>
      <node id="1">
        <label>lib/Classes/DataFile.hpp</label>
        <link refid="_data_file_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>typeinfo</label>
      </node>
      <node id="37">
        <label>ctime</label>
      </node>
      <node id="30">
        <label>stack</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="8">
        <label>vector_functions.hpp</label>
        <link refid="vector__functions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>array</label>
      </node>
      <node id="15">
        <label>sstream</label>
      </node>
      <node id="10">
        <label>randomCo.hpp</label>
        <link refid="random_co_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>cstdlib</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="12">
        <label>string_functions.hpp</label>
        <link refid="string__functions_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>unordered_map</label>
      </node>
      <node id="26">
        <label>mutex</label>
      </node>
      <node id="35">
        <label>csignal</label>
      </node>
      <node id="31">
        <label>thread</label>
      </node>
      <node id="9">
        <label>algorithm</label>
      </node>
      <node id="13">
        <label>cstring</label>
      </node>
      <node id="25">
        <label>memory</label>
      </node>
      <node id="32">
        <label>typeindex</label>
      </node>
      <node id="17">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>lib/Modules/EvolutionPeaks.hpp</label>
        <link refid="_evolution_peaks_8hpp"/>
      </node>
      <node id="1">
        <label>lib/Classes/DataFile.hpp</label>
        <link refid="_data_file_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_data_file" prot="public">DataFile</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_data_file_8hpp_1a5bbd0ff6e41ea521288f926113db6f48" prot="public" static="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>using DataLine =  std::vector&lt;std::string&gt;</definition>
        <argsstring></argsstring>
        <name>DataLine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/DataFile.hpp" line="6" column="1" bodyfile="lib/Classes/DataFile.hpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_data_file_8hpp_1aa6b40ad210eb193216cf8f5f0061fbaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Index</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, DataFile&lt; Index, T &gt; const &amp;data)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="class_data_file" kindref="compound">DataFile</ref>&lt; Index, T &gt; const &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/DataFile.hpp" line="341" column="1" bodyfile="lib/Classes/DataFile.hpp" bodystart="341" bodyend="348"/>
        <references refid="class_data_file_1ae7b9f0825c34316b883837d063c0de09" compoundref="_data_file_8hpp" startline="63" endline="63">DataFile&lt; Index, T &gt;::data</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>DATAFILE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DATAFILE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../libCo.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="_data_file_8hpp_1a5bbd0ff6e41ea521288f926113db6f48" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="_data_file_8hpp_1a5bbd0ff6e41ea521288f926113db6f48" kindref="member">DataLine</ref><sp/>=<sp/>std::vector&lt;std::string&gt;;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="38" refid="class_data_file" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_data_file" kindref="compound">DataFile</ref></highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40" refid="class_data_file_1a0d84d9e8ed9d0da9118ece6250e80ec1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a0d84d9e8ed9d0da9118ece6250e80ec1" kindref="member">Indexes</ref><sp/>=<sp/>std::vector&lt;Index&gt;;</highlight></codeline>
<codeline lineno="41" refid="class_data_file_1a2484810cfdfddf382f6e7cc539fa26ee" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a2484810cfdfddf382f6e7cc539fa26ee" kindref="member">DataPoints</ref><sp/>=<sp/>std::vector&lt;T&gt;;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43" refid="class_data_file_1afb388fd7a0b151fa6e8edb8a2c35ca53" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_data_file_1afb388fd7a0b151fa6e8edb8a2c35ca53" kindref="member">DataFile</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44" refid="class_data_file_1a1a6fb21dceaa1670086d62be142a45b0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_data_file_1a1a6fb21dceaa1670086d62be142a45b0" kindref="member">DataFile</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>filename,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>has_header<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{<ref refid="class_data_file_1ae9748d2772e7a11da4b9f81da89d70b3" kindref="member">load</ref><sp/>(filename,<sp/>has_header);}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_data_file_1a3acd72939856b7bad0829293ffaf157f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a3acd72939856b7bad0829293ffaf157f" kindref="member">setColumns</ref>(std::vector&lt;int&gt;<sp/>columns)<sp/>{<ref refid="class_data_file_1aa5fa5d835eef5c509713f74b564cc552" kindref="member">m_columns_to_read</ref><sp/>=<sp/>columns;<sp/><ref refid="class_data_file_1ad499801b7733c896c4ed3212ece9f48b" kindref="member">m_nb_columns</ref><sp/>=<sp/><ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(columns.size());}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="class_data_file_1ae9748d2772e7a11da4b9f81da89d70b3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1ae9748d2772e7a11da4b9f81da89d70b3" kindref="member">load</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>filename,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>has_header<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="class_data_file_1a9375b98cbf03fcc253e35da2b57cbd5d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a9375b98cbf03fcc253e35da2b57cbd5d" kindref="member">write</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>filename);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="class_data_file_1aaffaf1e2df21446c06f7647c925822be" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1aaffaf1e2df21446c06f7647c925822be" kindref="member">checkOutputfile</ref>(std::ofstream<sp/>&amp;<sp/>outputfile);</highlight></codeline>
<codeline lineno="54" refid="class_data_file_1a33d335be9b04c7014555993718c5fda3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a33d335be9b04c7014555993718c5fda3" kindref="member">writeHeader</ref>(std::ofstream<sp/>&amp;<sp/>outputfile);</highlight></codeline>
<codeline lineno="55" refid="class_data_file_1ad345f346a5757caa2eeb40e14af39460" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1ad345f346a5757caa2eeb40e14af39460" kindref="member">writeData</ref>(std::ofstream<sp/>&amp;<sp/>outputfile);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="class_data_file_1a943ee036c1dc8d2a2a98a9bc5953d303" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a943ee036c1dc8d2a2a98a9bc5953d303" kindref="member">vectorize</ref>(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="60" refid="class_data_file_1afac349d6db7005f3ca36802b0d4fbd96" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1afac349d6db7005f3ca36802b0d4fbd96" kindref="member">setHeader</ref>(<ref refid="_data_file_8hpp_1a5bbd0ff6e41ea521288f926113db6f48" kindref="member">DataLine</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>header)<sp/>{<ref refid="class_data_file_1a0c032bb1b236276d4bfc5c4d3e74ca0d" kindref="member">m_header</ref><sp/>=<sp/>header;}</highlight></codeline>
<codeline lineno="61" refid="class_data_file_1affed9dbc6759035d5e3b087b466b3413" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_data_file_1affed9dbc6759035d5e3b087b466b3413" kindref="member">indexes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1ab339991e70846dfd4bf65be2534e45c1" kindref="member">m_indexes</ref>;}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_data_file_1ae7b9f0825c34316b883837d063c0de09" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_data_file_1ae7b9f0825c34316b883837d063c0de09" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>;}</highlight></codeline>
<codeline lineno="64" refid="class_data_file_1a3ad42806aff244755a2ad7ca1fe50a37" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_data_file_1a3ad42806aff244755a2ad7ca1fe50a37" kindref="member">data</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>;}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="class_data_file_1ab5c38f4fcd6ec5a6e1eb2d1949d3ba9e" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_data_file_1ab5c38f4fcd6ec5a6e1eb2d1949d3ba9e" kindref="member">operator[]</ref>(T<sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>[t][<ref refid="class_data_file_1a595bdc44926515b9f30bd332222e6eeb" kindref="member">m_chosen_column</ref>];}<sp/></highlight></codeline>
<codeline lineno="67" refid="class_data_file_1a1fb2113e19a01c149f40c3304c676225" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/>&amp;<sp/><ref refid="class_data_file_1a1fb2113e19a01c149f40c3304c676225" kindref="member">operator[]</ref>(T<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>[t][<ref refid="class_data_file_1a595bdc44926515b9f30bd332222e6eeb" kindref="member">m_chosen_column</ref>];}<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="class_data_file_1a3ab1b817133b14eb348319d7959d360d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_data_file_1a3ab1b817133b14eb348319d7959d360d" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a3bda8df19c2825e6066f643a4cea25c2" kindref="member">m_size</ref>;}</highlight></codeline>
<codeline lineno="70" refid="class_data_file_1aaffaf487bee97fdccc84054f226a94c3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_data_file_1aaffaf487bee97fdccc84054f226a94c3" kindref="member">size</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a3bda8df19c2825e6066f643a4cea25c2" kindref="member">m_size</ref>;}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="class_data_file_1aa8591eee73f290dcb9cda4ddf90812bc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1aa8591eee73f290dcb9cda4ddf90812bc" kindref="member">setColumn</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>choice)<sp/>{<ref refid="class_data_file_1a595bdc44926515b9f30bd332222e6eeb" kindref="member">m_chosen_column</ref><sp/>=<sp/>choice;}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="class_data_file_1a20ccbf2ff940a527452b137a07ff1010" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a20ccbf2ff940a527452b137a07ff1010" kindref="member">setColumn</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_data_file_1aa7924fc31df5257c572a05d5a5d6a795" kindref="member">column</ref>)<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data_file_1a595bdc44926515b9f30bd332222e6eeb" kindref="member">m_chosen_column</ref><sp/>=<sp/><ref refid="vector__functions_8hpp_1ad399307162129e2996e7bf6e172d97c9" kindref="member">first_index_in</ref>(<ref refid="class_data_file_1ac4ca4c0767acf308e2b06ab89b340c5c" kindref="member">m_labels_column</ref>,<sp/><ref refid="class_data_file_1aa7924fc31df5257c572a05d5a5d6a795" kindref="member">column</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_data_file_1a595bdc44926515b9f30bd332222e6eeb" kindref="member">m_chosen_column</ref><sp/>==<sp/><ref refid="class_data_file_1ac4ca4c0767acf308e2b06ab89b340c5c" kindref="member">m_labels_column</ref>.size())<sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(<ref refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" kindref="member">concatenate</ref>(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;column<sp/>name<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_data_file_1aa7924fc31df5257c572a05d5a5d6a795" kindref="member">column</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>the<sp/>data<sp/>loaded<sp/>from<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_data_file_1a5bac1ee6087bcd1c427a41ae149c10f3" kindref="member">m_input_filename</ref>));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="84" refid="class_data_file_1a384d0b3098646b77e219189fc8dccd00" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a384d0b3098646b77e219189fc8dccd00" kindref="member">readColumn</ref>(std::vector&lt;T2&gt;<sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>vector.reserve(<ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>.size());</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_i<sp/>=<sp/>0;<sp/>row_i&lt;<ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>.size();<sp/>row_i++)<sp/>vector[row_i]<sp/>=<sp/><ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>[<ref refid="class_data_file_1a7234085692baf3c4c33cced506b77d9e" kindref="member">m_labels_rows</ref>[row_i]][<ref refid="class_data_file_1a595bdc44926515b9f30bd332222e6eeb" kindref="member">m_chosen_column</ref>];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COL&gt;</highlight></codeline>
<codeline lineno="92" refid="class_data_file_1acff7815d10848fb38ab6eecc86270ddb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1acff7815d10848fb38ab6eecc86270ddb" kindref="member">readColumn</ref>(std::vector&lt;T2&gt;<sp/>&amp;<sp/>vector,<sp/>COL<sp/>&amp;&amp;<sp/><ref refid="class_data_file_1aa7924fc31df5257c572a05d5a5d6a795" kindref="member">column</ref>)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data_file_1aa8591eee73f290dcb9cda4ddf90812bc" kindref="member">setColumn</ref>(std::forward&lt;COL&gt;(<ref refid="class_data_file_1aa7924fc31df5257c572a05d5a5d6a795" kindref="member">column</ref>));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>vector.reserve(<ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>.size());</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_i<sp/>=<sp/>0;<sp/>row_i&lt;<ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>.size();<sp/>row_i++)<sp/>vector[row_i]<sp/>=<sp/><ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>[<ref refid="class_data_file_1a7234085692baf3c4c33cced506b77d9e" kindref="member">m_labels_rows</ref>[row_i]][<ref refid="class_data_file_1a595bdc44926515b9f30bd332222e6eeb" kindref="member">m_chosen_column</ref>];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="100" refid="class_data_file_1aa8ea777558f19e09c911f9f387d08201" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1aa8ea777558f19e09c911f9f387d08201" kindref="member">readColumn</ref>(std::map&lt;Index,<sp/>T2&gt;<sp/>&amp;<sp/>map)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_i<sp/>=<sp/>0;<sp/>row_i&lt;<ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>.size();<sp/>row_i++)<sp/>map[row_i]<sp/>=<sp/><ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>[<ref refid="class_data_file_1a7234085692baf3c4c33cced506b77d9e" kindref="member">m_labels_rows</ref>[row_i]][<ref refid="class_data_file_1a595bdc44926515b9f30bd332222e6eeb" kindref="member">m_chosen_column</ref>];</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COL&gt;</highlight></codeline>
<codeline lineno="107" refid="class_data_file_1a5693057972b3ec730173b1d200d5d8b2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a5693057972b3ec730173b1d200d5d8b2" kindref="member">readColumn</ref>(std::map&lt;Index,<sp/>T2&gt;<sp/>&amp;<sp/>map,<sp/>COL<sp/>&amp;&amp;<sp/><ref refid="class_data_file_1aa7924fc31df5257c572a05d5a5d6a795" kindref="member">column</ref>)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data_file_1aa8591eee73f290dcb9cda4ddf90812bc" kindref="member">setColumn</ref>(std::forward&lt;COL&gt;(<ref refid="class_data_file_1aa7924fc31df5257c572a05d5a5d6a795" kindref="member">column</ref>));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row_i<sp/>=<sp/>0;<sp/>row_i&lt;<ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>.size();<sp/>row_i++)<sp/>map[row_i]<sp/>=<sp/><ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>[<ref refid="class_data_file_1a7234085692baf3c4c33cced506b77d9e" kindref="member">m_labels_rows</ref>[row_i]][<ref refid="class_data_file_1a595bdc44926515b9f30bd332222e6eeb" kindref="member">m_chosen_column</ref>];</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="class_data_file_1aa7924fc31df5257c572a05d5a5d6a795" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_data_file_1a2484810cfdfddf382f6e7cc539fa26ee" kindref="member">DataPoints</ref><sp/><ref refid="class_data_file_1aa7924fc31df5257c572a05d5a5d6a795" kindref="member">column</ref>()</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data_file_1a2484810cfdfddf382f6e7cc539fa26ee" kindref="member">DataPoints</ref><sp/>ret;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data_file_1a384d0b3098646b77e219189fc8dccd00" kindref="member">readColumn</ref>(ret);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COL&gt;</highlight></codeline>
<codeline lineno="129" refid="class_data_file_1a3fa00fffe402fcc0f77407338fdfa9f8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_data_file_1a2484810cfdfddf382f6e7cc539fa26ee" kindref="member">DataPoints</ref><sp/><ref refid="class_data_file_1a3fa00fffe402fcc0f77407338fdfa9f8" kindref="member">column</ref>(COL<sp/>&amp;&amp;<sp/>columns)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data_file_1aa8591eee73f290dcb9cda4ddf90812bc" kindref="member">setColumn</ref>(std::forward&lt;COL&gt;(<ref refid="class_data_file_1aa7924fc31df5257c572a05d5a5d6a795" kindref="member">column</ref>));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data_file_1a2484810cfdfddf382f6e7cc539fa26ee" kindref="member">DataPoints</ref><sp/>ret;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_data_file_1a384d0b3098646b77e219189fc8dccd00" kindref="member">readColumn</ref>(ret);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="class_data_file_1a2f42ba45453da1c72b8c60d1add57c1a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>.size()&gt;0<sp/>&amp;&amp;<sp/><ref refid="class_data_file_1a9d671120b9a31228a3eb4ef318c3de47" kindref="member">m_ok</ref>;}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="140" refid="class_data_file_1a8acfde896e9216daa785bc16752ef73e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a8acfde896e9216daa785bc16752ef73e" kindref="member">checkInputfile</ref>(std::ifstream<sp/>&amp;<sp/>inputfile);</highlight></codeline>
<codeline lineno="141" refid="class_data_file_1a10063674628cade1720c93ee93faca31" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a10063674628cade1720c93ee93faca31" kindref="member">loadHeader</ref>(std::ifstream<sp/>&amp;<sp/>inputfile);</highlight></codeline>
<codeline lineno="142" refid="class_data_file_1a56b3abb736d7dc38f9d21e1d66e0e678" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a56b3abb736d7dc38f9d21e1d66e0e678" kindref="member">setupContainers</ref>();</highlight></codeline>
<codeline lineno="143" refid="class_data_file_1a6bfb54890d3d1e60dd5104496b00eecf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a6bfb54890d3d1e60dd5104496b00eecf" kindref="member">loadData</ref>(std::ifstream<sp/>&amp;<sp/>inputfile);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="class_data_file_1a5bac1ee6087bcd1c427a41ae149c10f3" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_data_file_1a5bac1ee6087bcd1c427a41ae149c10f3" kindref="member">m_input_filename</ref>;</highlight></codeline>
<codeline lineno="146" refid="class_data_file_1a49e86af7ac13c5325a0ace3c0a4fd6cf" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_data_file_1a49e86af7ac13c5325a0ace3c0a4fd6cf" kindref="member">m_output_filename</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="class_data_file_1aa5fa5d835eef5c509713f74b564cc552" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="class_data_file_1aa5fa5d835eef5c509713f74b564cc552" kindref="member">m_columns_to_read</ref><sp/>=<sp/>{1};<sp/></highlight><highlight class="comment">//<sp/>The<sp/>index<sp/>of<sp/>the<sp/>wanted<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="class_data_file_1ad499801b7733c896c4ed3212ece9f48b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1ad499801b7733c896c4ed3212ece9f48b" kindref="member">m_nb_columns</ref><sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Size<sp/>of<sp/>the<sp/>above<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="class_data_file_1a3bda8df19c2825e6066f643a4cea25c2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a3bda8df19c2825e6066f643a4cea25c2" kindref="member">m_size</ref><sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>loaded<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="class_data_file_1af3c9d0a54a0f9e7efd9fe94ce945007c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1af3c9d0a54a0f9e7efd9fe94ce945007c" kindref="member">m_label_index</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>index<sp/>of<sp/>the<sp/>row<sp/>label<sp/>(usually<sp/>=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="class_data_file_1a1984aaa46019a7aeeaf07f61da0cf130" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a1984aaa46019a7aeeaf07f61da0cf130" kindref="member">m_delim</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>delimiter<sp/>of<sp/>the<sp/>csv<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="class_data_file_1ae6e9b136e3c6dc436b012fed6961e103" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1ae6e9b136e3c6dc436b012fed6961e103" kindref="member">m_has_header</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Weither<sp/>there<sp/>is<sp/>a<sp/>header<sp/>or<sp/>not<sp/>in<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="155" refid="class_data_file_1a0c032bb1b236276d4bfc5c4d3e74ca0d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_data_file_8hpp_1a5bbd0ff6e41ea521288f926113db6f48" kindref="member">DataLine</ref><sp/><ref refid="class_data_file_1a0c032bb1b236276d4bfc5c4d3e74ca0d" kindref="member">m_header</ref>;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>header<sp/>still<sp/>in<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Manages<sp/>the<sp/>columns<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="class_data_file_1ac4ca4c0767acf308e2b06ab89b340c5c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="lib_co_8hpp_1a632090884b4aa0585e747446a2683963" kindref="member">Strings</ref><sp/><ref refid="class_data_file_1ac4ca4c0767acf308e2b06ab89b340c5c" kindref="member">m_labels_column</ref>;<sp/></highlight><highlight class="comment">//<sp/>List<sp/>of<sp/>the<sp/>index<sp/>of<sp/>the<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="class_data_file_1a676faa65afd02b104f3eb0a3d2e653f2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_data_file_1a2484810cfdfddf382f6e7cc539fa26ee" kindref="member">DataPoints</ref><sp/><ref refid="class_data_file_1a676faa65afd02b104f3eb0a3d2e653f2" kindref="member">m_data_points</ref>;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>label<sp/>of<sp/>wanted<sp/>columns<sp/>casted<sp/>in<sp/>the<sp/>data<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="class_data_file_1a70de36522aa7d2b770f08e01463d0a9f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_bools" kindref="compound">Bools</ref><sp/><ref refid="class_data_file_1a70de36522aa7d2b770f08e01463d0a9f" kindref="member">m_column_name_casted</ref>;<sp/></highlight><highlight class="comment">//<sp/>To<sp/>check<sp/>which<sp/>column<sp/>label<sp/>could<sp/>not<sp/>be<sp/>casted<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="class_data_file_1a4d414d0f4fc92becb2f475a80e56a57f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a4d414d0f4fc92becb2f475a80e56a57f" kindref="member">m_all_column_name_casted</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>To<sp/>check<sp/>if<sp/>all<sp/>the<sp/>column<sp/>label<sp/>could<sp/>be<sp/>caster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Manages<sp/>the<sp/>rows<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="class_data_file_1a7234085692baf3c4c33cced506b77d9e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_data_file_8hpp_1a5bbd0ff6e41ea521288f926113db6f48" kindref="member">DataLine</ref><sp/><ref refid="class_data_file_1a7234085692baf3c4c33cced506b77d9e" kindref="member">m_labels_rows</ref>;<sp/></highlight><highlight class="comment">//<sp/>List<sp/>of<sp/>the<sp/>index<sp/>of<sp/>the<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="class_data_file_1ab339991e70846dfd4bf65be2534e45c1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_data_file_1a0d84d9e8ed9d0da9118ece6250e80ec1" kindref="member">Indexes</ref><sp/><ref refid="class_data_file_1ab339991e70846dfd4bf65be2534e45c1" kindref="member">m_indexes</ref>;<sp/></highlight><highlight class="comment">//<sp/>List<sp/>of<sp/>indexes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="class_data_file_1a9d671120b9a31228a3eb4ef318c3de47" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a9d671120b9a31228a3eb4ef318c3de47" kindref="member">m_ok</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>everything<sp/>ok<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="class_data_file_1a013613e672fc52c80b933ef0635c83e6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a013613e672fc52c80b933ef0635c83e6" kindref="member">m_warning_is_error</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>continue<sp/>if<sp/>there<sp/>is<sp/>any<sp/>issue<sp/>during<sp/>loading<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>UnorderedDataFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;Index,<sp/>DataPoints&gt;<sp/><ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" refkind="member"><highlight class="normal"><sp/><sp/>std::map&lt;Index,<sp/>DataPoints&gt;<sp/><ref refid="class_data_file_1a2611c3a759ee2902c8d05b1b166012d4" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//UnorderedDataFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Vectorized<sp/>data<sp/>:<sp/>TODO<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="class_data_file_1ac07aa5725aefa63f837e4a7f7005f623" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;DataPoints&gt;<sp/><ref refid="class_data_file_1ac07aa5725aefa63f837e4a7f7005f623" kindref="member">m_data_vector</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Helpers<sp/>for<sp/>the<sp/>file<sp/>reading<sp/>:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="class_data_file_1a489605b761bf235b58c58aabf6ac3e2b" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_data_file_1a489605b761bf235b58c58aabf6ac3e2b" kindref="member">m_reader</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Helpers<sp/>for<sp/>the<sp/>data<sp/>reading<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="class_data_file_1a595bdc44926515b9f30bd332222e6eeb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a595bdc44926515b9f30bd332222e6eeb" kindref="member">m_chosen_column</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="comment">//<sp/>INPUT<sp/>//</highlight></codeline>
<codeline lineno="189"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="191" refid="class_data_file_1a10063674628cade1720c93ee93faca31" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a10063674628cade1720c93ee93faca31" kindref="member">DataFile&lt;Index, T&gt;::loadHeader</ref>(std::ifstream<sp/>&amp;<sp/>inputfile)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><ref refid="files__functions_8hpp_1a2f9387aa10988ebce3a1bd6e860497a2" kindref="member">go_to_beginning</ref>(inputfile);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>std::getline(inputfile,<sp/>m_reader);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><ref refid="string__functions_8hpp_1a1f4138b473c708db6b901f81bba9f5f6" kindref="member">fillList</ref>(m_header,<sp/>m_reader,<sp/>m_delim);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_has_header)<sp/><ref refid="files__functions_8hpp_1a2f9387aa10988ebce3a1bd6e860497a2" kindref="member">go_to_beginning</ref>(inputfile);</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="200" refid="class_data_file_1a56b3abb736d7dc38f9d21e1d66e0e678" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a56b3abb736d7dc38f9d21e1d66e0e678" kindref="member">DataFile&lt;Index, T&gt;::setupContainers</ref>()</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index&lt;m_nb_columns;<sp/>index++)<sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>data_index<sp/>=<sp/>m_columns_to_read[index];<sp/></highlight><highlight class="comment">//<sp/>The<sp/>actual<sp/>index<sp/>of<sp/>the<sp/>row<sp/>in<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>m_labels_column.push_back(m_header[data_index]);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_data_points.push_back(string_to&lt;T&gt;<sp/>(m_header[data_index]));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_column_name_casted.push_back(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<ref refid="class_cast_impossible" kindref="compound">CastImpossible</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>m_header[data_index]<sp/>is<sp/>not<sp/>convertible<sp/>to<sp/>double<sp/>then<sp/>this<sp/>column<sp/>is<sp/>of<sp/>no<sp/>interest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.<ref refid="class_cast_impossible_1a1a1947bbb68b6388cfb03e91b9ccb5b0" kindref="member">what</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_column_name_casted.push_back(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>is<sp/>used<sp/>to<sp/>know<sp/>if<sp/>all<sp/>the<sp/>name<sp/>of<sp/>the<sp/>columns<sp/>are<sp/>castable<sp/>to<sp/>double<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>m_all_column_name_casted<sp/>=<sp/>m_column_name_casted.AND();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="224" refid="class_data_file_1a6bfb54890d3d1e60dd5104496b00eecf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a6bfb54890d3d1e60dd5104496b00eecf" kindref="member">DataFile&lt;Index, T&gt;::loadData</ref>(std::ifstream<sp/>&amp;<sp/>inputfile)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>m_size<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><ref refid="_data_file_8hpp_1a5bbd0ff6e41ea521288f926113db6f48" kindref="member">DataLine</ref><sp/>data;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::getline(inputfile,<sp/>m_reader))</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>m_size++;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>data.clear();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="string__functions_8hpp_1a1f4138b473c708db6b901f81bba9f5f6" kindref="member">fillList</ref>(data,<sp/>m_reader,<sp/>m_delim);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data.size()<sp/>!=<sp/>m_header.size())</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Number<sp/>of<sp/>entries<sp/>at<sp/>line&quot;</highlight><highlight class="normal">,<sp/>m_size,<sp/></highlight><highlight class="stringliteral">&quot;do<sp/>not<sp/>match<sp/>the<sp/>header<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_ok<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_labels_rows.push_back(data[m_label_index]);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>label;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>label<sp/>=<sp/>string_to&lt;Index&gt;(data[m_label_index]);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_indexes.push_back(label);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::invalid_argument<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(m_labels_rows.back(),<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>line&quot;</highlight><highlight class="normal">,<sp/>m_size,<sp/></highlight><highlight class="stringliteral">&quot;raised&quot;</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>(label)<sp/>&lt;&lt;<sp/>&quot;<sp/>:<sp/>&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>containing<sp/>the<sp/>data<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>newLineData(m_nb_columns,<sp/>-1);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>all<sp/>the<sp/>wanted<sp/>rows<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>m_nb_columns;<sp/>index++)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>data_index<sp/>=<sp/>m_columns_to_read[index];</highlight><highlight class="comment">//<sp/>The<sp/>actual<sp/>index<sp/>of<sp/>the<sp/>row<sp/>in<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newLineData[index]<sp/>=<sp/>(string_to&lt;T&gt;(data[data_index]));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::invalid_argument<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">,<sp/>m_size,<sp/></highlight><highlight class="stringliteral">&quot;column&quot;</highlight><highlight class="normal">,<sp/>index,<sp/></highlight><highlight class="stringliteral">&quot;raised&quot;</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_data.emplace(label,<sp/>newLineData);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="276" refid="class_data_file_1ae9748d2772e7a11da4b9f81da89d70b3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1ae9748d2772e7a11da4b9f81da89d70b3" kindref="member">DataFile&lt;Index, T&gt;::load</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>filename,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>has_header)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>inputfile((m_input_filename<sp/>=<sp/>filename),<sp/>std::ios::in);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>m_has_header<sp/>=<sp/>has_header;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>checkInputfile(inputfile);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>loadHeader(inputfile);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>setupContainers();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>loadData(inputfile);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>inputfile.close();</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="comment">//<sp/>OUTPUT<sp/>//</highlight></codeline>
<codeline lineno="296"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="298" refid="class_data_file_1a8acfde896e9216daa785bc16752ef73e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a8acfde896e9216daa785bc16752ef73e" kindref="member">DataFile&lt;Index, T&gt;::checkInputfile</ref>(std::ifstream<sp/>&amp;<sp/>outputfile)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!outputfile.good())<sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Carefull&quot;</highlight><highlight class="normal">,<sp/>m_input_filename,<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>not<sp/>good&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="304" refid="class_data_file_1aaffaf1e2df21446c06f7647c925822be" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1aaffaf1e2df21446c06f7647c925822be" kindref="member">DataFile&lt;Index, T&gt;::checkOutputfile</ref>(std::ofstream<sp/>&amp;<sp/>outputfile)</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!outputfile.good())<sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Carefull&quot;</highlight><highlight class="normal">,<sp/>outputfile,<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>not<sp/>good&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="310" refid="class_data_file_1a33d335be9b04c7014555993718c5fda3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a33d335be9b04c7014555993718c5fda3" kindref="member">DataFile&lt;Index, T&gt;::writeHeader</ref>(std::ofstream<sp/>&amp;<sp/>outputfile)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>outputfile<sp/>&lt;&lt;<sp/>m_header<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="316" refid="class_data_file_1ad345f346a5757caa2eeb40e14af39460" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1ad345f346a5757caa2eeb40e14af39460" kindref="member">DataFile&lt;Index, T&gt;::writeData</ref>(std::ofstream<sp/>&amp;<sp/>outputfile)</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>UnorderedDataFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;unordered<sp/>datafile<sp/>don&apos;t<sp/>have<sp/>an<sp/>order<sp/>output<sp/>yet<sp/>!!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>not<sp/>UnorderedDataFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>data<sp/>:<sp/>m_data)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//UnorderedDataFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(m_output_filename,<sp/></highlight><highlight class="stringliteral">&quot;written&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="327" refid="class_data_file_1a9375b98cbf03fcc253e35da2b57cbd5d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_data_file_1a9375b98cbf03fcc253e35da2b57cbd5d" kindref="member">DataFile&lt;Index, T&gt;::write</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>filename)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>outputfile((m_output_filename<sp/>=<sp/>filename),<sp/>std::ios::out);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>checkOutputfile(outputfile);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>writeHeader(outputfile);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>writeData(outputfile);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>outputfile.close();</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="341" refid="_data_file_8hpp_1aa6b40ad210eb193216cf8f5f0061fbaa" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="_data_file_8hpp_1aa6b40ad210eb193216cf8f5f0061fbaa" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/><ref refid="class_data_file" kindref="compound">DataFile&lt;Index, T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>data)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>data<sp/>:<sp/>data.<ref refid="class_data_file_1ae7b9f0825c34316b883837d063c0de09" kindref="member">data</ref>())</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>data.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>data.second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="comment">//<sp/>SIMPLE<sp/>DATA<sp/>FILE<sp/>//</highlight></codeline>
<codeline lineno="354"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;class<sp/>Index,<sp/>class<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>SimpleDataFile<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>T<sp/>const<sp/>&amp;<sp/>operator[](T<sp/>const<sp/>&amp;<sp/>t)<sp/>{return<sp/>data[t][0];}<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>DataFile&lt;Index,<sp/>T&gt;<sp/>data;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//DATAFILE_HPP</highlight></codeline>
    </programlisting>
    <location file="lib/Classes/DataFile.hpp"/>
  </compounddef>
</doxygen>
