<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="vector__functions_8hpp" kind="file" language="C++">
    <compoundname>vector_functions.hpp</compoundname>
    <includes refid="print_8hpp" local="yes">print.hpp</includes>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includedby refid="files__functions_8hpp" local="yes">lib/files_functions.hpp</includedby>
    <includedby refid="lib_co_8hpp" local="yes">lib/libCo.hpp</includedby>
    <incdepgraph>
      <node id="4">
        <label>iomanip</label>
      </node>
      <node id="6">
        <label>map</label>
      </node>
      <node id="2">
        <label>print.hpp</label>
        <link refid="print_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="1">
        <label>lib/vector_functions.hpp</label>
        <link refid="vector__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>lib/Analyse/Counters.hpp</label>
        <link refid="_analyse_2_counters_8hpp"/>
      </node>
      <node id="49">
        <label>lib/Classes/RWMat.hxx</label>
        <link refid="_r_w_mat_8hxx"/>
      </node>
      <node id="41">
        <label>lib/libRoot.hpp</label>
        <link refid="lib_root_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>lib/Modules/Faster2Histo.hpp</label>
        <link refid="_faster2_histo_8hpp"/>
      </node>
      <node id="32">
        <label>lib/Classes/RF_Manager.hpp</label>
        <link refid="_r_f___manager_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>lib/Classes/Manip.hpp</label>
        <link refid="_manip_8hpp"/>
      </node>
      <node id="24">
        <label>lib/MTObjects/MTFasterReader.hpp</label>
        <link refid="_m_t_faster_reader_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>lib/Classes/Nuball2Tree.hpp</label>
        <link refid="_nuball2_tree_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>lib/Modules/EvolutionPeaks.hpp</label>
        <link refid="_evolution_peaks_8hpp"/>
      </node>
      <node id="37">
        <label>lib/Classes/Gate.hpp</label>
        <link refid="_gate_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>lib/Analyse/DSSD.hpp</label>
        <link refid="_d_s_s_d_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>lib/MTObjects/MTFilesManager.hpp</label>
        <link refid="_m_t_files_manager_8hpp"/>
      </node>
      <node id="47">
        <label>lib/Classes/FasterReader.hpp</label>
        <link refid="_faster_reader_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>lib/Analyse/EventAnalyse.hpp</label>
        <link refid="_event_analyse_8hpp"/>
      </node>
      <node id="13">
        <label>lib/Modules/CobaltCalorimeter.hpp</label>
        <link refid="_cobalt_calorimeter_8hpp"/>
      </node>
      <node id="46">
        <label>lib/Classes/Hit.hpp</label>
        <link refid="_hit_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>lib/libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>lib/Classes/EventBuilder.hpp</label>
        <link refid="_event_builder_8hpp"/>
      </node>
      <node id="28">
        <label>lib/Analyse/Clovers.hpp</label>
        <link refid="_clovers_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>lib/Modules/CloverSpectra.hpp</label>
        <link refid="_clover_spectra_8hpp"/>
      </node>
      <node id="50">
        <label>lib/MTObjects/MTList.hpp</label>
        <link refid="_m_t_list_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>lib/Classes/Fit.hpp</label>
        <link refid="_fit_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>lib/files_functions.hpp</label>
        <link refid="files__functions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>lib/Analyse/ParisCluster.hpp</label>
        <link refid="_paris_cluster_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>lib/Classes/Calibration.hpp</label>
        <link refid="_calibration_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>lib/Classes/DataFile.hpp</label>
        <link refid="_data_file_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>lib/Classes/Counters.hpp</label>
        <link refid="_classes_2_counters_8hpp"/>
      </node>
      <node id="18">
        <label>lib/Analyse/SpectraCo.hpp</label>
        <link refid="_spectra_co_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>lib/Analyse/SpectraAlignator.hpp</label>
        <link refid="_spectra_alignator_8hpp"/>
      </node>
      <node id="44">
        <label>lib/Classes/Detectors.hpp</label>
        <link refid="_detectors_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>lib/Classes/Event.hpp</label>
        <link refid="_event_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/vector_functions.hpp</label>
        <link refid="vector__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>lib/Analyse/Sorted_Event.hpp</label>
        <link refid="_sorted___event_8hpp"/>
      </node>
      <node id="48">
        <label>lib/Classes/OutputTFile.hpp</label>
        <link refid="_output_t_file_8hpp"/>
      </node>
      <node id="11">
        <label>lib/Modules/Faster2Root.hpp</label>
        <link refid="_faster2_root_8hpp"/>
      </node>
      <node id="43">
        <label>lib/Analyse/ParisPhoswitch.hpp</label>
        <link refid="_paris_phoswitch_8hpp"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>lib/Modules/RunMatrixator.hpp</label>
        <link refid="_run_matrixator_8hpp"/>
      </node>
      <node id="36">
        <label>lib/Analyse/AnalysedSpectra.hpp</label>
        <link refid="_analysed_spectra_8hpp"/>
      </node>
      <node id="22">
        <label>lib/Classes/CoProgressBar.hpp</label>
        <link refid="_co_progress_bar_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>lib/Classes/CoincBuilder.hpp</label>
        <link refid="_coinc_builder_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>lib/Classes/Builder.hpp</label>
        <link refid="_builder_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>lib/Modules/NearLine.hpp</label>
        <link refid="_near_line_8hpp"/>
      </node>
      <node id="12">
        <label>lib/Modules/Timeshifts.hpp</label>
        <link refid="_timeshifts_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>lib/Classes/Timewalk.hpp</label>
        <link refid="_timewalk_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>lib/Analyse/Paris.hpp</label>
        <link refid="_paris_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>lib/Classes/Alignator.hpp</label>
        <link refid="_alignator_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>lib/Classes/FilesManager.hpp</label>
        <link refid="_files_manager_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>lib/Modules/Calibrator.hpp</label>
        <link refid="_calibrator_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>lib/MTObjects/MTRootReader.hpp</label>
        <link refid="_m_t_root_reader_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>lib/Classes/Performances.hpp</label>
        <link refid="_performances_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_static_vector" prot="public">StaticVector</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="vector__functions_8hpp_1aaa9a186c52f42a25042db671a3462fc0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::vector&lt; T &gt; &gt;</type>
        <definition>using vector2D =  std::vector&lt;std::vector&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>vector2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="10" column="1" bodyfile="lib/vector_functions.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="vector__functions_8hpp_1ab624cd9b69dafa0701b213f5bb78f911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; bubble_sort</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector)</argsstring>
        <name>bubble_sort</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Order the vector from lower to higher value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="218" column="13" bodyfile="lib/vector_functions.hpp" bodystart="218" bodyend="223"/>
        <references refid="vector__functions_8hpp_1a516812808c1a19cf37a17258f1789ab8" compoundref="vector__functions_8hpp" startline="172" endline="214">bubble_sort</references>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a516812808c1a19cf37a17258f1789ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; int &gt; &amp;</type>
        <definition>std::vector&lt;int&gt;&amp; bubble_sort</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector, std::vector&lt; int &gt; &amp;ordered_indexes)</argsstring>
        <name>bubble_sort</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>ordered_indexes</declname>
        </param>
        <briefdescription>
<para>Order the vector from lower to higer value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="172" column="14" bodyfile="lib/vector_functions.hpp" bodystart="172" bodyend="214"/>
        <references refid="print_8hpp_1afded2b178f1cba7246c86beaab6d4e6c" compoundref="print_8hpp" startline="60" endline="60">printC</references>
        <references refid="print_8hpp_1a8d23feea868a983c8c2b661e1e16972f" compoundref="print_8hpp" startline="22">RED</references>
        <references refid="print_8hpp_1ab702106cf3b3e96750b6845ded4e0299" compoundref="print_8hpp" startline="19">RESET</references>
        <referencedby refid="class_calibrator_1a00806ef12bceedaa6c16dad9b653f27f" compoundref="_calibrator_8hpp" startline="796" endline="870">Calibrator::analyse2</referencedby>
        <referencedby refid="vector__functions_8hpp_1ab624cd9b69dafa0701b213f5bb78f911" compoundref="vector__functions_8hpp" startline="218" endline="223">bubble_sort</referencedby>
        <referencedby refid="class_faster2_histo_1a8821f5ded43a6f91593962adbe4761b9" compoundref="_faster2_histo_8hpp" startline="272" endline="298">Faster2Histo::write</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a5369c19ff7c2d997fd60b179355cf4ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fill2D</definition>
        <argsstring>(vector2D&lt; T &gt; &amp;vec2, size_t const &amp;size_x, size_t const &amp;size_y, T const &amp;obj)</argsstring>
        <name>fill2D</name>
        <param>
          <type><ref refid="vector__functions_8hpp_1aaa9a186c52f42a25042db671a3462fc0" kindref="member">vector2D</ref>&lt; T &gt; &amp;</type>
          <declname>vec2</declname>
        </param>
        <param>
          <type><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">size_t</ref> const &amp;</type>
          <declname>size_x</declname>
        </param>
        <param>
          <type><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">size_t</ref> const &amp;</type>
          <declname>size_y</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="67" column="6" bodyfile="lib/vector_functions.hpp" bodystart="67" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1ad399307162129e2996e7bf6e172d97c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int first_index_in</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;vec, T &amp;t)</argsstring>
        <name>first_index_in</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="102" column="5" bodyfile="lib/vector_functions.hpp" bodystart="102" bodyend="105"/>
        <referencedby refid="class_data_file_1a20ccbf2ff940a527452b137a07ff1010" compoundref="_data_file_8hpp" startline="76" endline="81">DataFile&lt; Index, T &gt;::setColumn</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a1c17744fe137b021b31046a91e5cc48d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int first_index_in</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;vec, T const &amp;t)</argsstring>
        <name>first_index_in</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="108" column="5" bodyfile="lib/vector_functions.hpp" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a33c3dce17ce8a71de19b23be1ba9a911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int first_index_in</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vec, T &amp;t)</argsstring>
        <name>first_index_in</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="114" column="5" bodyfile="lib/vector_functions.hpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a95e8e3cb71dee9535c987ed8ac3c6d62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int first_index_in</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vec, T const &amp;t)</argsstring>
        <name>first_index_in</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="120" column="5" bodyfile="lib/vector_functions.hpp" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a2a2fe6c64692ae7368f063010a0ff97a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool found</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;vec, T &amp;t)</argsstring>
        <name>found</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="94" column="6" bodyfile="lib/vector_functions.hpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1aa193795728880d807cbe2bf87bdcae1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool found</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;vec, T const &amp;t)</argsstring>
        <name>found</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="82" column="6" bodyfile="lib/vector_functions.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a398a0aa495662f73ab4d2dfdd2bc2265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool found</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vec, T &amp;t)</argsstring>
        <name>found</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="88" column="6" bodyfile="lib/vector_functions.hpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1ae1d15cdbd76f2b9d444bc29b0cdb91bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool found</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vec, T const &amp;t)</argsstring>
        <name>found</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="76" column="6" bodyfile="lib/vector_functions.hpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1ae440336f79b368a77ed28266f6f8ab6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void invert</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;vector)</argsstring>
        <name>invert</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="226" column="6" bodyfile="lib/vector_functions.hpp" bodystart="226" bodyend="229"/>
        <referencedby refid="class_calibrator_1a00806ef12bceedaa6c16dad9b653f27f" compoundref="_calibrator_8hpp" startline="796" endline="870">Calibrator::analyse2</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a4baf3e978c4b72d0b3c52b064fa3c03e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T maximum</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector)</argsstring>
        <name>maximum</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="128" column="3" bodyfile="lib/vector_functions.hpp" bodystart="128" bodyend="134"/>
        <referencedby refid="class_calibrator_1a00806ef12bceedaa6c16dad9b653f27f" compoundref="_calibrator_8hpp" startline="796" endline="870">Calibrator::analyse2</referencedby>
        <referencedby refid="class_paris_1ad83b7a82190285f4c69fb5eeb30c5db6" compoundref="_paris_8hpp" startline="133" endline="272">Paris::findAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a84e7da8df2ed95366eab92464c82cca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T maximum_index</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector)</argsstring>
        <name>maximum_index</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="145" column="3" bodyfile="lib/vector_functions.hpp" bodystart="145" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a233e14aaf671f05f29c0fe50e646f171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T minimum</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector)</argsstring>
        <name>minimum</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="137" column="3" bodyfile="lib/vector_functions.hpp" bodystart="137" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a5b62e7b42c7d486ff60e1dc978b5279d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T minimum_index</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector)</argsstring>
        <name>minimum_index</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="158" column="3" bodyfile="lib/vector_functions.hpp" bodystart="158" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a8852828b5aaff87e96c53054a243209d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, StaticVector&lt; T &gt; const &amp;vector)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type><ref refid="class_static_vector" kindref="compound">StaticVector</ref>&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="472" column="1" bodyfile="lib/vector_functions.hpp" bodystart="472" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1af8f06ed14ec8b1697169763a8d895105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;input, std::vector&lt; T &gt; vector)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="34" column="14" bodyfile="lib/vector_functions.hpp" bodystart="34" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a197f281dbd89780c3e0c6e50192cf637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::istringstream &amp;</type>
        <definition>std::istringstream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istringstream &amp;is, std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istringstream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="43" column="21" bodyfile="lib/vector_functions.hpp" bodystart="43" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a48d303dc1acbf76836ad27b051168372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; push_back</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;target, std::vector&lt; T &gt; const &amp;source)</argsstring>
        <name>push_back</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="28" column="13" bodyfile="lib/vector_functions.hpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a1351ef703b7cf695131924cc97eb6374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; push_back</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;target, T const &amp;value)</argsstring>
        <name>push_back</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="22" column="13" bodyfile="lib/vector_functions.hpp" bodystart="22" bodyend="25"/>
        <referencedby refid="class_coinc_builder_1a6fbd7caa8ab6ac6bbf4d14eb094b6417" compoundref="_coinc_builder_8hpp" startline="49" endline="90">CoincBuilder::build</referencedby>
        <referencedby refid="class_event_builder_1a721b4b60a459c5a5c00ed3e1b513d636" compoundref="_event_builder_8hpp" startline="49" endline="102">EventBuilder::build</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a0714a23fb316299fdee1e44d9f46343b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool push_back_unique</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;vector, T const &amp;t)</argsstring>
        <name>push_back_unique</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="52" column="6" bodyfile="lib/vector_functions.hpp" bodystart="52" bodyend="63"/>
        <referencedby refid="class_clovers_1a5f280f8b6d043a949b726c7ff2b1e019" compoundref="_clovers_8hpp" startline="460" endline="493">Clovers::FillFast</referencedby>
        <referencedby refid="class_sorted___event_1a868a20701f8be649bbaf0a0366c378d0" compoundref="_sorted___event_8hpp" startline="231" endline="252">Sorted_Event::sortGeClover</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a629f2e4117a0bb1dada5aa3a4fad4765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto sub_vec</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vec, int const &amp;start, int const &amp;length)</argsstring>
        <name>sub_vec</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Returns the vector in the range [start, start+length[. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g. vec = {1,2,3,4,5} ; sub_vec(vec, 1, 3) -&gt; {2, 3, 4}; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="246" column="6" bodyfile="lib/vector_functions.hpp" bodystart="246" bodyend="249"/>
        <referencedby refid="class_spectra_co_1af74c78334a7be1cc421779f9e4b30a0b" compoundref="_spectra_co_8hpp" startline="637" endline="642">SpectraCo::calibrateAndScale</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T sum</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;source)</argsstring>
        <name>sum</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="14" column="3" bodyfile="lib/vector_functions.hpp" bodystart="14" bodyend="19"/>
        <referencedby refid="lib_root_8hpp_1afcf94131ca40144ef5106ddc22a60600" compoundref="lib_root_8hpp" startline="1289" endline="1305">MeanBetweenEdges</referencedby>
        <referencedby refid="class_calibrator_1aa0fff626078ec3cd2e453c5cf6681462" compoundref="_calibrator_8hpp" startline="421" endline="720">Calibrator::peakFinder</referencedby>
        <referencedby refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" compoundref="_spectra_co_8hpp" startline="798" endline="806">SpectraCo::resizeBin</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a87f9787c265733ed96cea09867b8558a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class K</type>
          </param>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void unpack</definition>
        <argsstring>(std::vector&lt; std::pair&lt; K, V &gt;&gt; const &amp;pairs, std::vector&lt; K &gt; &amp;keys, std::vector&lt; V &gt; &amp;values)</argsstring>
        <name>unpack</name>
        <param>
          <type>std::vector&lt; std::pair&lt; K, V &gt;&gt; const &amp;</type>
          <declname>pairs</declname>
        </param>
        <param>
          <type>std::vector&lt; K &gt; &amp;</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>std::vector&lt; V &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="232" column="6" bodyfile="lib/vector_functions.hpp" bodystart="232" bodyend="241"/>
        <referencedby refid="class_calibrator_1a00806ef12bceedaa6c16dad9b653f27f" compoundref="_calibrator_8hpp" startline="796" endline="870">Calibrator::analyse2</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>VECTOR_FUNCTIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_FUNCTIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="print_8hpp" kindref="compound">print.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="10" refid="vector__functions_8hpp_1aaa9a186c52f42a25042db671a3462fc0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1aaa9a186c52f42a25042db671a3462fc0" kindref="member">vector2D</ref><sp/>=<sp/><sp/>std::vector&lt;std::vector&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="14" refid="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" refkind="member"><highlight class="normal">T<sp/><ref refid="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" kindref="member">sum</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>source)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" kindref="member">sum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value<sp/>:<sp/>source)<sp/><ref refid="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" kindref="member">sum</ref><sp/>+=<sp/>value;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" kindref="member">sum</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="22" refid="vector__functions_8hpp_1a1351ef703b7cf695131924cc97eb6374" refkind="member"><highlight class="normal">std::vector&lt;T&gt;<sp/><ref refid="vector__functions_8hpp_1a1351ef703b7cf695131924cc97eb6374" kindref="member">push_back</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>target,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>target.push_back(value);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="28" refid="vector__functions_8hpp_1a48d303dc1acbf76836ad27b051168372" refkind="member"><highlight class="normal">std::vector&lt;T&gt;<sp/><ref refid="vector__functions_8hpp_1a1351ef703b7cf695131924cc97eb6374" kindref="member">push_back</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>target,<sp/>std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>source)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value<sp/>:<sp/>source)<sp/>target.push_back(value);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="34" refid="vector__functions_8hpp_1af8f06ed14ec8b1697169763a8d895105" refkind="member"><highlight class="normal">std::istream&amp;<sp/><ref refid="vector__functions_8hpp_1af8f06ed14ec8b1697169763a8d895105" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>input,<sp/>std::vector&lt;T&gt;<sp/>vector)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>T<sp/>t;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>input<sp/>&gt;&gt;<sp/>t;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>vector.push_back(t);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="43" refid="vector__functions_8hpp_1a197f281dbd89780c3e0c6e50192cf637" refkind="member"><highlight class="normal">std::istringstream<sp/>&amp;<sp/><ref refid="vector__functions_8hpp_1af8f06ed14ec8b1697169763a8d895105" kindref="member">operator &gt;&gt; </ref>(std::istringstream<sp/>&amp;<sp/>is,<sp/>std::vector&lt;T&gt;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>T<sp/>t;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>is<sp/>&gt;&gt;<sp/>t;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>v.push_back(t);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="52" refid="vector__functions_8hpp_1a0714a23fb316299fdee1e44d9f46343b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1a0714a23fb316299fdee1e44d9f46343b" kindref="member">push_back_unique</ref>(std::vector&lt;T&gt;<sp/>&amp;<sp/>vector,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(std::begin(vector),<sp/>std::end(vector),<sp/>t)<sp/>==<sp/>std::end(vector))</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>vector.push_back(t);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="67" refid="vector__functions_8hpp_1a5369c19ff7c2d997fd60b179355cf4ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1a5369c19ff7c2d997fd60b179355cf4ab" kindref="member">fill2D</ref>(<ref refid="vector__functions_8hpp_1aaa9a186c52f42a25042db671a3462fc0" kindref="member">vector2D&lt;T&gt;</ref><sp/>&amp;<sp/>vec2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>size_x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>size_y,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>obj)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>vec2.reserve(size_x);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;size_x;<sp/>i++)<sp/>vec2.emplace_back(std::vector&lt;T&gt;(size_y,<sp/>obj));</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="76" refid="vector__functions_8hpp_1ae1d15cdbd76f2b9d444bc29b0cdb91bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1ae1d15cdbd76f2b9d444bc29b0cdb91bc" kindref="member">found</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vec,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find(vec.begin(),<sp/>vec.end(),<sp/>t)<sp/>!=<sp/>vec.end());</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="82" refid="vector__functions_8hpp_1aa193795728880d807cbe2bf87bdcae1c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1ae1d15cdbd76f2b9d444bc29b0cdb91bc" kindref="member">found</ref>(std::vector&lt;T&gt;<sp/>&amp;<sp/>vec,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find(vec.begin(),<sp/>vec.end(),<sp/>t)<sp/>!=<sp/>vec.end());</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="88" refid="vector__functions_8hpp_1a398a0aa495662f73ab4d2dfdd2bc2265" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1ae1d15cdbd76f2b9d444bc29b0cdb91bc" kindref="member">found</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vec,<sp/>T<sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find(vec.begin(),<sp/>vec.end(),<sp/>t)<sp/>!=<sp/>vec.end());</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="94" refid="vector__functions_8hpp_1a2a2fe6c64692ae7368f063010a0ff97a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1ae1d15cdbd76f2b9d444bc29b0cdb91bc" kindref="member">found</ref>(std::vector&lt;T&gt;<sp/>&amp;<sp/>vec,<sp/>T<sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find(vec.begin(),<sp/>vec.end(),<sp/>t)<sp/>!=<sp/>vec.end());</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="102" refid="vector__functions_8hpp_1ad399307162129e2996e7bf6e172d97c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1ad399307162129e2996e7bf6e172d97c9" kindref="member">first_index_in</ref>(std::vector&lt;T&gt;<sp/>&amp;<sp/>vec,<sp/>T<sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::distance(vec.begin(),<sp/>std::find(vec.begin(),<sp/>vec.end(),<sp/>t)<sp/>!=<sp/>vec.end()));</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="108" refid="vector__functions_8hpp_1a1c17744fe137b021b31046a91e5cc48d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1ad399307162129e2996e7bf6e172d97c9" kindref="member">first_index_in</ref>(std::vector&lt;T&gt;<sp/>&amp;<sp/>vec,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::distance(vec.begin(),<sp/>std::find(vec.begin(),<sp/>vec.end(),<sp/>t)<sp/>!=<sp/>vec.end()));</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="114" refid="vector__functions_8hpp_1a33c3dce17ce8a71de19b23be1ba9a911" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1ad399307162129e2996e7bf6e172d97c9" kindref="member">first_index_in</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vec,<sp/>T<sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::distance(vec.begin(),<sp/>std::find(vec.begin(),<sp/>vec.end(),<sp/>t)<sp/>!=<sp/>vec.end()));</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="120" refid="vector__functions_8hpp_1a95e8e3cb71dee9535c987ed8ac3c6d62" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1ad399307162129e2996e7bf6e172d97c9" kindref="member">first_index_in</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vec,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::distance(vec.begin(),<sp/>std::find(vec.begin(),<sp/>vec.end(),<sp/>t)<sp/>!=<sp/>vec.end()));</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="128" refid="vector__functions_8hpp_1a4baf3e978c4b72d0b3c52b064fa3c03e" refkind="member"><highlight class="normal">T<sp/><ref refid="vector__functions_8hpp_1a4baf3e978c4b72d0b3c52b064fa3c03e" kindref="member">maximum</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector.size()<sp/>&lt;<sp/>1<sp/>)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;vector<sp/>size<sp/>is<sp/>0<sp/>!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>vector[0];</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e<sp/>:<sp/>vector)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e&gt;value)<sp/>value<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="137" refid="vector__functions_8hpp_1a233e14aaf671f05f29c0fe50e646f171" refkind="member"><highlight class="normal">T<sp/><ref refid="vector__functions_8hpp_1a233e14aaf671f05f29c0fe50e646f171" kindref="member">minimum</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>vector[0];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e<sp/>:<sp/>vector)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e&lt;value)<sp/>value<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="145" refid="vector__functions_8hpp_1a84e7da8df2ed95366eab92464c82cca3" refkind="member"><highlight class="normal">T<sp/><ref refid="vector__functions_8hpp_1a84e7da8df2ed95366eab92464c82cca3" kindref="member">maximum_index</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>T<sp/>value<sp/>=<sp/>vector[index];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;vector.size();<sp/>i++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector[i]&gt;value)<sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>vector[i];</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="158" refid="vector__functions_8hpp_1a5b62e7b42c7d486ff60e1dc978b5279d" refkind="member"><highlight class="normal">T<sp/><ref refid="vector__functions_8hpp_1a5b62e7b42c7d486ff60e1dc978b5279d" kindref="member">minimum_index</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>T<sp/>value<sp/>=<sp/>vector[index];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;vector.size();<sp/>i++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector[i]&lt;value)<sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>vector[i];</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="172" refid="vector__functions_8hpp_1a516812808c1a19cf37a17258f1789ab8" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/>&amp;<sp/><ref refid="vector__functions_8hpp_1a516812808c1a19cf37a17258f1789ab8" kindref="member">bubble_sort</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector,<sp/>std::vector&lt;int&gt;<sp/>&amp;<sp/>ordered_indexes)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifications<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector.size()<sp/>==<sp/>0)<sp/>{<ref refid="print_8hpp_1afded2b178f1cba7246c86beaab6d4e6c" kindref="member">printC</ref>(<ref refid="print_8hpp_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>,<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>bubble_sort(vector,<sp/>ordered_indexes)<sp/>:<sp/>vector<sp/>size<sp/>is<sp/>zero<sp/>!&quot;</highlight><highlight class="normal">,<sp/><ref refid="print_8hpp_1ab702106cf3b3e96750b6845ded4e0299" kindref="member">RESET</ref>);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ordered_indexes;}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector.size()<sp/>!=<sp/>ordered_indexes.size())<sp/>ordered_indexes.resize(vector.size());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialisations<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>T<sp/>v<sp/>=<sp/>vector[0];</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>ordered_indexes[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>through<sp/>the<sp/>vector<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;i&lt;vector.size();<sp/>i++)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initial<sp/>guess<sp/>:<sp/>the<sp/>ith<sp/>ordered_indexes&apos;s<sp/>index<sp/>corresponds<sp/>to<sp/>the<sp/>vector&apos;s<sp/>ith<sp/>index<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(e.g.<sp/>the<sp/>5th<sp/>bin<sp/>has<sp/>initial<sp/>value<sp/>5<sp/>(ordered_indexes[5]<sp/>=<sp/>5))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>ordered_indexes[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>this<sp/>assumption<sp/>:<sp/>v<sp/>holds<sp/>the<sp/>value<sp/>of<sp/>ith<sp/>value<sp/>of<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>vector[i];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>true<sp/>jth<sp/>index<sp/>of<sp/>the<sp/>ith<sp/>vector&apos;s<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>goes<sp/>on<sp/>until<sp/>the<sp/>(j-1)th<sp/>vector&apos;s<sp/>value<sp/>is<sp/>lower<sp/>than<sp/>the<sp/>ith<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((j&gt;0)<sp/>&amp;&amp;<sp/>vector[ordered_indexes[j-1]]<sp/>&gt;<sp/>v)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>(j-1)th<sp/>value<sp/>is<sp/>higher<sp/>than<sp/>the<sp/>ith<sp/>value<sp/>then<sp/>switch<sp/>the<sp/>indexes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ordered_indexes[j]<sp/>=<sp/>ordered_indexes[j-1];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--j;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>correct<sp/>position<sp/>of<sp/>the<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>ordered_indexes[j]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>method<sp/>is<sp/>iterative<sp/>:<sp/>if<sp/>the<sp/>1st<sp/>value<sp/>is<sp/>higher<sp/>than<sp/>the<sp/>2nd,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ordered_index[0]<sp/>=<sp/>1<sp/>and<sp/>ordered_index[1]<sp/>=<sp/>0.<sp/>If<sp/>now<sp/>the<sp/>3rd<sp/>value<sp/>is<sp/>higher<sp/>than<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>2nd<sp/>but<sp/>lower<sp/>than<sp/>the<sp/>1st<sp/>(for<sp/>i<sp/>=<sp/>2),<sp/>vector[ordered_index[1]]<sp/>&gt;<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>vector[ordered_index[0]]<sp/>&lt;<sp/>v<sp/>:<sp/>the<sp/>result<sp/>is<sp/>indeed<sp/>{1,<sp/>2,<sp/>0}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ordered_indexes;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="218" refid="vector__functions_8hpp_1ab624cd9b69dafa0701b213f5bb78f911" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="vector__functions_8hpp_1a516812808c1a19cf37a17258f1789ab8" kindref="member">bubble_sort</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>ordered_indexes(vector.size());</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><ref refid="vector__functions_8hpp_1a516812808c1a19cf37a17258f1789ab8" kindref="member">bubble_sort</ref>(vector,<sp/>ordered_indexes);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ordered_indexes;</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="226" refid="vector__functions_8hpp_1ae440336f79b368a77ed28266f6f8ab6e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1ae440336f79b368a77ed28266f6f8ab6e" kindref="member">invert</ref>(std::vector&lt;T&gt;<sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>std::reverse(vector.begin(),<sp/>vector.end());</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="232" refid="vector__functions_8hpp_1a87f9787c265733ed96cea09867b8558a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1a87f9787c265733ed96cea09867b8558a" kindref="member">unpack</ref>(std::vector&lt;std::pair&lt;K,V&gt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>pairs,<sp/>std::vector&lt;K&gt;<sp/>&amp;<sp/>keys,<sp/>std::vector&lt;V&gt;<sp/>&amp;<sp/>values)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>keys.reserve(pairs.size());</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>values.reserve(pairs.size());</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>pair<sp/>:<sp/>pairs)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>keys.push_back(pair.first);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>values.push_back(pair.second);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="246" refid="vector__functions_8hpp_1a629f2e4117a0bb1dada5aa3a4fad4765" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1a629f2e4117a0bb1dada5aa3a4fad4765" kindref="member">sub_vec</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>length)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;(vec.begin()<sp/>+<sp/>start,<sp/>vec.begin()<sp/>+<sp/>start<sp/>+<sp/>length);</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="comment">//<sp/><sp/><sp/>CLASS<sp/>STATIC<sp/>VECTOR<sp/><sp/>//</highlight></codeline>
<codeline lineno="254"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="293" refid="class_static_vector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_static_vector" kindref="compound">StaticVector</ref></highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="296" refid="class_static_vector_1a5b3dc3f31d7b676540c171832d244304" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector_1a5b3dc3f31d7b676540c171832d244304" kindref="member">StaticVector</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="class_static_vector_1a1fd1ac7d3e54a74084f25ecad026c79c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector_1a1fd1ac7d3e54a74084f25ecad026c79c" kindref="member">StaticVector</ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>static_size)<sp/>:<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>(static_size)<sp/>{<ref refid="class_static_vector_1aac46f946b1d5b09e8713eac121594a06" kindref="member">reserve</ref>();}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="class_static_vector_1a2c073e13f79566c96c4a28837cbcc358" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector_1a2c073e13f79566c96c4a28837cbcc358" kindref="member">StaticVector</ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>static_size,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)<sp/>:<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>(static_size)<sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aac46f946b1d5b09e8713eac121594a06" kindref="member">reserve</ref>();<sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1a39189c70d033178ce16024a824343409" kindref="member">fill_static</ref>(e);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="class_static_vector_1a982fd40392e5c546da6ba2360f59fe55" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector_1a982fd40392e5c546da6ba2360f59fe55" kindref="member">StaticVector</ref>(<ref refid="class_static_vector" kindref="compound">StaticVector&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)<sp/>:<sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>(vector.<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>),</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>(vector.<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>),</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aad06f563cf46c8038677140a57d928ed" kindref="member">m_deleted</ref>(vector.<ref refid="class_static_vector_1aad06f563cf46c8038677140a57d928ed" kindref="member">m_deleted</ref>)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="class_static_vector_1aac46f946b1d5b09e8713eac121594a06" kindref="member">reserve</ref>();<sp/>*<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref><sp/>=<sp/>*(vector.<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>);<sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="class_static_vector_1a27bc6181b4ef6643f3abc9c91d728349" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector_1a27bc6181b4ef6643f3abc9c91d728349" kindref="member">StaticVector</ref>(<ref refid="class_static_vector" kindref="compound">StaticVector&lt;T&gt;</ref>&amp;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>std::move(other);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="class_static_vector_1a5170abb13005d53067431140a679ce4b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector_1a5170abb13005d53067431140a679ce4b" kindref="member">~StaticVector</ref>()</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="class_static_vector_1aad06f563cf46c8038677140a57d928ed" kindref="member">m_deleted</ref>)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aad06f563cf46c8038677140a57d928ed" kindref="member">m_deleted</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;W:<sp/>StaticVector<sp/>double<sp/>delete,<sp/>be<sp/>careful<sp/>(this<sp/>is<sp/>a<sp/>just<sp/>a<sp/>warning<sp/>message)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="class_static_vector_1a3e8eb7b20f56c54b32640267e6e797bc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a3e8eb7b20f56c54b32640267e6e797bc" kindref="member">deallocate</ref><sp/>()</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>&gt;<sp/>0)<sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>=<sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="class_static_vector_1a9b1f4393056e120458e8d10da7222aa7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector" kindref="compound">StaticVector</ref>&amp;<sp/><ref refid="class_static_vector_1a9b1f4393056e120458e8d10da7222aa7" kindref="member">operator=</ref>(<ref refid="class_static_vector" kindref="compound">StaticVector&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector.<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>==<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>&amp;&amp;<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>=<sp/>vector.<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>=<sp/>vector.<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref><sp/>=<sp/>*(vector.<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="class_static_vector_1ae292e425773c82dc9eb20db025963e29" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1ae292e425773c82dc9eb20db025963e29" kindref="member">resize</ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_size<sp/>=<sp/>0)<sp/>{<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>=<sp/>new_size;}</highlight></codeline>
<codeline lineno="365" refid="class_static_vector_1a9c5d814a81b352ebbb5d8a07cbdd2699" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a9c5d814a81b352ebbb5d8a07cbdd2699" kindref="member">clear</ref><sp/>()<sp/>{<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="class_static_vector_1a3f31307e19e313fb7b4b93f284194f52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a3f31307e19e313fb7b4b93f284194f52" kindref="member">static_resize</ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_size<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>=<sp/>new_size;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aac46f946b1d5b09e8713eac121594a06" kindref="member">reserve</ref>();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375" refid="class_static_vector_1a25564f07e92dd67a4f6bc0dfeaaad31b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a25564f07e92dd67a4f6bc0dfeaaad31b" kindref="member">static_resize</ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_size,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1a3f31307e19e313fb7b4b93f284194f52" kindref="member">static_resize</ref>(new_size);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1a39189c70d033178ce16024a824343409" kindref="member">fill_static</ref>(t);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="class_static_vector_1a28a635b7f2cbd0cbc5a042dc22ab7ea3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a28a635b7f2cbd0cbc5a042dc22ab7ea3" kindref="member">checkCapacity</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="382"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>UNSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>&gt;<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Capacity<sp/>of<sp/>StaticVector&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T).name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>with<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exceeded&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">//UNSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="class_static_vector_1a581a28f823edc9d3fbfa959465004f12" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a581a28f823edc9d3fbfa959465004f12" kindref="member">checkCapacity</ref>()<sp/></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>UNSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>&gt;<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Capacity<sp/>of<sp/>StaticVector&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T).name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>with<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exceeded&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">//UNSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="class_static_vector_1ad756be87d5c09054f47d40e38ce4b45f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1ad756be87d5c09054f47d40e38ce4b45f" kindref="member">has</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1a78db68071e02cf724af349d0e606ea4e" kindref="member">begin</ref>(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f" kindref="member">end</ref>(),<sp/>t)<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f" kindref="member">end</ref>());}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="class_static_vector_1aa5ed2c50cf5c44e9685430f0aa6be160" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1aa5ed2c50cf5c44e9685430f0aa6be160" kindref="member">has</ref>(T<sp/>&amp;<sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1a78db68071e02cf724af349d0e606ea4e" kindref="member">begin</ref>(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f" kindref="member">end</ref>(),<sp/>t)<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f" kindref="member">end</ref>());}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="class_static_vector_1a8f604b0f4165d95a6b6653907c92ceb3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a8f604b0f4165d95a6b6653907c92ceb3" kindref="member">push_back</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)<sp/></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1a28a635b7f2cbd0cbc5a042dc22ab7ea3" kindref="member">checkCapacity</ref>();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>[<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>++]<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="class_static_vector_1a20da4a5384ac01b54c19c563888fe3a3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a20da4a5384ac01b54c19c563888fe3a3" kindref="member">move_back</ref>(T<sp/>&amp;&amp;<sp/>e)<sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1a28a635b7f2cbd0cbc5a042dc22ab7ea3" kindref="member">checkCapacity</ref>();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>[<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>++]<sp/>=<sp/>std::move(e);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="class_static_vector_1ae9a13402fed613a29197e99ce20396f8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1ae9a13402fed613a29197e99ce20396f8" kindref="member">push_back_unique</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;<ref refid="class_static_vector_1ad756be87d5c09054f47d40e38ce4b45f" kindref="member">has</ref>(t))<sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1a8f604b0f4165d95a6b6653907c92ceb3" kindref="member">push_back</ref>(t);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="class_static_vector_1a78db68071e02cf724af349d0e606ea4e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="class_static_vector_1a78db68071e02cf724af349d0e606ea4e" kindref="member">begin</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f" kindref="member">end</ref>()<sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>+<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>;}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="class_static_vector_1a4adf4196edf343a347c758ac9ad61be1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="class_static_vector_1a4adf4196edf343a347c758ac9ad61be1" kindref="member">begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="class_static_vector_1aff91554484ba655f02b84fbe17276332" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="class_static_vector_1aff91554484ba655f02b84fbe17276332" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>+<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>;}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="class_static_vector_1a44b964207cfd132dda347e246a3640c8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_static_vector_1a44b964207cfd132dda347e246a3640c8" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>;}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="class_static_vector_1ae2fa694636166997299fc80186d2c7dc" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/>&amp;<sp/><ref refid="class_static_vector_1ae2fa694636166997299fc80186d2c7dc" kindref="member">operator[] </ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="445"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1a28a635b7f2cbd0cbc5a042dc22ab7ea3" kindref="member">checkCapacity</ref>();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>[i];</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="class_static_vector_1adb781bb9deb3bb03929efd86ec024ea1" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_static_vector_1adb781bb9deb3bb03929efd86ec024ea1" kindref="member">at</ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>[i];<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>[0];}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="class_static_vector_1a7d5be1902e52590f04d726d14c25db8d" refkind="member"><highlight class="normal"><sp/><sp/>T*<sp/><ref refid="class_static_vector_1a7d5be1902e52590f04d726d14c25db8d" kindref="member">data</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="class_static_vector_1aeb818a6ce377300792c49ac51bec0f02" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1aeb818a6ce377300792c49ac51bec0f02" kindref="member">fill</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)<sp/>{memset(<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>,<sp/>e,<sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(e));}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="class_static_vector_1a39189c70d033178ce16024a824343409" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a39189c70d033178ce16024a824343409" kindref="member">fill_static</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)<sp/>{memset(<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>,<sp/>e,<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(e));}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="class_static_vector_1aac46f946b1d5b09e8713eac121594a06" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1aac46f946b1d5b09e8713eac121594a06" kindref="member">reserve</ref>()<sp/>{<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>];}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="465" refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" refkind="member"><highlight class="normal"><sp/><sp/>T*<sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;<sp/></highlight><highlight class="comment">//<sp/>Underlying<sp/>data<sp/>dynamic<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>User<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467" refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468" refid="class_static_vector_1aad06f563cf46c8038677140a57d928ed" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1aad06f563cf46c8038677140a57d928ed" kindref="member">m_deleted</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>class<sp/>deleted<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal">};</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="472" refid="vector__functions_8hpp_1a8852828b5aaff87e96c53054a243209d" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="vector__functions_8hpp_1a8852828b5aaff87e96c53054a243209d" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/><ref refid="class_static_vector" kindref="compound">StaticVector&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e<sp/>:<sp/>vector)<sp/>cout<sp/>&lt;&lt;<sp/>e<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="479"><highlight class="comment">template&lt;T&gt;</highlight></codeline>
<codeline lineno="480"><highlight class="comment">class<sp/>SmartVector</highlight></codeline>
<codeline lineno="481"><highlight class="comment">{</highlight></codeline>
<codeline lineno="482"><highlight class="comment">public:</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/>SmartVector()<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/>SmartVector(std::vector&lt;T&gt;<sp/>const<sp/>&amp;<sp/>vector)<sp/>:<sp/>m_vector(vector)<sp/>{}</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/>SmartVector(std::vector&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>vector)<sp/>:<sp/>m_vector(vector)<sp/>{}</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/>SmartVector(std::vector&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector)<sp/>:<sp/>m_vector(vector)<sp/>{}</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/>SmartVector(std::Initialiser_list&lt;T&gt;<sp/>const<sp/>&amp;<sp/>init_list)<sp/>:<sp/>m_vector(init_list)<sp/>{}</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/><sp/>SmartVector(std::Initialiser_list&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>init_list)<sp/>:<sp/>m_vector(init_list)<sp/>{}</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/>SmartVector(std::Initialiser_list&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_list)<sp/>:<sp/>m_vector(init_list)<sp/>{}</highlight></codeline>
<codeline lineno="490"><highlight class="comment"></highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/>auto<sp/>operator=(std::vector&lt;T&gt;<sp/>const<sp/>&amp;<sp/>vector)<sp/>{m_vector<sp/>=<sp/>vector;}</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/>auto<sp/>operator=(std::vector&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>vector)<sp/>{m_vector<sp/>=<sp/>vector;}</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/><sp/>auto<sp/>operator=(std::vector&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector)<sp/>{m_vector<sp/>=<sp/>vector;}</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/>auto<sp/>operator=(std::Initialiser_list&lt;T&gt;<sp/>const<sp/>&amp;<sp/>init_list)<sp/>{m_vector<sp/>=<sp/>vector;}</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/>auto<sp/>operator=(std::Initialiser_list&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>init_list)<sp/>{m_vector<sp/>=<sp/>vector;}</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/>auto<sp/>operator=(std::Initialiser_list&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_list)<sp/>{m_vector<sp/>=<sp/>vector;}</highlight></codeline>
<codeline lineno="497"><highlight class="comment"></highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/>void<sp/>bubble_sort()<sp/>{bubble_sort(m_vector,<sp/>m_index);}</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>getNextOrder()<sp/>const<sp/>{return<sp/>m_vector[m_index[m_iterator++]];}</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/>auto<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>getNextOrder()<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{return<sp/>m_vector[m_index[m_iterator++]];}</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/>bool<sp/>readNextOrder(T<sp/>&amp;<sp/>value)<sp/></highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(m_iterator&gt;m_vector.size())<sp/></highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>m_vector[m_index[m_iterator++]];<sp/></highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/><sp/><sp/><sp/>else<sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/>void<sp/><sp/><sp/>setIterator(int<sp/>const<sp/>&amp;<sp/>i<sp/>=<sp/>0)<sp/>{m_iterator<sp/>=<sp/>i;}</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/>void<sp/>resetIterator()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{m_iterator<sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="515"><highlight class="comment"></highlight></codeline>
<codeline lineno="516"><highlight class="comment">private:</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/><sp/>std::vector&lt;T&gt;<sp/>m_vector;</highlight></codeline>
<codeline lineno="518"><highlight class="comment"></highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/>//<sp/>For<sp/>bubble<sp/>sort<sp/>:</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/>std::vector&lt;int&gt;<sp/>m_index;</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/>int<sp/>m_iterator<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="522"><highlight class="comment">};</highlight></codeline>
<codeline lineno="523"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//VECTOR_FUNCTIONS_HPP</highlight></codeline>
    </programlisting>
    <location file="lib/vector_functions.hpp"/>
  </compounddef>
</doxygen>
