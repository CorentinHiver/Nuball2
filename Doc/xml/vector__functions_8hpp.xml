<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="vector__functions_8hpp" kind="file" language="C++">
    <compoundname>vector_functions.hpp</compoundname>
    <includes refid="print_8hpp" local="yes">print.hpp</includes>
    <includedby refid="files__functions_8hpp" local="yes">lib/files_functions.hpp</includedby>
    <includedby refid="lib_co_8hpp" local="yes">lib/libCo.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>print.hpp</label>
        <link refid="print_8hpp"/>
      </node>
      <node id="1">
        <label>lib/vector_functions.hpp</label>
        <link refid="vector__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="46">
        <label>lib/MTObjects/MTVariable.hpp</label>
        <link refid="_m_t_variable_8hpp"/>
      </node>
      <node id="4">
        <label>lib/Analyse/Counters.hpp</label>
        <link refid="_analyse_2_counters_8hpp"/>
      </node>
      <node id="34">
        <label>lib/Classes/RWMat.hxx</label>
        <link refid="_r_w_mat_8hxx"/>
      </node>
      <node id="35">
        <label>lib/libRoot.hpp</label>
        <link refid="lib_root_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>lib/Modules/Faster2Histo.hpp</label>
        <link refid="_faster2_histo_8hpp"/>
      </node>
      <node id="27">
        <label>lib/Classes/RF_Manager.hpp</label>
        <link refid="_r_f___manager_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>lib/Classes/Manip.hpp</label>
        <link refid="_manip_8hpp"/>
      </node>
      <node id="20">
        <label>lib/MTObjects/MTFasterReader.hpp</label>
        <link refid="_m_t_faster_reader_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>lib/Classes/Nuball2Tree.hpp</label>
        <link refid="_nuball2_tree_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>lib/Classes/Gate.hpp</label>
        <link refid="_gate_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>lib/Analyse/DSSD.hpp</label>
        <link refid="_d_s_s_d_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>lib/MTObjects/MTFilesManager.hpp</label>
        <link refid="_m_t_files_manager_8hpp"/>
      </node>
      <node id="40">
        <label>lib/Classes/FasterReader.hpp</label>
        <link refid="_faster_reader_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>lib/Analyse/EventAnalyse.hpp</label>
        <link refid="_event_analyse_8hpp"/>
      </node>
      <node id="43">
        <label>lib/MTObjects/MTCounter.hpp</label>
        <link refid="_m_t_counter_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>lib/Classes/Hit.hpp</label>
        <link refid="_hit_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>lib/libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>lib/Classes/EventBuilder.hpp</label>
        <link refid="_event_builder_8hpp"/>
      </node>
      <node id="17">
        <label>lib/Analyse/Clovers.hpp</label>
        <link refid="_clovers_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>lib/Modules/Timewalk.hpp</label>
        <link refid="_timewalk_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>lib/Modules/CloverSpectra.hpp</label>
        <link refid="_clover_spectra_8hpp"/>
      </node>
      <node id="45">
        <label>lib/MTObjects/MTList.hpp</label>
        <link refid="_m_t_list_8hpp"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>lib/MTObjects/MTTHist.hpp</label>
        <link refid="_m_t_t_hist_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>lib/files_functions.hpp</label>
        <link refid="files__functions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>lib/Analyse/ParisCluster.hpp</label>
        <link refid="_paris_cluster_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>lib/Classes/Counters.hpp</label>
        <link refid="_classes_2_counters_8hpp"/>
      </node>
      <node id="38">
        <label>lib/Classes/Detectors.hpp</label>
        <link refid="_detectors_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>lib/Classes/SpectraAlignator.hpp</label>
        <link refid="_spectra_alignator_8hpp"/>
      </node>
      <node id="16">
        <label>lib/Classes/Event.hpp</label>
        <link refid="_event_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>lib/Modules/Histogramor.hpp</label>
        <link refid="_histogramor_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/vector_functions.hpp</label>
        <link refid="vector__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>lib/Analyse/HistoAnalyse.hpp</label>
        <link refid="_histo_analyse_8hpp"/>
      </node>
      <node id="7">
        <label>lib/Analyse/Sorted_Event.hpp</label>
        <link refid="_sorted___event_8hpp"/>
      </node>
      <node id="11">
        <label>lib/Modules/Faster2Root.hpp</label>
        <link refid="_faster2_root_8hpp"/>
      </node>
      <node id="37">
        <label>lib/Analyse/ParisPhoswitch.hpp</label>
        <link refid="_paris_phoswitch_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>lib/Modules/RunMatrixator.hpp</label>
        <link refid="_run_matrixator_8hpp"/>
      </node>
      <node id="9">
        <label>lib/Classes/CoincBuilder.hpp</label>
        <link refid="_coinc_builder_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>lib/Classes/Builder.hpp</label>
        <link refid="_builder_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>lib/MTObjects/MTObject.hpp</label>
        <link refid="_m_t_object_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>lib/Modules/NearLine.hpp</label>
        <link refid="_near_line_8hpp"/>
      </node>
      <node id="12">
        <label>lib/Modules/Timeshifts.hpp</label>
        <link refid="_timeshifts_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>lib/Analyse/Paris.hpp</label>
        <link refid="_paris_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>lib/Classes/Alignator.hpp</label>
        <link refid="_alignator_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>lib/Classes/FilesManager.hpp</label>
        <link refid="_files_manager_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>lib/MTObjects/MTRootReader.hpp</label>
        <link refid="_m_t_root_reader_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>lib/Modules/Calibration.hpp</label>
        <link refid="_calibration_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>lib/Classes/Performances.hpp</label>
        <link refid="_performances_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_static_vector" prot="public">StaticVector</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="vector__functions_8hpp_1a473cc8f4e0f7089c2a1757a435f7ae04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; bubbleSort</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector)</argsstring>
        <name>bubbleSort</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="141" column="13" bodyfile="lib/vector_functions.hpp" bodystart="141" bodyend="146"/>
        <references refid="vector__functions_8hpp_1a28b5494cf9f51ee725e680752955a8e1" compoundref="vector__functions_8hpp" startline="118" endline="138">bubbleSort</references>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a28b5494cf9f51ee725e680752955a8e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; bubbleSort</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector, std::vector&lt; int &gt; &amp;indexes)</argsstring>
        <name>bubbleSort</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>indexes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="118" column="13" bodyfile="lib/vector_functions.hpp" bodystart="118" bodyend="138"/>
        <referencedby refid="vector__functions_8hpp_1a473cc8f4e0f7089c2a1757a435f7ae04" compoundref="vector__functions_8hpp" startline="141" endline="146">bubbleSort</referencedby>
        <referencedby refid="class_minimisator_1a4146b62ab538a9c36f9a93855bee198a" compoundref="_spectra_alignator_8hpp" startline="656" endline="762">Minimisator::minimise</referencedby>
        <referencedby refid="class_faster2_histo_1a355de92b0dc2822b28ac3f65f87b5db9" compoundref="_faster2_histo_8hpp" startline="167" endline="184">Faster2Histo::write</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a9261ebb5fd81046aa8620dddb2b3ea75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fill2D</definition>
        <argsstring>(std::vector&lt; std::vector&lt; T &gt;&gt; &amp;vec2, size_t const &amp;size_x, size_t const &amp;size_y, T const &amp;obj)</argsstring>
        <name>fill2D</name>
        <param>
          <type>std::vector&lt; std::vector&lt; T &gt;&gt; &amp;</type>
          <declname>vec2</declname>
        </param>
        <param>
          <type><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">size_t</ref> const &amp;</type>
          <declname>size_x</declname>
        </param>
        <param>
          <type><ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">size_t</ref> const &amp;</type>
          <declname>size_y</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="39" column="6" bodyfile="lib/vector_functions.hpp" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a14962b41d2983daea3bcdc089a8257ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool found</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;vector, T &amp;t)</argsstring>
        <name>found</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="64" column="6" bodyfile="lib/vector_functions.hpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1afc7684c3345171a9a9655f11757aa0fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool found</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;vector, T const &amp;t)</argsstring>
        <name>found</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="52" column="6" bodyfile="lib/vector_functions.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1adaad9cc33dbf016cd85fd4e57823d667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool found</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector, T &amp;t)</argsstring>
        <name>found</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="58" column="6" bodyfile="lib/vector_functions.hpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1afbed7719916e5ec83a4dbfc0d3b45460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool found</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector, T const &amp;t)</argsstring>
        <name>found</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="46" column="6" bodyfile="lib/vector_functions.hpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a4baf3e978c4b72d0b3c52b064fa3c03e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T maximum</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector)</argsstring>
        <name>maximum</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="76" column="3" bodyfile="lib/vector_functions.hpp" bodystart="76" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a66a5408a65e33e909fef9fecfc9837a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T maximumIndex</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector)</argsstring>
        <name>maximumIndex</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="92" column="3" bodyfile="lib/vector_functions.hpp" bodystart="92" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a233e14aaf671f05f29c0fe50e646f171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T minimum</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector)</argsstring>
        <name>minimum</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="84" column="3" bodyfile="lib/vector_functions.hpp" bodystart="84" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a660ee419eb6d35b4ac555e5bb5ab66cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T minimumIndex</definition>
        <argsstring>(std::vector&lt; T &gt; const &amp;vector)</argsstring>
        <name>minimumIndex</name>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="105" column="3" bodyfile="lib/vector_functions.hpp" bodystart="105" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a8852828b5aaff87e96c53054a243209d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, StaticVector&lt; T &gt; const &amp;vector)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type><ref refid="class_static_vector" kindref="compound">StaticVector</ref>&lt; T &gt; const &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="360" column="1" bodyfile="lib/vector_functions.hpp" bodystart="360" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1af8f06ed14ec8b1697169763a8d895105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;input, std::vector&lt; T &gt; vector)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="7" column="14" bodyfile="lib/vector_functions.hpp" bodystart="7" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a197f281dbd89780c3e0c6e50192cf637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::istringstream &amp;</type>
        <definition>std::istringstream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istringstream &amp;is, std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istringstream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="16" column="21" bodyfile="lib/vector_functions.hpp" bodystart="16" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="vector__functions_8hpp_1a0714a23fb316299fdee1e44d9f46343b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool push_back_unique</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;vector, T const &amp;t)</argsstring>
        <name>push_back_unique</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/vector_functions.hpp" line="25" column="6" bodyfile="lib/vector_functions.hpp" bodystart="25" bodyend="36"/>
        <referencedby refid="class_clovers_1a5f280f8b6d043a949b726c7ff2b1e019" compoundref="_clovers_8hpp" startline="470" endline="503">Clovers::FillFast</referencedby>
        <referencedby refid="class_sorted___event_1a868a20701f8be649bbaf0a0366c378d0" compoundref="_sorted___event_8hpp" startline="231" endline="252">Sorted_Event::sortGeClover</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>VECTOR_FUNCTIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_FUNCTIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="print_8hpp" kindref="compound">print.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="7" refid="vector__functions_8hpp_1af8f06ed14ec8b1697169763a8d895105" refkind="member"><highlight class="normal">std::istream&amp;<sp/><ref refid="vector__functions_8hpp_1af8f06ed14ec8b1697169763a8d895105" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>input,<sp/>std::vector&lt;T&gt;<sp/>vector)</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>T<sp/>t;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>input<sp/>&gt;&gt;<sp/>t;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>vector.push_back(t);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="16" refid="vector__functions_8hpp_1a197f281dbd89780c3e0c6e50192cf637" refkind="member"><highlight class="normal">std::istringstream<sp/>&amp;<sp/><ref refid="vector__functions_8hpp_1af8f06ed14ec8b1697169763a8d895105" kindref="member">operator &gt;&gt; </ref>(std::istringstream<sp/>&amp;<sp/>is,<sp/>std::vector&lt;T&gt;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>T<sp/>t;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>is<sp/>&gt;&gt;<sp/>t;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>v.push_back(t);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="25" refid="vector__functions_8hpp_1a0714a23fb316299fdee1e44d9f46343b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1a0714a23fb316299fdee1e44d9f46343b" kindref="member">push_back_unique</ref>(std::vector&lt;T&gt;<sp/>&amp;<sp/>vector,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(std::begin(vector),<sp/>std::end(vector),<sp/>t)<sp/>==<sp/>std::end(vector))</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>vector.push_back(t);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="39" refid="vector__functions_8hpp_1a9261ebb5fd81046aa8620dddb2b3ea75" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1a9261ebb5fd81046aa8620dddb2b3ea75" kindref="member">fill2D</ref>(std::vector&lt;std::vector&lt;T&gt;&gt;<sp/>&amp;<sp/>vec2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>size_x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>size_y,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>obj)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>vec2.reserve(size_x);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;size_x;<sp/>i++)<sp/>vec2.emplace_back(std::vector&lt;T&gt;(size_y,<sp/>obj));</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="46" refid="vector__functions_8hpp_1afbed7719916e5ec83a4dbfc0d3b45460" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1afbed7719916e5ec83a4dbfc0d3b45460" kindref="member">found</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find(std::begin(vector),<sp/>std::end(vector),<sp/>t)<sp/>!=<sp/>std::end(vector));</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="52" refid="vector__functions_8hpp_1afc7684c3345171a9a9655f11757aa0fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1afbed7719916e5ec83a4dbfc0d3b45460" kindref="member">found</ref>(std::vector&lt;T&gt;<sp/>&amp;<sp/>vector,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find(std::begin(vector),<sp/>std::end(vector),<sp/>t)<sp/>!=<sp/>std::end(vector));</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="58" refid="vector__functions_8hpp_1adaad9cc33dbf016cd85fd4e57823d667" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1afbed7719916e5ec83a4dbfc0d3b45460" kindref="member">found</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector,<sp/>T<sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find(std::begin(vector),<sp/>std::end(vector),<sp/>t)<sp/>!=<sp/>std::end(vector));</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="64" refid="vector__functions_8hpp_1a14962b41d2983daea3bcdc089a8257ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1afbed7719916e5ec83a4dbfc0d3b45460" kindref="member">found</ref>(std::vector&lt;T&gt;<sp/>&amp;<sp/>vector,<sp/>T<sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find(std::begin(vector),<sp/>std::end(vector),<sp/>t)<sp/>!=<sp/>std::end(vector));</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T<sp/>get_max_value(std::vector&lt;T&gt;<sp/>const<sp/>&amp;<sp/>vec)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="76" refid="vector__functions_8hpp_1a4baf3e978c4b72d0b3c52b064fa3c03e" refkind="member"><highlight class="normal">T<sp/><ref refid="vector__functions_8hpp_1a4baf3e978c4b72d0b3c52b064fa3c03e" kindref="member">maximum</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>T<sp/>value<sp/>=<sp/>vector[0];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e<sp/>:<sp/>vector)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e&gt;value)<sp/>value<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="84" refid="vector__functions_8hpp_1a233e14aaf671f05f29c0fe50e646f171" refkind="member"><highlight class="normal">T<sp/><ref refid="vector__functions_8hpp_1a233e14aaf671f05f29c0fe50e646f171" kindref="member">minimum</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>T<sp/>value<sp/>=<sp/>vector[0];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e<sp/>:<sp/>vector)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e&lt;value)<sp/>value<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="92" refid="vector__functions_8hpp_1a66a5408a65e33e909fef9fecfc9837a1" refkind="member"><highlight class="normal">T<sp/><ref refid="vector__functions_8hpp_1a66a5408a65e33e909fef9fecfc9837a1" kindref="member">maximumIndex</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>T<sp/>value<sp/>=<sp/>vector[index];</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;vector.size();<sp/>i++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector[i]&gt;value)<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>vector[i];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="105" refid="vector__functions_8hpp_1a660ee419eb6d35b4ac555e5bb5ab66cd" refkind="member"><highlight class="normal">T<sp/><ref refid="vector__functions_8hpp_1a660ee419eb6d35b4ac555e5bb5ab66cd" kindref="member">minimumIndex</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>T<sp/>value<sp/>=<sp/>vector[index];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;vector.size();<sp/>i++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector[i]&lt;value)<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>vector[i];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="118" refid="vector__functions_8hpp_1a28b5494cf9f51ee725e680752955a8e1" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="vector__functions_8hpp_1a28b5494cf9f51ee725e680752955a8e1" kindref="member">bubbleSort</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector,<sp/>std::vector&lt;int&gt;<sp/>&amp;<sp/>indexes)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector.size()<sp/>!=<sp/>indexes.size())<sp/>indexes.resize(vector.size());</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>indexes[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;j&lt;vector.size();<sp/>j++)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>indexes[j]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>vector[j];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((i&gt;0)<sp/>&amp;&amp;<sp/>vector[indexes[i-1]]<sp/>&gt;<sp/>v)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indexes[i]<sp/>=<sp/>indexes[i-1];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>indexes[i]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indexes;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="141" refid="vector__functions_8hpp_1a473cc8f4e0f7089c2a1757a435f7ae04" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="vector__functions_8hpp_1a28b5494cf9f51ee725e680752955a8e1" kindref="member">bubbleSort</ref>(std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>ordered_indexes(vector.size());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><ref refid="vector__functions_8hpp_1a28b5494cf9f51ee725e680752955a8e1" kindref="member">bubbleSort</ref>(vector,<sp/>ordered_indexes);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ordered_indexes;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="comment">//<sp/><sp/><sp/>CLASS<sp/>STATIC<sp/>VECTOR<sp/><sp/>//</highlight></codeline>
<codeline lineno="151"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="189" refid="class_static_vector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_static_vector" kindref="compound">StaticVector</ref></highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="192" refid="class_static_vector_1a5b3dc3f31d7b676540c171832d244304" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector_1a5b3dc3f31d7b676540c171832d244304" kindref="member">StaticVector</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="class_static_vector_1a1fd1ac7d3e54a74084f25ecad026c79c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector_1a1fd1ac7d3e54a74084f25ecad026c79c" kindref="member">StaticVector</ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>static_size)<sp/>:<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>(static_size)<sp/>{<ref refid="class_static_vector_1aac46f946b1d5b09e8713eac121594a06" kindref="member">reserve</ref>();}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="class_static_vector_1a2c073e13f79566c96c4a28837cbcc358" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector_1a2c073e13f79566c96c4a28837cbcc358" kindref="member">StaticVector</ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>static_size,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)<sp/>:<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>(static_size)<sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aac46f946b1d5b09e8713eac121594a06" kindref="member">reserve</ref>();<sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1a39189c70d033178ce16024a824343409" kindref="member">fill_static</ref>(e);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="class_static_vector_1a982fd40392e5c546da6ba2360f59fe55" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector_1a982fd40392e5c546da6ba2360f59fe55" kindref="member">StaticVector</ref>(<ref refid="class_static_vector" kindref="compound">StaticVector&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)<sp/>:<sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>(vector.<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>),</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>(vector.<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>),</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aad06f563cf46c8038677140a57d928ed" kindref="member">m_deleted</ref>(vector.<ref refid="class_static_vector_1aad06f563cf46c8038677140a57d928ed" kindref="member">m_deleted</ref>)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="class_static_vector_1aac46f946b1d5b09e8713eac121594a06" kindref="member">reserve</ref>();<sp/>*<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref><sp/>=<sp/>*(vector.<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>);<sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="class_static_vector_1a27bc6181b4ef6643f3abc9c91d728349" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector_1a27bc6181b4ef6643f3abc9c91d728349" kindref="member">StaticVector</ref>(<ref refid="class_static_vector" kindref="compound">StaticVector&lt;T&gt;</ref>&amp;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>std::move(other);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="class_static_vector_1a5170abb13005d53067431140a679ce4b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector_1a5170abb13005d53067431140a679ce4b" kindref="member">~StaticVector</ref>()</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="class_static_vector_1aad06f563cf46c8038677140a57d928ed" kindref="member">m_deleted</ref>)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aad06f563cf46c8038677140a57d928ed" kindref="member">m_deleted</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_histogramor_8hpp_1ab48a2fa7184e6354788989602c8c8c29" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;W:<sp/>StaticVector<sp/>double<sp/>delete,<sp/>be<sp/>careful<sp/>(this<sp/>is<sp/>a<sp/>just<sp/>a<sp/>warning<sp/>message)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="class_static_vector_1a3e8eb7b20f56c54b32640267e6e797bc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a3e8eb7b20f56c54b32640267e6e797bc" kindref="member">deallocate</ref><sp/>()</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>&gt;<sp/>0)<sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>=<sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="class_static_vector_1a9b1f4393056e120458e8d10da7222aa7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_static_vector" kindref="compound">StaticVector</ref>&amp;<sp/><ref refid="class_static_vector_1a9b1f4393056e120458e8d10da7222aa7" kindref="member">operator=</ref>(<ref refid="class_static_vector" kindref="compound">StaticVector&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector.<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>==<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>&amp;&amp;<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>=<sp/>vector.<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>=<sp/>vector.<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref><sp/>=<sp/>*(vector.<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="class_static_vector_1ae292e425773c82dc9eb20db025963e29" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1ae292e425773c82dc9eb20db025963e29" kindref="member">resize</ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_size<sp/>=<sp/>0)<sp/>{<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>=<sp/>new_size;}</highlight></codeline>
<codeline lineno="261" refid="class_static_vector_1a9c5d814a81b352ebbb5d8a07cbdd2699" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a9c5d814a81b352ebbb5d8a07cbdd2699" kindref="member">clear</ref><sp/>()<sp/>{<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="class_static_vector_1a3f31307e19e313fb7b4b93f284194f52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a3f31307e19e313fb7b4b93f284194f52" kindref="member">static_resize</ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_size<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>=<sp/>new_size;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1aac46f946b1d5b09e8713eac121594a06" kindref="member">reserve</ref>();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271" refid="class_static_vector_1a25564f07e92dd67a4f6bc0dfeaaad31b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a25564f07e92dd67a4f6bc0dfeaaad31b" kindref="member">static_resize</ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_size,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1a3f31307e19e313fb7b4b93f284194f52" kindref="member">static_resize</ref>(new_size);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1a39189c70d033178ce16024a824343409" kindref="member">fill_static</ref>(t);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="class_static_vector_1a28a635b7f2cbd0cbc5a042dc22ab7ea3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a28a635b7f2cbd0cbc5a042dc22ab7ea3" kindref="member">checkCapacity</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="278"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>UNSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>&gt;<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Capacity<sp/>of<sp/>StaticVector&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T).name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>with<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exceeded&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">//UNSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="class_static_vector_1a581a28f823edc9d3fbfa959465004f12" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a581a28f823edc9d3fbfa959465004f12" kindref="member">checkCapacity</ref>()<sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>UNSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>&gt;<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Capacity<sp/>of<sp/>StaticVector&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T).name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>with<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exceeded&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">//UNSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="class_static_vector_1ad756be87d5c09054f47d40e38ce4b45f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1ad756be87d5c09054f47d40e38ce4b45f" kindref="member">has</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1a78db68071e02cf724af349d0e606ea4e" kindref="member">begin</ref>(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f" kindref="member">end</ref>(),<sp/>t)<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f" kindref="member">end</ref>());}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="class_static_vector_1aa5ed2c50cf5c44e9685430f0aa6be160" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1aa5ed2c50cf5c44e9685430f0aa6be160" kindref="member">has</ref>(T<sp/>&amp;<sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::find(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1a78db68071e02cf724af349d0e606ea4e" kindref="member">begin</ref>(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f" kindref="member">end</ref>(),<sp/>t)<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f" kindref="member">end</ref>());}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="class_static_vector_1a8f604b0f4165d95a6b6653907c92ceb3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a8f604b0f4165d95a6b6653907c92ceb3" kindref="member">push_back</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)<sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1a28a635b7f2cbd0cbc5a042dc22ab7ea3" kindref="member">checkCapacity</ref>();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>[<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>++]<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="class_static_vector_1a20da4a5384ac01b54c19c563888fe3a3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a20da4a5384ac01b54c19c563888fe3a3" kindref="member">move_back</ref>(T<sp/>&amp;&amp;<sp/>e)<sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1a28a635b7f2cbd0cbc5a042dc22ab7ea3" kindref="member">checkCapacity</ref>();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>[<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>++]<sp/>=<sp/>std::move(e);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="class_static_vector_1ac0b86d749f8e35274fbac0506c050465" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1ac0b86d749f8e35274fbac0506c050465" kindref="member">push_back_unique</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;<ref refid="class_static_vector_1ad756be87d5c09054f47d40e38ce4b45f" kindref="member">has</ref>(t))<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_static_vector_1a8f604b0f4165d95a6b6653907c92ceb3" kindref="member">push_back</ref>(t);}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="class_static_vector_1a78db68071e02cf724af349d0e606ea4e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="class_static_vector_1a78db68071e02cf724af349d0e606ea4e" kindref="member">begin</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="class_static_vector_1ae80eaa7fb165b6408406870253bd8e5f" kindref="member">end</ref>()<sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>+<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>;}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="class_static_vector_1a4adf4196edf343a347c758ac9ad61be1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="class_static_vector_1a4adf4196edf343a347c758ac9ad61be1" kindref="member">begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="class_static_vector_1aff91554484ba655f02b84fbe17276332" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="class_static_vector_1aff91554484ba655f02b84fbe17276332" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>+<ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>;}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="class_static_vector_1a44b964207cfd132dda347e246a3640c8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_static_vector_1a44b964207cfd132dda347e246a3640c8" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref>;}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="class_static_vector_1ae2fa694636166997299fc80186d2c7dc" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/>&amp;<sp/><ref refid="class_static_vector_1ae2fa694636166997299fc80186d2c7dc" kindref="member">operator[] </ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="333"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_static_vector_1a28a635b7f2cbd0cbc5a042dc22ab7ea3" kindref="member">checkCapacity</ref>();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>[i];</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="class_static_vector_1adb781bb9deb3bb03929efd86ec024ea1" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_static_vector_1adb781bb9deb3bb03929efd86ec024ea1" kindref="member">at</ref>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>[i];<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>[0];}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="class_static_vector_1a7d5be1902e52590f04d726d14c25db8d" refkind="member"><highlight class="normal"><sp/><sp/>T*<sp/><ref refid="class_static_vector_1a7d5be1902e52590f04d726d14c25db8d" kindref="member">data</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="class_static_vector_1aeb818a6ce377300792c49ac51bec0f02" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1aeb818a6ce377300792c49ac51bec0f02" kindref="member">fill</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)<sp/>{memset(<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>,<sp/>e,<sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(e));}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="class_static_vector_1a39189c70d033178ce16024a824343409" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1a39189c70d033178ce16024a824343409" kindref="member">fill_static</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)<sp/>{memset(<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>,<sp/>e,<sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(e));}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="class_static_vector_1aac46f946b1d5b09e8713eac121594a06" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1aac46f946b1d5b09e8713eac121594a06" kindref="member">reserve</ref>()<sp/>{<ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[<ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref>];}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="353" refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" refkind="member"><highlight class="normal"><sp/><sp/>T*<sp/><ref refid="class_static_vector_1af9f68b36479f70b30a68e2a7c1503154" kindref="member">m_data</ref>;<sp/></highlight><highlight class="comment">//<sp/>Underlying<sp/>data<sp/>dynamic<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1af728d4c1860a0955dfc05f921ac8cf1a" kindref="member">m_dynamic_size</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>User<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1aaa12257ef000a52e60da489d80027dde" kindref="member">m_static_size</ref><sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="class_static_vector_1aad06f563cf46c8038677140a57d928ed" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_static_vector_1aad06f563cf46c8038677140a57d928ed" kindref="member">m_deleted</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>class<sp/>deleted<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">};</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="360" refid="vector__functions_8hpp_1a8852828b5aaff87e96c53054a243209d" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="vector__functions_8hpp_1a8852828b5aaff87e96c53054a243209d" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/><ref refid="class_static_vector" kindref="compound">StaticVector&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vector)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e<sp/>:<sp/>vector)<sp/>cout<sp/>&lt;&lt;<sp/>e<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//VECTOR_FUNCTIONS_HPP</highlight></codeline>
    </programlisting>
    <location file="lib/vector_functions.hpp"/>
  </compounddef>
</doxygen>
