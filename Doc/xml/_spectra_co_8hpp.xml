<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_spectra_co_8hpp" kind="file" language="C++">
    <compoundname>SpectraCo.hpp</compoundname>
    <includes refid="lib_root_8hpp" local="yes">../libRoot.hpp</includes>
    <includes refid="_recalibration_8hpp" local="yes">Recalibration.hpp</includes>
    <includes refid="_calibration_8hpp" local="yes">../Classes/Calibration.hpp</includes>
    <includedby refid="_spectra_alignator_8hpp" local="yes">lib/Analyse/SpectraAlignator.hpp</includedby>
    <includedby refid="_calibrator_8hpp" local="yes">lib/Modules/Calibrator.hpp</includedby>
    <includedby refid="_evolution_peaks_8hpp" local="yes">lib/Modules/EvolutionPeaks.hpp</includedby>
    <incdepgraph>
      <node id="20">
        <label>glob.h</label>
      </node>
      <node id="52">
        <label>TH1S.h</label>
      </node>
      <node id="25">
        <label>functional</label>
      </node>
      <node id="6">
        <label>iomanip</label>
      </node>
      <node id="29">
        <label>queue</label>
      </node>
      <node id="70">
        <label>TTreeIndex.h</label>
      </node>
      <node id="2">
        <label>../libRoot.hpp</label>
        <link refid="lib_root_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>filesystem</label>
      </node>
      <node id="39">
        <label>TAxis.h</label>
      </node>
      <node id="68">
        <label>TThread.h</label>
      </node>
      <node id="71">
        <label>Recalibration.hpp</label>
        <link refid="_recalibration_8hpp"/>
      </node>
      <node id="22">
        <label>errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>TH1D.h</label>
      </node>
      <node id="64">
        <label>TStopwatch.h</label>
      </node>
      <node id="30">
        <label>stdexcept</label>
      </node>
      <node id="28">
        <label>numeric</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="73">
        <label>../Classes/Hit.hpp</label>
        <link refid="_hit_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>TF1.h</label>
      </node>
      <node id="4">
        <label>print.hpp</label>
        <link refid="print_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>fstream</label>
      </node>
      <node id="42">
        <label>TError.h</label>
      </node>
      <node id="66">
        <label>TStyle.h</label>
      </node>
      <node id="23">
        <label>any</label>
      </node>
      <node id="17">
        <label>files_functions.hpp</label>
        <link refid="files__functions_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>random</label>
      </node>
      <node id="72">
        <label>../Classes/Calibration.hpp</label>
        <link refid="_calibration_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>TROOT.h</label>
      </node>
      <node id="34">
        <label>typeinfo</label>
      </node>
      <node id="1">
        <label>lib/Analyse/SpectraCo.hpp</label>
        <link refid="_spectra_co_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>../Classes/Detectors.hpp</label>
        <link refid="_detectors_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>ctime</label>
      </node>
      <node id="41">
        <label>TChain.h</label>
      </node>
      <node id="67">
        <label>TSystem.h</label>
      </node>
      <node id="31">
        <label>stack</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="44">
        <label>TF2.h</label>
      </node>
      <node id="45">
        <label>TFile.h</label>
      </node>
      <node id="40">
        <label>TCanvas.h</label>
      </node>
      <node id="55">
        <label>TH3I.h</label>
      </node>
      <node id="56">
        <label>TKey.h</label>
      </node>
      <node id="9">
        <label>vector_functions.hpp</label>
        <link refid="vector__functions_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>TSpectrum.h</label>
      </node>
      <node id="24">
        <label>array</label>
      </node>
      <node id="47">
        <label>TFitResult.h</label>
      </node>
      <node id="16">
        <label>sstream</label>
      </node>
      <node id="11">
        <label>randomCo.hpp</label>
        <link refid="random_co_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>TMarker.h</label>
      </node>
      <node id="49">
        <label>TGraphErrors.h</label>
      </node>
      <node id="53">
        <label>TH2.h</label>
      </node>
      <node id="37">
        <label>cstdlib</label>
      </node>
      <node id="50">
        <label>TH1F.h</label>
      </node>
      <node id="57">
        <label>TLeaf.h</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="13">
        <label>string_functions.hpp</label>
        <link refid="string__functions_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>unordered_map</label>
      </node>
      <node id="58">
        <label>TLegend.h</label>
      </node>
      <node id="65">
        <label>TString.h</label>
      </node>
      <node id="60">
        <label>TMath.h</label>
      </node>
      <node id="54">
        <label>TH2F.h</label>
      </node>
      <node id="27">
        <label>mutex</label>
      </node>
      <node id="36">
        <label>csignal</label>
      </node>
      <node id="32">
        <label>thread</label>
      </node>
      <node id="61">
        <label>TRandom.h</label>
      </node>
      <node id="69">
        <label>TTree.h</label>
      </node>
      <node id="10">
        <label>algorithm</label>
      </node>
      <node id="46">
        <label>TFitResultPtr.h</label>
      </node>
      <node id="14">
        <label>cstring</label>
      </node>
      <node id="48">
        <label>TGraph.h</label>
      </node>
      <node id="26">
        <label>memory</label>
      </node>
      <node id="33">
        <label>typeindex</label>
      </node>
      <node id="18">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>lib/Modules/EvolutionPeaks.hpp</label>
        <link refid="_evolution_peaks_8hpp"/>
      </node>
      <node id="1">
        <label>lib/Analyse/SpectraCo.hpp</label>
        <link refid="_spectra_co_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>lib/Analyse/SpectraAlignator.hpp</label>
        <link refid="_spectra_alignator_8hpp"/>
      </node>
      <node id="3">
        <label>lib/Modules/Calibrator.hpp</label>
        <link refid="_calibrator_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_spectra_co_1_1_histo_null" prot="public">SpectraCo::HistoNull</innerclass>
    <innerclass refid="class_spectra_co_1_1_histo_zombie" prot="public">SpectraCo::HistoZombie</innerclass>
    <innerclass refid="class_my_error" prot="public">MyError</innerclass>
    <innerclass refid="class_spectra_co_1_1_size_missmatch" prot="public">SpectraCo::SizeMissmatch</innerclass>
    <innerclass refid="class_spectra_co" prot="public">SpectraCo</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_spectra_co_8hpp_1a43a18302ff8470bdf68a839c735e6c8e" prot="public" static="no">
        <type>std::pair&lt; int, double &gt;</type>
        <definition>using SpectraPoint =  std::pair&lt;int, double&gt;</definition>
        <argsstring></argsstring>
        <name>SpectraPoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="15" column="1" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7" prot="public" static="no">
        <type>std::vector&lt; <ref refid="_spectra_co_8hpp_1a43a18302ff8470bdf68a839c735e6c8e" kindref="member">SpectraPoint</ref> &gt;</type>
        <definition>using SpectraPoints =  std::vector&lt;SpectraPoint&gt;</definition>
        <argsstring></argsstring>
        <name>SpectraPoints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="16" column="1" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_spectra_co_8hpp_1ab40ef30166a4d0b3f315e6b365bb96c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool goingAbove</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;m_spectra, int &amp;bin, int const &amp;threshold, int const &amp;nb_above)</argsstring>
        <name>goingAbove</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>m_spectra</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>bin</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nb_above</declname>
        </param>
        <briefdescription>
<para>Returns the position where the histogram goes under the threshold. </para>
        </briefdescription>
        <detaileddescription>
<para>Must start above threshold. There must be at least nb_below points below the threshold </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="870" column="6" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="870" bodyend="889"/>
        <references refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" compoundref="lib_co_8hpp" startline="209" endline="209">int_cast</references>
        <referencedby refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" compoundref="_spectra_co_8hpp" startline="926" endline="963">SpectraCo::findPeaks</referencedby>
      </memberdef>
      <memberdef kind="function" id="_spectra_co_8hpp_1a2db236fee001966b9a9a303b1096182b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool goingBelow</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;m_spectra, int &amp;bin, int const &amp;threshold, int const &amp;nb_below)</argsstring>
        <name>goingBelow</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>m_spectra</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>bin</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>nb_below</declname>
        </param>
        <briefdescription>
<para>Returns the position where the histogram goes under the threshold. </para>
        </briefdescription>
        <detaileddescription>
<para>Must start above threshold. There must be at least nb_below points below the threshold </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="846" column="6" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="846" bodyend="866"/>
        <references refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" compoundref="lib_co_8hpp" startline="209" endline="209">int_cast</references>
        <referencedby refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" compoundref="_spectra_co_8hpp" startline="926" endline="963">SpectraCo::findPeaks</referencedby>
      </memberdef>
      <memberdef kind="function" id="_spectra_co_8hpp_1a83ac1a487b3da916f985b967215f76a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_spectra_co_8hpp_1a43a18302ff8470bdf68a839c735e6c8e" kindref="member">SpectraPoint</ref></type>
        <definition>SpectraPoint maximum_in_range</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;m_spectra, int bin_min, int const &amp;bin_max)</argsstring>
        <name>maximum_in_range</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>m_spectra</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bin_min</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>bin_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="901" column="14" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="901" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="_spectra_co_8hpp_1abdc3f87ff631c70010f12fd72339b8c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_spectra_co_8hpp_1a43a18302ff8470bdf68a839c735e6c8e" kindref="member">SpectraPoint</ref></type>
        <definition>SpectraPoint minimum_in_range</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;m_spectra, int bin_min, int const &amp;bin_max)</argsstring>
        <name>minimum_in_range</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>m_spectra</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bin_min</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>bin_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="891" column="14" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="891" bodyend="899"/>
        <referencedby refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" compoundref="_spectra_co_8hpp" startline="926" endline="963">SpectraCo::findPeaks</referencedby>
      </memberdef>
      <memberdef kind="function" id="_spectra_co_8hpp_1aca2246688a20da3a38fe2a0f9cd74e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, SpectraCo const &amp;spectra)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> const &amp;</type>
          <declname>spectra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="421" column="1" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="421" bodyend="426"/>
        <references refid="class_spectra_co_1aad2d7fb657b00304906a0c5e3c9a3aed" compoundref="_spectra_co_8hpp" startline="216" endline="216">SpectraCo::integral</references>
        <references refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" compoundref="_spectra_co_8hpp" startline="206" endline="206">SpectraCo::name</references>
        <references refid="class_spectra_co_1ac96882f321f72ffe8757493da9b5b2fa" compoundref="_spectra_co_8hpp" startline="230" endline="230">SpectraCo::peaks</references>
      </memberdef>
      <memberdef kind="function" id="_spectra_co_8hpp_1ad3085c55da700fb2917875d8efe0b377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string type_of&lt; SpectraCo &gt;</definition>
        <argsstring>(SpectraCo const &amp;spectra)</argsstring>
        <name>type_of&lt; SpectraCo &gt;</name>
        <param>
          <type><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref> const &amp;</type>
          <declname>spectra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraCo.hpp" line="429" column="1" bodyfile="lib/Analyse/SpectraCo.hpp" bodystart="429" bodyend="432"/>
        <references refid="class_spectra_co_1aed822c874938eb1f5953c6e1a412cf33" compoundref="_spectra_co_8hpp" startline="218" endline="218">SpectraCo::minX</references>
        <references refid="print_8hpp_1a90460287027986fbf0c9a1ef8e5a1bce" compoundref="print_8hpp" startline="159" endline="162">type_of</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>SPECTRACO_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPECTRACO_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../libRoot.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_recalibration_8hpp" kindref="compound">Recalibration.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Classes/Calibration.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="class_my_error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_my_error" kindref="compound">MyError</ref></highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12" refid="class_my_error_1a05198cf33bf051e16f6ec2647bf4b571" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_my_error_1a05198cf33bf051e16f6ec2647bf4b571" kindref="member">MyError</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>((message==</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal"><sp/>:<sp/>message);}</highlight></codeline>
<codeline lineno="13"><highlight class="normal">};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="_spectra_co_8hpp_1a43a18302ff8470bdf68a839c735e6c8e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="_spectra_co_8hpp_1a43a18302ff8470bdf68a839c735e6c8e" kindref="member">SpectraPoint</ref><sp/>=<sp/>std::pair&lt;int,<sp/>double&gt;;</highlight></codeline>
<codeline lineno="16" refid="_spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="_spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7" kindref="member">SpectraPoints</ref><sp/>=<sp/>std::vector&lt;SpectraPoint&gt;;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>;<sp/></highlight><highlight class="comment">//<sp/>Forward<sp/>declaration<sp/>so<sp/>the<sp/>class<sp/>can<sp/>be<sp/>used<sp/>within<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="class_spectra_co" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref></highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="class_spectra_co_1acc6c691f3d2e5f0769d00b9d6e1ffe24" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1acc6c691f3d2e5f0769d00b9d6e1ffe24" kindref="member">SpectraCo</ref>()<sp/>noexcept<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="class_spectra_co_1a213631f494d8361bfa9f4115266e9af7" refkind="member"><highlight class="normal"><sp/><sp/>~<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>coder<sp/>!!!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(auto<sp/>&amp;<sp/>spectra<sp/>:<sp/>root_spectra_pointers)<sp/>if<sp/>(spectra<sp/>&amp;&amp;<sp/>!bool_cast(spectra-&gt;GetDirectory()))<sp/>delete<sp/>spectra;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="class_spectra_co_1ac7bfa00174710c92a077113a202ba2dd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ac7bfa00174710c92a077113a202ba2dd" kindref="member">SpectraCo</ref>(std::nullptr_t)<sp/>noexcept</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref>=<sp/></highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="class_spectra_co_1a7aa1ab216355e91774cbf364a7286043" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a7aa1ab216355e91774cbf364a7286043" kindref="member">SpectraCo</ref>(std::vector&lt;float&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>spectra,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>min_value<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>max_value<sp/>=<sp/>0,<sp/>std::string<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string<sp/><ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>:<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/><sp/><sp/><sp/><sp/>(<ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref>),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(spectra.<ref refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" kindref="member">size</ref>())),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/><sp/>(<ref refid="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" kindref="member">sum</ref>(spectra)),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/>(min_value),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/>(max_value)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>.reserve(<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value<sp/>:<sp/>spectra)<sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>.push_back(<ref refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" kindref="member">double_cast</ref>(value));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="class_spectra_co_1a7d0e3629ec73c41156b8c7ca71f3705e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a7d0e3629ec73c41156b8c7ca71f3705e" kindref="member">SpectraCo</ref>(std::vector&lt;double&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>spectra,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>min_value<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>max_value<sp/>=<sp/>0,<sp/>std::string<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string<sp/><ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>:<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref><sp/><sp/>(spectra),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/><sp/><sp/><sp/><sp/>(<ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/><sp/><sp/><sp/>(<ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref>),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/><sp/><sp/><sp/><sp/>(<ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(spectra.<ref refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" kindref="member">size</ref>())),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/>(<ref refid="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" kindref="member">sum</ref>(spectra)),</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/><sp/><sp/><sp/>(min_value),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/><sp/><sp/><sp/>(max_value)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="class_spectra_co_1ac8127b3f1b1eaf9292400cf2efa7bbde" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ac8127b3f1b1eaf9292400cf2efa7bbde" kindref="member">SpectraCo</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other,<sp/>std::string<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string<sp/><ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>:<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref><sp/><sp/>(other.<ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref>),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>),</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref>),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref>),</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref>),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref><sp/><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/>=<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/>=<sp/><ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="class_spectra_co_1ad896a521e57469c1c02c47a4e7d7349b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ad896a521e57469c1c02c47a4e7d7349b" kindref="member">SpectraCo</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/>other,<sp/>std::string<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string<sp/><ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>:<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref><sp/>(other-&gt;<ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref>),</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>),</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref>),</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref>),</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref>),</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/>=<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/>=<sp/><ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="class_spectra_co_1a3e4d1435fa3a80662a8c4442464988e1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a3e4d1435fa3a80662a8c4442464988e1" kindref="member">SpectraCo</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other,<sp/><ref refid="class_recalibration" kindref="compound">Recalibration</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>recal)<sp/>:<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref><sp/>(other.<ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref>),</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>),</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>),</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref>),</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>),</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref>),</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref>),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" kindref="member">recalibrate</ref>(recal);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="class_spectra_co_1ac40ff3692cc98ac889886bbe16d0c337" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ac40ff3692cc98ac889886bbe16d0c337" kindref="member">SpectraCo</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/>other,<sp/><ref refid="class_recalibration" kindref="compound">Recalibration</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>recal)<sp/>:<sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref><sp/>(other-&gt;<ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref>),</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>),</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>),</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref>),</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>),</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref>),</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref>),</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" kindref="member">recalibrate</ref>(recal);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="class_spectra_co_1a488369423915a272c24b561553cea913" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a488369423915a272c24b561553cea913" kindref="member">SpectraCo</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other,<sp/><ref refid="class_calibration" kindref="compound">Calibration</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>cal,<sp/><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>label)<sp/>:<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref><sp/>(other.<ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref>),</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>),</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>),</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref>),</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>),</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref>),</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref>),</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other.<ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" kindref="member">calibrate</ref>(cal,<sp/>label);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="class_spectra_co_1a264644c4da160d7d7eed1cbaaae5a77c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a264644c4da160d7d7eed1cbaaae5a77c" kindref="member">SpectraCo</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/>other,<sp/><ref refid="class_calibration" kindref="compound">Calibration</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>cal,<sp/><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>label)<sp/>:<sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref><sp/>(other-&gt;<ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref>),</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>),</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref>),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>),</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref>),</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref>),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(other-&gt;<ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" kindref="member">calibrate</ref>(cal,<sp/>label);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="class_spectra_co_1aa2508fe72a91029cd85d9f6dbce5cd93" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1aa2508fe72a91029cd85d9f6dbce5cd93" kindref="member">SpectraCo</ref>(std::vector&lt;double&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_data)<sp/>:</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>(_data),</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>(_data.<ref refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" kindref="member">size</ref>()),</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref>(0),</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref>(<ref refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" kindref="member">double_cast</ref>(<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>))</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="class_spectra_co_1a46fdc41ee93d910d1e667c4715e8eb9e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a46fdc41ee93d910d1e667c4715e8eb9e" kindref="member">SpectraCo</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" kindref="member">size</ref>)<sp/>:<sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>(<ref refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" kindref="member">size</ref>),</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref>(0),</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref>(<ref refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" kindref="member">double_cast</ref>(<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>))</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>.resize(<ref refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="class_spectra_co_1a7cd88b33fa9b85c5bf2dcdd2e3d13dc2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a7cd88b33fa9b85c5bf2dcdd2e3d13dc2" kindref="member">SpectraCo</ref>(TH1*<sp/>root_spectra,<sp/>std::string<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string<sp/><ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" kindref="member">load</ref>(root_spectra);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/>=<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/>=<sp/><ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="class_spectra_co_1aae276b412dd31fc06933db96b65298fd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>&amp;<sp/><ref refid="class_spectra_co_1aae276b412dd31fc06933db96b65298fd" kindref="member">operator=</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref><sp/>=<sp/>other.<ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref>,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.<ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="class_spectra_co_1ad094b13ab3d8e445b04edc68a5c12ec0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>&amp;<sp/><ref refid="class_spectra_co_1ad094b13ab3d8e445b04edc68a5c12ec0" kindref="member">operator=</ref>(TH1*<sp/>root_spectra)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" kindref="member">load</ref>(root_spectra);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" kindref="member">load</ref>(TH1*<sp/>root_spectra);</highlight></codeline>
<codeline lineno="198" refid="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>;}</highlight></codeline>
<codeline lineno="199" refid="class_spectra_co_1a85cee2f57fbae02a28329584da5df1b5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a85cee2f57fbae02a28329584da5df1b5" kindref="member">data</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>;}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setters<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="class_spectra_co_1a5347b79a6a914df04a1a99664fd5cc96" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a5347b79a6a914df04a1a99664fd5cc96" kindref="member">setMinX</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_min_x)<sp/>{<ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/>=<sp/>_min_x;<sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();}</highlight></codeline>
<codeline lineno="203" refid="class_spectra_co_1aaee0e2be91f5b3e3958892b8389a5003" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1aaee0e2be91f5b3e3958892b8389a5003" kindref="member">setMaxX</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_max_x)<sp/>{<ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/>=<sp/>_max_x;<sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();}</highlight></codeline>
<codeline lineno="204" refid="class_spectra_co_1ac2141fbefadce3d8f82e5c7db09998ab" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ac2141fbefadce3d8f82e5c7db09998ab" kindref="member">setRangeX</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_min_x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_max_x)<sp/>{<ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/>=<sp/>_min_x;<sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/>=<sp/>_max_x;<sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" kindref="member">name</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/>=<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>);}</highlight></codeline>
<codeline lineno="207" refid="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" kindref="member">title</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref>)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/>=<sp/><ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref>);}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Getters<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="211" refid="class_spectra_co_1a79deb54e5d5e3d36f9294482fea3d08c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="class_spectra_co_1a79deb54e5d5e3d36f9294482fea3d08c" kindref="member">name</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="212" refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a2764c882d467992cc40a71c0e952363e" kindref="member">title</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="213" refid="class_spectra_co_1aba424b38fe96dbeb3b7d69d3b10d1a21" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="class_spectra_co_1aba424b38fe96dbeb3b7d69d3b10d1a21" kindref="member">title</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="214" refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="215" refid="class_spectra_co_1abb70561652a097439bbaa71fbebd70c4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="class_spectra_co_1abb70561652a097439bbaa71fbebd70c4" kindref="member">size</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="216" refid="class_spectra_co_1aad2d7fb657b00304906a0c5e3c9a3aed" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1aad2d7fb657b00304906a0c5e3c9a3aed" kindref="member">integral</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="217" refid="class_spectra_co_1a4a6080fd25cec92c1a6295e4d8398a44" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="class_spectra_co_1a4a6080fd25cec92c1a6295e4d8398a44" kindref="member">integral</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="218" refid="class_spectra_co_1aed822c874938eb1f5953c6e1a412cf33" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1aed822c874938eb1f5953c6e1a412cf33" kindref="member">minX</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="219" refid="class_spectra_co_1abb97aec97436b5d4171015db6b47e6b4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="class_spectra_co_1abb97aec97436b5d4171015db6b47e6b4" kindref="member">minX</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="220" refid="class_spectra_co_1a244bef386237d633da441b377ca2a278" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a244bef386237d633da441b377ca2a278" kindref="member">maxX</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="221" refid="class_spectra_co_1aaeaea4ebc4fd51825acf90e66eb89ae4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="class_spectra_co_1aaeaea4ebc4fd51825acf90e66eb89ae4" kindref="member">maxX</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="222" refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" kindref="member">factor</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" kindref="member">m_factor</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="223" refid="class_spectra_co_1a30feae642d436e24ff7397891030d859" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="class_spectra_co_1a30feae642d436e24ff7397891030d859" kindref="member">factor</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" kindref="member">m_factor</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="224" refid="class_spectra_co_1a1b66482bf4e3ff7903bda481d6d67a8d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a1b66482bf4e3ff7903bda481d6d67a8d" kindref="member">lastBin</ref>()</highlight><highlight class="keyword"><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>.back();}</highlight></codeline>
<codeline lineno="225" refid="class_spectra_co_1ad6c387515e792a22195054cd6c174db5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="class_spectra_co_1ad6c387515e792a22195054cd6c174db5" kindref="member">lastBin</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>.back();}</highlight></codeline>
<codeline lineno="226" refid="class_spectra_co_1a626908f0a27928d07d980cfcec3b8454" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a626908f0a27928d07d980cfcec3b8454" kindref="member">back</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>.back();}</highlight></codeline>
<codeline lineno="227" refid="class_spectra_co_1a4bb4afaf9dd3881b73e8c6e740712a30" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="class_spectra_co_1a4bb4afaf9dd3881b73e8c6e740712a30" kindref="member">back</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>.back();}</highlight></codeline>
<codeline lineno="228" refid="class_spectra_co_1a9cbf03e7634f8a80d65aec65d3d9119c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a9cbf03e7634f8a80d65aec65d3d9119c" kindref="member">get</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="229" refid="class_spectra_co_1a4d14e86e9dd8d42c0ce5a72a2f3b7dfc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="class_spectra_co_1a4d14e86e9dd8d42c0ce5a72a2f3b7dfc" kindref="member">get</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="230" refid="class_spectra_co_1ac96882f321f72ffe8757493da9b5b2fa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1ac96882f321f72ffe8757493da9b5b2fa" kindref="member">peaks</ref>()</highlight><highlight class="keyword"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606" kindref="member">m_peaks</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="231" refid="class_spectra_co_1a889fd42392232f574b687970fda7e311" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="class_spectra_co_1a889fd42392232f574b687970fda7e311" kindref="member">peaks</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606" kindref="member">m_peaks</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculators<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/><ref refid="class_spectra_co_1a7b935499bbdce4b84a0f640b6518765c" kindref="member">derivate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smooth<sp/>=<sp/>1)<sp/>noexcept;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/><ref refid="class_spectra_co_1a9be3e04ddc73df4d11336ec806313094" kindref="member">derivate2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smooth<sp/>=<sp/>1)<sp/>noexcept;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1adbdfafcc8b0a95d520e491b0062b2e0b" kindref="member">removeBackground</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>const<sp/>&amp;<sp/>smooth,<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>const<sp/>&amp;<sp/>fit_options<sp/>=<sp/>&quot;&quot;)<sp/>noexcept;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1abf17675f290cad6e53ad51e59430a63c" kindref="member">integralInRangeBin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>const<sp/>&amp;<sp/>bin_min,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>const<sp/>&amp;<sp/>bin_max)<sp/>noexcept;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a7986a8f7ea5491f7a69ad810e857894f" kindref="member">integralInRange</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>const<sp/>&amp;<sp/>value_min,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>const<sp/>&amp;<sp/>value_max)<sp/>noexcept;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a6c50f289318ed3a37218be1b2485a0aa" kindref="member">meanInRangeBin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>const<sp/>&amp;<sp/>bin_min,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>const<sp/>&amp;<sp/>bin_max)<sp/>noexcept;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a4e9df1dfede067a7a241e1209a01f4bc" kindref="member">meanInRange</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>const<sp/>&amp;<sp/>value_min,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>const<sp/>&amp;<sp/>value_max)<sp/>noexcept;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Getters<sp/>:</highlight></codeline>
<codeline lineno="244" refid="class_spectra_co_1a5c0d013692342e790580839787143f36" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>std::vector&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>const<sp/>&amp;<sp/><ref refid="class_spectra_co_1a5c0d013692342e790580839787143f36" kindref="member">derivativeData</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>-&gt;<ref refid="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" kindref="member">data</ref>();}</highlight></codeline>
<codeline lineno="246" refid="class_spectra_co_1a6106089e9e4295cc71f3d45f781ac2c8" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a6106089e9e4295cc71f3d45f781ac2c8" kindref="member">derivative2Data</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a332e26399e136100490dd879772fe797" kindref="member">m_derivative2</ref>-&gt;<ref refid="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" kindref="member">data</ref>();}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="class_spectra_co_1aa9af077c307bb5e33e271bf8cbaa1741" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/><ref refid="class_spectra_co_1aa9af077c307bb5e33e271bf8cbaa1741" kindref="member">derivative</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>;}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/><ref refid="class_spectra_co_1aa9af077c307bb5e33e271bf8cbaa1741" kindref="member">derivative</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="class_spectra_co_1a5db4e774152522eac0e1c58af984fc28" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/><ref refid="class_spectra_co_1a5db4e774152522eac0e1c58af984fc28" kindref="member">derivative2</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a332e26399e136100490dd879772fe797" kindref="member">m_derivative2</ref>;}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/><ref refid="class_spectra_co_1a5db4e774152522eac0e1c58af984fc28" kindref="member">derivative2</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="class_spectra_co_1acbe779815b224c8102ec62af4403a7d9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1acbe779815b224c8102ec62af4403a7d9" kindref="member">inverse</ref>()<sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>value<sp/>:<sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>)<sp/>value<sp/>=<sp/>-value;}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="class_spectra_co_1a66d66744d2d12b088005a826158e2946" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a66d66744d2d12b088005a826158e2946" kindref="member">lastBinWithValue</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_it<sp/>=<sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(bin_it&gt;0)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>[--bin_it]!=0.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bin_it;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="class_spectra_co_1a1a2f7e1b1c45f16cb77d531c90c5212b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a1a2f7e1b1c45f16cb77d531c90c5212b" kindref="member">firstBinWithValue</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_it<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(bin_it&lt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>[bin_it++]!=0.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bin_it;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Root<sp/>interface<sp/>methods<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a223f3a9be7c661c1ef700d8bfda1106f" kindref="member">fill</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>X)<sp/>noexcept;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a9f6fa49281669395c0e10f833f8e914e" kindref="member">draw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>param<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" kindref="member">rebin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" kindref="member">factor</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rebin_derivatives<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>TH1D*<sp/><ref refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" kindref="member">createTH1D</ref>(std::string<sp/>newName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string<sp/>newTitle<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>TH1F*<sp/><ref refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" kindref="member">createTH1F</ref>(std::string<sp/>newName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string<sp/>newTitle<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="282" refid="class_spectra_co_1a6dc41ae065225471fadc69382077ceb8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a6dc41ae065225471fadc69382077ceb8" kindref="member">write</ref>()<sp/>{this-&gt;<ref refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" kindref="member">createTH1F</ref>(<ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>())-&gt;Write();}</highlight></codeline>
<codeline lineno="283" refid="class_spectra_co_1aecdb9a51ee8bab5e5fbe0563161664f9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1aecdb9a51ee8bab5e5fbe0563161664f9" kindref="member">write</ref>(TDirectory*<sp/>directory)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>histo<sp/>=<sp/>this-&gt;<ref refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" kindref="member">createTH1F</ref>(<ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>());<sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>directory-&gt;cd();<sp/></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>histo-&gt;Write();<sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>gROOT-&gt;cd();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290" refid="class_spectra_co_1a56313f7f5ce661a5952d251e51ca3246" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a56313f7f5ce661a5952d251e51ca3246" kindref="member">writeTH1D</ref>()<sp/>{this-&gt;<ref refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" kindref="member">createTH1D</ref>(<ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>())-&gt;Write();}</highlight></codeline>
<codeline lineno="291" refid="class_spectra_co_1a3a8fdeb82862a8500d53634b5bd9acbc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a3a8fdeb82862a8500d53634b5bd9acbc" kindref="member">writeTH1D</ref>(TDirectory*<sp/>directory)<sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>directory-&gt;cd();<sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" kindref="member">createTH1D</ref>(<ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>())-&gt;Write();<sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>gROOT-&gt;cd();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>get<sp/>the<sp/>bin&apos;s<sp/>content<sp/>(TH1::getBinContent):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="class_spectra_co_1a9e31bbca1885c3a48c66e7f8e2622f9a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a9e31bbca1885c3a48c66e7f8e2622f9a" kindref="member">get</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>[bin];}</highlight></codeline>
<codeline lineno="300" refid="class_spectra_co_1ae05d953f1aa96c7d7077ff6dda044afd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1ae05d953f1aa96c7d7077ff6dda044afd" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>[bin];}</highlight></codeline>
<codeline lineno="301" refid="class_spectra_co_1a484fc9226bbbee3ed3b654c3aeea165b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="class_spectra_co_1ae05d953f1aa96c7d7077ff6dda044afd" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>[bin];}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>interpolation<sp/>if<sp/>the<sp/>given<sp/>bin<sp/>is<sp/>a<sp/>double<sp/>(TH1F::Eval)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" kindref="member">interpolate</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>;</highlight></codeline>
<codeline lineno="305" refid="class_spectra_co_1aa32b538c1586e9f78af9ab28fed27efb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ae05d953f1aa96c7d7077ff6dda044afd" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" kindref="member">interpolate</ref>(bin);}</highlight></codeline>
<codeline lineno="306" refid="class_spectra_co_1a00b22f96c7d319af473e16e9f07efbfd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ae05d953f1aa96c7d7077ff6dda044afd" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" kindref="member">interpolate</ref>(bin);}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>X<sp/>value<sp/>:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="class_spectra_co_1a85342e1258a9d8877fb60fa2dca6275f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a85342e1258a9d8877fb60fa2dca6275f" kindref="member">getX</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bin<sp/>*<sp/>(<ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref>/<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>);}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>bin<sp/>corresponding<sp/>for<sp/>a<sp/>given<sp/>X<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="class_spectra_co_1ac5f6afc77e5fddc79afe224dc0a1dfec" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ac5f6afc77e5fddc79afe224dc0a1dfec" kindref="member">getBin</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="312"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>ret<sp/>=<sp/><ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(std::trunc(x*<ref refid="class_spectra_co_1a67a019827e1107bc1fc2f28eb6d854f7" kindref="member">m_slope</ref><sp/>+<sp/><ref refid="class_spectra_co_1a80e56f3b23d5a7092dd3152f47bf3c47" kindref="member">m_intercept</ref>));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ret&gt;-1)<sp/>?<sp/>ret<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" kindref="member">calibrateX</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>intercept,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>slope<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/>=<sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/>*<sp/>slope<sp/>+<sp/>intercept;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/>=<sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/>*<sp/>slope<sp/>+<sp/>intercept;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>)<sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>-&gt;<ref refid="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" kindref="member">calibrateX</ref>(intercept,<sp/>slope);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>difference(SpectraCo<sp/>const<sp/>&amp;<sp/>other,<sp/>int<sp/>const<sp/>&amp;<sp/>bin)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>m_spectra[bin]<sp/>-<sp/>other[other.getBin(spectra.getX(bin))];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/><ref refid="class_spectra_co_1aa7114661992e4ae88e87cb1ccb82d6ed" kindref="member">operator+</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/><ref refid="class_spectra_co_1a992b73363532d45debd7fd7befd21765" kindref="member">operator-</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/><ref refid="class_spectra_co_1a34ea7496185caf2178c8ba1c10876dd3" kindref="member">operator*</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" kindref="member">factor</ref>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/><ref refid="class_spectra_co_1aa4225392a595ff8a0950ef67610096d0" kindref="member">operator/</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" kindref="member">factor</ref>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>&amp;<sp/><ref refid="class_spectra_co_1a9c5ae4fa536ee968b112bdab670fa2d8" kindref="member">operator*=</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" kindref="member">factor</ref>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" kindref="member">recalibrate</ref>(<ref refid="class_recalibration" kindref="compound">Recalibration</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>recal);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" kindref="member">calibrate</ref>(<ref refid="class_calibration" kindref="compound">Calibration</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>calib,<sp/><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>label);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" kindref="member">calibrate</ref>(std::vector&lt;double&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>coeffs);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1af74c78334a7be1cc421779f9e4b30a0b" kindref="member">calibrateAndScale</ref>(std::vector&lt;double&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>coeffs);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" kindref="member">resizeBin</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_size);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a0ba318153d548c02c9ab4b39465ea1b4" kindref="member">resizeX</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a244bef386237d633da441b377ca2a278" kindref="member">maxX</ref>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a0ba318153d548c02c9ab4b39465ea1b4" kindref="member">resizeX</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1aed822c874938eb1f5953c6e1a412cf33" kindref="member">minX</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1a244bef386237d633da441b377ca2a278" kindref="member">maxX</ref>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><ref refid="_spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7" kindref="member">SpectraPoints</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" kindref="member">findPeaks</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>threshold,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nb_bins_below_threshold);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><ref refid="_spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7" kindref="member">SpectraPoints</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" kindref="member">findPeaks</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>threshold,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nb_bins_below_threshold,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>smooth);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Manage<sp/>resources<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="class_spectra_co_1a649cc895e9813d1a82c9057022228266" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a649cc895e9813d1a82c9057022228266" kindref="member">deleteDerivative</ref>()<sp/>{</highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>;}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Other<sp/>operations<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="class_spectra_co_1aecb46bfbd2968e90d0ffd6d5848ca8b4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1aecb46bfbd2968e90d0ffd6d5848ca8b4" kindref="member">chi2</ref><sp/>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_errors_squared<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;other.<ref refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" kindref="member">size</ref>();<sp/>bin++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other[bin]&gt;0)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>error<sp/>for<sp/>this<sp/>bin<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" kindref="member">error</ref><sp/>=<sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>[bin]-other[bin];</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Variance<sp/>of<sp/>the<sp/>bin<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>weight<sp/>=<sp/>1/other[bin];<sp/></highlight><highlight class="comment">//<sp/>V<sp/>=<sp/>sigma²<sp/>=<sp/>1/N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>error<sp/>to<sp/>the<sp/>total<sp/>squared<sp/>error<sp/>of<sp/>the<sp/>spectra<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_errors_squared<sp/>+=<sp/><ref refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" kindref="member">error</ref>*<ref refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" kindref="member">error</ref>*weight;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum_errors_squared/other.<ref refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Histogram<sp/>manipulations<sp/>:</highlight></codeline>
<codeline lineno="374" refid="class_spectra_co_1a4edb2ef585474bb8c1f728d0dc7731e2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a4edb2ef585474bb8c1f728d0dc7731e2" kindref="member">setActualRange</ref>()<sp/>{</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" kindref="member">resizeBin</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_spectra_co_1a66d66744d2d12b088005a826158e2946" kindref="member">lastBinWithValue</ref>());}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="class_spectra_co_1_1_histo_null" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_spectra_co_1_1_histo_null" kindref="compound">HistoNull</ref></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="379" refid="class_spectra_co_1_1_histo_null_1a47f60c3e6fe497633fb72bed36224ea4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1_1_histo_null_1a47f60c3e6fe497633fb72bed36224ea4" kindref="member">HistoNull</ref>()<sp/>{<ref refid="print_8hpp_1afded2b178f1cba7246c86beaab6d4e6c" kindref="member">printC</ref>(<ref refid="print_8hpp_1adce122f566c88a1eceeb79a635afa964" kindref="member">GREY</ref>,<sp/></highlight><highlight class="stringliteral">&quot;SpectraCo::HistoNull<sp/>:&quot;</highlight><highlight class="normal">,<sp/><ref refid="print_8hpp_1ab702106cf3b3e96750b6845ded4e0299" kindref="member">RESET</ref>,<sp/><ref refid="print_8hpp_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>loaded<sp/>histogram<sp/>is<sp/>nullptr&quot;</highlight><highlight class="normal">,<sp/><ref refid="print_8hpp_1ab702106cf3b3e96750b6845ded4e0299" kindref="member">RESET</ref>);}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="class_spectra_co_1_1_histo_zombie" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_spectra_co_1_1_histo_zombie" kindref="compound">HistoZombie</ref></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="385" refid="class_spectra_co_1_1_histo_zombie_1a6bec654226930402a49bf10619b2cdd6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1_1_histo_zombie_1a6bec654226930402a49bf10619b2cdd6" kindref="member">HistoZombie</ref>()<sp/>{<ref refid="print_8hpp_1afded2b178f1cba7246c86beaab6d4e6c" kindref="member">printC</ref>(<ref refid="print_8hpp_1adce122f566c88a1eceeb79a635afa964" kindref="member">GREY</ref>,<sp/></highlight><highlight class="stringliteral">&quot;SpectraCo::HistoZombie<sp/>:&quot;</highlight><highlight class="normal">,<sp/><ref refid="print_8hpp_1ab702106cf3b3e96750b6845ded4e0299" kindref="member">RESET</ref>,<sp/><ref refid="print_8hpp_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>loaded<sp/>histogram<sp/>is<sp/>zombie&quot;</highlight><highlight class="normal">,<sp/><ref refid="print_8hpp_1ab702106cf3b3e96750b6845ded4e0299" kindref="member">RESET</ref>);}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="class_spectra_co_1_1_size_missmatch" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_spectra_co_1_1_size_missmatch" kindref="compound">SizeMissmatch</ref></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="391" refid="class_spectra_co_1_1_size_missmatch_1a94aae14f6932f29e357f42fd0132827f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1_1_size_missmatch_1a94aae14f6932f29e357f42fd0132827f" kindref="member">SizeMissmatch</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392" refid="class_spectra_co_1_1_size_missmatch_1a42beba683555e28da7b2436ccfeb55e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1_1_size_missmatch_1a42beba683555e28da7b2436ccfeb55e5" kindref="member">SizeMissmatch</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>message){<ref refid="print_8hpp_1ad9e2dd512a5915af4751a40fefbfbc94" kindref="member">warning</ref>(message);}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" refkind="member"><highlight class="normal"><sp/><sp/>TH1*<sp/><ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399" refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>;</highlight></codeline>
<codeline lineno="400" refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401" refid="class_spectra_co_1a332e26399e136100490dd879772fe797" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/><ref refid="class_spectra_co_1a332e26399e136100490dd879772fe797" kindref="member">m_derivative2</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Second<sp/>derivative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7" kindref="member">SpectraPoints</ref><sp/><ref refid="class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606" kindref="member">m_peaks</ref>;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unnamed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405" refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Untitled&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="408" refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="409" refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="410" refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="411" refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" kindref="member">m_factor</ref><sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>spectra<sp/>has<sp/>been<sp/>multiplied<sp/>or<sp/>divided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="class_spectra_co_1a7bb27d1fe53fe342a218040f28d647ba" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;TH1*&gt;<sp/><ref refid="class_spectra_co_1a7bb27d1fe53fe342a218040f28d647ba" kindref="member">root_spectra_pointers</ref>;</highlight></codeline>
<codeline lineno="413" refid="class_spectra_co_1a5219f7157190c99448c3b14ea37fbac2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a5219f7157190c99448c3b14ea37fbac2" kindref="member">nb_histo_drawn</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="414" refid="class_spectra_co_1a9515b65f7b587af82030316811c1c0aa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a9515b65f7b587af82030316811c1c0aa" kindref="member">m_rebin</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Relation<sp/>bewteen<sp/>X<sp/>value<sp/>and<sp/>bin<sp/>number<sp/>:<sp/>bin<sp/>=<sp/>m_slope*X<sp/>+<sp/>m_intercept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="class_spectra_co_1a67a019827e1107bc1fc2f28eb6d854f7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a67a019827e1107bc1fc2f28eb6d854f7" kindref="member">m_slope</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="418" refid="class_spectra_co_1a80e56f3b23d5a7092dd3152f47bf3c47" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a80e56f3b23d5a7092dd3152f47bf3c47" kindref="member">m_intercept</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="419"><highlight class="normal">};</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="_spectra_co_8hpp_1aca2246688a20da3a38fe2a0f9cd74e90" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="_spectra_co_8hpp_1aca2246688a20da3a38fe2a0f9cd74e90" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>spectra)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/>spectra.<ref refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" kindref="member">name</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>spectra.<ref refid="class_spectra_co_1aad2d7fb657b00304906a0c5e3c9a3aed" kindref="member">integral</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>counts&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(spectra.<ref refid="class_spectra_co_1ac96882f321f72ffe8757493da9b5b2fa" kindref="member">peaks</ref>().size()&gt;0)<sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>spectra.<ref refid="class_spectra_co_1ac96882f321f72ffe8757493da9b5b2fa" kindref="member">peaks</ref>().size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>peaks<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="429" refid="_spectra_co_8hpp_1ad3085c55da700fb2917875d8efe0b377" refkind="member"><highlight class="normal">std::string<sp/><ref refid="_spectra_co_8hpp_1ad3085c55da700fb2917875d8efe0b377" kindref="member">type_of&lt;SpectraCo&gt;</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>spectra)</highlight></codeline>
<codeline lineno="430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;SpectraCo_&quot;</highlight><highlight class="normal">+<ref refid="print_8hpp_1a90460287027986fbf0c9a1ef8e5a1bce" kindref="member">type_of</ref>(spectra.<ref refid="class_spectra_co_1aed822c874938eb1f5953c6e1a412cf33" kindref="member">minX</ref>());</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="comment">//<sp/>DEFINITIONS<sp/>:<sp/>//</highlight></codeline>
<codeline lineno="437"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">SpectraCo::calculateCoeff</ref>()</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Coefficients<sp/>to<sp/>convert<sp/>X<sp/>value<sp/>to<sp/>bin<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a67a019827e1107bc1fc2f28eb6d854f7" kindref="member">m_slope</ref><sp/>=<sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>/(<ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref>-<ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a80e56f3b23d5a7092dd3152f47bf3c47" kindref="member">m_intercept</ref><sp/>=<sp/>-<sp/><ref refid="class_spectra_co_1a67a019827e1107bc1fc2f28eb6d854f7" kindref="member">m_slope</ref>*<ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref>;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="class_spectra_co_1a223f3a9be7c661c1ef700d8bfda1106f" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a223f3a9be7c661c1ef700d8bfda1106f" kindref="member">SpectraCo::fill</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>X)<sp/>noexcept</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin<sp/>=<sp/>getBin(X);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin&gt;-1<sp/>&amp;&amp;<sp/>bin&lt;m_size)<sp/>m_spectra[bin]++;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="class_spectra_co_1a9f6fa49281669395c0e10f833f8e914e" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a9f6fa49281669395c0e10f833f8e914e" kindref="member">SpectraCo::draw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>param)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref><sp/>=<sp/><ref refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" kindref="member">concatenate</ref>(<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;_drawing_&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_spectra_co_1a5219f7157190c99448c3b14ea37fbac2" kindref="member">nb_histo_drawn</ref>);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a5219f7157190c99448c3b14ea37fbac2" kindref="member">nb_histo_drawn</ref>++;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a7bb27d1fe53fe342a218040f28d647ba" kindref="member">root_spectra_pointers</ref>.push_back(<ref refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" kindref="member">createTH1F</ref>(<ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>,<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a7bb27d1fe53fe342a218040f28d647ba" kindref="member">root_spectra_pointers</ref>.back()-&gt;Draw(param);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" kindref="member">SpectraCo::rebin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>factor,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rebin_derivatives)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a9515b65f7b587af82030316811c1c0aa" kindref="member">m_rebin</ref>*=<ref refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" kindref="member">factor</ref>;<sp/></highlight><highlight class="comment">//<sp/>Saves<sp/>the<sp/>rebin<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>histo<sp/>=<sp/><ref refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" kindref="member">createTH1F</ref>(<ref refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" kindref="member">concatenate</ref>(<ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/>rebinning<sp/>by<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" kindref="member">factor</ref>));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>histo-&gt;Rebin(<ref refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" kindref="member">factor</ref>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" kindref="member">load</ref>(histo);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rebin_derivatives<sp/>&amp;&amp;<sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>)<sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>-&gt;<ref refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" kindref="member">rebin</ref>(<ref refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" kindref="member">factor</ref>,<sp/>rebin_derivatives);</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ad357dfc02fbb9ad6fc308ecf07f07fea" kindref="member">SpectraCo::load</ref>(TH1*<sp/>root_spectra)</highlight></codeline>
<codeline lineno="476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root_spectra)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1_1_histo_null" kindref="compound">HistoNull</ref>();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root_spectra-&gt;IsZombie())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1_1_histo_zombie" kindref="compound">HistoZombie</ref>();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root_spectra-&gt;IsA()-&gt;InheritsFrom(TH2::Class())<sp/>||<sp/>root_spectra-&gt;IsA()-&gt;InheritsFrom(TH3::Class()))</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;In<sp/>SpectraCo::load(TH1*<sp/>root_spectra)<sp/>:<sp/>root_spectra<sp/>is<sp/>a<sp/>TH2<sp/>or<sp/>TH3<sp/>!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ad6e359042f2fb5ed788c7a805ac75f77" kindref="member">m_loaded_TH1</ref><sp/>=<sp/>root_spectra;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref><sp/>=<sp/>root_spectra-&gt;GetName();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref><sp/>=<sp/>root_spectra-&gt;GetTitle();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/>=<sp/>root_spectra-&gt;Integral();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/>=<sp/>root_spectra<sp/>-&gt;<sp/>GetXaxis()<sp/>-&gt;<sp/>GetNbins();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/>=<sp/>root_spectra<sp/>-&gt;<sp/>GetXaxis()<sp/>-&gt;<sp/>GetBinLowEdge(1);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/>=<sp/>root_spectra<sp/>-&gt;<sp/>GetXaxis()<sp/>-&gt;<sp/>GetBinLowEdge(<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>+1);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>.resize(<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>1;<sp/>bin&lt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>;<sp/>bin++)<sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>[bin]<sp/>=<sp/><ref refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" kindref="member">double_cast</ref>(root_spectra-&gt;GetBinContent(bin));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498" refid="class_spectra_co_1aa7114661992e4ae88e87cb1ccb82d6ed" refkind="member"><highlight class="normal"><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/><ref refid="class_spectra_co_1aa7114661992e4ae88e87cb1ccb82d6ed" kindref="member">SpectraCo::operator+</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="499"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/>!=<sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1_1_size_missmatch" kindref="compound">SizeMissmatch</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>operator+(SpectraCo<sp/>const<sp/>&amp;<sp/>other)<sp/>:<sp/>other<sp/>size<sp/>is<sp/>different<sp/>from<sp/>that<sp/>of<sp/>this<sp/>spectra&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/>spectra(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight><highlight class="comment">//<sp/>Optimize<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>;<sp/>bin++)<sp/>spectra[bin]<sp/>+=<sp/>other[bin];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>spectra.<ref refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" kindref="member">name</ref>(spectra.<ref refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" kindref="member">name</ref>()+</highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal">+other.<ref refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>spectra.<ref refid="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" kindref="member">title</ref>(spectra.<ref refid="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" kindref="member">title</ref>()+</highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal">+other.<ref refid="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" kindref="member">title</ref>());</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spectra;</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="class_spectra_co_1a992b73363532d45debd7fd7befd21765" refkind="member"><highlight class="normal"><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/><ref refid="class_spectra_co_1a992b73363532d45debd7fd7befd21765" kindref="member">SpectraCo::operator-</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="509"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/>!=<sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1_1_size_missmatch" kindref="compound">SizeMissmatch</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>operator+(SpectraCo<sp/>const<sp/>&amp;<sp/>other)<sp/>:<sp/>other<sp/>size<sp/>is<sp/>different<sp/>from<sp/>that<sp/>of<sp/>this<sp/>spectra&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/>spectra(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight><highlight class="comment">//<sp/>Optimize<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>;<sp/>bin++)<sp/>spectra[bin]<sp/>-=<sp/>other[other.<ref refid="class_spectra_co_1ac5f6afc77e5fddc79afe224dc0a1dfec" kindref="member">getBin</ref>(spectra.<ref refid="class_spectra_co_1a85342e1258a9d8877fb60fa2dca6275f" kindref="member">getX</ref>(bin))];</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>spectra.<ref refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" kindref="member">name</ref>(spectra.<ref refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" kindref="member">name</ref>()+</highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal">+other.<ref refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>spectra.<ref refid="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" kindref="member">title</ref>(spectra.<ref refid="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" kindref="member">title</ref>()+</highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal">+other.<ref refid="class_spectra_co_1a723f0ea2cd8230e4b5e94b8d07127268" kindref="member">title</ref>());</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spectra;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="521" refid="class_spectra_co_1a34ea7496185caf2178c8ba1c10876dd3" refkind="member"><highlight class="normal"><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/><ref refid="class_spectra_co_1a34ea7496185caf2178c8ba1c10876dd3" kindref="member">SpectraCo::operator*</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>factor)</highlight></codeline>
<codeline lineno="522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/>spectra(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight><highlight class="comment">//<sp/>Optimize<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" kindref="member">m_factor</ref><sp/>=<sp/><ref refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" kindref="member">factor</ref>;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>;<sp/>bin++)<sp/>spectra[bin]<sp/>=<sp/>spectra[bin]*<ref refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" kindref="member">m_factor</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>if<sp/>time<sp/>:<sp/>rename<sp/>the<sp/>spectra<sp/>based<sp/>on<sp/>the<sp/>multiplicative<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(m_factor!=1)//<sp/>If<sp/>the<sp/>spectra<sp/>has<sp/>already<sp/>been<sp/>multiplied<sp/>by<sp/>another<sp/>factor<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>auto<sp/>begin_factor_it<sp/>=<sp/>spectra.name().find_last_of(&quot;_(x&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>auto<sp/>factor_name<sp/>=<sp/>spectra.name().substr(begin_factor_it,<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>spectra.name(concatenate(spectra.name(),<sp/>&quot;_(x&quot;,<sp/>factor,<sp/>&quot;)&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>spectra.title(concatenate(spectra.title(),<sp/>&quot;<sp/>(x&quot;,<sp/>factor,<sp/>&quot;)&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spectra;</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="class_spectra_co_1a9c5ae4fa536ee968b112bdab670fa2d8" refkind="member"><highlight class="normal"><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/>&amp;<sp/><ref refid="class_spectra_co_1a9c5ae4fa536ee968b112bdab670fa2d8" kindref="member">SpectraCo::operator*=</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>factor)</highlight></codeline>
<codeline lineno="538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>;<sp/>bin++)<sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>[bin]<sp/>*=<sp/><ref refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" kindref="member">factor</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="class_spectra_co_1aa4225392a595ff8a0950ef67610096d0" refkind="member"><highlight class="normal"><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/><ref refid="class_spectra_co_1aa4225392a595ff8a0950ef67610096d0" kindref="member">SpectraCo::operator/</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>factor)</highlight></codeline>
<codeline lineno="547"><highlight class="normal">{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/>spectra(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" kindref="member">m_factor</ref><sp/>==<sp/>0)<sp/>{<ref refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;In<sp/>SpectraCo::operator/(factor)<sp/>:<sp/>factor<sp/>is<sp/>equal<sp/>to<sp/>zero<sp/>!!&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spectra;}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" kindref="member">m_factor</ref><sp/>=<sp/><ref refid="class_spectra_co_1acc6765bf7da4178c376b46d8e5e6393d" kindref="member">factor</ref>;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>;<sp/>bin++)<sp/>spectra[bin]<sp/>=<sp/>spectra[bin]/<ref refid="class_spectra_co_1a136d4ce0b3d28344ef2b09bd59bd08ac" kindref="member">m_factor</ref>;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>if<sp/>time<sp/>:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(m_factor!=1)//<sp/>If<sp/>the<sp/>spectra<sp/>has<sp/>already<sp/>been<sp/>multiplied<sp/>by<sp/>another<sp/>factor<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>auto<sp/>begin_factor_it<sp/>=<sp/>spectra.name().find_last_of(&quot;_(x&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>auto<sp/>factor_name<sp/>=<sp/>spectra.name().substr(begin_factor_it,<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>spectra.name(concatenate(spectra.name(),<sp/>&quot;_(x&quot;,<sp/>factor,<sp/>&quot;)&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>spectra.title(concatenate(spectra.title(),<sp/>&quot;<sp/>(x&quot;,<sp/>factor,<sp/>&quot;)&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spectra;</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" kindref="member">SpectraCo::recalibrate</ref>(<ref refid="class_recalibration" kindref="compound">Recalibration</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>recal)</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>newSpectra(<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>;<sp/>bin++)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_bin<sp/>=<sp/>recal.<ref refid="class_recalibration_1a6ce90b10d69409fdbc385ba6f990e073" kindref="member">calculate</ref>(bin);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>newSpectra[bin]<sp/>=<sp/><ref refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" kindref="member">interpolate</ref>(new_bin);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref><sp/>=<sp/>newSpectra;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>)<sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>-&gt;<ref refid="class_spectra_co_1a085a0452438dbffc3452aed6733a9103" kindref="member">recalibrate</ref>(recal);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576" refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" kindref="member">SpectraCo::calibrate</ref>(<ref refid="class_calibration" kindref="compound">Calibration</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>calib,<sp/><ref refid="_hit_8hpp_1ab5dd24876acad09ec52c250c1668466c" kindref="member">Label</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>label)</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(calib.<ref refid="class_calibration_1a91d512d3bcbc3a3439a7902326965b48" kindref="member">order</ref>(label)&lt;2)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref><sp/>=<sp/>calib.<ref refid="class_calibration_1a6044ac4a0a17e177af66138f75aca6b6" kindref="member">apply</ref>(<ref refid="class_spectra_co_1aeed13def0eec2c40ddbadbb70084e222" kindref="member">m_min_x</ref>,<sp/>label);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/>=<sp/>calib.<ref refid="class_calibration_1a6044ac4a0a17e177af66138f75aca6b6" kindref="member">apply</ref>(<ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref>,<sp/>label);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>newSpectra(<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>;<sp/>bin++)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_bin<sp/>=<sp/>calib.<ref refid="class_calibration_1a6044ac4a0a17e177af66138f75aca6b6" kindref="member">apply</ref>(bin,<sp/>label);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newSpectra[bin]<sp/>=<sp/>this-&gt;<ref refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" kindref="member">interpolate</ref>(new_bin);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref><sp/>=<sp/>newSpectra;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Replaces<sp/>&quot;adc&quot;<sp/>with<sp/>&quot;Energy&quot;<sp/>if<sp/>found<sp/>in<sp/>the<sp/>name<sp/>and/or<sp/>title<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><ref refid="string__functions_8hpp_1a3a78dc61d5d352a6559b927ae3167a21" kindref="member">replace</ref>(<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;adc&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Energy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><ref refid="string__functions_8hpp_1a3a78dc61d5d352a6559b927ae3167a21" kindref="member">replace</ref>(<ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref>,<sp/></highlight><highlight class="stringliteral">&quot;adc&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Energy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>)<sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>-&gt;<ref refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" kindref="member">calibrate</ref>(calib,<sp/>label);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602" refid="class_spectra_co_1af580e2c735a90aff03e6c1c159ed9b17" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" kindref="member">SpectraCo::calibrate</ref>(std::vector&lt;double&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>coeffs)</highlight></codeline>
<codeline lineno="603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order<sp/>=<sp/><ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(coeffs.size())<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>int_cast<sp/>to<sp/>avoid<sp/>underflow<sp/>issue<sp/>do<sp/>to<sp/>size_t<sp/>being<sp/>unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order&lt;0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order<sp/>==<sp/>0)<sp/>{this-&gt;<ref refid="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" kindref="member">calibrateX</ref>(coeffs[0]);}<sp/></highlight><highlight class="comment">//<sp/>calibrateX(slope,<sp/>intercept(default<sp/>=<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order<sp/>==<sp/>1)<sp/>{this-&gt;<ref refid="class_spectra_co_1afdfa3e10eda4e3513674dddcd32ae7e6" kindref="member">calibrateX</ref>(coeffs[0],<sp/>coeffs[1]);}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>newSpectra(<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>;<sp/>bin++)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(order)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2<sp/>:<sp/>newSpectra[bin]<sp/>=<sp/>this-&gt;<ref refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" kindref="member">interpolate</ref>(coeffs[0]<sp/>+<sp/>bin*coeffs[1]<sp/>+<sp/>bin*bin*coeffs[2]);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3<sp/>:<sp/>newSpectra[bin]<sp/>=<sp/>this-&gt;<ref refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" kindref="member">interpolate</ref>(coeffs[0]<sp/>+<sp/>bin*coeffs[1]<sp/>+<sp/>bin*bin*coeffs[2]<sp/>+<sp/>bin*bin*bin*coeffs[3]);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4<sp/>:<sp/>newSpectra[bin]<sp/>=<sp/>this-&gt;<ref refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" kindref="member">interpolate</ref>(coeffs[0]<sp/>+<sp/>bin*coeffs[1]<sp/>+<sp/>bin*bin*coeffs[2]<sp/>+<sp/>bin*bin*bin*coeffs[3]<sp/>+<sp/>bin*bin*bin*bin*coeffs[4]);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><ref refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;SpectraCo::calibrate(vector&lt;double&gt;<sp/>coeffs)<sp/>:<sp/>can&apos;t<sp/>handle&quot;</highlight><highlight class="normal">,<sp/>order+1,<sp/></highlight><highlight class="stringliteral">&quot;coefficients&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref><sp/>=<sp/>newSpectra;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Estetics<sp/>:<sp/>Replaces<sp/>&quot;adc&quot;<sp/>with<sp/>&quot;Energy&quot;<sp/>if<sp/>found<sp/>in<sp/>the<sp/>name<sp/>and/or<sp/>title<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><ref refid="string__functions_8hpp_1a3a78dc61d5d352a6559b927ae3167a21" kindref="member">replace</ref>(<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;adc&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Energy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><ref refid="string__functions_8hpp_1a3a78dc61d5d352a6559b927ae3167a21" kindref="member">replace</ref>(<ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref>,<sp/></highlight><highlight class="stringliteral">&quot;adc&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Energy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calibrate<sp/>the<sp/>derivative<sp/>spectra<sp/>if<sp/>it<sp/>exists<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>)<sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>-&gt;<ref refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" kindref="member">calibrate</ref>(coeffs);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="637" refid="class_spectra_co_1af74c78334a7be1cc421779f9e4b30a0b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1af74c78334a7be1cc421779f9e4b30a0b" kindref="member">SpectraCo::calibrateAndScale</ref>(std::vector&lt;double&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>coeffs)</highlight></codeline>
<codeline lineno="638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coeffs.size()<sp/>&lt;<sp/>2)<sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>SpectraCo::calibrateAndScale(coeffs)<sp/>:<sp/>coeffs<sp/>size<sp/>needs<sp/>to<sp/>be<sp/>at<sp/>least<sp/>2<sp/>(first<sp/>coeff<sp/>is<sp/>offset<sp/>and<sp/>second<sp/>is<sp/>scaling)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" kindref="member">calibrate</ref>(<ref refid="vector__functions_8hpp_1a629f2e4117a0bb1dada5aa3a4fad4765" kindref="member">sub_vec</ref>(coeffs,<sp/>0,<sp/>coeffs.size()-1));</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>(*this)*=coeffs.back();</highlight></codeline>
<codeline lineno="642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644" refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ab50cbac4f854c7bf6d807fe476b1e92a" kindref="member">SpectraCo::interpolate</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_bin)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="645"><highlight class="normal">{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_bin);<sp/></highlight><highlight class="comment">//bin_i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin_i&lt;0<sp/>||<sp/>bin_i<sp/>&gt;<sp/>(m_size-2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a<sp/>=<sp/>m_spectra[bin_i+1]<sp/>-<sp/>m_spectra[bin_i];</highlight><highlight class="comment">//<sp/>a<sp/><sp/>=<sp/><sp/>y_i+1<sp/>-<sp/>y_i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>b<sp/>=<sp/>m_spectra[bin_i]<sp/><sp/><sp/>-<sp/>a*bin_i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b<sp/><sp/>=<sp/><sp/>y_i<sp/>-<sp/>a*bin_i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a*_bin+b;</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="659" refid="class_spectra_co_1adbdfafcc8b0a95d520e491b0062b2e0b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1adbdfafcc8b0a95d520e491b0062b2e0b" kindref="member">SpectraCo::removeBackground</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>smooth,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>fit_options)<sp/>noexcept</highlight></codeline>
<codeline lineno="660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>gROOT<sp/>-&gt;<sp/>GetFile();</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)<sp/>gROOT-&gt;cd();</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>root_histo<sp/>=<sp/>this-&gt;createTH1F();</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><ref refid="namespace_co_analyse_1afa2d6e36c43655ace45e8aa55a53d4da" kindref="member">CoAnalyse::removeBackground</ref>(root_histo,<sp/>smooth,<sp/>fit_options);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>this-&gt;load(root_histo);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>root_histo;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)<sp/>file-&gt;cd();</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670" refid="class_spectra_co_1abf17675f290cad6e53ad51e59430a63c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1abf17675f290cad6e53ad51e59430a63c" kindref="member">SpectraCo::integralInRangeBin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin_min,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin_max)<sp/>noexcept</highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_it<sp/>=<sp/>bin_min;<sp/>bin_it&lt;bin_max;<sp/>bin_it++)<sp/>ret+=m_spectra[bin_it];</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677" refid="class_spectra_co_1a7986a8f7ea5491f7a69ad810e857894f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a7986a8f7ea5491f7a69ad810e857894f" kindref="member">SpectraCo::integralInRange</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value_min,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value_max)<sp/>noexcept</highlight></codeline>
<codeline lineno="678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0.0;<sp/></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_min<sp/>=<sp/>getBin(value_min);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_max<sp/>=<sp/>getBin(value_max);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_it<sp/>=<sp/>bin_min;<sp/>bin_it&lt;bin_max;<sp/>bin_it++)<sp/>ret+=m_spectra[bin_it];</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687" refid="class_spectra_co_1a6c50f289318ed3a37218be1b2485a0aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a6c50f289318ed3a37218be1b2485a0aa" kindref="member">SpectraCo::meanInRangeBin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin_min,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin_max)<sp/>noexcept</highlight></codeline>
<codeline lineno="688"><highlight class="normal">{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref><sp/>=<sp/>0.0;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integral<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_it<sp/>=<sp/>bin_min;<sp/>bin_it&lt;bin_max;<sp/>bin_it++)<sp/></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>+=bin_it*abs(m_spectra[bin_it]);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>integral+=abs(m_spectra[bin_it]);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>/=integralInRangeBin(bin_min,<sp/>bin_max);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;getX(<ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>);</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699" refid="class_spectra_co_1a4e9df1dfede067a7a241e1209a01f4bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a4e9df1dfede067a7a241e1209a01f4bc" kindref="member">SpectraCo::meanInRange</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value_min,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value_max)<sp/>noexcept</highlight></codeline>
<codeline lineno="700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref><sp/>=<sp/>0.0;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integral<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_min<sp/>=<sp/>getBin(value_min);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_max<sp/>=<sp/>getBin(value_max);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_it<sp/>=<sp/>bin_min;<sp/>bin_it&lt;bin_max;<sp/>bin_it++)<sp/></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>+=bin_it*abs(m_spectra[bin_it]);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>integral+=abs(m_spectra[bin_it]);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>/=integral;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;getX(<ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>);</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="class_spectra_co_1a7b935499bbdce4b84a0f640b6518765c" refkind="member"><highlight class="normal"><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/><ref refid="class_spectra_co_1a7b935499bbdce4b84a0f640b6518765c" kindref="member">SpectraCo::derivate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smooth)<sp/>noexcept</highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>m_derivative<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Can<sp/>optimize<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>m_derivative-&gt;name()<sp/>=<sp/>m_name+</highlight><highlight class="stringliteral">&quot;_der&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>smooth_range<sp/>=<sp/>2*smooth;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower_bin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper_bin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low_sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>up_sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;m_size;<sp/>bin++)</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>lower_bin<sp/>=<sp/>bin-smooth;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>upper_bin<sp/>=<sp/>bin+smooth;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Before<sp/>all,<sp/>handle<sp/>side<sp/>effects<sp/>:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>the<sp/>beginning<sp/>and<sp/>the<sp/>end<sp/>of<sp/>the<sp/>spectra,<sp/>there<sp/>are<sp/>not<sp/>enough<sp/>bins<sp/>on<sp/>both<sp/>sides<sp/>to<sp/>smooth<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Therefore,<sp/>we<sp/>have<sp/>to<sp/>set<sp/>a<sp/>correct<sp/>number<sp/>of<sp/>bins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lower_bin&lt;0)</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>first<sp/>bins<sp/>of<sp/>the<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lower_bin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper_bin<sp/>=<sp/>2*bin;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(upper_bin<sp/>&gt;<sp/>m_size-1)</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>last<sp/>bins<sp/>of<sp/>the<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lower_bin<sp/>=<sp/>2*bin-m_size;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper_bin<sp/>=<sp/>m_size;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>low_sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>up_sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>sum<sp/>the<sp/>content<sp/>of<sp/>all<sp/>the<sp/>bins<sp/>on<sp/>the<sp/>left<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_low<sp/>=<sp/>lower_bin;<sp/>bin_low&lt;bin;<sp/>bin_low++)<sp/>{low_sum+=m_spectra[bin_low];}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Second,<sp/>sum<sp/>the<sp/>content<sp/>of<sp/>all<sp/>the<sp/>bins<sp/>on<sp/>the<sp/>right<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_up<sp/>=<sp/>bin+1;<sp/>bin_up&lt;upper_bin;<sp/>bin_up++)<sp/>{up_sum+=m_spectra[bin_up];}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>derivative<sp/>:<sp/>(sum_right<sp/>-<sp/>sum_left)<sp/>/<sp/>(x_right<sp/>-<sp/>x_left)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>(*m_derivative)[bin]<sp/>=<sp/>(up_sum-low_sum)/(smooth_range);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_derivative;</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759" refid="class_spectra_co_1a9be3e04ddc73df4d11336ec806313094" refkind="member"><highlight class="normal"><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/><ref refid="class_spectra_co_1a9be3e04ddc73df4d11336ec806313094" kindref="member">SpectraCo::derivate2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smooth)noexcept</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>derivate(smooth);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>m_derivative2<sp/>=<sp/>m_derivative-&gt;derivate(smooth);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_derivative2;</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767" refid="class_spectra_co_1a2d1839156a996f255b74024e12257bdb" refkind="member"><highlight class="normal"><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/><ref refid="class_spectra_co_1aa9af077c307bb5e33e271bf8cbaa1741" kindref="member">SpectraCo::derivative</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="768"><highlight class="normal">{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>)<sp/></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" kindref="member">error</ref>(<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>no<sp/>derivative<sp/>spectra<sp/>!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>-&gt;<ref refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" kindref="member">name</ref>()<sp/>=<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>+</highlight><highlight class="stringliteral">&quot;_der&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781" refid="class_spectra_co_1a213a9aea476c88a52c8c32a4eb775190" refkind="member"><highlight class="normal"><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/><ref refid="class_spectra_co_1a5db4e774152522eac0e1c58af984fc28" kindref="member">SpectraCo::derivative2</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="782"><highlight class="normal">{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_spectra_co_1a332e26399e136100490dd879772fe797" kindref="member">m_derivative2</ref>)<sp/></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" kindref="member">error</ref>(<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>no<sp/>second<sp/>derivative<sp/>spectra<sp/>!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a332e26399e136100490dd879772fe797" kindref="member">m_derivative2</ref>-&gt;<ref refid="class_spectra_co_1a63e44855e3e049f64759cff74aa15a52" kindref="member">name</ref>()<sp/>=<sp/><ref refid="class_spectra_co_1a571209e16332182019598b86d9a5e234" kindref="member">name</ref>+</highlight><highlight class="stringliteral">&quot;_derder&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a332e26399e136100490dd879772fe797" kindref="member">m_derivative2</ref>;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="798" refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" kindref="member">SpectraCo::resizeBin</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_size)</highlight></codeline>
<codeline lineno="799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/>=<sp/><ref refid="class_spectra_co_1a35d8272a17e0f7bd8cb6dc7d0cd7a7e5" kindref="member">m_max_x</ref><sp/>*<sp/>(new_size/<ref refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" kindref="member">double_cast</ref>(<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>));</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref><sp/>=<sp/>new_size;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>.resize(<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>)<sp/><ref refid="class_spectra_co_1af40d337ee204d0ae43cc50e81c2262ef" kindref="member">m_derivative</ref>-&gt;<ref refid="class_spectra_co_1ab733430ea1ac8bafd68b6709f19d1d0d" kindref="member">resizeBin</ref>(new_size);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1acdaa8ad0f11fa4c3fd7aa6eae2dacbd7" kindref="member">m_integral</ref><sp/>=<sp/><ref refid="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" kindref="member">sum</ref>(<ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1ac010001d3601d366b0573119a5d2be2a" kindref="member">calculateCoeff</ref>();</highlight></codeline>
<codeline lineno="806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="814" refid="class_spectra_co_1af27cbecc0fdfd5542e0186856bc4c4cf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a0ba318153d548c02c9ab4b39465ea1b4" kindref="member">SpectraCo::resizeX</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>minX,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>maxX)</highlight></codeline>
<codeline lineno="815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(<ref refid="class_spectra_co_1aed822c874938eb1f5953c6e1a412cf33" kindref="member">minX</ref>,<sp/><ref refid="class_spectra_co_1a244bef386237d633da441b377ca2a278" kindref="member">maxX</ref>);</highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819" refid="class_spectra_co_1a0ba318153d548c02c9ab4b39465ea1b4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a0ba318153d548c02c9ab4b39465ea1b4" kindref="member">SpectraCo::resizeX</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>maxX)</highlight></codeline>
<codeline lineno="820"><highlight class="normal">{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(<ref refid="class_spectra_co_1a244bef386237d633da441b377ca2a278" kindref="member">maxX</ref>);</highlight></codeline>
<codeline lineno="822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824" refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" refkind="member"><highlight class="normal">TH1D*<sp/><ref refid="class_spectra_co_1aa12a2fe0635e8b3e73eb47b09810f75e" kindref="member">SpectraCo::createTH1D</ref>(std::string<sp/>newName,<sp/>std::string<sp/>newTitle)</highlight></codeline>
<codeline lineno="825"><highlight class="normal">{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>newName<sp/>=<sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newTitle<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>newTitle<sp/>=<sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref>;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>TH1D*<sp/>out<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D(<ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>.c_str(),<sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref>.c_str(),<sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>,<sp/>this-&gt;minX(),<sp/>this-&gt;maxX());</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>1;<sp/>bin&lt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>+1;<sp/>bin++)<sp/>out-&gt;SetBinContent(bin,<sp/><ref refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" kindref="member">double_cast</ref>(<ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>[bin-1]));</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a7bb27d1fe53fe342a218040f28d647ba" kindref="member">root_spectra_pointers</ref>.push_back(out);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834" refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" refkind="member"><highlight class="normal">TH1F*<sp/><ref refid="class_spectra_co_1ab09637ebd15e54488eb34b5d7470e83f" kindref="member">SpectraCo::createTH1F</ref>(std::string<sp/>newName,<sp/>std::string<sp/>newTitle)</highlight></codeline>
<codeline lineno="835"><highlight class="normal">{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>newName<sp/>=<sp/><ref refid="class_spectra_co_1ac2f903ccb1ff1079f7667e3c9f25b154" kindref="member">m_name</ref>;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newTitle<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>newTitle<sp/>=<sp/><ref refid="class_spectra_co_1ab75ab520b8b67a200bacd3a492179b1b" kindref="member">m_title</ref>;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>TH1F*<sp/>out<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1F(newName.c_str(),<sp/>newTitle.c_str(),<sp/><ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>,<sp/>this-&gt;minX(),<sp/>this-&gt;maxX());</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>1;<sp/>bin&lt;<ref refid="class_spectra_co_1ae2c5c9fbc723e392cade5aabfb2d3991" kindref="member">m_size</ref>;<sp/>bin++)<sp/>out-&gt;SetBinContent(bin,<sp/><ref refid="class_spectra_co_1afaf3a8b0918de26d2c37392c0bc853a4" kindref="member">m_spectra</ref>[bin]);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a7bb27d1fe53fe342a218040f28d647ba" kindref="member">root_spectra_pointers</ref>.push_back(out);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="846" refid="_spectra_co_8hpp_1a2db236fee001966b9a9a303b1096182b" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_spectra_co_8hpp_1a2db236fee001966b9a9a303b1096182b" kindref="member">goingBelow</ref>(std::vector&lt;double&gt;<sp/>&amp;<sp/>m_spectra,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>bin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>threshold,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nb_below)</highlight></codeline>
<codeline lineno="847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>&amp;<sp/>bin_max<sp/>=<sp/>bin+nb_below;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;bin&lt;<ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(m_spectra.size());bin++)</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_spectra[bin]&lt;threshold)</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print(bin,<sp/>m_spectra[bin]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stay_below<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_j<sp/>=<sp/>bin+1;<sp/>bin_j&lt;bin+nb_below;<sp/>bin_j++)</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin_j==<ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(m_spectra.size()))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//<sp/>Bounds<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Going<sp/>back<sp/>to<sp/>the<sp/>main<sp/>loop<sp/>if<sp/>spectra<sp/>goes<sp/>back<sp/>above<sp/>threshold<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_spectra[bin_j]&gt;threshold)<sp/>{bin<sp/>=<sp/>bin_j;<sp/>stay_below<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}<sp/></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print(stay_below);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stay_below)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="870" refid="_spectra_co_8hpp_1ab40ef30166a4d0b3f315e6b365bb96c6" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_spectra_co_8hpp_1ab40ef30166a4d0b3f315e6b365bb96c6" kindref="member">goingAbove</ref>(std::vector&lt;double&gt;<sp/>&amp;<sp/>m_spectra,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>bin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>threshold,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nb_above)</highlight></codeline>
<codeline lineno="871"><highlight class="normal">{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>&amp;<sp/>bin_max<sp/>=<sp/>bin+nb_above;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;bin&lt;<ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(m_spectra.size());bin++)</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_spectra[bin]&gt;threshold)</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print(bin,<sp/>m_spectra[bin]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stay_above<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_j<sp/>=<sp/>bin+1;<sp/>bin_j&lt;bin+nb_above;<sp/>bin_j++)</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin_j==<ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(m_spectra.size()))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//<sp/>Bounds<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Going<sp/>back<sp/>to<sp/>the<sp/>main<sp/>loop<sp/>if<sp/>spectra<sp/>goes<sp/>back<sp/>above<sp/>threshold<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_spectra[bin_j]&lt;threshold)<sp/>{bin<sp/>=<sp/>bin_j;<sp/>stay_above<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}<sp/></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stay_above)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="_spectra_co_8hpp_1abdc3f87ff631c70010f12fd72339b8c8" refkind="member"><highlight class="normal"><ref refid="_spectra_co_8hpp_1a43a18302ff8470bdf68a839c735e6c8e" kindref="member">SpectraPoint</ref><sp/><ref refid="_spectra_co_8hpp_1abdc3f87ff631c70010f12fd72339b8c8" kindref="member">minimum_in_range</ref>(std::vector&lt;double&gt;<sp/>&amp;<sp/>m_spectra,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_min,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin_max)</highlight></codeline>
<codeline lineno="892"><highlight class="normal">{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><ref refid="_spectra_co_8hpp_1a43a18302ff8470bdf68a839c735e6c8e" kindref="member">SpectraPoint</ref><sp/>point;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;bin_min&lt;bin_max;<sp/>bin_min++)</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point.second&gt;m_spectra[bin_min])<sp/>point<sp/>=<sp/>{bin_min,<sp/>m_spectra[bin_min]};</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>point;</highlight></codeline>
<codeline lineno="899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901" refid="_spectra_co_8hpp_1a83ac1a487b3da916f985b967215f76a4" refkind="member"><highlight class="normal"><ref refid="_spectra_co_8hpp_1a43a18302ff8470bdf68a839c735e6c8e" kindref="member">SpectraPoint</ref><sp/><ref refid="_spectra_co_8hpp_1a83ac1a487b3da916f985b967215f76a4" kindref="member">maximum_in_range</ref>(std::vector&lt;double&gt;<sp/>&amp;<sp/>m_spectra,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_min,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin_max)</highlight></codeline>
<codeline lineno="902"><highlight class="normal">{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><ref refid="_spectra_co_8hpp_1a43a18302ff8470bdf68a839c735e6c8e" kindref="member">SpectraPoint</ref><sp/>point;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;bin_min&lt;bin_max;<sp/>bin_min++)</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point.second&lt;m_spectra[bin_min])<sp/>point<sp/>=<sp/>{bin_min,<sp/>m_spectra[bin_min]};</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>point;</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="912" refid="class_spectra_co_1a3ba8c0e42ab3c3d3efa1f827b9465daf" refkind="member"><highlight class="normal"><ref refid="_spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7" kindref="member">SpectraPoints</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" kindref="member">SpectraCo::findPeaks</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>threshold,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nb_bins_below_threshold,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>smooth)</highlight></codeline>
<codeline lineno="913"><highlight class="normal">{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="class_spectra_co_1adbdfafcc8b0a95d520e491b0062b2e0b" kindref="member">removeBackground</ref>(smooth);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="class_spectra_co_1a9be3e04ddc73df4d11336ec806313094" kindref="member">derivate2</ref>(smooth);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" kindref="member">findPeaks</ref>(threshold,<sp/>nb_bins_below_threshold);</highlight></codeline>
<codeline lineno="917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="926" refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" refkind="member"><highlight class="normal"><ref refid="_spectra_co_8hpp_1a3a08928d322f56dd109a6d6fdff241c7" kindref="member">SpectraPoints</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_co_1adfe0baad93402b4ae44a6c8ea14bc137" kindref="member">SpectraCo::findPeaks</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>threshold,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nb_bins_below_threshold)</highlight></codeline>
<codeline lineno="927"><highlight class="normal">{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606" kindref="member">m_peaks</ref>.clear();</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*m_derivative2).size()==0)<sp/>{<ref refid="print_8hpp_1a553a9a331cc4556c2d9bb3aaa8533528" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>SpectraCo::findPeaks(int<sp/>threshold,<sp/>int<sp/>nb_bins_below_threshold)<sp/>:<sp/>first<sp/>use<sp/>SpectraCo::derivate2&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606" kindref="member">m_peaks</ref>;}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aliasing<sp/>the<sp/>parameters<sp/>(only<sp/>for<sp/>the<sp/>code<sp/>to<sp/>be<sp/>more<sp/>readable)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>thres<sp/>=<sp/>-threshold;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>derivative<sp/>spectra<sp/>has<sp/>peaks<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nb_below<sp/>=<sp/>nb_bins_below_threshold;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>bin_starts;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>bin_stops<sp/>;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterator<sp/>:<sp/>starts<sp/>at<sp/>the<sp/>left<sp/>point<sp/>of<sp/>the<sp/>spectra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_it<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>spectra<sp/>first<sp/>bin<sp/>is<sp/>below<sp/>the<sp/>threshold,<sp/>look<sp/>for<sp/>first<sp/>bin<sp/>above<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*<ref refid="class_spectra_co_1a332e26399e136100490dd879772fe797" kindref="member">m_derivative2</ref>)[0]<sp/>&lt;<sp/>thres)<sp/><ref refid="_spectra_co_8hpp_1ab40ef30166a4d0b3f315e6b365bb96c6" kindref="member">goingAbove</ref>(<ref refid="class_spectra_co_1a332e26399e136100490dd879772fe797" kindref="member">m_derivative2</ref>-&gt;<ref refid="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" kindref="member">data</ref>(),<sp/>bin_it,<sp/>threshold,<sp/>1);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SpectraCo::goingBelow<sp/>returns<sp/>true<sp/>when<sp/>a<sp/>new<sp/>peak<sp/>is<sp/>found,<sp/>and<sp/>false<sp/>at<sp/>the<sp/>end<sp/>point<sp/>of<sp/>the<sp/>spectra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>function<sp/>does<sp/>the<sp/>iterator<sp/>increment<sp/>(bin_it++)<sp/>automatically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="_spectra_co_8hpp_1a2db236fee001966b9a9a303b1096182b" kindref="member">goingBelow</ref>(<ref refid="class_spectra_co_1a332e26399e136100490dd879772fe797" kindref="member">m_derivative2</ref>-&gt;<ref refid="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" kindref="member">data</ref>(),<sp/>bin_it,<sp/>thres,<sp/>nb_below))</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bin<sp/>iterator<sp/>current<sp/>value<sp/>is<sp/>the<sp/>first<sp/>bin<sp/>whose<sp/>value<sp/>is<sp/>below<sp/>the<sp/>threshold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>bin_starts.push_back(bin_it);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SpectraCo::goingBelow<sp/>returns<sp/>true<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>peak<sp/>(iterator<sp/>increment<sp/>(bin_it++)<sp/>automatically)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_spectra_co_8hpp_1ab40ef30166a4d0b3f315e6b365bb96c6" kindref="member">goingAbove</ref>(<ref refid="class_spectra_co_1a332e26399e136100490dd879772fe797" kindref="member">m_derivative2</ref>-&gt;<ref refid="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" kindref="member">data</ref>(),<sp/>bin_it,<sp/>thres,<sp/>1);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bin<sp/>iterator<sp/>current<sp/>value<sp/>is<sp/>the<sp/>first<sp/>bin<sp/>whose<sp/>value<sp/>is<sp/>above<sp/>the<sp/>threshold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>bin_stops.push_back(bin_it);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finds<sp/>the<sp/>minimum<sp/>point<sp/>between<sp/>the<sp/>first<sp/>bin<sp/>to<sp/>go<sp/>below<sp/>threshold<sp/>and<sp/>next<sp/>bin<sp/>to<sp/>go<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606" kindref="member">m_peaks</ref>.push_back(<ref refid="_spectra_co_8hpp_1abdc3f87ff631c70010f12fd72339b8c8" kindref="member">minimum_in_range</ref>(<ref refid="class_spectra_co_1a332e26399e136100490dd879772fe797" kindref="member">m_derivative2</ref>-&gt;<ref refid="class_spectra_co_1aa2db7539ef66b96a3a4ad94fe4e0ce19" kindref="member">data</ref>(),<sp/>bin_starts.back(),<sp/>bin_stops.back()));</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>call<sp/>to<sp/>SpectraCo::goingBelow<sp/>will<sp/>return<sp/>true<sp/>if<sp/>the<sp/>spectra<sp/>goes<sp/>below<sp/>the<sp/>threshold<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spectra_co_1a9bdfab83e4f6ad7749b69ecd0bc2a606" kindref="member">m_peaks</ref>;</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>SpectraCo2D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="comment">//<sp/>public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>SpectraCo2D()<sp/>noexcept<sp/>=<sp/>default;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>SpectraCo2D(std::vector&lt;SpectraCo&gt;<sp/>const<sp/>&amp;<sp/>spectra)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>m_spectra.reserve(spectra.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>&amp;<sp/>sprectrum<sp/>:<sp/>spectra)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_spectra.emplace(i,<sp/>sprectrum);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_indexes.push_back(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>this-&gt;MAJ();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>SpectraCo2D(std::map&lt;int,<sp/>SpectraCo&gt;<sp/>const<sp/>&amp;<sp/>spectra)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>m_spectra.reserve(spectra.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>&amp;<sp/>it<sp/>:<sp/>spectra)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_spectra[it.first]<sp/>=<sp/>it.second;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_indexes.push_back(it.first);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>this-&gt;MAJ();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>MAJ()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>&amp;<sp/>it<sp/>:<sp/>m_spectra)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>spectrum<sp/>=<sp/>it.second;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(m_min_X&gt;spectrum.minX())<sp/>m_min_X<sp/>=<sp/>spectrum.minX();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(m_max_X&lt;spectrum.maxX())<sp/>m_max_X<sp/>=<sp/>spectrum.maxX();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nb_bins&lt;spectrum.size())<sp/>nb_bins<sp/>=<sp/>spectrum.size();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Resize<sp/>all<sp/>the<sp/>spectra<sp/>at<sp/>the<sp/>same<sp/>size,<sp/>and<sp/>setup<sp/>the<sp/>same<sp/>beginning<sp/>and<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>&amp;<sp/>spectrum<sp/>:<sp/>m_spectra)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(spectrum);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TH2F*<sp/>createTH2F(std::string<sp/>const<sp/>&amp;<sp/>name<sp/>=<sp/>&quot;all_histo&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>TH2F*<sp/>ret<sp/>(new<sp/>TH2F(name.c_str(),<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.c_str(),<sp/>m_spectra.size(),<sp/>0,<sp/>m_spectra.size(),<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb_bins,<sp/>m_min_X,<sp/>m_max_X));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>ret;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>private:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>m_indexes;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::unordered_map&lt;int,<sp/>SpectraCo&gt;<sp/>m_spectra;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>m_min_X=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>m_max_X=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>int<sp/>nb_bins<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment">//<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="comment">//<sp/>/**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@brief<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@todo<sp/>this<sp/>function<sp/>is<sp/>not<sp/>working<sp/>(issue<sp/>at<sp/>&apos;if<sp/>(fine_left<sp/>!=<sp/>0)<sp/>new_bin<sp/>+=<sp/>fine_left<sp/>*<sp/>m_spectra[reader_it++];&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@param<sp/>factor<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>SpectraCo::rebin(int<sp/>const<sp/>&amp;<sp/>factor)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(factor&lt;1)<sp/>throw_error(&quot;in<sp/>SpectraCo::rebin(int<sp/>factor)<sp/>:<sp/>factor<sp/>can&apos;t<sp/>be<sp/>&lt;<sp/>1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>rest<sp/><sp/><sp/><sp/><sp/>=<sp/>m_size<sp/>%<sp/>factor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>int<sp/><sp/>const<sp/>&amp;<sp/>new_size<sp/>=<sp/>m_size<sp/>/<sp/>factor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>new_vector(new_size,<sp/>0);<sp/>//<sp/>Fills<sp/>the<sp/>new<sp/>vector<sp/>with<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if(rest<sp/>==<sp/>0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>m_rebin*=factor;<sp/>//<sp/>Saves<sp/>the<sp/>rebin<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>new_bin_it<sp/>=<sp/>0;<sp/>new_bin_it&lt;new_size;<sp/>new_bin_it++){<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pauseCo();<sp/>print(new_bin_it);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>bin_j<sp/>=<sp/>0;<sp/>bin_j&lt;factor;<sp/>bin_j<sp/>++){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>print(int_cast(new_bin_it<sp/>*<sp/>factor<sp/>+<sp/>bin_j),<sp/>m_spectra[int_cast(new_bin_it<sp/>*<sp/>factor<sp/>+<sp/>bin_j)]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_vector[new_bin_it]<sp/>+=<sp/>m_spectra[int_cast(new_bin_it<sp/>*<sp/>factor<sp/>+<sp/>bin_j)];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>print(new_vector[new_bin_it]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>print(&quot;Can&apos;t<sp/>rebin<sp/>if<sp/>the<sp/>factor<sp/>isn&apos;t<sp/>a<sp/>diviser<sp/>of<sp/>the<sp/>number<sp/>of<sp/>bins&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>m_rebin*=factor;<sp/>//<sp/>Saves<sp/>the<sp/>rebin<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>the<sp/>rebin<sp/>factor<sp/>is<sp/>not<sp/>a<sp/>divisor<sp/>of<sp/>the<sp/>initial<sp/>size,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>one<sp/>has<sp/>to<sp/>extend<sp/>a<sp/>little<sp/>bit<sp/>each<sp/>of<sp/>the<sp/>new<sp/>bins.<sp/>For<sp/>instance,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>&apos;size<sp/>=<sp/>20&apos;<sp/>and<sp/>&apos;factor<sp/>=<sp/>3&apos;<sp/>then<sp/>&apos;rest<sp/>=<sp/>size%factor<sp/>=<sp/>1&apos;<sp/>and<sp/>&apos;new_size<sp/>=<sp/>6,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>so<sp/>there<sp/>is<sp/>one<sp/>bin<sp/>&quot;missing&quot;.<sp/>To<sp/>compensate,<sp/>each<sp/>bin<sp/>will<sp/>be<sp/>extended<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>by<sp/>&apos;extend<sp/>=<sp/>rest/new_size&apos;,<sp/>so<sp/>here<sp/>&apos;1/6&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>extend<sp/>=<sp/>rest<sp/>/<sp/>new_size;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Starts<sp/>to<sp/>loop<sp/>over<sp/>the<sp/>histograms<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>old_bin_it<sp/>=<sp/>0;<sp/>old_bin_it&lt;m_size;<sp/>old_bin_it++){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>&amp;<sp/>new_bin<sp/>=<sp/>new_vector[old_bin_it<sp/>/<sp/>factor];<sp/>//<sp/>Create<sp/>an<sp/>alias</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>First,<sp/>calculate<sp/>the<sp/>actual<sp/>shift<sp/>for<sp/>the<sp/>current<sp/>bin<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>shift_left<sp/><sp/>=<sp/><sp/>old_bin_it<sp/><sp/><sp/><sp/>*<sp/>extend;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>shift_right<sp/>=<sp/>(old_bin_it+1)<sp/>*<sp/>extend;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Then<sp/>calculate<sp/>the<sp/>number<sp/>of<sp/>bins<sp/>to<sp/>shift<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>const<sp/>&amp;<sp/>bins_shift_left<sp/><sp/>=<sp/>int_cast(std::trunc(shift_left));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>const<sp/>&amp;<sp/>bins_shift_right<sp/>=<sp/>int_cast(std::trunc(shift_right));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>And<sp/>the<sp/>&apos;fine<sp/>shift&apos;<sp/>(the<sp/>rest<sp/>of<sp/>the<sp/>trucation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>fine_left<sp/><sp/>=<sp/>1<sp/>-<sp/>(shift_left<sp/><sp/>-<sp/>double_cast(bins_shift_left<sp/>));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>fine_right<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>shift_right<sp/>-<sp/>double_cast(bins_shift_right<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>first<sp/>bin<sp/>is<sp/>shifted<sp/>accordingly<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>reader_it<sp/>=<sp/>old_bin_it<sp/>+<sp/>bins_shift_left;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Take<sp/>the<sp/>fine<sp/>left<sp/>shift<sp/>into<sp/>account,<sp/>which<sp/>means<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(fine_left<sp/>!=<sp/>0)<sp/>new_bin<sp/>+=<sp/>fine_left<sp/>*<sp/>m_spectra[reader_it++];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>the<sp/>stop<sp/>bin<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>stop_bin<sp/>=<sp/>old_bin_it<sp/>+<sp/>factor<sp/>+<sp/>bins_shift_right;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Read<sp/>all<sp/>the<sp/>other<sp/>bins<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(;<sp/>reader_it<sp/>&lt;<sp/>stop_bin;<sp/>reader_it<sp/>++){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_bin<sp/>+=<sp/>m_spectra[reader_it];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Take<sp/>the<sp/>fine<sp/>right<sp/>shift<sp/>into<sp/>account<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(fine_right<sp/>!=<sp/>0)<sp/>new_bin<sp/>+=<sp/>fine_right<sp/>*<sp/>m_spectra[reader_it++];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_spectra<sp/>=<sp/>new_vector;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_size<sp/><sp/><sp/><sp/>=<sp/>new_size;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//SPECTRACO_HPP</highlight></codeline>
    </programlisting>
    <location file="lib/Analyse/SpectraCo.hpp"/>
  </compounddef>
</doxygen>
