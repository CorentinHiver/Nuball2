<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="string__functions_8hpp" kind="file" language="C++">
    <compoundname>string_functions.hpp</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">cstring</includes>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <includedby refid="files__functions_8hpp" local="yes">lib/files_functions.hpp</includedby>
    <includedby refid="lib_co_8hpp" local="yes">lib/libCo.hpp</includedby>
    <incdepgraph>
      <node id="4">
        <label>string</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="5">
        <label>sstream</label>
      </node>
      <node id="1">
        <label>lib/string_functions.hpp</label>
        <link refid="string__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>lib/Analyse/Counters.hpp</label>
        <link refid="_analyse_2_counters_8hpp"/>
      </node>
      <node id="49">
        <label>lib/Classes/RWMat.hxx</label>
        <link refid="_r_w_mat_8hxx"/>
      </node>
      <node id="41">
        <label>lib/libRoot.hpp</label>
        <link refid="lib_root_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>lib/Modules/Faster2Histo.hpp</label>
        <link refid="_faster2_histo_8hpp"/>
      </node>
      <node id="32">
        <label>lib/Classes/RF_Manager.hpp</label>
        <link refid="_r_f___manager_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>lib/Classes/Manip.hpp</label>
        <link refid="_manip_8hpp"/>
      </node>
      <node id="24">
        <label>lib/MTObjects/MTFasterReader.hpp</label>
        <link refid="_m_t_faster_reader_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>lib/Classes/Nuball2Tree.hpp</label>
        <link refid="_nuball2_tree_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>lib/Modules/EvolutionPeaks.hpp</label>
        <link refid="_evolution_peaks_8hpp"/>
      </node>
      <node id="37">
        <label>lib/Classes/Gate.hpp</label>
        <link refid="_gate_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>lib/Analyse/DSSD.hpp</label>
        <link refid="_d_s_s_d_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>lib/MTObjects/MTFilesManager.hpp</label>
        <link refid="_m_t_files_manager_8hpp"/>
      </node>
      <node id="47">
        <label>lib/Classes/FasterReader.hpp</label>
        <link refid="_faster_reader_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>lib/Analyse/EventAnalyse.hpp</label>
        <link refid="_event_analyse_8hpp"/>
      </node>
      <node id="13">
        <label>lib/Modules/CobaltCalorimeter.hpp</label>
        <link refid="_cobalt_calorimeter_8hpp"/>
      </node>
      <node id="46">
        <label>lib/Classes/Hit.hpp</label>
        <link refid="_hit_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>lib/libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>lib/Classes/EventBuilder.hpp</label>
        <link refid="_event_builder_8hpp"/>
      </node>
      <node id="28">
        <label>lib/Analyse/Clovers.hpp</label>
        <link refid="_clovers_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>lib/Modules/CloverSpectra.hpp</label>
        <link refid="_clover_spectra_8hpp"/>
      </node>
      <node id="50">
        <label>lib/MTObjects/MTList.hpp</label>
        <link refid="_m_t_list_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>lib/Classes/Fit.hpp</label>
        <link refid="_fit_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>lib/files_functions.hpp</label>
        <link refid="files__functions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>lib/Analyse/ParisCluster.hpp</label>
        <link refid="_paris_cluster_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>lib/Classes/Calibration.hpp</label>
        <link refid="_calibration_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>lib/Classes/DataFile.hpp</label>
        <link refid="_data_file_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>lib/Classes/Counters.hpp</label>
        <link refid="_classes_2_counters_8hpp"/>
      </node>
      <node id="18">
        <label>lib/Analyse/SpectraCo.hpp</label>
        <link refid="_spectra_co_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>lib/Analyse/SpectraAlignator.hpp</label>
        <link refid="_spectra_alignator_8hpp"/>
      </node>
      <node id="44">
        <label>lib/Classes/Detectors.hpp</label>
        <link refid="_detectors_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>lib/Classes/Event.hpp</label>
        <link refid="_event_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>lib/Analyse/Sorted_Event.hpp</label>
        <link refid="_sorted___event_8hpp"/>
      </node>
      <node id="48">
        <label>lib/Classes/OutputTFile.hpp</label>
        <link refid="_output_t_file_8hpp"/>
      </node>
      <node id="11">
        <label>lib/Modules/Faster2Root.hpp</label>
        <link refid="_faster2_root_8hpp"/>
      </node>
      <node id="43">
        <label>lib/Analyse/ParisPhoswitch.hpp</label>
        <link refid="_paris_phoswitch_8hpp"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>lib/Modules/RunMatrixator.hpp</label>
        <link refid="_run_matrixator_8hpp"/>
      </node>
      <node id="1">
        <label>lib/string_functions.hpp</label>
        <link refid="string__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>lib/Analyse/AnalysedSpectra.hpp</label>
        <link refid="_analysed_spectra_8hpp"/>
      </node>
      <node id="22">
        <label>lib/Classes/CoProgressBar.hpp</label>
        <link refid="_co_progress_bar_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>lib/Classes/CoincBuilder.hpp</label>
        <link refid="_coinc_builder_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>lib/Classes/Builder.hpp</label>
        <link refid="_builder_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>lib/Modules/NearLine.hpp</label>
        <link refid="_near_line_8hpp"/>
      </node>
      <node id="12">
        <label>lib/Modules/Timeshifts.hpp</label>
        <link refid="_timeshifts_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>lib/Classes/Timewalk.hpp</label>
        <link refid="_timewalk_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>lib/Analyse/Paris.hpp</label>
        <link refid="_paris_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>lib/Classes/Alignator.hpp</label>
        <link refid="_alignator_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>lib/Classes/FilesManager.hpp</label>
        <link refid="_files_manager_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>lib/Modules/Calibrator.hpp</label>
        <link refid="_calibrator_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>lib/MTObjects/MTRootReader.hpp</label>
        <link refid="_m_t_root_reader_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>lib/Classes/Performances.hpp</label>
        <link refid="_performances_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="string__functions_8hpp_1aa7465160d3e16a3c75545d8f792a08a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string argv_to_string</definition>
        <argsstring>(char **argv, int const &amp;start_i=0)</argsstring>
        <name>argv_to_string</name>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>int const &amp;</type>
          <declname>start_i</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Convert i_th first arguments of argv into a string (), by default starting at the first. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>argv MUST be null-terminated</para>
</simplesect>
Each argument starts with a space </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="187" column="13" bodyfile="lib/string_functions.hpp" bodystart="187" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string concatenate</definition>
        <argsstring>(ARGS &amp;&amp;... args)</argsstring>
        <name>concatenate</name>
        <param>
          <type>ARGS &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="240" column="13" bodyfile="lib/string_functions.hpp" bodystart="240" bodyend="245"/>
        <references refid="string__functions_8hpp_1a69253dfa467bcccee64b774b43242c4c" compoundref="string__functions_8hpp" startline="230" endline="235">my_to_string</references>
        <referencedby refid="string__functions_8hpp_1ac2d6212e4822106a56c2f5cc83045bee" compoundref="string__functions_8hpp" startline="253" endline="253">concatenate_c</referencedby>
        <referencedby refid="string__functions_8hpp_1ab88c9cdf5b652a4f4bee449509c2430f" compoundref="string__functions_8hpp" startline="257" endline="257">ctcstr</referencedby>
        <referencedby refid="string__functions_8hpp_1a87017d41316416c683acfbfd42207e80" compoundref="string__functions_8hpp" startline="249" endline="249">ctstr</referencedby>
        <referencedby refid="class_spectra_co_1a9f6fa49281669395c0e10f833f8e914e" compoundref="_spectra_co_8hpp" startline="454" endline="460">SpectraCo::draw</referencedby>
        <referencedby refid="class_paris_1ad83b7a82190285f4c69fb5eeb30c5db6" compoundref="_paris_8hpp" startline="133" endline="272">Paris::findAngles</referencedby>
        <referencedby refid="class_analysed_spectra_1a14412f4f3f9b11bf5206be1f586f2560" compoundref="_analysed_spectra_8hpp" startline="149" endline="179">AnalysedSpectra::fitPeak</referencedby>
        <referencedby refid="class_analysed_spectra_1aa62448f275c4787703e7d77a38dd421a" compoundref="_analysed_spectra_8hpp" startline="181" endline="261">AnalysedSpectra::fitPeaks</referencedby>
        <referencedby refid="class_calibrator_1a14ec7e7a2a8f36d31e474de1a67df7ec" compoundref="_calibrator_8hpp" startline="249" endline="272">Calibrator::loadFitInfo</referencedby>
        <referencedby refid="_detectors_8hpp_1ae343a2d2d22d862f6ac7ae10ba1b3d41" compoundref="_detectors_8hpp" startline="431" endline="453">loadFormattedTH1F</referencedby>
        <referencedby refid="class_peaks_calibrator_1a6d799246268d62e0e7097594ea82050b" compoundref="_analysed_spectra_8hpp" startline="338" endline="359">PeaksCalibrator::PeaksCalibrator</referencedby>
        <referencedby refid="class_detectors_1a3d5631f8fd2770b6b3a2a178130519ad" compoundref="_detectors_8hpp" startline="239" endline="293">Detectors::readFile</referencedby>
        <referencedby refid="class_spectra_co_1a79c602e0c90555c37098d070863134f3" compoundref="_spectra_co_8hpp" startline="466" endline="473">SpectraCo::rebin</referencedby>
        <referencedby refid="class_paris_1a21f73f502db25f43f31426c4ea88f419" compoundref="_paris_8hpp" startline="318" endline="373">Paris::rotate</referencedby>
        <referencedby refid="class_evolution_peaks_1a5645dd6726d0af38e8a4d849da6a8d18" compoundref="_evolution_peaks_8hpp" startline="102" endline="345">EvolutionPeaks::run</referencedby>
        <referencedby refid="class_data_file_1a20ccbf2ff940a527452b137a07ff1010" compoundref="_data_file_8hpp" startline="76" endline="81">DataFile&lt; Index, T &gt;::setColumn</referencedby>
        <referencedby refid="lib_root_8hpp_1a3a6fcc9d0f4e35bf7088b99991905138" compoundref="lib_root_8hpp" startline="286" endline="303">shiftX</referencedby>
        <referencedby refid="lib_co_8hpp_1a860090f450f9d024cd3e5cd721101418" compoundref="lib_co_8hpp" startline="287" endline="298">string_to</referencedby>
        <referencedby refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" compoundref="lib_co_8hpp" startline="156" endline="156">throw_error</referencedby>
        <referencedby refid="class_timeshifts_1a6520eab7a8824f41a2be8517d83fc835" compoundref="_timeshifts_8hpp" startline="621" endline="665">Timeshifts::verify</referencedby>
        <referencedby refid="class_cobalt_calorimeter_1a526f29997f55b17d33be2b87b30c7a76" compoundref="_cobalt_calorimeter_8hpp" startline="704" endline="811">CobaltCalorimeter::write</referencedby>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1ac2d6212e4822106a56c2f5cc83045bee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type>const char *</type>
        <definition>const char* concatenate_c</definition>
        <argsstring>(ARGS &amp;&amp;... args)</argsstring>
        <name>concatenate_c</name>
        <param>
          <type>ARGS &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>concatenate string, returns a c_str (char**) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="253" column="12" bodyfile="lib/string_functions.hpp" bodystart="253" bodyend="253"/>
        <references refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" compoundref="string__functions_8hpp" startline="240" endline="245">concatenate</references>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1ab88c9cdf5b652a4f4bee449509c2430f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string ctcstr</definition>
        <argsstring>(ARGS &amp;&amp;... args)</argsstring>
        <name>ctcstr</name>
        <param>
          <type>ARGS &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>concatenate string, returns a c_str (char**) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="257" column="13" bodyfile="lib/string_functions.hpp" bodystart="257" bodyend="257"/>
        <references refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" compoundref="string__functions_8hpp" startline="240" endline="245">concatenate</references>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a87017d41316416c683acfbfd42207e80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string ctstr</definition>
        <argsstring>(ARGS &amp;&amp;... args)</argsstring>
        <name>ctstr</name>
        <param>
          <type>ARGS &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Concatenate a series of arguments into a big string (alias) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="249" column="13" bodyfile="lib/string_functions.hpp" bodystart="249" bodyend="249"/>
        <references refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" compoundref="string__functions_8hpp" startline="240" endline="245">concatenate</references>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a84156900e5c1cf02d69b15d608038257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_argv</definition>
        <argsstring>(char **argv)</argsstring>
        <name>delete_argv</name>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Delete an argv manually created by <ref refid="string__functions_8hpp_1a9a899e4db0c9b7d0e80130d2b90c5f25" kindref="member">string_to_argv()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="219" column="6" bodyfile="lib/string_functions.hpp" bodystart="219" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a1f4138b473c708db6b901f81bba9f5f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fillList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;list, std::string string, char const &amp;separator, bool const &amp;removeVoids=false)</argsstring>
        <name>fillList</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char const &amp;</type>
          <declname>separator</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>removeVoids</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Cuts a string into pieces separated by the given separator like &apos;;&apos; or &apos; &apos; or &apos;,&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>removeVoids</parametername>
</parameternamelist>
<parameterdescription>
<para>For instance, we have string = &quot;;1;2;3;;5&quot;. without removeVoids this function returns {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;5&quot;} with removeVoids this function returns {&quot;&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;&quot;, &quot;5&quot;} </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="35" column="6" bodyfile="lib/string_functions.hpp" bodystart="35" bodyend="59"/>
        <referencedby refid="string__functions_8hpp_1a44ad60b408ba7b75bdf7ae75f8d2532f" compoundref="string__functions_8hpp" startline="61" endline="66">getList</referencedby>
        <referencedby refid="class_data_file_1a6bfb54890d3d1e60dd5104496b00eecf" compoundref="_data_file_8hpp" startline="224" endline="273">DataFile&lt; Index, T &gt;::loadData</referencedby>
        <referencedby refid="class_data_file_1a10063674628cade1720c93ee93faca31" compoundref="_data_file_8hpp" startline="191" endline="197">DataFile&lt; Index, T &gt;::loadHeader</referencedby>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1ab14274457c8b46f1fe9f22745ae2186a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string firstPart</definition>
        <argsstring>(std::string const &amp;string, char const &amp;sep)</argsstring>
        <name>firstPart</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char const &amp;</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
<para>Returns the string to the left of the first occurence of sep in the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="19" column="13" bodyfile="lib/string_functions.hpp" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a181c58eb4af9035b6f772134a76e4e70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string firstPart</definition>
        <argsstring>(std::string const &amp;string, std::string const &amp;sep)</argsstring>
        <name>firstPart</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
<para>Returns the string to the left of the first occurence of sep in the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="10" column="13" bodyfile="lib/string_functions.hpp" bodystart="10" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a87d8e2cb69021ab11e443cb140349eb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool found</definition>
        <argsstring>(std::string const &amp;string, std::string const &amp;_substr)</argsstring>
        <name>found</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>_substr</declname>
        </param>
        <briefdescription>
<para>Returns true if the string has at least one occurence of substr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="137" column="6" bodyfile="lib/string_functions.hpp" bodystart="137" bodyend="140"/>
        <referencedby refid="class_run_matrixator_1a1f6ba04bc894d68a6d72ccedf8367ad4" compoundref="_run_matrixator_8hpp" startline="59" endline="71">RunMatrixator::dontMatrixate</referencedby>
        <referencedby refid="lib_root_8hpp_1a17dc0eddbbe36a95d0397c09c597a338" compoundref="lib_root_8hpp" startline="1261" endline="1287">draw_all_TH1</referencedby>
        <referencedby refid="class_faster2_histo_1a327a8348f79c5ecf27a58baef32b81d8" compoundref="_faster2_histo_8hpp" startline="216" endline="270">Faster2Histo::fillHisto</referencedby>
        <referencedby refid="_detectors_8hpp_1ae343a2d2d22d862f6ac7ae10ba1b3d41" compoundref="_detectors_8hpp" startline="431" endline="453">loadFormattedTH1F</referencedby>
        <referencedby refid="class_faster2_root_1a5b8a78ef8c54117807c770d21fa4acf0" compoundref="_faster2_root_8hpp" startline="277" endline="291">Faster2Root::loadTriggerFile</referencedby>
        <referencedby refid="class_detectors_1ae5e6ff02bf3d79da3f034f7404e0677c" compoundref="_detectors_8hpp" startline="121" endline="125">Detectors::nbOfType</referencedby>
        <referencedby refid="class_fit_1a861a69c651863dcb3b41a788fe73f69d" compoundref="_fit_8hpp" startline="78" endline="78">Fit::peaks_found</referencedby>
        <referencedby refid="class_evolution_peaks_1a5645dd6726d0af38e8a4d849da6a8d18" compoundref="_evolution_peaks_8hpp" startline="102" endline="345">EvolutionPeaks::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a44ad60b408ba7b75bdf7ae75f8d2532f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; getList</definition>
        <argsstring>(std::string string, char const &amp;separator, bool const &amp;removeVoids=false)</argsstring>
        <name>getList</name>
        <param>
          <type>std::string</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char const &amp;</type>
          <declname>separator</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>removeVoids</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="61" column="13" bodyfile="lib/string_functions.hpp" bodystart="61" bodyend="66"/>
        <references refid="string__functions_8hpp_1a1f4138b473c708db6b901f81bba9f5f6" compoundref="string__functions_8hpp" startline="35" endline="59">fillList</references>
        <referencedby refid="class_calibrator_1a14ec7e7a2a8f36d31e474de1a67df7ec" compoundref="_calibrator_8hpp" startline="249" endline="272">Calibrator::loadFitInfo</referencedby>
        <referencedby refid="class_path_1ac9b837b0071ab41b4b0868590786eeae" compoundref="files__functions_8hpp" startline="508" endline="508">Path::makeFolderList</referencedby>
        <referencedby refid="string__functions_8hpp_1ab2c67e2ba68d5a42ce9a48dafdbba829" compoundref="string__functions_8hpp" startline="94" endline="104">replaceCharacter</referencedby>
        <referencedby refid="string__functions_8hpp_1a23008e4590bfaf3ddd88e52b04959e71" compoundref="string__functions_8hpp" startline="68" endline="71">split</referencedby>
        <referencedby refid="string__functions_8hpp_1a9a899e4db0c9b7d0e80130d2b90c5f25" compoundref="string__functions_8hpp" startline="200" endline="216">string_to_argv</referencedby>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a4adaa91d1b90e1b97cc5fee8998e09b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isNumber</definition>
        <argsstring>(std::string const &amp;string)</argsstring>
        <name>isNumber</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Returns true if all its characters are digits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="127" column="6" bodyfile="lib/string_functions.hpp" bodystart="127" bodyend="134"/>
        <referencedby refid="class_timeshifts_1aa9f8bdcbeef03f8be872602e6c717d4d" compoundref="_timeshifts_8hpp" startline="1110" endline="1117">Timeshifts::setTimeReference</referencedby>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a3f3e5a4df9e542b1aa927c29ddf26af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lastPart</definition>
        <argsstring>(std::string const &amp;string, char const &amp;sep)</argsstring>
        <name>lastPart</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char const &amp;</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
<para>Returns the string to the right of the last occurence of sep in the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="21" column="13" bodyfile="lib/string_functions.hpp" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a39fc5beacd18fe3d9446687fdf163416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string lastPart</definition>
        <argsstring>(std::string const &amp;string, std::string const &amp;sep)</argsstring>
        <name>lastPart</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
<para>Returns the string to the right of the last occurence of sep in the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="12" column="13" bodyfile="lib/string_functions.hpp" bodystart="12" bodyend="12"/>
        <referencedby refid="class_evolution_peaks_1a5645dd6726d0af38e8a4d849da6a8d18" compoundref="_evolution_peaks_8hpp" startline="102" endline="345">EvolutionPeaks::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a69253dfa467bcccee64b774b43242c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string my_to_string</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>my_to_string</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert any type into string, including vector of any type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="230" column="13" bodyfile="lib/string_functions.hpp" bodystart="230" bodyend="235"/>
        <referencedby refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" compoundref="string__functions_8hpp" startline="240" endline="245">concatenate</referencedby>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a93bd453ee6b6af7c8e5e970bb1000651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string&amp; pop_front</definition>
        <argsstring>(std::string &amp;string)</argsstring>
        <name>pop_front</name>
        <param>
          <type>std::string &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Removes the first character of a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Careful, time complexity makes it really heavy on big string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="111" column="14" bodyfile="lib/string_functions.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a1de0ecd281996fcab785a9bc6d394737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool remove</definition>
        <argsstring>(std::string &amp;string, char const &amp;c)</argsstring>
        <name>remove</name>
        <param>
          <type>std::string &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char const &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Remove the first char &apos;c&apos; to the string if found. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="156" column="6" bodyfile="lib/string_functions.hpp" bodystart="156" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a9b6b51fed28f705d129f02193ce89b3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool remove</definition>
        <argsstring>(std::string &amp;string, std::string const &amp;_substr)</argsstring>
        <name>remove</name>
        <param>
          <type>std::string &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>_substr</declname>
        </param>
        <briefdescription>
<para>Remove the first substr to the string if found. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="143" column="6" bodyfile="lib/string_functions.hpp" bodystart="143" bodyend="153"/>
        <referencedby refid="class_paris_1a66745a02a04a8733eba514f319b1cc5e" compoundref="_paris_8hpp" startline="283" endline="316">Paris::calculateBidimAngles</referencedby>
        <referencedby refid="_detectors_8hpp_1ae343a2d2d22d862f6ac7ae10ba1b3d41" compoundref="_detectors_8hpp" startline="431" endline="453">loadFormattedTH1F</referencedby>
        <referencedby refid="class_filename_1a2d925b1dc8e2afbd09e729be3f3603b2" compoundref="files__functions_8hpp" startline="697" endline="702">Filename::setExtension</referencedby>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a8cf535d46125ed8622aedb6300d8de46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string removeBlankSpace</definition>
        <argsstring>(std::string str)</argsstring>
        <name>removeBlankSpace</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Remove all the blank space in a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="74" column="13" bodyfile="lib/string_functions.hpp" bodystart="74" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1abb2a169e2ba2e6a949a988e4d591699e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string removeFirstPart</definition>
        <argsstring>(std::string const &amp;string, char const &amp;sep)</argsstring>
        <name>removeFirstPart</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char const &amp;</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
<para>Returns the string to the right of the first occurence of sep in the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="23" column="13" bodyfile="lib/string_functions.hpp" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1aabc76069865b3a34ee37e95755d23764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string removeFirstPart</definition>
        <argsstring>(std::string const &amp;string, std::string const &amp;sep)</argsstring>
        <name>removeFirstPart</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
<para>Returns the string to the right of the first occurence of sep in the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="14" column="13" bodyfile="lib/string_functions.hpp" bodystart="14" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a416863eb8599122a08605e1f2f94d617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string removeLastPart</definition>
        <argsstring>(std::string const &amp;string, char const &amp;sep)</argsstring>
        <name>removeLastPart</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char const &amp;</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
<para>Returns the string to the left of the last occurence of sep in the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="25" column="13" bodyfile="lib/string_functions.hpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a005ed434e73ab2c5226d8421e7f43b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string removeLastPart</definition>
        <argsstring>(std::string const &amp;string, std::string const &amp;sep)</argsstring>
        <name>removeLastPart</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
<para>Returns the string to the left of the last occurence of sep in the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="16" column="13" bodyfile="lib/string_functions.hpp" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a3a78dc61d5d352a6559b927ae3167a21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool replace</definition>
        <argsstring>(std::string &amp;string, std::string const &amp;substr_init, std::string const &amp;substr_substitue)</argsstring>
        <name>replace</name>
        <param>
          <type>std::string &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>substr_init</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>substr_substitue</declname>
        </param>
        <briefdescription>
<para>Replace substr to the string if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="169" column="6" bodyfile="lib/string_functions.hpp" bodystart="169" bodyend="179"/>
        <referencedby refid="class_spectra_co_1af202a60db2de7b7a723f9863c9616dca" compoundref="_spectra_co_8hpp" startline="576" endline="600">SpectraCo::calibrate</referencedby>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1ab2c67e2ba68d5a42ce9a48dafdbba829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string replaceCharacter</definition>
        <argsstring>(std::string const &amp;istring, char const &amp;ichar, char const &amp;ochar)</argsstring>
        <name>replaceCharacter</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>istring</declname>
        </param>
        <param>
          <type>char const &amp;</type>
          <declname>ichar</declname>
        </param>
        <param>
          <type>char const &amp;</type>
          <declname>ochar</declname>
        </param>
        <briefdescription>
<para>Replaces all the instances of one character with another. </para>
        </briefdescription>
        <detaileddescription>
<para>For instance : std::string istring = &quot;je_suis_ton_pere&quot;; std::string ostring = replaceCharacter(istring, &apos;_&apos;, &apos; &apos;); print(ostring); // output : &quot;je suis ton pere&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="94" column="13" bodyfile="lib/string_functions.hpp" bodystart="94" bodyend="104"/>
        <references refid="string__functions_8hpp_1a44ad60b408ba7b75bdf7ae75f8d2532f" compoundref="string__functions_8hpp" startline="61" endline="66">getList</references>
        <referencedby refid="class_detectors_1a8d5c0f2d189ddda12ed3c36f13887cfd" compoundref="_detectors_8hpp" startline="295" endline="396">Detectors::makeArrays</referencedby>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1aeda11ede077505e8eb3d667a6cb02788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rpCommaWDots</definition>
        <argsstring>(std::string str)</argsstring>
        <name>rpCommaWDots</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Replace all the commas of a std::string with dots. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="115" column="13" bodyfile="lib/string_functions.hpp" bodystart="115" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a23008e4590bfaf3ddd88e52b04959e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; split</definition>
        <argsstring>(std::string string, char const &amp;separator, bool const &amp;removeVoids=false)</argsstring>
        <name>split</name>
        <param>
          <type>std::string</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char const &amp;</type>
          <declname>separator</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>removeVoids</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="68" column="13" bodyfile="lib/string_functions.hpp" bodystart="68" bodyend="71"/>
        <references refid="string__functions_8hpp_1a44ad60b408ba7b75bdf7ae75f8d2532f" compoundref="string__functions_8hpp" startline="61" endline="66">getList</references>
      </memberdef>
      <memberdef kind="function" id="string__functions_8hpp_1a9a899e4db0c9b7d0e80130d2b90c5f25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char** string_to_argv</definition>
        <argsstring>(std::string const &amp;string)</argsstring>
        <name>string_to_argv</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Create a null terminated C-style array of char from a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>you&apos;ll have to delete the allocated memory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/string_functions.hpp" line="200" column="6" bodyfile="lib/string_functions.hpp" bodystart="200" bodyend="216"/>
        <references refid="string__functions_8hpp_1a44ad60b408ba7b75bdf7ae75f8d2532f" compoundref="string__functions_8hpp" startline="61" endline="66">getList</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>STRING_FUNCTIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STRING_FUNCTIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="string__functions_8hpp_1a181c58eb4af9035b6f772134a76e4e70" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1a181c58eb4af9035b6f772134a76e4e70" kindref="member">firstPart</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sep)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_first_of(sep)<sp/>));<sp/><sp/>}</highlight></codeline>
<codeline lineno="12" refid="string__functions_8hpp_1a39fc5beacd18fe3d9446687fdf163416" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1a39fc5beacd18fe3d9446687fdf163416" kindref="member">lastPart</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sep)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(<sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_last_of(sep)+1));<sp/><sp/>}</highlight></codeline>
<codeline lineno="14" refid="string__functions_8hpp_1aabc76069865b3a34ee37e95755d23764" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1aabc76069865b3a34ee37e95755d23764" kindref="member">removeFirstPart</ref><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sep)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(<sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_first_of(sep)<sp/>));<sp/><sp/>}</highlight></codeline>
<codeline lineno="16" refid="string__functions_8hpp_1a005ed434e73ab2c5226d8421e7f43b26" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1a005ed434e73ab2c5226d8421e7f43b26" kindref="member">removeLastPart</ref><sp/><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sep)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_last_of(sep)<sp/><sp/>));<sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="string__functions_8hpp_1ab14274457c8b46f1fe9f22745ae2186a" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1a181c58eb4af9035b6f772134a76e4e70" kindref="member">firstPart</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sep)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_first_of(sep)<sp/>));<sp/><sp/>}</highlight></codeline>
<codeline lineno="21" refid="string__functions_8hpp_1a3f3e5a4df9e542b1aa927c29ddf26af3" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1a39fc5beacd18fe3d9446687fdf163416" kindref="member">lastPart</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sep)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(<sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_last_of(sep)+1));<sp/><sp/>}</highlight></codeline>
<codeline lineno="23" refid="string__functions_8hpp_1abb2a169e2ba2e6a949a988e4d591699e" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1aabc76069865b3a34ee37e95755d23764" kindref="member">removeFirstPart</ref><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sep)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(<sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_first_of(sep)<sp/>));<sp/><sp/>}</highlight></codeline>
<codeline lineno="25" refid="string__functions_8hpp_1a416863eb8599122a08605e1f2f94d617" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1a005ed434e73ab2c5226d8421e7f43b26" kindref="member">removeLastPart</ref><sp/><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sep)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_last_of(sep)<sp/><sp/>));<sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="string__functions_8hpp_1a1f4138b473c708db6b901f81bba9f5f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="string__functions_8hpp_1a1f4138b473c708db6b901f81bba9f5f6" kindref="member">fillList</ref>(std::vector&lt;std::string&gt;<sp/>&amp;<sp/>list,<sp/>std::string<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>separator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>removeVoids<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((pos<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find(separator)<sp/>)<sp/>!=<sp/>-1ul)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos==0)<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!removeVoids)<sp/>list.push_back(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.erase(0,1);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.size())</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>separator<sp/>is<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>string<sp/>then<sp/>we<sp/>have<sp/>completed<sp/>the<sp/>list<sp/>and<sp/>can<sp/>terminate<sp/>the<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>list.push_back(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,pos));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>separator<sp/>is<sp/>at<sp/>the<sp/>middle<sp/>of<sp/>the<sp/>string<sp/>then<sp/>remove<sp/>the<sp/>part<sp/>before<sp/>and<sp/>push<sp/>it<sp/>into<sp/>the<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>list.push_back(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,pos));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.erase(0,pos+1);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>string<sp/>does<sp/>not<sp/>finish<sp/>with<sp/>the<sp/>character<sp/>then<sp/>we<sp/>must<sp/>take<sp/>the<sp/>last<sp/>part<sp/>of<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.size()<sp/>&gt;<sp/>0)<sp/>list.push_back(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="string__functions_8hpp_1a44ad60b408ba7b75bdf7ae75f8d2532f" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="string__functions_8hpp_1a44ad60b408ba7b75bdf7ae75f8d2532f" kindref="member">getList</ref>(std::string<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>separator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>removeVoids<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="string__functions_8hpp_1a1f4138b473c708db6b901f81bba9f5f6" kindref="member">fillList</ref>(ret,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>separator,<sp/>removeVoids);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="string__functions_8hpp_1a23008e4590bfaf3ddd88e52b04959e71" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="string__functions_8hpp_1a23008e4590bfaf3ddd88e52b04959e71" kindref="member">split</ref>(std::string<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>separator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>removeVoids<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="string__functions_8hpp_1a44ad60b408ba7b75bdf7ae75f8d2532f" kindref="member">getList</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>separator,<sp/>removeVoids);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="string__functions_8hpp_1a8cf535d46125ed8622aedb6300d8de46" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1a8cf535d46125ed8622aedb6300d8de46" kindref="member">removeBlankSpace</ref>(std::string<sp/>str)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(pos<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(str.find(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">))<sp/>)<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>str.substr(0,pos)<sp/>+<sp/>str.substr(pos+1,str.size()-pos-1);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="string__functions_8hpp_1ab2c67e2ba68d5a42ce9a48dafdbba829" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1ab2c67e2ba68d5a42ce9a48dafdbba829" kindref="member">replaceCharacter</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>istring,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>ichar,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>ochar)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list<sp/>=<sp/><ref refid="string__functions_8hpp_1a44ad60b408ba7b75bdf7ae75f8d2532f" kindref="member">getList</ref>(istring,<sp/>ichar);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>std::string<sp/>ostring;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>:<sp/>list)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>ostring+=(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">+ochar);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ostring;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="string__functions_8hpp_1a93bd453ee6b6af7c8e5e970bb1000651" refkind="member"><highlight class="normal">std::string<sp/>&amp;<sp/><ref refid="string__functions_8hpp_1a93bd453ee6b6af7c8e5e970bb1000651" kindref="member">pop_front</ref>(std::string<sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.size()<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.erase(0,1);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string;}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="string__functions_8hpp_1aeda11ede077505e8eb3d667a6cb02788" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1aeda11ede077505e8eb3d667a6cb02788" kindref="member">rpCommaWDots</ref>(std::string<sp/>str)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>pos<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(str.find(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">))<sp/>)<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>str.substr(0,pos)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>str.substr(pos+1,str.size()-pos-1);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="string__functions_8hpp_1a4adaa91d1b90e1b97cc5fee8998e09b1" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="string__functions_8hpp_1a4adaa91d1b90e1b97cc5fee8998e09b1" kindref="member">isNumber</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>c<sp/>:<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(isdigit(c)<sp/>||<sp/></highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="string__functions_8hpp_1a87d8e2cb69021ab11e443cb140349eb6" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="string__functions_8hpp_1a87d8e2cb69021ab11e443cb140349eb6" kindref="member">found</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_substr)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find(_substr)<sp/>!=<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="string__functions_8hpp_1a9b6b51fed28f705d129f02193ce89b3c" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="string__functions_8hpp_1a9b6b51fed28f705d129f02193ce89b3c" kindref="member">remove</ref>(std::string<sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_substr)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find(_substr);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos!=std::string::npos)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_str<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,<sp/>pos);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,<sp/>pos)+</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(pos+_substr.size());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="string__functions_8hpp_1a1de0ecd281996fcab785a9bc6d394737" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="string__functions_8hpp_1a9b6b51fed28f705d129f02193ce89b3c" kindref="member">remove</ref>(std::string<sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find(c);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos!=std::string::npos)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_str<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,<sp/>pos);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,<sp/>pos)+</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(pos+1);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="string__functions_8hpp_1a3a78dc61d5d352a6559b927ae3167a21" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="string__functions_8hpp_1a3a78dc61d5d352a6559b927ae3167a21" kindref="member">replace</ref>(std::string<sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>substr_init,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>substr_substitue)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find(substr_init);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos!=std::string::npos)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_str<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,<sp/>pos);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,<sp/>pos)+substr_substitue+</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(pos+substr_init.size());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="string__functions_8hpp_1aa7465160d3e16a3c75545d8f792a08a1" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1aa7465160d3e16a3c75545d8f792a08a1" kindref="member">argv_to_string</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>start_i<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>std::string<sp/>ret;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start_i;<sp/>(argv[i]<sp/>!=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>++i)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>ret+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>ret+=argv[i];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="string__functions_8hpp_1a9a899e4db0c9b7d0e80130d2b90c5f25" refkind="member"><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><ref refid="string__functions_8hpp_1a9a899e4db0c9b7d0e80130d2b90c5f25" kindref="member">string_to_argv</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Breaks<sp/>down<sp/>the<sp/>string<sp/>into<sp/>an<sp/>array<sp/>of<sp/>substrings<sp/>(separated<sp/>by<sp/>a<sp/>space<sp/>in<sp/>the<sp/>string)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>string_array(<ref refid="string__functions_8hpp_1a44ad60b408ba7b75bdf7ae75f8d2532f" kindref="member">getList</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight><highlight class="comment">//<sp/>Source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>charArray<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(std::nothrow)<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*[string_array.size()<sp/>+<sp/>1];<sp/></highlight><highlight class="comment">//<sp/>+1<sp/>for<sp/>the<sp/>final<sp/>nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>string_array.size();<sp/>++i)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Allocate<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>charArray[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(std::nothrow)<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[string_array[i].size()<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Copy<sp/>the<sp/>string<sp/>to<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>std::strcpy(charArray[i],<sp/>string_array[i].c_str());</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>charArray[string_array.size()]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>charArray;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="string__functions_8hpp_1a84156900e5c1cf02d69b15d608038257" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="string__functions_8hpp_1a84156900e5c1cf02d69b15d608038257" kindref="member">delete_argv</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/>i<sp/>=<sp/>0;<sp/>argv[i]<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>++i)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>argv[i];<sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>individual<sp/>C-style<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>argv;<sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>array<sp/>of<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="230" refid="string__functions_8hpp_1a69253dfa467bcccee64b774b43242c4c" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1a69253dfa467bcccee64b774b43242c4c" kindref="member">my_to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)</highlight></codeline>
<codeline lineno="231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>oss<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss.str();</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>ARGS&gt;</highlight></codeline>
<codeline lineno="240" refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" kindref="member">concatenate</ref>(ARGS&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>(oss<sp/>&lt;&lt;<sp/>...<sp/>&lt;&lt;<sp/><ref refid="string__functions_8hpp_1a69253dfa467bcccee64b774b43242c4c" kindref="member">my_to_string</ref>(std::forward&lt;ARGS&gt;(args)));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss.str();</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>ARGS&gt;</highlight></codeline>
<codeline lineno="249" refid="string__functions_8hpp_1a87017d41316416c683acfbfd42207e80" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1a87017d41316416c683acfbfd42207e80" kindref="member">ctstr</ref>(ARGS&amp;&amp;...<sp/>args)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" kindref="member">concatenate</ref>(std::forward&lt;ARGS&gt;(args)...);}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>ARGS&gt;</highlight></codeline>
<codeline lineno="253" refid="string__functions_8hpp_1ac2d6212e4822106a56c2f5cc83045bee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="string__functions_8hpp_1ac2d6212e4822106a56c2f5cc83045bee" kindref="member">concatenate_c</ref>(ARGS&amp;&amp;...<sp/>args){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" kindref="member">concatenate</ref>(std::forward&lt;ARGS&gt;(args)...).c_str();}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>ARGS&gt;</highlight></codeline>
<codeline lineno="257" refid="string__functions_8hpp_1ab88c9cdf5b652a4f4bee449509c2430f" refkind="member"><highlight class="normal">std::string<sp/><ref refid="string__functions_8hpp_1ab88c9cdf5b652a4f4bee449509c2430f" kindref="member">ctcstr</ref>(ARGS&amp;&amp;...<sp/>args)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" kindref="member">concatenate</ref>(std::forward&lt;ARGS&gt;(args)...);}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//STRING_FUNCTIONS_HPP</highlight></codeline>
    </programlisting>
    <location file="lib/string_functions.hpp"/>
  </compounddef>
</doxygen>
