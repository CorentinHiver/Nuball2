<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacerandom_co" kind="namespace" language="C++">
    <compoundname>randomCo</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacerandom_co_1a1cbd16b1a0fb6d2e1649c253da6ecd00" prot="public" static="yes" mutable="no">
        <type>thread_local std::mt19937</type>
        <definition>thread_local std::mt19937 randomCo::generator</definition>
        <argsstring></argsstring>
        <name>generator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/randomCo.hpp" line="14" column="36" bodyfile="lib/randomCo.hpp" bodystart="14" bodyend="-1"/>
        <referencedby refid="namespacerandom_co_1ab5d8d1aa5c84a6ca5d44c2e60cfc8c8d" compoundref="random_co_8hpp" startline="44" endline="48">gaussian</referencedby>
        <referencedby refid="namespacerandom_co_1a09c0c41c36066ccce76265856856dff4" compoundref="random_co_8hpp" startline="16" endline="16">setSeed</referencedby>
        <referencedby refid="namespacerandom_co_1af7496cee21570d25ebf9babc7cf1bcae" compoundref="random_co_8hpp" startline="32" endline="36">uniform</referencedby>
        <referencedby refid="namespacerandom_co_1a48bc9803dd8f0a7515755b9b84ed3330" compoundref="random_co_8hpp" startline="19" endline="23">uniform_t</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacerandom_co_1ab5d8d1aa5c84a6ca5d44c2e60cfc8c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double randomCo::gaussian</definition>
        <argsstring>(double mean, double stddev)</argsstring>
        <name>gaussian</name>
        <param>
          <type>double</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stddev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/randomCo.hpp" line="44" column="10" bodyfile="lib/randomCo.hpp" bodystart="44" bodyend="48"/>
        <references refid="namespacerandom_co_1a1cbd16b1a0fb6d2e1649c253da6ecd00" compoundref="random_co_8hpp" startline="14">generator</references>
        <references refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" compoundref="lib_co_8hpp" startline="470" endline="470">CoBazar::mean</references>
      </memberdef>
      <memberdef kind="function" id="namespacerandom_co_1a09c0c41c36066ccce76265856856dff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void randomCo::setSeed</definition>
        <argsstring>(int const &amp;_seed)</argsstring>
        <name>setSeed</name>
        <param>
          <type>int const &amp;</type>
          <declname>_seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/randomCo.hpp" line="16" column="8" bodyfile="lib/randomCo.hpp" bodystart="16" bodyend="16"/>
        <references refid="namespacerandom_co_1a1cbd16b1a0fb6d2e1649c253da6ecd00" compoundref="random_co_8hpp" startline="14">generator</references>
      </memberdef>
      <memberdef kind="function" id="namespacerandom_co_1af7496cee21570d25ebf9babc7cf1bcae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double randomCo::uniform</definition>
        <argsstring>()</argsstring>
        <name>uniform</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/randomCo.hpp" line="32" column="10" bodyfile="lib/randomCo.hpp" bodystart="32" bodyend="36"/>
        <references refid="namespacerandom_co_1a1cbd16b1a0fb6d2e1649c253da6ecd00" compoundref="random_co_8hpp" startline="14">generator</references>
        <referencedby refid="class_calibration_1aacb494950f95ab8c5e12f548de28afb4" compoundref="_calibration_8hpp" startline="193" endline="200">Calibration::calibrate</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacerandom_co_1a09df1fe62625fa364e82b64227bb2807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double randomCo::uniform</definition>
        <argsstring>(const double &amp;min, const double &amp;max)</argsstring>
        <name>uniform</name>
        <param>
          <type>const double &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/randomCo.hpp" line="38" column="10" bodyfile="lib/randomCo.hpp" bodystart="38" bodyend="42"/>
        <references refid="namespacerandom_co_1a1cbd16b1a0fb6d2e1649c253da6ecd00" compoundref="random_co_8hpp" startline="14">generator</references>
      </memberdef>
      <memberdef kind="function" id="namespacerandom_co_1a48bc9803dd8f0a7515755b9b84ed3330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double randomCo::uniform_t</definition>
        <argsstring>()</argsstring>
        <name>uniform_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/randomCo.hpp" line="19" column="10" bodyfile="lib/randomCo.hpp" bodystart="19" bodyend="23"/>
        <references refid="namespacerandom_co_1a1cbd16b1a0fb6d2e1649c253da6ecd00" compoundref="random_co_8hpp" startline="14">generator</references>
      </memberdef>
      <memberdef kind="function" id="namespacerandom_co_1ae3ed73e012391122405d66b75b1d233c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double randomCo::uniform_t</definition>
        <argsstring>(T const &amp;min, T const &amp;max)</argsstring>
        <name>uniform_t</name>
        <param>
          <type>T const &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/randomCo.hpp" line="26" column="10" bodyfile="lib/randomCo.hpp" bodystart="26" bodyend="30"/>
        <references refid="namespacerandom_co_1a1cbd16b1a0fb6d2e1649c253da6ecd00" compoundref="random_co_8hpp" startline="14">generator</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lib/randomCo.hpp" line="12" column="1"/>
  </compounddef>
</doxygen>
