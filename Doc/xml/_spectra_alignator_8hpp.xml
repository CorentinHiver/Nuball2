<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_spectra_alignator_8hpp" kind="file" language="C++">
    <compoundname>SpectraAlignator.hpp</compoundname>
    <includes refid="lib_root_8hpp" local="yes">../libRoot.hpp</includes>
    <includes refid="_spectra_co_8hpp" local="yes">SpectraCo.hpp</includes>
    <incdepgraph>
      <node id="20">
        <label>glob.h</label>
      </node>
      <node id="52">
        <label>TH1S.h</label>
      </node>
      <node id="25">
        <label>functional</label>
      </node>
      <node id="6">
        <label>iomanip</label>
      </node>
      <node id="29">
        <label>queue</label>
      </node>
      <node id="70">
        <label>TTreeIndex.h</label>
      </node>
      <node id="2">
        <label>../libRoot.hpp</label>
        <link refid="lib_root_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>filesystem</label>
      </node>
      <node id="39">
        <label>TAxis.h</label>
      </node>
      <node id="68">
        <label>TThread.h</label>
      </node>
      <node id="72">
        <label>Recalibration.hpp</label>
        <link refid="_recalibration_8hpp"/>
      </node>
      <node id="22">
        <label>errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>TH1D.h</label>
      </node>
      <node id="64">
        <label>TStopwatch.h</label>
      </node>
      <node id="30">
        <label>stdexcept</label>
      </node>
      <node id="28">
        <label>numeric</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="74">
        <label>../Classes/Hit.hpp</label>
        <link refid="_hit_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>TF1.h</label>
      </node>
      <node id="4">
        <label>print.hpp</label>
        <link refid="print_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>fstream</label>
      </node>
      <node id="42">
        <label>TError.h</label>
      </node>
      <node id="66">
        <label>TStyle.h</label>
      </node>
      <node id="23">
        <label>any</label>
      </node>
      <node id="17">
        <label>files_functions.hpp</label>
        <link refid="files__functions_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>random</label>
      </node>
      <node id="73">
        <label>../Classes/Calibration.hpp</label>
        <link refid="_calibration_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>TROOT.h</label>
      </node>
      <node id="34">
        <label>typeinfo</label>
      </node>
      <node id="71">
        <label>SpectraCo.hpp</label>
        <link refid="_spectra_co_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/Analyse/SpectraAlignator.hpp</label>
        <link refid="_spectra_alignator_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>../Classes/Detectors.hpp</label>
        <link refid="_detectors_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>ctime</label>
      </node>
      <node id="41">
        <label>TChain.h</label>
      </node>
      <node id="67">
        <label>TSystem.h</label>
      </node>
      <node id="31">
        <label>stack</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="44">
        <label>TF2.h</label>
      </node>
      <node id="45">
        <label>TFile.h</label>
      </node>
      <node id="40">
        <label>TCanvas.h</label>
      </node>
      <node id="55">
        <label>TH3I.h</label>
      </node>
      <node id="56">
        <label>TKey.h</label>
      </node>
      <node id="9">
        <label>vector_functions.hpp</label>
        <link refid="vector__functions_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>TSpectrum.h</label>
      </node>
      <node id="24">
        <label>array</label>
      </node>
      <node id="47">
        <label>TFitResult.h</label>
      </node>
      <node id="16">
        <label>sstream</label>
      </node>
      <node id="11">
        <label>randomCo.hpp</label>
        <link refid="random_co_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>TMarker.h</label>
      </node>
      <node id="49">
        <label>TGraphErrors.h</label>
      </node>
      <node id="53">
        <label>TH2.h</label>
      </node>
      <node id="37">
        <label>cstdlib</label>
      </node>
      <node id="50">
        <label>TH1F.h</label>
      </node>
      <node id="57">
        <label>TLeaf.h</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="13">
        <label>string_functions.hpp</label>
        <link refid="string__functions_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>unordered_map</label>
      </node>
      <node id="58">
        <label>TLegend.h</label>
      </node>
      <node id="65">
        <label>TString.h</label>
      </node>
      <node id="60">
        <label>TMath.h</label>
      </node>
      <node id="54">
        <label>TH2F.h</label>
      </node>
      <node id="27">
        <label>mutex</label>
      </node>
      <node id="36">
        <label>csignal</label>
      </node>
      <node id="32">
        <label>thread</label>
      </node>
      <node id="61">
        <label>TRandom.h</label>
      </node>
      <node id="69">
        <label>TTree.h</label>
      </node>
      <node id="10">
        <label>algorithm</label>
      </node>
      <node id="46">
        <label>TFitResultPtr.h</label>
      </node>
      <node id="14">
        <label>cstring</label>
      </node>
      <node id="48">
        <label>TGraph.h</label>
      </node>
      <node id="26">
        <label>memory</label>
      </node>
      <node id="33">
        <label>typeindex</label>
      </node>
      <node id="18">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_minimisator" prot="public">Minimisator</innerclass>
    <innerclass refid="struct_minimisator_1_1_nelder_mead_parameters" prot="public">Minimisator::NelderMeadParameters</innerclass>
    <innerclass refid="class_objective_function" prot="public">ObjectiveFunction</innerclass>
    <innerclass refid="class_objective_function_chi2" prot="public">ObjectiveFunctionChi2</innerclass>
    <innerclass refid="class_simplex" prot="public">Simplex</innerclass>
    <innerclass refid="class_spectra_alignator" prot="public">SpectraAlignator</innerclass>
    <innerclass refid="class_test_objective_function" prot="public">TestObjectiveFunction</innerclass>
    <innerclass refid="class_vertice" prot="public">Vertice</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_spectra_alignator_8hpp_1aa5842b2bdb6a161db3b676a1381e73c0" prot="public" static="no">
        <name>MAX_ORDER2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraAlignator.hpp" line="4" column="9" bodyfile="lib/Analyse/SpectraAlignator.hpp" bodystart="4" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e" prot="public" static="no">
        <type>std::vector&lt; <ref refid="class_vertice" kindref="compound">Vertice</ref> &gt;</type>
        <definition>using Vertices =  std::vector&lt;Vertice&gt;</definition>
        <argsstring></argsstring>
        <name>Vertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraAlignator.hpp" line="215" column="1" bodyfile="lib/Analyse/SpectraAlignator.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_spectra_alignator_8hpp_1a658a331239a2db3139f2a2163a4c182f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vertice" kindref="compound">Vertice</ref></type>
        <definition>Vertice operator*</definition>
        <argsstring>(double const &amp;constant, Vertice const &amp;vertice)</argsstring>
        <name>operator*</name>
        <param>
          <type>double const &amp;</type>
          <declname>constant</declname>
        </param>
        <param>
          <type><ref refid="class_vertice" kindref="compound">Vertice</ref> const &amp;</type>
          <declname>vertice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraAlignator.hpp" line="208" column="9" bodyfile="lib/Analyse/SpectraAlignator.hpp" bodystart="208" bodyend="213"/>
        <references refid="class_vertice_1a11e12aac4668a10a6b1706db7e5ebbcd" compoundref="_spectra_alignator_8hpp" startline="121" endline="121">Vertice::get</references>
      </memberdef>
      <memberdef kind="function" id="_spectra_alignator_8hpp_1a2b92434fd8aaf67b841513f9b83eaaa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Simplex const &amp;simplex)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="class_simplex" kindref="compound">Simplex</ref> const &amp;</type>
          <declname>simplex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraAlignator.hpp" line="353" column="1" bodyfile="lib/Analyse/SpectraAlignator.hpp" bodystart="353" bodyend="358"/>
        <references refid="class_simplex_1ae39ce6d0a47986ceabb9a76146a8225b" compoundref="_spectra_alignator_8hpp" startline="339" endline="339">Simplex::size</references>
      </memberdef>
      <memberdef kind="function" id="_spectra_alignator_8hpp_1a00041d0900b9f4e90f24fc9f5f61208f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Vertice const &amp;vertice)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="class_vertice" kindref="compound">Vertice</ref> const &amp;</type>
          <declname>vertice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Analyse/SpectraAlignator.hpp" line="201" column="1" bodyfile="lib/Analyse/SpectraAlignator.hpp" bodystart="201" bodyend="206"/>
        <references refid="class_vertice_1a11e12aac4668a10a6b1706db7e5ebbcd" compoundref="_spectra_alignator_8hpp" startline="121" endline="121">Vertice::get</references>
        <references refid="class_vertice_1a5f23c4ece665d5a55b5c3b67fc45ffb3" compoundref="_spectra_alignator_8hpp" startline="181" endline="181">Vertice::getValue</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>SPECTRAALINGATOR_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPECTRAALINGATOR_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="_spectra_alignator_8hpp_1aa5842b2bdb6a161db3b676a1381e73c0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_ORDER2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../libRoot.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_spectra_co_8hpp" kindref="compound">SpectraCo.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">//<sp/>VERTICE<sp/>//</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="class_vertice" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_vertice" kindref="compound">Vertice</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="17" refid="class_vertice_1a4beafe087884524a9728617bff98029f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice_1a4beafe087884524a9728617bff98029f" kindref="member">Vertice</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="class_vertice_1a6e2e24eb4beb27f1b42163fda1777c40" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice_1a6e2e24eb4beb27f1b42163fda1777c40" kindref="member">Vertice</ref>(std::vector&lt;double&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>coords)<sp/>:<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>(coords.<ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>()),</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>(coords)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="class_vertice_1a9b171d24a90abd98983bd7cfc4796aa9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice_1a9b171d24a90abd98983bd7cfc4796aa9" kindref="member">Vertice</ref>(std::Initialiser_list&lt;double&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>init_list)<sp/>:<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>(init_list.<ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>()),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>(init_list)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="class_vertice_1aa498494b022d938d1b641cc6d8aac2f3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice_1aa498494b022d938d1b641cc6d8aac2f3" kindref="member">Vertice</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_vertice)<sp/>:<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>(_vertice.<ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>(_vertice.<ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>(_vertice.<ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="class_vertice_1afddab470753508f96eeb0735e1400cbb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice_1afddab470753508f96eeb0735e1400cbb" kindref="member">Vertice</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/>&amp;&amp;<sp/>_vertice)<sp/>:<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>(std::move(_vertice.<ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>)),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>(std::move(_vertice.<ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>)),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>(std::move(_vertice.<ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>))</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="class_vertice_1a25640d2ace19cf2993c1854edd452ef0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice_1a25640d2ace19cf2993c1854edd452ef0" kindref="member">Vertice</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>)<sp/>:<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>(<ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>(std::vector&lt;double&gt;(<ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>,<sp/>0))</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="class_vertice_1a20a711ace767a031ec41eb3a0dd75ed1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_vertice_1a20a711ace767a031ec41eb3a0dd75ed1" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>[i];}</highlight></codeline>
<codeline lineno="52" refid="class_vertice_1ad7e931f0342f3c2a87d0d8e46936416d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_vertice_1a20a711ace767a031ec41eb3a0dd75ed1" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>[i];}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>a<sp/>vertice<sp/>:<sp/>checks<sp/>the<sp/>dimension<sp/>consistencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="class_vertice_1ae4155cad8d004c954916882157c9375f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1ae4155cad8d004c954916882157c9375f" kindref="member">copy</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref><sp/>!=<sp/>other.<ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>)<sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>Vertice::copy(Vertice<sp/>const<sp/>&amp;<sp/>_vertice)<sp/>:<sp/>dimension<sp/>of<sp/>_vertice<sp/>different<sp/>from<sp/>that<sp/>of<sp/>the<sp/>vertice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref><sp/>=<sp/>other.<ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref><sp/>=<sp/>other.<ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref><sp/>=<sp/>other.<ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63" refid="class_vertice_1a8b64784c593d9d75f9052a7a9d2fee02" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a8b64784c593d9d75f9052a7a9d2fee02" kindref="member">copy</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/>&amp;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref><sp/>!=<sp/>other.m_dim)<sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>Vertice::copy(Vertice<sp/>&amp;&amp;<sp/>_vertice)<sp/>:<sp/>dimension<sp/>of<sp/>_vertice<sp/>different<sp/>from<sp/>that<sp/>of<sp/>the<sp/>vertice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref><sp/>=<sp/>std::move(other.m_coordinates);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref><sp/>=<sp/>std::move(other.m_dim);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref><sp/>=<sp/>std::move(other.m_value);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a2b540156c45d4c5c519cb9035c7a3648" kindref="member">cleanMove</ref>(other);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71" refid="class_vertice_1ae9c9917341984b56f264c4478b9d8791" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1ae9c9917341984b56f264c4478b9d8791" kindref="member">copy</ref>(std::vector&lt;double&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>point)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point.size()<sp/>!=<sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>)<sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>Vertice::copy(std::vector&lt;double&gt;<sp/>const<sp/>&amp;<sp/>point)<sp/>:<sp/>dimension<sp/>of<sp/>the<sp/>point<sp/>different<sp/>from<sp/>that<sp/>of<sp/>the<sp/>vertice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref><sp/>=<sp/>point;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref><sp/>=<sp/>NAN;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>vertice<sp/>:<sp/>discards<sp/>the<sp/>current<sp/>dimension<sp/>to<sp/>set<sp/>a<sp/>new<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="class_vertice_1aad52a08bb2c5b6f92119d42956051924" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1aad52a08bb2c5b6f92119d42956051924" kindref="member">set</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref><sp/>=<sp/>other.<ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>;<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref><sp/>=<sp/>other.<ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref><sp/>=<sp/>other.<ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86" refid="class_vertice_1a59ec9893ab3e7bbadfbd2e54ea283e8e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a59ec9893ab3e7bbadfbd2e54ea283e8e" kindref="member">set</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/>&amp;&amp;<sp/>other)<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref><sp/>=<sp/>std::move(other.m_coordinates);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref><sp/>=<sp/>std::move(other.m_dim);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref><sp/>=<sp/>std::move(other.m_value);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a2b540156c45d4c5c519cb9035c7a3648" kindref="member">cleanMove</ref>(other);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93" refid="class_vertice_1ab5519307ad24edb7b482ce63f41d3b63" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1ab5519307ad24edb7b482ce63f41d3b63" kindref="member">set</ref>(std::vector&lt;double&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>point)<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref><sp/>=<sp/>point;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref><sp/>=<sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>.size();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref><sp/>=<sp/>NAN;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="class_vertice_1a2b540156c45d4c5c519cb9035c7a3648" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a2b540156c45d4c5c519cb9035c7a3648" kindref="member">cleanMove</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/>&amp;<sp/>_vertice)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>_vertice.<ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>.clear();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>_vertice.<ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>_vertice.<ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="class_vertice_1a651eb7cb39f966a5ff2d6d24c3e1e785" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref>&amp;<sp/><ref refid="class_vertice_1a651eb7cb39f966a5ff2d6d24c3e1e785" kindref="member">operator=</ref>(std::vector&lt;double&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>point)<sp/>{this-&gt;<ref refid="class_vertice_1aad52a08bb2c5b6f92119d42956051924" kindref="member">set</ref>(point);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="108" refid="class_vertice_1ab16b5e8facd201c70bdab71384adc6df" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref>&amp;<sp/><ref refid="class_vertice_1ab16b5e8facd201c70bdab71384adc6df" kindref="member">operator=</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vertice)<sp/>{this-&gt;<ref refid="class_vertice_1aad52a08bb2c5b6f92119d42956051924" kindref="member">set</ref>(vertice);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="109" refid="class_vertice_1a45871718e86053a0a03565bbe672f7a3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref>&amp;<sp/><ref refid="class_vertice_1a45871718e86053a0a03565bbe672f7a3" kindref="member">operator=</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/>&amp;&amp;<sp/>vertice)<sp/>{this-&gt;<ref refid="class_vertice_1aad52a08bb2c5b6f92119d42956051924" kindref="member">set</ref>(std::move(vertice));<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="class_vertice_1a3554246d64dc33a7719b5cd2d112e67b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a3554246d64dc33a7719b5cd2d112e67b" kindref="member">set</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>coordinate_i,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>coordinate)<sp/>{<ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>[coordinate_i]<sp/>=<sp/>coordinate;}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="class_vertice_1a1c3b20dfc14068262251ce9930dfa88f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a1c3b20dfc14068262251ce9930dfa88f" kindref="member">fill</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value)<sp/>{std::fill(<ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>.begin(),<sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>.end(),<sp/>value);}</highlight></codeline>
<codeline lineno="114" refid="class_vertice_1a1884b3dc38c78b7526fe7e75d1bb4604" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a1884b3dc38c78b7526fe7e75d1bb4604" kindref="member">resize</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>)<sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>!=<ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>)<sp/>{<ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref><sp/>=<sp/><ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>;<sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>.resize(<ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>);}}</highlight></codeline>
<codeline lineno="115" refid="class_vertice_1a9ab0c67e95e2ebd4ccd3d648d22c78eb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a9ab0c67e95e2ebd4ccd3d648d22c78eb" kindref="member">resize</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value)<sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_vertice_1a1884b3dc38c78b7526fe7e75d1bb4604" kindref="member">resize</ref>(size);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_vertice_1a1c3b20dfc14068262251ce9930dfa88f" kindref="member">fill</ref>(value);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="class_vertice_1a11e12aac4668a10a6b1706db7e5ebbcd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_vertice_1a11e12aac4668a10a6b1706db7e5ebbcd" kindref="member">get</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>;}</highlight></codeline>
<codeline lineno="122" refid="class_vertice_1a7ae35dd4e65c993d7faa019d8b966086" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_vertice_1a7ae35dd4e65c993d7faa019d8b966086" kindref="member">get</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>;}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="class_vertice_1a6c5691267912f8f2cc04aa708e6a8f2b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_vertice_1a6c5691267912f8f2cc04aa708e6a8f2b" kindref="member">get</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>coordinate_i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>[coordinate_i];}</highlight></codeline>
<codeline lineno="125" refid="class_vertice_1af3563e71bc70c76de76010a381fd3afb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_vertice_1af3563e71bc70c76de76010a381fd3afb" kindref="member">get</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>coordinate_i)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>[coordinate_i];}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>;}</highlight></codeline>
<codeline lineno="128" refid="class_vertice_1ae6a2eb34867f3c9ac333b267e3f20a17" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_vertice_1ae6a2eb34867f3c9ac333b267e3f20a17" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>;}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="class_vertice_1a0b6f58d8c0efedbb726e408c4e6527de" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a0b6f58d8c0efedbb726e408c4e6527de" kindref="member">begin</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>.begin();}</highlight></codeline>
<codeline lineno="131" refid="class_vertice_1a1215380e747b2cf93f861407a5bf9c3d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a1215380e747b2cf93f861407a5bf9c3d" kindref="member">end</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>.end();}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="class_vertice_1aad7a051c244a4565277290b7c4cb3382" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1aad7a051c244a4565277290b7c4cb3382" kindref="member">begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>.begin();}</highlight></codeline>
<codeline lineno="134" refid="class_vertice_1a5f64695b3dcd9bca4f2fb6e0ed83348c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a5f64695b3dcd9bca4f2fb6e0ed83348c" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>.end();}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="class_vertice_1ae6bf8b5aab5ad865f4fdd9a9b91f7e92" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/><ref refid="class_vertice_1ae6bf8b5aab5ad865f4fdd9a9b91f7e92" kindref="member">operator+</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="138"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.<ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>()<sp/>!=<sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>)<sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>Vertice::operator+(Vertice<sp/>const<sp/>&amp;<sp/>other)<sp/>:<sp/>other<sp/>and<sp/>vertice<sp/>not<sp/>the<sp/>same<sp/>size<sp/>!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>coords;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;other.<ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>();<sp/>i++)<sp/>coords.push_back(<ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>[i]<sp/>+<sp/>other[i]);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a4beafe087884524a9728617bff98029f" kindref="member">Vertice</ref>(coords);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="class_vertice_1aba263387b931496c5937f8645ded93ae" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/><ref refid="class_vertice_1aba263387b931496c5937f8645ded93ae" kindref="member">operator-</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="146"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.<ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>()<sp/>!=<sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref>)<sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>Vertice::operator-(Vertice<sp/>const<sp/>&amp;<sp/>other)<sp/>:<sp/>other<sp/>and<sp/>vertice<sp/>not<sp/>the<sp/>same<sp/>size<sp/>!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>coords;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;other.<ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>();<sp/>i++)<sp/>coords.push_back(<ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>[i]<sp/>-<sp/>other[i]);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a4beafe087884524a9728617bff98029f" kindref="member">Vertice</ref>(coords);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Vectorial<sp/>product<sp/>:<sp/>TBD<sp/>!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="class_vertice_1af7bdce52a3f6189f94f05a80127f949d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/><ref refid="class_vertice_1af7bdce52a3f6189f94f05a80127f949d" kindref="member">operator*</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="158"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;operator<sp/>Vertice*Vertice<sp/>not<sp/>implemented<sp/>yet<sp/>!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(other.size()<sp/>!=<sp/>m_dim)<sp/>throw_error(&quot;in<sp/>Vertice::operator+(Vertice<sp/>const<sp/>&amp;<sp/>other)<sp/>:<sp/>other<sp/>and<sp/>vertice<sp/>not<sp/>the<sp/>same<sp/>size<sp/>!!&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>coords<sp/>=<sp/>other.<ref refid="class_vertice_1a11e12aac4668a10a6b1706db7e5ebbcd" kindref="member">get</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i&lt;other.size();<sp/>i++)<sp/>coords.push_back(m_coordinates[i]*other[i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>Vertice(coords);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>coords;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="class_vertice_1a82b943e02b26f4e9d713aceb17ccab61" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/><ref refid="class_vertice_1a82b943e02b26f4e9d713aceb17ccab61" kindref="member">operator*</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>constant)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="168"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>coords<sp/>=<sp/>this-&gt;<ref refid="class_vertice_1a11e12aac4668a10a6b1706db7e5ebbcd" kindref="member">get</ref>();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>coord<sp/>:<sp/>coords)<sp/>coord*=constant;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>coords;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="class_vertice_1a082dc91912838405b4c98eec453cd7fe" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref>&amp;<sp/><ref refid="class_vertice_1a082dc91912838405b4c98eec453cd7fe" kindref="member">operator*=</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>constant)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>coord<sp/>:<sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>)<sp/>coord*=constant;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="class_vertice_1a0ab115f978a0d9c454b957d5cc531c57" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a0ab115f978a0d9c454b957d5cc531c57" kindref="member">setValue</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_value)<sp/>{<ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref><sp/>=<sp/>_value;}</highlight></codeline>
<codeline lineno="181" refid="class_vertice_1a5f23c4ece665d5a55b5c3b67fc45ffb3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_vertice_1a5f23c4ece665d5a55b5c3b67fc45ffb3" kindref="member">getValue</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>;}</highlight></codeline>
<codeline lineno="182" refid="class_vertice_1a54771ef13c85f80a0603765273e2c8dd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a54771ef13c85f80a0603765273e2c8dd" kindref="member">getValue</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>;}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="class_vertice_1a6a4e7b2f8b617f2153b2fc0f0742a09e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_vertice_1a6a4e7b2f8b617f2153b2fc0f0742a09e" kindref="member">evaluate</ref>(std::function&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref>&amp;)&gt;<sp/>objective_function)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref><sp/>=<sp/>objective_function(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="class_vertice_1afe53f60865f26d7945c338eb3f2422ac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1afe53f60865f26d7945c338eb3f2422ac" kindref="member">operator&lt;</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>&lt;other.<ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>;}</highlight></codeline>
<codeline lineno="191" refid="class_vertice_1ab7e40502eaba03b6b1576cbf39c358f0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1ab7e40502eaba03b6b1576cbf39c358f0" kindref="member">operator&gt;</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>&gt;other.<ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>;}</highlight></codeline>
<codeline lineno="192" refid="class_vertice_1a540a77aff2f79ae4cd5bb932311118fd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a540a77aff2f79ae4cd5bb932311118fd" kindref="member">operator&lt;=</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>&lt;=other.<ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>;}</highlight></codeline>
<codeline lineno="193" refid="class_vertice_1ad563d154d6ffe9f7a75323bc0d706fe4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1ad563d154d6ffe9f7a75323bc0d706fe4" kindref="member">operator&gt;=</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>&gt;=other.<ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref>;}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="196" refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a0a14824e1d0e1aefdfe45e6878fd1550" kindref="member">m_dim</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="197" refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="class_vertice_1aee303f307e0d0dccc8a9a1c1eaeaa11e" kindref="member">m_coordinates</ref>;</highlight></codeline>
<codeline lineno="198" refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_vertice_1a5ef7f30be58758901c1e35e0bfe4d681" kindref="member">m_value</ref><sp/>=<sp/>NAN;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="_spectra_alignator_8hpp_1a00041d0900b9f4e90f24fc9f5f61208f" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="_spectra_alignator_8hpp_1a00041d0900b9f4e90f24fc9f5f61208f" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vertice)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;coordinates<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vertice.<ref refid="class_vertice_1a11e12aac4668a10a6b1706db7e5ebbcd" kindref="member">get</ref>();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::isnan(vertice.<ref refid="class_vertice_1a5f23c4ece665d5a55b5c3b67fc45ffb3" kindref="member">getValue</ref>()))<sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>value<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vertice.<ref refid="class_vertice_1a5f23c4ece665d5a55b5c3b67fc45ffb3" kindref="member">getValue</ref>();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="_spectra_alignator_8hpp_1a658a331239a2db3139f2a2163a4c182f" refkind="member"><highlight class="normal"><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/><ref refid="_spectra_alignator_8hpp_1a658a331239a2db3139f2a2163a4c182f" kindref="member">operator*</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>constant,<sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vertice)</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>newVertice<sp/>=<sp/>vertice.<ref refid="class_vertice_1a11e12aac4668a10a6b1706db7e5ebbcd" kindref="member">get</ref>();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>coord<sp/>:<sp/>newVertice)<sp/>coord*=constant;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newVertice;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="_spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="_spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e" kindref="member">Vertices</ref><sp/>=<sp/>std::vector&lt;Vertice&gt;;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="comment">//<sp/>SIMPLEX<sp/>//</highlight></codeline>
<codeline lineno="220"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="class_simplex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_simplex" kindref="compound">Simplex</ref></highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="224" refid="class_simplex_1ad893ac9de899c841e0e6ada82ea611b9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_simplex_1ad893ac9de899c841e0e6ada82ea611b9" kindref="member">Simplex</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_simplex_1aed93fc950fa50599b289d5ac9e3356c7" kindref="member">dim</ref>)<sp/>:<sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>(<ref refid="class_simplex_1aed93fc950fa50599b289d5ac9e3356c7" kindref="member">dim</ref>+1),</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref>(<ref refid="class_simplex_1aed93fc950fa50599b289d5ac9e3356c7" kindref="member">dim</ref>)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;<ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>;<sp/>i++)<sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>.push_back(<ref refid="class_vertice" kindref="compound">Vertice</ref>(<ref refid="class_simplex_1aed93fc950fa50599b289d5ac9e3356c7" kindref="member">dim</ref>));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="class_simplex_1ac74b813d1b4b98e97d1c98157997d294" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_simplex_1ac74b813d1b4b98e97d1c98157997d294" kindref="member">Simplex</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vertice)<sp/>:<sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>(vertice.<ref refid="class_simplex_1ae39ce6d0a47986ceabb9a76146a8225b" kindref="member">size</ref>()+1),</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref>(vertice.<ref refid="class_simplex_1ae39ce6d0a47986ceabb9a76146a8225b" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;taille<sp/>:&quot;</highlight><highlight class="normal">,<sp/>vertice.<ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(vertice);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;<ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>;<sp/>i++)<sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>.push_back(vertice);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="class_simplex_1abd6e34ab7ace7cf33b13fa0dab907a2a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_simplex_1abd6e34ab7ace7cf33b13fa0dab907a2a" kindref="member">Simplex</ref>(<ref refid="_spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e" kindref="member">Vertices</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vertices)<sp/>:<sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>(vertices),<sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>(vertices.<ref refid="class_simplex_1ae39ce6d0a47986ceabb9a76146a8225b" kindref="member">size</ref>()),</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref>(<ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>-1)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vertex<sp/>:<sp/>vertices)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertex.size()<sp/>!=<sp/>this-&gt;m_dim)<sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>Simplex::Simplex(std::vector&lt;Vertice&gt;<sp/>const<sp/>&amp;<sp/>vertices)<sp/>:<sp/>dimension<sp/>conflict<sp/>of<sp/>at<sp/>least<sp/>one<sp/>vertex<sp/>(simplex<sp/>must<sp/>have<sp/>dim+1<sp/>vertices)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="class_simplex_1a2ff37bbc43bc7c86703f204c3510baa8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_simplex_1a2ff37bbc43bc7c86703f204c3510baa8" kindref="member">Simplex</ref>(<ref refid="class_simplex" kindref="compound">Simplex</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)<sp/>:<sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>(other.<ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>),</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>(other.<ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>),</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref>(other.<ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref>),</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref>(other.<ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref>)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="class_simplex_1a169c2796d3adf036611cdcf6772e46d1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_simplex_1a169c2796d3adf036611cdcf6772e46d1" kindref="member">Simplex</ref>(<ref refid="class_simplex" kindref="compound">Simplex</ref><sp/>&amp;&amp;<sp/>other)<sp/>:<sp/></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>(std::move(other.<ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>)),</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>(std::move(other.<ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>)),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref>(std::move(other.<ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref>)),</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref>(std::move(other.<ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref>))</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="class_simplex_1a622f6bed00b73eb0b931cf65ee77d055" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_simplex" kindref="compound">Simplex</ref>&amp;<sp/><ref refid="class_simplex_1a622f6bed00b73eb0b931cf65ee77d055" kindref="member">operator=</ref>(<ref refid="class_simplex" kindref="compound">Simplex</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref><sp/>=<sp/>other.<ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref><sp/>=<sp/>other.<ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref><sp/>=<sp/>other.<ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref><sp/>=<sp/>other.<ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="class_simplex_1a18363c969c478336afe053dc246495ce" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_simplex" kindref="compound">Simplex</ref>&amp;<sp/><ref refid="class_simplex_1a18363c969c478336afe053dc246495ce" kindref="member">operator=</ref>(<ref refid="class_simplex" kindref="compound">Simplex</ref><sp/>&amp;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref><sp/>=<sp/>std::move(other.m_vertices);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref><sp/>=<sp/>std::move(other.m_size);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref><sp/>=<sp/>std::move(other.m_dim);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref><sp/>=<sp/>std::move(other.m_centroid);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="class_simplex_1ac1a2bb63bb9b56da8457ecefe34e23e8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_simplex" kindref="compound">Simplex</ref>&amp;<sp/><ref refid="class_simplex_1ac1a2bb63bb9b56da8457ecefe34e23e8" kindref="member">operator=</ref>(<ref refid="_spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e" kindref="member">Vertices</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vertices)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref><sp/>=<sp/>vertices;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref><sp/>=<sp/>vertices.size();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref><sp/>=<sp/><ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>-1;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="class_simplex_1ade818ac404caab90542e80143cbc63c0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1ade818ac404caab90542e80143cbc63c0" kindref="member">setVertice</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin,<sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vertice)<sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_co_8hpp_1a237f678c718382f74a68364c0fc1779a" kindref="member">size_cast</ref>(bin)&lt;<ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>)<sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>[bin]<sp/>=<sp/>vertice;}</highlight></codeline>
<codeline lineno="297" refid="class_simplex_1aa4f7721e6989b27489d84cca5de99c07" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1aa4f7721e6989b27489d84cca5de99c07" kindref="member">setVertice</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin,<sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/>&amp;&amp;<sp/>vertice)<sp/>{</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lib_co_8hpp_1a237f678c718382f74a68364c0fc1779a" kindref="member">size_cast</ref>(bin)&lt;<ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>)<sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>[bin]<sp/>=<sp/>std::move(vertice);}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="class_simplex_1a4212e98efa0b1468955d32a51387f3fc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a4212e98efa0b1468955d32a51387f3fc" kindref="member">centroid</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>n_best)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_best&gt;<ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>)<sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>Simplex(size_t<sp/>n_best)<sp/>:<sp/>n_best<sp/>is<sp/>higher<sp/>than<sp/>the<sp/>size<sp/>of<sp/>the<sp/>simplex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_best<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref><sp/>=<sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>[0]);<sp/></highlight><highlight class="comment">//<sp/>1D<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;centroid<sp/>calculation<sp/>:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vertice_i<sp/>=<sp/>0;<sp/>vertice_i&lt;n_best;<sp/>++vertice_i)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(vertice_i,<sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>[vertice_i]);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>coord<sp/>:<sp/><ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref>)<sp/>coord<sp/>=<sp/>0.0;<sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>centroid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>coord_i<sp/>=<sp/>0;<sp/>coord_i&lt;<ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref>.<ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>();<sp/>coord_i++)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vertice_i<sp/>=<sp/>0;<sp/>vertice_i&lt;n_best;<sp/>++vertice_i)<sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref>[coord_i]<sp/>+=<sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>[vertice_i][coord_i];</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;m_centroid<sp/>before&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref>);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>points<sp/>=<sp/><ref refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" kindref="member">double_cast</ref>(n_best);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>coord<sp/>:<sp/><ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref>)<sp/>{coord<sp/>/=<sp/>points;}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="319" refid="class_simplex_1af3f0b93fc1290f891ce99f72bd0e7b59" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1af3f0b93fc1290f891ce99f72bd0e7b59" kindref="member">centroid</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1af3f0b93fc1290f891ce99f72bd0e7b59" kindref="member">centroid</ref>(<ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>);}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="class_simplex_1a3840674dbc694d4796b28c088da4c02e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a3840674dbc694d4796b28c088da4c02e" kindref="member">evaluate</ref>(std::function&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref>&amp;)&gt;<sp/>objective_function)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>vertice<sp/>:<sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>)<sp/>vertice.evaluate(objective_function);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="class_simplex_1a0ceff7d3432670abaddf74f5b223e62d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_simplex_1a0ceff7d3432670abaddf74f5b223e62d" kindref="member">getCentroid</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref>;}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Usual<sp/>methods<sp/>and<sp/>operators<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="class_simplex_1a0bbdd7fe5cc1296b7c1da9232d78d182" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_simplex_1a0bbdd7fe5cc1296b7c1da9232d78d182" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>[i];}</highlight></codeline>
<codeline lineno="331" refid="class_simplex_1a08239a3a6b994da2a445a7ea44c7b893" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_simplex_1a0bbdd7fe5cc1296b7c1da9232d78d182" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>[i];}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="class_simplex_1af9f387b740699fc83d561b06a5e8305a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1af9f387b740699fc83d561b06a5e8305a" kindref="member">begin</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>.begin();}</highlight></codeline>
<codeline lineno="334" refid="class_simplex_1a43aa87c378225a78bf764a3c049ed381" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a43aa87c378225a78bf764a3c049ed381" kindref="member">end</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>.end();}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="class_simplex_1ad5161ef4f875383b9880f2401cefe71a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1ad5161ef4f875383b9880f2401cefe71a" kindref="member">begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>.begin();}</highlight></codeline>
<codeline lineno="337" refid="class_simplex_1ae3a1f652ec439b823610f75846ae8067" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1ae3a1f652ec439b823610f75846ae8067" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>.end();}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="class_simplex_1ae39ce6d0a47986ceabb9a76146a8225b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_simplex_1ae39ce6d0a47986ceabb9a76146a8225b" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>;}</highlight></codeline>
<codeline lineno="340" refid="class_simplex_1ab3328d220b10f9978d86a61a0f9c53c7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_simplex_1ab3328d220b10f9978d86a61a0f9c53c7" kindref="member">size</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref>;}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="class_simplex_1aed93fc950fa50599b289d5ac9e3356c7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_simplex_1aed93fc950fa50599b289d5ac9e3356c7" kindref="member">dim</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref>;}</highlight></codeline>
<codeline lineno="343" refid="class_simplex_1afbcd974270009d3cec5f3253ae852cbc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_simplex_1afbcd974270009d3cec5f3253ae852cbc" kindref="member">dim</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref>;}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="346" refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e" kindref="member">Vertices</ref><sp/><ref refid="class_simplex_1a8e0cd4b76bda7c66a299e4f7c8ea1bc3" kindref="member">m_vertices</ref>;</highlight></codeline>
<codeline lineno="347" refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1a78b6b0c0442a52c96872d063b999cc8f" kindref="member">m_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="348" refid="class_simplex_1aed12d66219db915526fc70cc33c83505" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="349" refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/><ref refid="class_simplex_1a0d352c2bc1248646ccaff4236538a194" kindref="member">m_centroid</ref><sp/>=<sp/><ref refid="class_vertice" kindref="compound">Vertice</ref>(<ref refid="class_simplex_1aed12d66219db915526fc70cc33c83505" kindref="member">m_dim</ref>);</highlight></codeline>
<codeline lineno="350" refid="class_simplex_1acee756ff5f517c95c30b3dc7e99ea7d7" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="class_simplex_1acee756ff5f517c95c30b3dc7e99ea7d7" kindref="member">m_angles</ref>;</highlight></codeline>
<codeline lineno="351"><highlight class="normal">};</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="_spectra_alignator_8hpp_1a2b92434fd8aaf67b841513f9b83eaaa8" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="_spectra_alignator_8hpp_1a00041d0900b9f4e90f24fc9f5f61208f" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/><ref refid="class_simplex" kindref="compound">Simplex</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>simplex)</highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/>simplex.<ref refid="class_simplex_1ae39ce6d0a47986ceabb9a76146a8225b" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>points<sp/>:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vertice<sp/>:<sp/>simplex)<sp/>out<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>vertice;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="comment">//<sp/>Objective<sp/>function<sp/>//</highlight></codeline>
<codeline lineno="363"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="class_objective_function" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_objective_function" kindref="compound">ObjectiveFunction</ref></highlight></codeline>
<codeline lineno="365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="367" refid="class_objective_function_1aae8254009cb9b2dcbbfa751149652fbd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_objective_function_1aae8254009cb9b2dcbbfa751149652fbd" kindref="member">ObjectiveFunction</ref>()<sp/>noexcept<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="368" refid="class_objective_function_1a9eb6407e18579b7eddcffcfe55badf20" refkind="member"><highlight class="normal"><sp/><sp/>virtual<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_objective_function_1a9eb6407e18579b7eddcffcfe55badf20" kindref="member">evaluate</ref>(std::vector&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>const<sp/>&amp;<sp/>coefficients)<sp/>const<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="class_test_objective_function" refkind="compound"><highlight class="normal">class<sp/><ref refid="class_test_objective_function" kindref="compound">TestObjectiveFunction</ref><sp/>:<sp/>public<sp/><ref refid="class_objective_function" kindref="compound">ObjectiveFunction</ref></highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="374" refid="class_test_objective_function_1a4e14bcf861e99f85e3c513e0860d0de9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_test_objective_function_1a4e14bcf861e99f85e3c513e0860d0de9" kindref="member">TestObjectiveFunction</ref>()<sp/>noexcept<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="375" refid="class_test_objective_function_1a37613667d05da9ece656c1bfb9b48843" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_objective_function_1a9eb6407e18579b7eddcffcfe55badf20" kindref="member">evaluate</ref>(std::vector&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>const<sp/>&amp;<sp/>coefficients)</highlight><highlight class="keyword"><sp/>const<sp/>override</highlight></codeline>
<codeline lineno="376"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>coeff<sp/>:<sp/>coefficients)<sp/>ret<sp/>+=<sp/>coeff*coeff<sp/>-<sp/>2*coeff<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal">};</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="class_objective_function_chi2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_objective_function_chi2" kindref="compound">ObjectiveFunctionChi2</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_objective_function" kindref="compound">ObjectiveFunction</ref></highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="386" refid="class_objective_function_chi2_1a0f074c2df8d48affdc0ca1daceb2de90" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_objective_function_chi2_1a0f074c2df8d48affdc0ca1daceb2de90" kindref="member">ObjectiveFunctionChi2</ref>()<sp/>noexcept<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="387" refid="class_objective_function_chi2_1a78fcc3130e61fffaddfeeb76a5962eeb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_objective_function_chi2" kindref="compound">ObjectiveFunctionChi2</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/>spectra_ref,<sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/>spectra_test)<sp/>:<sp/>m_spectra_ref(spectra_ref),<sp/>m_spectra_test(spectra_test)<sp/>{}</highlight></codeline>
<codeline lineno="388" refid="class_objective_function_chi2_1ae6d2c828a893d5279e40c3a3de504401" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_objective_function_chi2_1ae6d2c828a893d5279e40c3a3de504401" kindref="member">setRef</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/>spectra_ref)<sp/>{m_spectra_ref<sp/>=<sp/>spectra_ref;}</highlight></codeline>
<codeline lineno="389" refid="class_objective_function_chi2_1a809ad142bb8f9e81cae7094a74f53b1d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_objective_function_chi2_1a809ad142bb8f9e81cae7094a74f53b1d" kindref="member">setTest</ref>(<ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/>spectra_test)<sp/>{m_spectra_test<sp/>=<sp/>spectra_test;}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="class_objective_function_chi2_1ab9abe6ab2b65aa87d805b9866044eaed" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_objective_function_chi2_1ab9abe6ab2b65aa87d805b9866044eaed" kindref="member">evaluate</ref>(std::vector&lt;double&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>coefficients)</highlight><highlight class="keyword"><sp/>const<sp/>override</highlight></codeline>
<codeline lineno="392"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>spectra_ref<sp/>=<sp/>*m_spectra_ref;<sp/></highlight><highlight class="comment">//<sp/>Simple<sp/>aliasing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/>spectra_test<sp/>(*m_spectra_test);<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>spectra<sp/>in<sp/>order<sp/>to<sp/>calibrate<sp/>it<sp/>afterwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nb_bins<sp/>=<sp/>spectra_ref.size();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calibrating<sp/>the<sp/>X<sp/>axis<sp/>of<sp/>the<sp/>test<sp/>spectra<sp/>then<sp/>scale<sp/>the<sp/>Y<sp/>axis<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coefficients.size()<sp/>&gt;<sp/>1)<sp/>spectra_test.<ref refid="class_spectra_co_1af74c78334a7be1cc421779f9e4b30a0b" kindref="member">calibrateAndScale</ref>(coefficients);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb_bins<sp/>!=<sp/>spectra_test.<ref refid="class_spectra_co_1af819f84c4dfd2a2bf9ee87809dec1159" kindref="member">size</ref>())<sp/>{<ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref><sp/>(</highlight><highlight class="stringliteral">&quot;in<sp/>ObjectiveFunctionChi2::evaluate():<sp/>both<sp/>spectra<sp/>don&apos;t<sp/>have<sp/>the<sp/>same<sp/>size&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_errors_squared<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spectra_diff<sp/>=<sp/>spectra_ref<sp/>-<sp/>spectra_test;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;nb_bins;<sp/>bin++)<sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>max_bin<sp/>=<sp/>std::max(spectra_ref[bin],<sp/>spectra_test[bin]);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_bin<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Variance<sp/>of<sp/>the<sp/>bin<sp/>(here<sp/>is<sp/>taken<sp/>the<sp/>mean<sp/>between<sp/>both<sp/>ref<sp/>and<sp/>test<sp/>spectra):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>weight<sp/>=<sp/>1/max_bin;<sp/></highlight><highlight class="comment">//<sp/>V<sp/>=<sp/>sigma²<sp/>=<sp/>1/N,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Calculate<sp/>the<sp/>error<sp/>for<sp/>this<sp/>bin<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>error<sp/>=<sp/>spectra_ref[bin]<sp/>-<sp/>spectra_test[bin];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>error<sp/>to<sp/>the<sp/>total<sp/>squared<sp/>error<sp/>of<sp/>the<sp/>spectra<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_errors_squared<sp/>+=<sp/>spectra_diff[bin]*spectra_diff[bin]*weight;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum_errors_squared/nb_bins;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="425" refid="class_objective_function_chi2_1aae38c40346cfa2c2b0d57c595f3ad0c6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/>m_spectra_ref<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426" refid="class_objective_function_chi2_1ab7b5fe940715f2142c443c805d4e72d4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref>*<sp/>m_spectra_test<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal">};</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="class_minimisator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_minimisator" kindref="compound">Minimisator</ref></highlight></codeline>
<codeline lineno="430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="432" refid="class_minimisator_1a79445191945ee55123770aa8c480095f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_minimisator_1a79445191945ee55123770aa8c480095f" kindref="member">Minimisator</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="434" refid="struct_minimisator_1_1_nelder_mead_parameters" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_minimisator_1_1_nelder_mead_parameters" kindref="compound">NelderMeadParameters</ref></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="436" refid="struct_minimisator_1_1_nelder_mead_parameters_1aa2ff65f63bdee40f4cbc28ebd3b58515" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_minimisator_1_1_nelder_mead_parameters_1aa2ff65f63bdee40f4cbc28ebd3b58515" kindref="member">adjustToDimension</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>n)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Gao<sp/>+<sp/>Han,<sp/>Comput<sp/>Optim<sp/>Appl<sp/>(2012)<sp/>51:259-277</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;adjust<sp/>nelder-mead<sp/>coefficients<sp/>to<sp/>the<sp/>dimension&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a_extend<sp/><sp/>=<sp/>1+2/n;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a_contract=<sp/>0.75-0.5/n;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a_shrink<sp/><sp/>=<sp/>1-1/n;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adjusted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Print();</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="struct_minimisator_1_1_nelder_mead_parameters_1a9cd5948b40f44ce5783e5e61683834f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_minimisator_1_1_nelder_mead_parameters_1a9cd5948b40f44ce5783e5e61683834f3" kindref="member">Print</ref>()</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;a_reflect<sp/>:&quot;</highlight><highlight class="normal">,<sp/>a_reflect,<sp/></highlight><highlight class="stringliteral">&quot;a_extend<sp/>:&quot;</highlight><highlight class="normal">,<sp/>a_extend,<sp/></highlight><highlight class="stringliteral">&quot;a_contract<sp/>:&quot;</highlight><highlight class="normal">,<sp/>a_contract,<sp/></highlight><highlight class="stringliteral">&quot;a_shrink<sp/>:&quot;</highlight><highlight class="normal">,<sp/>a_shrink,<sp/></highlight><highlight class="stringliteral">&quot;a_expand<sp/>:&quot;</highlight><highlight class="normal">,<sp/>a_expand,<sp/></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;adjusted<sp/>:&quot;</highlight><highlight class="normal">,<sp/>(adjusted)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="struct_minimisator_1_1_nelder_mead_parameters_1af0470094a30fdde0d4a943137a130585" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_reflect<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="453" refid="struct_minimisator_1_1_nelder_mead_parameters_1ab4e42f52d8bc30c6c5b429bd9d591106" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_extend<sp/><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="454" refid="struct_minimisator_1_1_nelder_mead_parameters_1a0b2013a431620391c58cf8eab841d9f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_contract<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="455" refid="struct_minimisator_1_1_nelder_mead_parameters_1a976cc25210f4b060efd991e53b3fb1e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_shrink<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="456" refid="struct_minimisator_1_1_nelder_mead_parameters_1a1a69b4f78d62114054549adbf013c280" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_expand<sp/>=<sp/>1.3;<sp/></highlight><highlight class="comment">//<sp/>Unused<sp/>in<sp/>standard<sp/>method<sp/>(without<sp/>adjustement)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="struct_minimisator_1_1_nelder_mead_parameters_1a417843cc722a10d40f1b8aa88310eddc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>adjusted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458" refid="class_minimisator_1a60fa32272bc0c844926f7910bcb83e50" refkind="member"><highlight class="normal"><sp/><sp/>}<sp/>nmParam;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="class_minimisator_1a3c467eeb96f716414dbfb6f2348c6340" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_minimisator_1a3c467eeb96f716414dbfb6f2348c6340" kindref="member">nelderMead</ref>(<ref refid="class_objective_function" kindref="compound">ObjectiveFunction</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Alias<sp/>the<sp/>call<sp/>to<sp/>the<sp/>objective<sp/>function<sp/>on<sp/>a<sp/>vertice<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>computeFunction<sp/>=<sp/>[&amp;](<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vertice)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">.evaluate(vertice.get());</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>Create<sp/>the<sp/>lambdas<sp/>to<sp/>be<sp/>used<sp/>in<sp/>the<sp/>nelder-mead<sp/>algorithm<sp/>--<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reflect<sp/>the<sp/>worst<sp/>point<sp/>through<sp/>the<sp/>average<sp/>of<sp/>the<sp/>best<sp/>n<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reflectVertice<sp/>=<sp/>[&amp;](<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>centroid,<sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>worst_vertice)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>();</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;centroid&quot;</highlight><highlight class="normal">,<sp/>centroid,<sp/></highlight><highlight class="stringliteral">&quot;worst_vertice&quot;</highlight><highlight class="normal">,worst_vertice,</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>diff&quot;</highlight><highlight class="normal">,<sp/>centroid<sp/>-<sp/>worst_vertice);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>centroid<sp/>+<sp/>nmParam.a_reflect<sp/>*<sp/>(centroid<sp/>-<sp/>worst_vertice);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>the<sp/>worst<sp/>point<sp/>further<sp/>past<sp/>the<sp/>average<sp/>of<sp/>the<sp/>best<sp/>n<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>extendVertice<sp/>=<sp/>[&amp;](<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>centroid,<sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>reflection)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>centroid<sp/>+<sp/>nmParam.a_extend<sp/>*<sp/>(reflection-centroid);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contract<sp/>inside<sp/>the<sp/>worst<sp/>point<sp/>to<sp/>a<sp/>point<sp/>between<sp/>the<sp/>worst<sp/>point<sp/>and<sp/>the<sp/>reflexion<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>contractVerticeIn<sp/>=<sp/>[&amp;](<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>centroid,<sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>reflection)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>centroid<sp/>-<sp/>nmParam.a_contract<sp/>*<sp/>(centroid<sp/>-<sp/>reflection);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contract<sp/>outside<sp/>the<sp/>worst<sp/>point<sp/>to<sp/>a<sp/>point<sp/>between<sp/>the<sp/>worst<sp/>point<sp/>and<sp/>the<sp/>reflexion<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>contractVerticeOut<sp/>=<sp/>[&amp;](<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>centroid,<sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>reflection)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>centroid<sp/>+<sp/>nmParam.a_contract<sp/>*<sp/>(centroid<sp/>-<sp/>reflection);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shrinks<sp/>the<sp/>simplex<sp/>towards<sp/>the<sp/>best<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shrinkSimplex<sp/>=<sp/>[&amp;](<ref refid="class_simplex" kindref="compound">Simplex</ref><sp/>&amp;<sp/>simplex)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>point_i<sp/>=<sp/>1;<sp/>point_i&lt;simplex.size();<sp/>point_i++){</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simplex[point_i]<sp/>=<sp/>simplex[0]<sp/>+<sp/>nmParam.a_shrink<sp/>*<sp/>(simplex[point_i]<sp/>-<sp/>simplex[0]);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>simplex<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_simplex" kindref="compound">Simplex</ref><sp/>simplex(m_initial_vertice);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>n<sp/>=<sp/>simplex.<ref refid="class_simplex_1aed93fc950fa50599b289d5ac9e3356c7" kindref="member">dim</ref>();</highlight><highlight class="comment">//<sp/>The<sp/>dimension<sp/>of<sp/>the<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n==0)<sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>Minimisator::nelderMead()<sp/>:<sp/>The<sp/>problem<sp/>is<sp/>null<sp/>dimensioned<sp/>!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n==1)<sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>Minimisator::nelderMead()<sp/>:<sp/>The<sp/>problem<sp/>is<sp/>1<sp/>dimension,<sp/>currently<sp/>not<sp/>supported<sp/>!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nmParam.adjustToDimension(simplex.dim());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(simplex.<ref refid="class_simplex_1aed93fc950fa50599b289d5ac9e3356c7" kindref="member">dim</ref>()<sp/>!=<sp/>m_steps.size())<sp/></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>Minimisator::nelderMead(),<sp/>the<sp/>dimension<sp/>of<sp/>the<sp/>vertices<sp/>do<sp/>not<sp/>match<sp/>the<sp/>dimensions<sp/>of<sp/>the<sp/>initial<sp/>steps&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>rectangle<sp/>triangle<sp/>with<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vertice_i<sp/>=<sp/>1;<sp/>vertice_i&lt;simplex.<ref refid="class_simplex_1ae39ce6d0a47986ceabb9a76146a8225b" kindref="member">size</ref>();<sp/>++vertice_i)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>coord_i<sp/>=<sp/>vertice_i-1;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>simplex[vertice_i][coord_i]+=m_steps[coord_i];</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Evaluate<sp/>the<sp/>result<sp/>of<sp/>the<sp/>objective<sp/>function<sp/>for<sp/>each<sp/>vertice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>simplex.<ref refid="class_simplex_1a3840674dbc694d4796b28c088da4c02e" kindref="member">evaluate</ref>(computeFunction);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;initial<sp/>guess<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/>m_initial_vertice);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;first<sp/>simplex<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/>simplex);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>();</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>g_simplex_history.push_back(simplex);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sorts<sp/>the<sp/>simplex<sp/>based<sp/>on<sp/>the<sp/>evaluated<sp/>value<sp/>of<sp/>the<sp/>vertices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(simplex.<ref refid="class_simplex_1af9f387b740699fc83d561b06a5e8305a" kindref="member">begin</ref>(),<sp/>simplex.<ref refid="class_simplex_1a43aa87c378225a78bf764a3c049ed381" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/>newVertice(n);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loop_i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(loop_i++&lt;g_nb_rounds)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;========================&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;Round&quot;</highlight><highlight class="normal">,<sp/>loop_i);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(verbose)<sp/>debug(simplex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>CENTROID<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>centroid<sp/>(simplex.<ref refid="class_simplex_1a4212e98efa0b1468955d32a51387f3fc" kindref="member">centroid</ref>(n));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>centroid.<ref refid="class_vertice_1a6a4e7b2f8b617f2153b2fc0f0742a09e" kindref="member">evaluate</ref>(computeFunction);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;centroid&quot;</highlight><highlight class="normal">,<sp/>centroid);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>REFLECT<sp/>the<sp/>worst<sp/>point<sp/>through<sp/>the<sp/>average<sp/>of<sp/>the<sp/>best<sp/>n<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reflection<sp/>(reflectVertice(centroid,<sp/>simplex[n]));</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reflection.evaluate(computeFunction);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;reflection&quot;</highlight><highlight class="normal">,<sp/>reflection);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasNewVertice<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>reflection<sp/>is<sp/>worst<sp/>than<sp/>the<sp/>best<sp/>point<sp/>but<sp/>better<sp/>than<sp/>the<sp/>second<sp/>to<sp/>worse<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(simplex[0]<sp/>&lt;=<sp/>reflection<sp/>&amp;&amp;<sp/>reflection<sp/>&lt;<sp/>simplex[n-1])<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVertice.<ref refid="class_vertice_1aad52a08bb2c5b6f92119d42956051924" kindref="member">set</ref>(reflection);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>vertice<sp/>is<sp/>reflection<sp/>point&quot;</highlight><highlight class="normal">,<sp/>reflection);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>reflection<sp/>is<sp/>better<sp/>than<sp/>the<sp/>best<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hasNewVertice<sp/>&amp;&amp;<sp/>reflection<sp/>&lt;<sp/>simplex[0])</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EXTEND<sp/>the<sp/>worst<sp/>point<sp/>further<sp/>past<sp/>the<sp/>average<sp/>of<sp/>the<sp/>best<sp/>n<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a321abbd0681c4da012deaf49122389c5" kindref="member">extension</ref><sp/>(extendVertice(centroid,<sp/>reflection));</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="files__functions_8hpp_1a321abbd0681c4da012deaf49122389c5" kindref="member">extension</ref>.evaluate(computeFunction);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="files__functions_8hpp_1a321abbd0681c4da012deaf49122389c5" kindref="member">extension</ref><sp/>&lt;<sp/>reflection)<sp/>{hasNewVertice<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>newVertice.<ref refid="class_vertice_1ae4155cad8d004c954916882157c9375f" kindref="member">copy</ref>(<ref refid="files__functions_8hpp_1a321abbd0681c4da012deaf49122389c5" kindref="member">extension</ref>)<sp/>;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/>{<ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>vertice<sp/>is<sp/>extension<sp/>point&quot;</highlight><highlight class="normal">,<sp/><ref refid="files__functions_8hpp_1a321abbd0681c4da012deaf49122389c5" kindref="member">extension</ref>)<sp/><sp/>;};}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{hasNewVertice<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>newVertice.<ref refid="class_vertice_1ae4155cad8d004c954916882157c9375f" kindref="member">copy</ref>(reflection);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/>{<ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>vertice<sp/>is<sp/>reflection<sp/>point&quot;</highlight><highlight class="normal">,<sp/>reflection);};}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>reflection<sp/>is<sp/>worse<sp/>than<sp/>second<sp/>to<sp/>worst<sp/>but<sp/>better<sp/>than<sp/>worst<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hasNewVertice<sp/>&amp;&amp;<sp/>reflection<sp/>&lt;<sp/>simplex[n])</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CONTRACT<sp/>the<sp/>point.<sp/>Two<sp/>kinds<sp/>:<sp/>inside<sp/>or<sp/>outside<sp/>contraction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outContraction(contractVerticeOut(centroid,<sp/>reflection));</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outContraction.evaluate(computeFunction);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inContraction(contractVerticeIn(centroid,<sp/>reflection));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inContraction.evaluate(computeFunction);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outContraction<sp/>&lt;<sp/>inContraction)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outContraction<sp/>&lt;<sp/>reflection)<sp/></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasNewVertice<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVertice.<ref refid="class_vertice_1ae4155cad8d004c954916882157c9375f" kindref="member">copy</ref>(outContraction);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>vertice<sp/>is<sp/>outContraction<sp/>point&quot;</highlight><highlight class="normal">,<sp/>outContraction);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inContraction<sp/>&lt;<sp/>reflection)<sp/></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasNewVertice<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newVertice.<ref refid="class_vertice_1ae4155cad8d004c954916882157c9375f" kindref="member">copy</ref>(inContraction);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;new<sp/>vertice<sp/>is<sp/>inContraction<sp/>point&quot;</highlight><highlight class="normal">,<sp/>inContraction);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasNewVertice<sp/>&amp;&amp;<sp/>verbose)<sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(newVertice);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasNewVertice)<sp/>{simplex[n].copy(newVertice);<sp/>simplex.<ref refid="class_simplex_1a3840674dbc694d4796b28c088da4c02e" kindref="member">evaluate</ref>(computeFunction);}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>point<sp/>has<sp/>been<sp/>accepted,<sp/>the<sp/>simplex<sp/>is<sp/>shrinks<sp/>the<sp/>simplex<sp/>onto<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;_________________&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;shrinking<sp/>...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(simplex);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shrinkSimplex(simplex);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simplex.<ref refid="class_simplex_1a3840674dbc694d4796b28c088da4c02e" kindref="member">evaluate</ref>(computeFunction);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(simplex);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(</highlight><highlight class="stringliteral">&quot;_________________&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nmParam.adjusted)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ELONGATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CONVERGENCE<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>sorts<sp/>the<sp/>simplex<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(simplex.<ref refid="class_simplex_1af9f387b740699fc83d561b06a5e8305a" kindref="member">begin</ref>(),<sp/>simplex.<ref refid="class_simplex_1a43aa87c378225a78bf764a3c049ed381" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_minimums.push_back(simplex[0].getValue());</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>((simplex[n+1].getValue()-simplex[0].getValue())/(simplex[0].getValue()+1.e-9)<sp/>&lt;<sp/>tolerance)<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a7c50c0690489629965f74c4921570ce5" kindref="member">debug</ref>(simplex);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>each<sp/>angle<sp/>of<sp/>the<sp/>hyper-triangle<sp/>have<sp/>is<sp/>large<sp/>enough<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simplex.calculateAngles();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_minima_history.push_back(simplex[0]);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_simplex_history.push_back(simplex);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(simplex);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(loop_i,<sp/></highlight><highlight class="stringliteral">&quot;iterations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>m_minimum<sp/>=<sp/>simplex[0];</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633" refid="class_minimisator_1a29123baa85c854b224ef5e93b6029c1d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_minimisator_1a29123baa85c854b224ef5e93b6029c1d" kindref="member">getMinimum</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_minimum;}</highlight></codeline>
<codeline lineno="634" refid="class_minimisator_1a3583b6db1e38e9d0342c8e417d7c67e6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_minimisator_1a3583b6db1e38e9d0342c8e417d7c67e6" kindref="member">setInitialGuess</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>init_vertice)<sp/></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>g_order<sp/>=<sp/>init_vertice.<ref refid="class_vertice_1a93b6febeec367c7c2211eb1e34dcfce4" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>m_initial_vertice.set(init_vertice);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640" refid="class_minimisator_1a1b7709cb6a248889abf24b37adf6904b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_minimisator_1a1b7709cb6a248889abf24b37adf6904b" kindref="member">setInitialSteps</ref>(<ref refid="class_vertice" kindref="compound">Vertice</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>steps)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>m_steps.set(steps);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="class_minimisator_1a32ab8b4262d7cfedcd97d3a29c9231d3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_minimisator_1a32ab8b4262d7cfedcd97d3a29c9231d3" kindref="member">simpleGrad</ref>(<ref refid="class_objective_function" kindref="compound">ObjectiveFunction</ref><sp/>&amp;<sp/>func)</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_grad_vertices.resize(g_order,<sp/>m_initial_vertice);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_weights.resize(g_order,<sp/>1.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>coeff_i<sp/>=<sp/>0;<sp/>coeff_i&lt;g_order;<sp/>++coeff_i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Vertice<sp/>test_vertice(m_initial_vertice);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>m_grad_vertices[coeff_i].resize(g_order);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>(int<sp/>step<sp/>=<sp/>0;<sp/>step&lt;m_nb_steps_grad;<sp/>step++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>before<sp/>=<sp/>func.evaluate(m_grad_vertices[coeff_i].get());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>func.<ref refid="class_objective_function_1a9eb6407e18579b7eddcffcfe55badf20" kindref="member">evaluate</ref>(m_grad_vertices[0].get());<sp/></highlight><highlight class="comment">//<sp/>Dummy<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>m_grad_vertices[coeff_i].set(coeff_i,<sp/>m_grad_vertices[coeff_i][coeff_i]+m_weights[coeff_i]*step);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>after<sp/>=<sp/>func.evaluate(m_grad_vertices[coeff_i].get());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>print(m_grad_vertices[coeff_i].get(),<sp/>before,<sp/>after,<sp/>before-after);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(before<sp/>==<sp/>after)<sp/>m_weights[coeff_i]*=10;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>else<sp/>m_weights[coeff_i]/=<sp/>after<sp/>-<sp/>before;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>pauseCo(&quot;<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print(m_weights);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670" refid="class_minimisator_1a93438ea5bc6ccb83f42d61624b25355b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance<sp/>=<sp/>1.e-3;</highlight></codeline>
<codeline lineno="671" refid="class_minimisator_1a30a70997fa0ae60c9e6599e4fc877087" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_minimisator_1a30a70997fa0ae60c9e6599e4fc877087" kindref="member">g_order</ref>;</highlight></codeline>
<codeline lineno="672" refid="class_minimisator_1a66a519bb9c01f483c54b852f2cf91e8b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_minimisator_1a66a519bb9c01f483c54b852f2cf91e8b" kindref="member">g_nb_rounds</ref>;</highlight><highlight class="comment">//<sp/>Provisoire</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673" refid="class_minimisator_1ab72a4d5cfd7537d1db6e6311c86de906" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="class_minimisator_1ab72a4d5cfd7537d1db6e6311c86de906" kindref="member">g_minimums</ref>;</highlight></codeline>
<codeline lineno="674" refid="class_minimisator_1ae67076dda7b6526d29d6c2bf3c214f73" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e" kindref="member">Vertices</ref><sp/><ref refid="class_minimisator_1ae67076dda7b6526d29d6c2bf3c214f73" kindref="member">g_minima_history</ref>;</highlight></codeline>
<codeline lineno="675" refid="class_minimisator_1af3d8f52f276c47128f48ef65d4bd8fca" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;Simplex&gt;<sp/><ref refid="class_minimisator_1af3d8f52f276c47128f48ef65d4bd8fca" kindref="member">g_simplex_history</ref>;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="678" refid="class_minimisator_1a7b6a46dc81e16c856b4c63c763a39de4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_nb_steps_grad<sp/>=<sp/>10;<sp/></highlight><highlight class="comment">//<sp/>Should<sp/>be<sp/>an<sp/>even<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679" refid="class_minimisator_1a99d6193927537f3ed81ef57fcc71d8f6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/>m_minimum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="680" refid="class_minimisator_1adca51f0f7506b810520858fe84e27a54" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/><ref refid="class_minimisator_1adca51f0f7506b810520858fe84e27a54" kindref="member">m_weights</ref>;</highlight></codeline>
<codeline lineno="681" refid="class_minimisator_1a20c98456cee55c4753571284152ad5cd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/><ref refid="class_minimisator_1a20c98456cee55c4753571284152ad5cd" kindref="member">m_steps</ref>;</highlight></codeline>
<codeline lineno="682" refid="class_minimisator_1a2c07b386ca03e3e671d76f8e1c7ef730" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vertice" kindref="compound">Vertice</ref><sp/><ref refid="class_minimisator_1a2c07b386ca03e3e671d76f8e1c7ef730" kindref="member">m_initial_vertice</ref>;</highlight></codeline>
<codeline lineno="683" refid="class_minimisator_1a6aab1f039f729a94fb43b8772e42fffe" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_spectra_alignator_8hpp_1afafb4a66ac57eb9c69b1fe6488851c4e" kindref="member">Vertices</ref><sp/><ref refid="class_minimisator_1a6aab1f039f729a94fb43b8772e42fffe" kindref="member">m_grad_vertices</ref>;</highlight></codeline>
<codeline lineno="684"><highlight class="normal">};</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_minimisator_1a30a70997fa0ae60c9e6599e4fc877087" kindref="member">Minimisator::g_order</ref><sp/>=<sp/>3;<sp/></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>first<sp/>order<sp/>calibration<sp/>+<sp/>Y<sp/>axis<sp/>scaling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_minimisator_1a66a519bb9c01f483c54b852f2cf91e8b" kindref="member">Minimisator::g_nb_rounds</ref><sp/>=<sp/>5;<sp/></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="class_spectra_alignator" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_spectra_alignator" kindref="compound">SpectraAlignator</ref></highlight></codeline>
<codeline lineno="693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="695" refid="class_spectra_alignator_1a77c3fc9994a3475f24daf5bcf8b0110e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_alignator_1a77c3fc9994a3475f24daf5bcf8b0110e" kindref="member">SpectraAlignator</ref>()<sp/>noexcept<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697" refid="class_spectra_alignator_1a1f75d38f8f9dd676b72689f8adbe3be5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_alignator" kindref="compound">SpectraAlignator</ref>(TH1*<sp/>ref)<sp/>:</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ref_spectra(ref)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="703" refid="class_spectra_alignator_1aed228999d9baba04b99e8542204e058b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_alignator_1aed228999d9baba04b99e8542204e058b" kindref="member">newAlignement</ref>(TH1*<sp/>_spectra,<sp/>TH1*<sp/>spectra_output)</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(spectra_output);<sp/></highlight><highlight class="comment">//<sp/>dummy<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/>test_spectra(_spectra);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_objective_function_chi2" kindref="compound">ObjectiveFunctionChi2</ref><sp/>func(&amp;m_ref_spectra,<sp/>&amp;test_spectra);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_minimisator" kindref="compound">Minimisator</ref><sp/>min;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>min.<ref refid="class_minimisator_1a3583b6db1e38e9d0342c8e417d7c67e6" kindref="member">setInitialGuess</ref>({0,<sp/>1,<sp/>1});</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>min.<ref refid="class_minimisator_1a1b7709cb6a248889abf24b37adf6904b" kindref="member">setInitialSteps</ref>({10,<sp/>1,<sp/>0.5});</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>min.simpleGrad(func);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>min.<ref refid="class_minimisator_1a3c467eeb96f716414dbfb6f2348c6340" kindref="member">nelderMead</ref>(func);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(min.<ref refid="class_minimisator_1a29123baa85c854b224ef5e93b6029c1d" kindref="member">getMinimum</ref>());</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717" refid="class_spectra_alignator_1a1844e2814df35c43677ed678f79fc00d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_recalibration" kindref="compound">Recalibration</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_spectra_alignator_1a1844e2814df35c43677ed678f79fc00d" kindref="member">alignSpectra</ref>(TH1*<sp/>_spectra,<sp/>TH1*<sp/>spectra_output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>degreesOfFreedom<sp/>=<sp/>3,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>energyThreshold<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(_spectra,<sp/>spectra_output,<sp/>degreesOfFreedom,<sp/>energyThreshold);<sp/></highlight><highlight class="comment">//<sp/>dummy<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_spectra.emplace_back(_spectra);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>&amp;<sp/>spectra<sp/>=<sp/>m_spectra.back();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_recals.emplace_back(Recalibration());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>&amp;<sp/>recal<sp/>=<sp/>m_recals.back();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_minimisator.emplace_back(&amp;recal);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>&amp;<sp/>minimisator<sp/>=<sp/>m_minimisator.back();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>minimisator.setDegreesOfFreedom(degreesOfFreedom);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(energyThreshold&gt;0<sp/>&amp;&amp;<sp/>energyThreshold&lt;_spectra-&gt;GetXaxis()-&gt;GetXmax())<sp/>minimisator.setThreshold(_spectra-&gt;FindBin(energyThreshold));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>std::vector&lt;std::vector&lt;std::vector&lt;double&gt;&gt;&gt;<sp/>minimisation_space;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>C_dumb<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>C_min<sp/>=<sp/>C_dumb<sp/>-<sp/>0.3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>C_max<sp/>=<sp/>C_dumb<sp/>+<sp/>0.3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>C_0<sp/>=<sp/>(C_min+C_max)/2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>C_steps<sp/>=<sp/>(C_max-C_min)/m_nb_iterations;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>a0_min<sp/>=<sp/>-1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>a0_max<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>a0_0<sp/>=<sp/>(a0_min+a0_max)/2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>a0_steps<sp/>=<sp/>(a0_max-a0_min)/m_nb_iterations;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>a1_min<sp/>=<sp/>0.98;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>a1_max<sp/>=<sp/>1.005;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>a1_0<sp/>=<sp/>(a1_min+a1_max)/2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>a1_steps<sp/>=<sp/>(a1_max-a1_min)/m_nb_iterations;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>a2_min<sp/>=<sp/>-0.00001;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>a2_max<sp/>=<sp/>0.00001;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>a2_0<sp/>=<sp/>(a2_min+a2_max)/2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>const<sp/>&amp;<sp/>a2_steps<sp/>=<sp/>(a2_max-a2_min)/m_nb_iterations;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Initialise<sp/>at<sp/>default<sp/>values<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>min_C<sp/>=<sp/>C_0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>min_a0<sp/>=<sp/>a0_0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>min_a1<sp/>=<sp/>a1_0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>min_a2<sp/>=<sp/>a2_0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>minimisator.setC(min_C);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>minimisator-&gt;a0(min_a0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>minimisator-&gt;a1(min_a1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(degreesOfFreedom&gt;3)<sp/>recal.a2(min_a2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>auto<sp/>min_chi2<sp/>=<sp/>minimisator.chi2(m_ref_spectra,<sp/>spectra);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>min_chi2<sp/>=<sp/>m_ref_spectra.chi2(spectra);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(degreesOfFreedom&gt;3)<sp/>print(min_chi2,<sp/>min_C,<sp/>min_a0,<sp/>min_a1,<sp/>min_a2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>print(min_chi2,<sp/>min_C,<sp/>min_a0,<sp/>min_a1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_chi2_spectra<sp/>=<sp/>new<sp/>TH3F(&quot;chi2&quot;,<sp/>&quot;chi2;a0;a1;C&quot;,<sp/>m_nb_iterations,a0_min,a0_max,<sp/>m_nb_iterations,a1_min,a1_max,<sp/>m_nb_iterations,C_min,C_max);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>tries<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Use<sp/>brute<sp/>force<sp/>calculation<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(m_brute_force)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>(int<sp/>C<sp/>=<sp/>0;<sp/>C&lt;m_nb_iterations;<sp/>C++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>a0<sp/>=<sp/>0;<sp/>a0&lt;m_nb_iterations;<sp/>a0++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>a1<sp/>=<sp/>0;<sp/>a1&lt;m_nb_iterations;<sp/>a1++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(degreesOfFreedom&gt;3)<sp/>for<sp/>(int<sp/>a2<sp/>=<sp/>0;<sp/>a2&lt;m_nb_iterations;<sp/>++a2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tries++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>C_value<sp/>=<sp/>C_min+C*C_steps;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>a0_value<sp/>=<sp/>a0_min+a0*a0_steps;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>a1_value<sp/>=<sp/>a1_min+a1*a1_steps;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>a2_value<sp/>=<sp/>a2_min+a2*a2_steps;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minimisator.setC(C_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>_chi2<sp/>=<sp/>minimisator.chi2(m_ref_spectra,<sp/>spectra,<sp/>Vertice({a0_value,<sp/>a1_value,<sp/>a2_value}));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_chi2_spectra-&gt;Fill(min_a0,<sp/>min_a1,<sp/>min_C);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_chi2<sp/>&lt;<sp/>min_chi2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_C<sp/><sp/>=<sp/>C_value<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_a0<sp/>=<sp/>a0_value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_a1<sp/>=<sp/>a1_value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_a2<sp/>=<sp/>a2_value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_chi2<sp/>=<sp/>_chi2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(min_chi2,<sp/>min_C,<sp/>min_a0,<sp/>min_a1,<sp/>min_a2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tries++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>C_value<sp/>=<sp/>C_min+C*C_steps;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>print(C_value,<sp/>C_min,<sp/>C,C_steps);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>a0_value<sp/>=<sp/>a0_min+a0*a0_steps;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>a1_value<sp/>=<sp/>a1_min+a1*a1_steps;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minimisator.setC(C_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minimisator-&gt;a0(a0_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minimisator-&gt;a1(a1_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>print(recal);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>double<sp/>const<sp/>&amp;<sp/>_chi2<sp/>=<sp/>minimisator.chi2_second_derivative(m_ref_spectra,<sp/>spectra,<sp/>20);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>double<sp/>const<sp/>&amp;<sp/>_chi2<sp/>=<sp/>minimisator.chi2(m_ref_spectra,<sp/>spectra);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SpectraCo<sp/>new_spectra(spectra*C_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(new_spectra[200]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_spectra.calibrateX(a1_value,<sp/>a0_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(new_spectra[200]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>_chi2<sp/>=<sp/>m_ref_spectra.chi2(new_spectra);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>print(a0_value,<sp/>a1_value,<sp/>C_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>print(a0_value,<sp/>a1_value,<sp/>C_value,<sp/>_chi2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_chi2_spectra-&gt;SetBinContent(a0,<sp/>a1,<sp/>C,<sp/>_chi2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//print(_chi2,<sp/>C_value,<sp/>a0_value,<sp/>a1_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>((int)(C_value+a0_value+a1_value)%100<sp/>==<sp/>0)<sp/>print(_chi2,<sp/>C_value,<sp/>a0_value,<sp/>a1_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_chi2<sp/>&lt;<sp/>min_chi2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_C<sp/><sp/>=<sp/>C_value<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_a0<sp/>=<sp/>a0_value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_a1<sp/>=<sp/>a1_value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_chi2<sp/>=<sp/>_chi2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;best<sp/>khi2<sp/>:&quot;,<sp/>min_chi2,<sp/>&quot;vertice<sp/>:<sp/>&quot;,<sp/>min_C,<sp/>min_a0,<sp/>min_a1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Use<sp/>minimisator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>minimisator.setMinC(C_min);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>minimisator.setMaxC(C_max);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>minimisator.setMina0(a0_min);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>minimisator.setMaxa0(a0_max);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>minimisator.setMina1(a1_min);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>minimisator.setMaxa1(a1_max);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>minimisator.setMina2(a2_min);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>minimisator.setMaxa2(a2_max);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>minimisator.minimise(m_ref_spectra,<sp/>spectra);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>print(recal);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Set<sp/>the<sp/>previously<sp/>found<sp/>minimum<sp/>values<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(degreesOfFreedom&gt;3)<sp/>print(min_chi2,<sp/>min_C,<sp/>min_a0,<sp/>min_a1,<sp/>min_a2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>print(min_chi2,<sp/>min_C,<sp/>min_a0,<sp/>min_a1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recal.a0(min_a0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recal.a1(min_a1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(degreesOfFreedom&gt;3)<sp/>recal.a2(min_a2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print(&quot;final<sp/>recal<sp/>:&quot;,<sp/>recal);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spectra.calibrateX(min_a1,<sp/>min_a0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>spectra.recalibrate(recal);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(spectra_output)<sp/>delete<sp/>spectra_output;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spectra_output<sp/>=<sp/>new<sp/>TH1F(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(spectra.name()+&quot;_recal&quot;).c_str(),<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(spectra.name()+&quot;_recal&quot;).c_str(),<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>spectra.size(),<sp/>spectra.minX(),<sp/>spectra.maxX());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;spectra.size();<sp/>bin++)<sp/>spectra_output-&gt;SetBinContent(bin,<sp/>spectra[bin]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_recals.back();</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876" refid="class_spectra_alignator_1a2aad91050c99f92c1e217d4c886db883" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_alignator_1a2aad91050c99f92c1e217d4c886db883" kindref="member">setIterations</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>iterations)<sp/>{m_nb_iterations<sp/>=<sp/>iterations;}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878" refid="class_spectra_alignator_1a6bac228fc1bc0ef5ad041966722642cd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_alignator_1a6bac228fc1bc0ef5ad041966722642cd" kindref="member">writeChi2Spectra</ref>(TFile*<sp/>file)</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>file-&gt;cd();</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>m_chi2_spectra-&gt;Write();</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884" refid="class_spectra_alignator_1a06e5ad929499d18d557fd5a37daf8897" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spectra_alignator_1a06e5ad929499d18d557fd5a37daf8897" kindref="member">setBruteForce</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>brute_force<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{m_brute_force<sp/>=<sp/>brute_force;}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="887" refid="class_spectra_alignator_1a3ad1731be89ec8af6fc61a8cbe89ba80" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_spectra_co" kindref="compound">SpectraCo</ref><sp/><ref refid="class_spectra_alignator_1a3ad1731be89ec8af6fc61a8cbe89ba80" kindref="member">m_ref_spectra</ref>;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889" refid="class_spectra_alignator_1a3ab517682bf990b44620a3db9020064e" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;SpectraCo&gt;<sp/><ref refid="class_spectra_alignator_1a3ab517682bf990b44620a3db9020064e" kindref="member">m_spectra</ref>;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;OldMinimisator&gt;<sp/>m_minimisator;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="class_spectra_alignator_1a616ff75748e686a5a9bde689b9ec6a1e" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;Recalibration&gt;<sp/><ref refid="class_spectra_alignator_1a616ff75748e686a5a9bde689b9ec6a1e" kindref="member">m_recals</ref>;</highlight></codeline>
<codeline lineno="892" refid="class_spectra_alignator_1a49faa58fd7b8c2bc3a16e0dbc11c9bbe" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="class_spectra_alignator_1a49faa58fd7b8c2bc3a16e0dbc11c9bbe" kindref="member">m_chi2s</ref>;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894" refid="class_spectra_alignator_1a5098303e559bd1051c6758b2bf6bcf1a" refkind="member"><highlight class="normal"><sp/><sp/>TH2F*<sp/>surface_chi2<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896" refid="class_spectra_alignator_1a5d2a1ca21ba9deeb943965dbdb51496a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_nb_iterations<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="897" refid="class_spectra_alignator_1a3ae8fddfa8d549fff41f095efb6a9ca4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_brute_force<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="898" refid="class_spectra_alignator_1ad36473470290fcb740440c8952e4b30e" refkind="member"><highlight class="normal"><sp/><sp/>TH3F*<sp/>m_chi2_spectra<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="899" refid="class_spectra_alignator_1ad0175cbe3edb3c577a91a728625c5cf6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_spectra_threshold<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="900"><highlight class="normal">};</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>OldMinimisator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>OldMinimisator(Recalibration<sp/>*<sp/>recal)<sp/>:<sp/>m_recal(recal)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>setC(double<sp/>const<sp/>&amp;<sp/>_C)<sp/>{m_C<sp/>=<sp/>_C;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>chi2<sp/>(SpectraCo<sp/>const<sp/>&amp;<sp/>ref_spectra,<sp/>SpectraCo<sp/>const<sp/>&amp;<sp/>spectra,<sp/>Vertice<sp/>const<sp/>&amp;<sp/>vertice)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>To<sp/>generalise<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>m_C<sp/>=<sp/>vertice[0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>param<sp/>=<sp/>1;<sp/>param&lt;vertice.size();<sp/>param++)<sp/>m_recal-&gt;setParameter(param,<sp/>vertice[param]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>chi2(ref_spectra,<sp/>spectra);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>chi2<sp/>(SpectraCo<sp/>const<sp/>&amp;<sp/>ref_spectra,<sp/>SpectraCo<sp/>const<sp/>&amp;<sp/>spectra)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>sum_errors_squared<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>print(spectra.size(),<sp/>m_spectra_threshold);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>int<sp/>const<sp/>&amp;<sp/>nb_bins_studied<sp/>=<sp/>spectra.size()-0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;spectra.size();<sp/>bin++)<sp/>if<sp/>(spectra[bin]&gt;0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>new<sp/>bin<sp/>value<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>new_bin<sp/>=<sp/>m_recal-&gt;calculate(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug(*m_recal,<sp/>new_bin,<sp/>bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>a<sp/>linear<sp/>interpolation<sp/>to<sp/>get<sp/>the<sp/>value<sp/>of<sp/>the<sp/>recalibrated<sp/>bin<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>new_value<sp/>=<sp/>spectra.interpolate(new_bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>the<sp/>error<sp/>for<sp/>this<sp/>bin<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>error<sp/>=<sp/>ref_spectra[bin]<sp/>-<sp/>m_C*new_value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Variance<sp/>of<sp/>the<sp/>bin<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>weight<sp/>=<sp/>1/spectra[bin];<sp/>//<sp/>V<sp/>=<sp/>sigma²<sp/>=<sp/>1/N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Add<sp/>the<sp/>error<sp/>to<sp/>the<sp/>total<sp/>squared<sp/>error<sp/>of<sp/>the<sp/>spectra<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_errors_squared<sp/>+=<sp/>error*error*weight;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>print(spectra[bin],<sp/>weight,<sp/>new_bin,<sp/>new_value,<sp/>error,<sp/>sum_errors_squared);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>print(sum_errors_squared/(nb_bins_studied-m_nb_freedom_degrees));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>pauseCo();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>sum_errors_squared/(nb_bins_studied-m_nb_freedom_degrees);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>chi2_second_derivative(SpectraCo<sp/>&amp;<sp/>ref_spectra,<sp/>SpectraCo<sp/>&amp;<sp/>test_spectra,<sp/>int<sp/>const<sp/>&amp;<sp/>smooth)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(!ref_spectra.derivative2())<sp/>ref_spectra.derivate2(smooth);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>ref_derder<sp/>=<sp/>*ref_spectra.derivative2();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>sum_errors_squared<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>print(test_spectra.size(),<sp/>m_spectra_threshold);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>int<sp/>const<sp/>&amp;<sp/>nb_bins_studied<sp/>=<sp/>test_spectra.size()-m_spectra_threshold;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>for<sp/>(int<sp/>bin<sp/>=<sp/>m_spectra_threshold;<sp/>bin&lt;test_spectra.size();<sp/>bin++)<sp/>if<sp/>(test_spectra[bin]&gt;0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(!test_spectra.derivative2())<sp/>test_spectra.derivate2(smooth);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>SpectraCo<sp/>derivative2_spectra(*(test_spectra.derivative2()),<sp/>*m_recal);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;test_spectra.size();<sp/>bin++)<sp/>if<sp/>(test_spectra[bin]&gt;0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Variance<sp/>of<sp/>the<sp/>bin<sp/>of<sp/>the<sp/>original<sp/>spectra<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>weight<sp/>=<sp/>1/abs(test_spectra[bin]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>the<sp/>error<sp/>for<sp/>this<sp/>bin<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>error<sp/>=<sp/>ref_derder[bin]<sp/>-<sp/>m_C*derivative2_spectra[bin];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Add<sp/>it<sp/>to<sp/>the<sp/>total<sp/>squared<sp/>error<sp/>of<sp/>the<sp/>test_spectra<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_errors_squared<sp/>+=<sp/>error*error*weight;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>sum_errors_squared/(test_spectra.size()-m_nb_freedom_degrees);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>setDegreesOfFreedom(int<sp/>const<sp/>&amp;<sp/>degrees)<sp/>{m_nb_freedom_degrees<sp/>=<sp/>degrees;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>getDegreesOfFreedom()<sp/>const<sp/>{return<sp/>m_nb_freedom_degrees;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>setMinC<sp/>(double<sp/>const<sp/>&amp;<sp/>_minC)<sp/>{m_minC<sp/>=<sp/>_minC;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>setMaxC<sp/>(double<sp/>const<sp/>&amp;<sp/>_maxC)<sp/>{m_maxC<sp/>=<sp/>_maxC;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>setMina0<sp/>(double<sp/>const<sp/>&amp;<sp/>_mina0)<sp/>{m_mina0<sp/>=<sp/>_mina0;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>setMaxa0<sp/>(double<sp/>const<sp/>&amp;<sp/>_maxa0)<sp/>{m_maxa0<sp/>=<sp/>_maxa0;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>setMina1<sp/>(double<sp/>const<sp/>&amp;<sp/>_mina1)<sp/>{m_mina1<sp/>=<sp/>_mina1;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>setMaxa1<sp/>(double<sp/>const<sp/>&amp;<sp/>_maxa1)<sp/>{m_maxa1<sp/>=<sp/>_maxa1;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>setMina2<sp/>(double<sp/>const<sp/>&amp;<sp/>_mina2)<sp/>{m_mina2<sp/>=<sp/>_mina2;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>setMaxa2<sp/>(double<sp/>const<sp/>&amp;<sp/>_maxa2)<sp/>{m_maxa2<sp/>=<sp/>_maxa2;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>setMinaSqrt<sp/>(double<sp/>const<sp/>&amp;<sp/>_minaSqrt)<sp/>{m_minaSqrt<sp/>=<sp/>_minaSqrt;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>setMaxaSqrt<sp/>(double<sp/>const<sp/>&amp;<sp/>_maxaSqrt)<sp/>{m_maxaSqrt<sp/>=<sp/>_maxaSqrt;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Vertice<sp/>minimise(SpectraCo<sp/>const<sp/>&amp;<sp/>ref_spectra,<sp/>SpectraCo<sp/>const<sp/>&amp;<sp/>spectra,<sp/>std::string<sp/>const<sp/>&amp;<sp/>method<sp/>=<sp/>&quot;nelder-mead&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(method<sp/>==<sp/>&quot;nelder-mead&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>To<sp/>generalise<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>dumb_C<sp/>=<sp/>(m_maxC+m_minC)/2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>dumb_a0<sp/>=<sp/>(m_maxa0+m_mina0)/2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>dumb_a1<sp/>=<sp/>(m_maxa1+m_mina1)/2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>auto<sp/>const<sp/>&amp;<sp/>dumb_a2<sp/>=<sp/>(m_maxa2-m_mina2)/2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Simplex<sp/>simplex<sp/>({</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertice({dumb_C,<sp/>dumb_a0,<sp/>dumb_a1}),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertice({m_minC,<sp/>m_mina0,<sp/>m_mina1}),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertice({m_maxC,<sp/>m_maxa0,<sp/>m_maxa1}),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertice({dumb_C,<sp/>m_maxa0,<sp/>m_maxa1})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;first<sp/>simplex<sp/>:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(simplex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>last_chi2<sp/>=<sp/>0;<sp/>//<sp/>First<sp/>dumb<sp/>chi2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>loop_i<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(loop_i&lt;50)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>1.a<sp/>Calculate<sp/>the<sp/>chi2<sp/>for<sp/>each<sp/>vertice<sp/>of<sp/>the<sp/>simplex<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>evaluated_values;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>&amp;<sp/>vertice<sp/>:<sp/>simplex)<sp/>evaluated_values.push_back(this<sp/>-&gt;<sp/>chi2(ref_spectra,<sp/>spectra,<sp/>vertice));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>print(&quot;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>print(&quot;evaluated_values&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>print(evaluated_values);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>dim<sp/>=<sp/>evaluated_values.size()-1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>1.b<sp/>Sorts<sp/>the<sp/>evaluated_values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>ordered_chi2s;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>ordered_indexes;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bubble_sort(evaluated_values,<sp/>ordered_indexes);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>const<sp/>&amp;<sp/>index<sp/>:<sp/>ordered_indexes)<sp/>ordered_chi2s.push_back(evaluated_values[index]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>the<sp/>centroid<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertice<sp/>centroid<sp/>(simplex.centroid(ordered_indexes));<sp/>//<sp/>centroid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>2.a<sp/>Compute<sp/>the<sp/>reflexion<sp/>point<sp/>:<sp/>centroid<sp/>+<sp/>alpha<sp/>*<sp/>(centroid-worst_vertice)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertice<sp/>reflection<sp/>(centroid<sp/>+<sp/>nmParam.alpha*(centroid<sp/>-<sp/>simplex[ordered_indexes.back()]));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>2.b<sp/>Compute<sp/>its<sp/>chi2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>eval_reflection<sp/>=<sp/>chi2(ref_spectra,<sp/>spectra,<sp/>reflection);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;eval_reflection&quot;,<sp/>eval_reflection);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(eval_reflection<sp/>&lt;<sp/>ordered_chi2s[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>//<sp/>If<sp/>chi2_1&gt;eval_reflection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>3.a<sp/>Compute<sp/>the<sp/>expansion<sp/>point<sp/>:<sp/>centroid<sp/>+<sp/>beta<sp/>*<sp/>(reflection-centroid)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertice<sp/>expansion(centroid<sp/>+<sp/>nmParam.beta*(reflection-centroid));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>3.b<sp/>Compute<sp/>its<sp/>chi2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>eval_expansion<sp/>=<sp/>chi2(ref_spectra,<sp/>spectra,<sp/>expansion);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;eval_expansion&quot;,<sp/>eval_expansion);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(eval_expansion<sp/>&lt;<sp/>eval_reflection)<sp/>simplex[ordered_indexes.back()]<sp/>=<sp/>expansion;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>simplex[ordered_indexes.back()]<sp/>=<sp/>reflection;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(eval_reflection<sp/>&lt;<sp/>ordered_chi2s[dim])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simplex[ordered_indexes.back()]<sp/>=<sp/>reflection;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(eval_reflection<sp/>&lt;<sp/>ordered_chi2s.back())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>4.a<sp/>Compute<sp/>the<sp/>outside<sp/>contraction<sp/>point<sp/>:<sp/>centroid<sp/>+<sp/>beta<sp/>*<sp/>(reflection-centroid)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertice<sp/>outsideContraction(centroid<sp/>+<sp/>nmParam.gamma*(reflection-centroid));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>4.b<sp/>Compute<sp/>its<sp/>chi2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>eval_outside_contraction<sp/>=<sp/>chi2(ref_spectra,<sp/>spectra,<sp/>outsideContraction);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;eval_outside_contraction&quot;,<sp/>eval_outside_contraction);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(eval_outside_contraction<sp/>&lt;<sp/>eval_reflection)<sp/>simplex[ordered_indexes.back()]<sp/>=<sp/>outsideContraction;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(ordered_chi2s[dim]<sp/>&lt;<sp/>eval_reflection)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>5.a<sp/>Compute<sp/>the<sp/>inside<sp/>contraction<sp/>point<sp/>:<sp/>centroid<sp/>+<sp/>beta<sp/>*<sp/>(reflection-centroid)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertice<sp/>insideContraction(centroid<sp/>-<sp/>nmParam.gamma*(reflection-centroid));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>5.b<sp/>Compute<sp/>its<sp/>chi2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>eval_inside_contraction<sp/>=<sp/>chi2(ref_spectra,<sp/>spectra,<sp/>insideContraction);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;eval_inside_contraction&quot;,<sp/>eval_inside_contraction);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(eval_inside_contraction<sp/>&lt;<sp/>eval_reflection)<sp/>simplex[ordered_indexes.back()]<sp/>=<sp/>insideContraction;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>6<sp/>Shrinks<sp/>the<sp/>simplex<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Simplex<sp/>tempSimplex(simplex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempSimplex[0]<sp/>=<sp/>simplex[ordered_indexes[0]];<sp/>//<sp/>this<sp/>is<sp/>the<sp/>best<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>point_i<sp/>=<sp/>1;<sp/>point_i&lt;dim+1;<sp/>point_i++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempSimplex[point_i]<sp/>=<sp/>tempSimplex[0]<sp/>+<sp/>nmParam.delta<sp/>*<sp/>(simplex[ordered_indexes[point_i]]<sp/>-<sp/>tempSimplex[0]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simplex<sp/>=<sp/>tempSimplex;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;second<sp/>simplex<sp/>:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(simplex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>&amp;<sp/>min_chi2<sp/>=<sp/>chi2(ref_spectra,<sp/>spectra,<sp/>simplex[0]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(loop_i,<sp/>min_chi2,<sp/>last_chi2,<sp/>abs((last_chi2-min_chi2)/last_chi2));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Stop<sp/>condition<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(<sp/>loop_i&gt;10<sp/>&amp;&amp;<sp/>abs((last_chi2-min_chi2)/last_chi2)<sp/>&lt;<sp/>0.001)<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_chi2<sp/>=<sp/>min_chi2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loop_i++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(loop_i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(simplex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>simplex[0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>else<sp/>return<sp/>Vertice({});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>auto<sp/>operator-&gt;()<sp/>{return<sp/>m_recal;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>setThreshold(int<sp/>const<sp/>&amp;<sp/>bin)<sp/>{m_spectra_threshold<sp/>=<sp/>bin;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>private:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Recalibration<sp/>*<sp/>m_recal<sp/>=<sp/>nullptr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>For<sp/>the<sp/>brute<sp/>force<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>m_C<sp/>=<sp/>0.0;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>For<sp/>the<sp/>minimisation<sp/>techniques<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>m_minC<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>m_maxC<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>m_mina0<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>m_maxa0<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>m_mina1<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>m_maxa1<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>m_mina2<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>m_maxa2<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>m_minaSqrt<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>m_maxaSqrt<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>struct<sp/>NelderMeadParameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>alpha<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>beta<sp/><sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>gamma<sp/>=<sp/>0.5;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>delta<sp/>=<sp/>0.8;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}<sp/>nmParam;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>int<sp/>m_nb_freedom_degrees<sp/>=<sp/>3;<sp/>//<sp/>1<sp/>:<sp/>rescaling<sp/>|<sp/>2<sp/>:<sp/>1+offset<sp/>|<sp/>3<sp/>:<sp/>1+affine<sp/>|<sp/>4<sp/>:<sp/>1+quadratic<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>int<sp/>m_spectra_threshold<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//SPECTRAALINGATOR_HPP</highlight></codeline>
    </programlisting>
    <location file="lib/Analyse/SpectraAlignator.hpp"/>
  </compounddef>
</doxygen>
