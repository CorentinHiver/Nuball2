<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="files__functions_8hpp" kind="file" language="C++">
    <compoundname>files_functions.hpp</compoundname>
    <includes refid="print_8hpp" local="yes">print.hpp</includes>
    <includes refid="string__functions_8hpp" local="yes">string_functions.hpp</includes>
    <includes refid="vector__functions_8hpp" local="yes">vector_functions.hpp</includes>
    <includes local="no">fstream</includes>
    <includes local="no">filesystem</includes>
    <includedby refid="lib_co_8hpp" local="yes">lib/libCo.hpp</includedby>
    <incdepgraph>
      <node id="8">
        <label>filesystem</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="2">
        <label>print.hpp</label>
        <link refid="print_8hpp"/>
      </node>
      <node id="7">
        <label>fstream</label>
      </node>
      <node id="1">
        <label>lib/files_functions.hpp</label>
        <link refid="files__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="6">
        <label>vector_functions.hpp</label>
        <link refid="vector__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>string_functions.hpp</label>
        <link refid="string__functions_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="45">
        <label>lib/MTObjects/MTVariable.hpp</label>
        <link refid="_m_t_variable_8hpp"/>
      </node>
      <node id="3">
        <label>lib/Analyse/Counters.hpp</label>
        <link refid="_analyse_2_counters_8hpp"/>
      </node>
      <node id="33">
        <label>lib/Classes/RWMat.hxx</label>
        <link refid="_r_w_mat_8hxx"/>
      </node>
      <node id="34">
        <label>lib/libRoot.hpp</label>
        <link refid="lib_root_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>lib/Modules/Faster2Histo.hpp</label>
        <link refid="_faster2_histo_8hpp"/>
      </node>
      <node id="26">
        <label>lib/Classes/RF_Manager.hpp</label>
        <link refid="_r_f___manager_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>lib/Classes/Manip.hpp</label>
        <link refid="_manip_8hpp"/>
      </node>
      <node id="19">
        <label>lib/MTObjects/MTFasterReader.hpp</label>
        <link refid="_m_t_faster_reader_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>lib/Classes/Nuball2Tree.hpp</label>
        <link refid="_nuball2_tree_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>lib/Classes/Gate.hpp</label>
        <link refid="_gate_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>lib/Analyse/DSSD.hpp</label>
        <link refid="_d_s_s_d_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>lib/MTObjects/MTFilesManager.hpp</label>
        <link refid="_m_t_files_manager_8hpp"/>
      </node>
      <node id="39">
        <label>lib/Classes/FasterReader.hpp</label>
        <link refid="_faster_reader_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>lib/Analyse/EventAnalyse.hpp</label>
        <link refid="_event_analyse_8hpp"/>
      </node>
      <node id="42">
        <label>lib/MTObjects/MTCounter.hpp</label>
        <link refid="_m_t_counter_8hpp"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>lib/Classes/Hit.hpp</label>
        <link refid="_hit_8hpp"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>lib/libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>lib/Classes/EventBuilder.hpp</label>
        <link refid="_event_builder_8hpp"/>
      </node>
      <node id="16">
        <label>lib/Analyse/Clovers.hpp</label>
        <link refid="_clovers_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>lib/Modules/Timewalk.hpp</label>
        <link refid="_timewalk_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>lib/Modules/CloverSpectra.hpp</label>
        <link refid="_clover_spectra_8hpp"/>
      </node>
      <node id="44">
        <label>lib/MTObjects/MTList.hpp</label>
        <link refid="_m_t_list_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>lib/MTObjects/MTTHist.hpp</label>
        <link refid="_m_t_t_hist_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lib/files_functions.hpp</label>
        <link refid="files__functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>lib/Analyse/ParisCluster.hpp</label>
        <link refid="_paris_cluster_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>lib/Classes/Counters.hpp</label>
        <link refid="_classes_2_counters_8hpp"/>
      </node>
      <node id="37">
        <label>lib/Classes/Detectors.hpp</label>
        <link refid="_detectors_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>lib/Classes/SpectraAlignator.hpp</label>
        <link refid="_spectra_alignator_8hpp"/>
      </node>
      <node id="15">
        <label>lib/Classes/Event.hpp</label>
        <link refid="_event_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>lib/Modules/Histogramor.hpp</label>
        <link refid="_histogramor_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>lib/Analyse/HistoAnalyse.hpp</label>
        <link refid="_histo_analyse_8hpp"/>
      </node>
      <node id="6">
        <label>lib/Analyse/Sorted_Event.hpp</label>
        <link refid="_sorted___event_8hpp"/>
      </node>
      <node id="10">
        <label>lib/Modules/Faster2Root.hpp</label>
        <link refid="_faster2_root_8hpp"/>
      </node>
      <node id="36">
        <label>lib/Analyse/ParisPhoswitch.hpp</label>
        <link refid="_paris_phoswitch_8hpp"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>lib/Modules/RunMatrixator.hpp</label>
        <link refid="_run_matrixator_8hpp"/>
      </node>
      <node id="8">
        <label>lib/Classes/CoincBuilder.hpp</label>
        <link refid="_coinc_builder_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>lib/Classes/Builder.hpp</label>
        <link refid="_builder_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>lib/MTObjects/MTObject.hpp</label>
        <link refid="_m_t_object_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>lib/Modules/NearLine.hpp</label>
        <link refid="_near_line_8hpp"/>
      </node>
      <node id="11">
        <label>lib/Modules/Timeshifts.hpp</label>
        <link refid="_timeshifts_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>lib/Analyse/Paris.hpp</label>
        <link refid="_paris_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>lib/Classes/Alignator.hpp</label>
        <link refid="_alignator_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>lib/Classes/FilesManager.hpp</label>
        <link refid="_files_manager_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>lib/MTObjects/MTRootReader.hpp</label>
        <link refid="_m_t_root_reader_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>lib/Modules/Calibration.hpp</label>
        <link refid="_calibration_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>lib/Classes/Performances.hpp</label>
        <link refid="_performances_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_co_data_frame" prot="public">CoDataFrame</innerclass>
    <innerclass refid="class_file" prot="public">File</innerclass>
    <innerclass refid="class_filename" prot="public">Filename</innerclass>
    <innerclass refid="class_folder" prot="public">Folder</innerclass>
    <innerclass refid="class_folders" prot="public">Folders</innerclass>
    <innerclass refid="class_path" prot="public">Path</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="files__functions_8hpp_1aaa642aa8e56dec4354f00dd45a43832f" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, float &gt;</type>
        <definition>std::map&lt;std::string, float&gt; size_file_unit</definition>
        <argsstring></argsstring>
        <name>size_file_unit</name>
        <initializer>=
{
  {&quot;o&quot;,  1.},
  {&quot;ko&quot;, 1024.},
  {&quot;Mo&quot;, 1048576.},
  {&quot;Go&quot;, 1073741824.},
  {&quot;B&quot;,  1.},
  {&quot;kB&quot;, 1024.},
  {&quot;MB&quot;, 1048576.},
  {&quot;GB&quot;, 1073741824.}
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="32" column="10" bodyfile="lib/files_functions.hpp" bodystart="32" bodyend="-1"/>
        <referencedby refid="files__functions_8hpp_1a3a01792a9cfbdd1f2b358d878559a917" compoundref="files__functions_8hpp" startline="49" endline="56">size_file</referencedby>
        <referencedby refid="files__functions_8hpp_1a30dc160962c758d9ee0aef14c8999912" compoundref="files__functions_8hpp" startline="44" endline="47">size_file_conversion</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="files__functions_8hpp_1af9990cd15a6b2f01f535dbf9b536f319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int check_new_file</definition>
        <argsstring>(std::string &amp;folderName, std::string &amp;lastFile)</argsstring>
        <name>check_new_file</name>
        <param>
          <type>std::string &amp;</type>
          <declname>folderName</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>lastFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="188" column="5" bodyfile="lib/files_functions.hpp" bodystart="188" bodyend="208"/>
        <references refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" compoundref="files__functions_8hpp" startline="89" endline="93">push_back_if_none</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1af52310dd2d55713265daa0e58dd7bf21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void create_folder_if_none</definition>
        <argsstring>(std::string const &amp;folderName)</argsstring>
        <name>create_folder_if_none</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>folderName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="114" column="6" bodyfile="lib/files_functions.hpp" bodystart="114" bodyend="126"/>
        <references refid="files__functions_8hpp_1a6d7a6f0ccbecfe41730c211f472cfcb3" compoundref="files__functions_8hpp" startline="95" endline="104">folder_exists</references>
        <references refid="_histogramor_8hpp_1ab48a2fa7184e6354788989602c8c8c29">print</references>
        <referencedby refid="class_path_1a1f94b3b7d475723ead35e54c87078ed7" compoundref="files__functions_8hpp" startline="522" endline="522">Path::make</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a321abbd0681c4da012deaf49122389c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string extension</definition>
        <argsstring>(std::string const &amp;string)</argsstring>
        <name>extension</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="20" column="13" bodyfile="lib/files_functions.hpp" bodystart="20" bodyend="20"/>
        <referencedby refid="class_files_manager_1a3aaaccb43ef036f930ffcf1ca3ea522f" compoundref="_files_manager_8hpp" startline="101" endline="134">FilesManager::addFiles</referencedby>
        <referencedby refid="class_reader_manager_1aad6665518797c9242861b43adcd385ef" compoundref="_reader_manager_8hpp" startline="67" endline="99">ReaderManager::addFiles</referencedby>
        <referencedby refid="class_reader_manager_1af440d75101cf18d9c7c1515d4c383fa3" compoundref="_reader_manager_8hpp" startline="101" endline="130">ReaderManager::addFolder</referencedby>
        <referencedby refid="class_data_file_reader_1ad7d87b772fa148a1ed228f1b7df10fa8" compoundref="_data_file_reader_8hpp" startline="96" endline="146">DataFileReader::Initialize</referencedby>
        <referencedby refid="class_faster_reader_1a949601e8d70fc3aaabe66824d22bdf69" compoundref="_faster_reader_8hpp" startline="203" endline="241">FasterReader::Initialize</referencedby>
        <referencedby refid="class_timeshifts_1ab877131bc1bd7394f55c3d46729ac9e6" compoundref="_timeshifts_8hpp" startline="1050" endline="1057">Timeshifts::setOutData</referencedby>
        <referencedby refid="class_timeshifts_1aa9f0f8cc1d96a5408f233449767ef0f6" compoundref="_timeshifts_8hpp" startline="1041" endline="1048">Timeshifts::setOutRoot</referencedby>
        <referencedby refid="class_timeshifts_1aaef5b6fdd23be94ed37a2b4e7fe47b48" compoundref="_timeshifts_8hpp" startline="638" endline="642">Timeshifts::treatFile</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a6d165da5cc41e5429a9c03c6a6c68d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool file_exists</definition>
        <argsstring>(std::string fileName)</argsstring>
        <name>file_exists</name>
        <param>
          <type>std::string</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="66" column="6" bodyfile="lib/files_functions.hpp" bodystart="66" bodyend="87"/>
        <references refid="files__functions_8hpp_1ab1e262f27aaad28944f29cd2bbde417f" compoundref="files__functions_8hpp" startline="22" endline="22">getPath</references>
        <references refid="files__functions_8hpp_1ad3a78346393c83676348f6bad34b8ce2" compoundref="files__functions_8hpp" startline="23" endline="23">removePath</references>
        <referencedby refid="class_path_1a99656cd73eb5c5fa461d7570b86eb66d" compoundref="files__functions_8hpp" startline="524" endline="531">Path::addFolder</referencedby>
        <referencedby refid="class_file_1a6b15fde4d8bb49099cdf7f27c4f36fae" compoundref="files__functions_8hpp" startline="764" endline="776">File::check</referencedby>
        <referencedby refid="class_file_1a53118ce36851cb1c6845a82f915fd8ba" compoundref="files__functions_8hpp" startline="759" endline="759">File::exists</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1afd584978228fac5fae283c12837378dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool file_is_empty</definition>
        <argsstring>(std::ifstream &amp;file)</argsstring>
        <name>file_is_empty</name>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="30" column="6" bodyfile="lib/files_functions.hpp" bodystart="30" bodyend="30"/>
        <referencedby refid="class_calibration_1a2d2a0d6276fc2c8a4b60c3801ccc16a9" compoundref="_calibration_8hpp" startline="1016" endline="1063">Calibration::load</referencedby>
        <referencedby refid="class_timeshifts_1a28163efe8d487669cf50d5f6e1060d71" compoundref="_timeshifts_8hpp" startline="348" endline="387">Timeshifts::load</referencedby>
        <referencedby refid="class_detectors_1a3d5631f8fd2770b6b3a2a178130519ad" compoundref="_detectors_8hpp" startline="220" endline="269">Detectors::readFile</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1aef043853f99e42d9dbe0dad171c38a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; findFilesWildcard</definition>
        <argsstring>(std::string const &amp;expression)</argsstring>
        <name>findFilesWildcard</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>expression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="230" column="13" bodyfile="lib/files_functions.hpp" bodystart="230" bodyend="244"/>
        <referencedby refid="files__functions_8hpp_1add17dbbceeb4bb61adb27edce70922e5" compoundref="files__functions_8hpp" startline="246" endline="250">findFilesWildcard</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1add17dbbceeb4bb61adb27edce70922e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void findFilesWildcard</definition>
        <argsstring>(std::string const &amp;expression, std::vector&lt; std::string &gt; &amp;vec)</argsstring>
        <name>findFilesWildcard</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="246" column="6" bodyfile="lib/files_functions.hpp" bodystart="246" bodyend="250"/>
        <references refid="files__functions_8hpp_1aef043853f99e42d9dbe0dad171c38a9a" compoundref="files__functions_8hpp" startline="230" endline="244">findFilesWildcard</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a6d7a6f0ccbecfe41730c211f472cfcb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool folder_exists</definition>
        <argsstring>(std::string folderName)</argsstring>
        <name>folder_exists</name>
        <param>
          <type>std::string</type>
          <declname>folderName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="95" column="6" bodyfile="lib/files_functions.hpp" bodystart="95" bodyend="104"/>
        <references refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" compoundref="files__functions_8hpp" startline="89" endline="93">push_back_if_none</references>
        <referencedby refid="files__functions_8hpp_1af52310dd2d55713265daa0e58dd7bf21" compoundref="files__functions_8hpp" startline="114" endline="126">create_folder_if_none</referencedby>
        <referencedby refid="class_path_1aecd02f464b364bc26631bcb65e44843b" compoundref="files__functions_8hpp" startline="520" endline="520">Path::exists</referencedby>
        <referencedby refid="files__functions_8hpp_1a1af9b6a86720b38a84a8b0be4e57bec7" compoundref="files__functions_8hpp" startline="106" endline="112">folder_exists</referencedby>
        <referencedby refid="class_path_1aa9b3a53718dcd8ba66d90d50b112ddb9" compoundref="files__functions_8hpp" startline="480" endline="515">Path::load</referencedby>
        <referencedby refid="class_path_1a0db652f355256181825b11d0199ed0ae" compoundref="files__functions_8hpp" startline="521" endline="521">Path::operator bool</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a1af9b6a86720b38a84a8b0be4e57bec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool folder_exists</definition>
        <argsstring>(std::string folderName, bool const &amp;verbose)</argsstring>
        <name>folder_exists</name>
        <param>
          <type>std::string</type>
          <declname>folderName</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="106" column="6" bodyfile="lib/files_functions.hpp" bodystart="106" bodyend="112"/>
        <references refid="files__functions_8hpp_1a6d7a6f0ccbecfe41730c211f472cfcb3" compoundref="files__functions_8hpp" startline="95" endline="104">folder_exists</references>
        <references refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" compoundref="files__functions_8hpp" startline="89" endline="93">push_back_if_none</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a595eecb3abc2bf6927fee1c77ea1bfa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string get_filename_at</definition>
        <argsstring>(std::string &amp;folderName, int pos)</argsstring>
        <name>get_filename_at</name>
        <param>
          <type>std::string &amp;</type>
          <declname>folderName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="145" column="13" bodyfile="lib/files_functions.hpp" bodystart="145" bodyend="161"/>
        <references refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" compoundref="files__functions_8hpp" startline="89" endline="93">push_back_if_none</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a4000ec99a26e146333e62836d01dff5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getExtension</definition>
        <argsstring>(std::string const &amp;string)</argsstring>
        <name>getExtension</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="21" column="13" bodyfile="lib/files_functions.hpp" bodystart="21" bodyend="21"/>
        <referencedby refid="class_filename_1a4f624193292726bfe15c0c16322ccd07" compoundref="files__functions_8hpp" startline="646" endline="660">Filename::fill</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1ab1e262f27aaad28944f29cd2bbde417f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getPath</definition>
        <argsstring>(std::string const &amp;string)</argsstring>
        <name>getPath</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="22" column="13" bodyfile="lib/files_functions.hpp" bodystart="22" bodyend="22"/>
        <referencedby refid="class_files_manager_1a3aaaccb43ef036f930ffcf1ca3ea522f" compoundref="_files_manager_8hpp" startline="101" endline="134">FilesManager::addFiles</referencedby>
        <referencedby refid="files__functions_8hpp_1a6d165da5cc41e5429a9c03c6a6c68d96" compoundref="files__functions_8hpp" startline="66" endline="87">file_exists</referencedby>
        <referencedby refid="class_file_1ac3774fc193239a9a83f6974e9a79f9c4" compoundref="files__functions_8hpp" startline="778" endline="791">File::fill</referencedby>
        <referencedby refid="files__functions_8hpp_1a0b4d810562e117c29ca0dda1855a02e3" compoundref="files__functions_8hpp" startline="64" endline="64">hasPath</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a0b4d810562e117c29ca0dda1855a02e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hasPath</definition>
        <argsstring>(std::string const &amp;file)</argsstring>
        <name>hasPath</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="64" column="6" bodyfile="lib/files_functions.hpp" bodystart="64" bodyend="64"/>
        <references refid="files__functions_8hpp_1ab1e262f27aaad28944f29cd2bbde417f" compoundref="files__functions_8hpp" startline="22" endline="22">getPath</references>
        <referencedby refid="class_file_1ac3774fc193239a9a83f6974e9a79f9c4" compoundref="files__functions_8hpp" startline="778" endline="791">File::fill</referencedby>
        <referencedby refid="class_filename_1a4f624193292726bfe15c0c16322ccd07" compoundref="files__functions_8hpp" startline="646" endline="660">Filename::fill</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a8c014ea676bc34e0ec57b1aeb55af4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; list_files_in_folder</definition>
        <argsstring>(std::string const &amp;foldername, std::vector&lt; std::string &gt; const &amp;extensions={&quot;*&quot;}, bool const &amp;reorder=true)</argsstring>
        <name>list_files_in_folder</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>foldername</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>extensions</declname>
          <defval>{&quot;*&quot;}</defval>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>reorder</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="163" column="13" bodyfile="lib/files_functions.hpp" bodystart="164" bodyend="186"/>
        <referencedby refid="class_files_manager_1a6d05662378bde592075237b9fa0a5168" compoundref="_files_manager_8hpp" startline="136" endline="156">FilesManager::addFolder</referencedby>
        <referencedby refid="lib_root_8hpp_1ab7f08b4e478a833328fa0fb5cebf88d2" compoundref="lib_root_8hpp" startline="933" endline="993">fuse_all_histo</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a25af8f31a8b51b38a4c2334e3901acfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; listFileReader</definition>
        <argsstring>(std::string const &amp;filename)</argsstring>
        <name>listFileReader</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="210" column="13" bodyfile="lib/files_functions.hpp" bodystart="210" bodyend="228"/>
        <references refid="_histogramor_8hpp_1ab48a2fa7184e6354788989602c8c8c29">print</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a5e105952499e9ca713d2a2fd5db3299d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nb_files_in_folder</definition>
        <argsstring>(std::string &amp;folderName)</argsstring>
        <name>nb_files_in_folder</name>
        <param>
          <type>std::string &amp;</type>
          <declname>folderName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="128" column="5" bodyfile="lib/files_functions.hpp" bodystart="128" bodyend="143"/>
        <references refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" compoundref="files__functions_8hpp" startline="89" endline="93">push_back_if_none</references>
        <referencedby refid="class_path_1a67161dbd774db3274fadc0c438b0cdf2" compoundref="files__functions_8hpp" startline="519" endline="519">Path::nbFiles</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a4241cbe111be51220d4ff2900f701ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_folder" kindref="compound">Folder</ref></type>
        <definition>Folder operator+</definition>
        <argsstring>(const char *string, Folder const &amp;folder)</argsstring>
        <name>operator+</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="class_folder" kindref="compound">Folder</ref> const &amp;</type>
          <declname>folder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="370" column="8" bodyfile="lib/files_functions.hpp" bodystart="370" bodyend="370"/>
        <references refid="class_folder_1a9d0e844868f8debec7d50659ef7d3507" compoundref="files__functions_8hpp" startline="343" endline="343">Folder::string</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a5326a7606384341a1bd2a01f15ca9b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string operator+</definition>
        <argsstring>(Path const &amp;path, Filename const &amp;filename)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="class_path" kindref="compound">Path</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="class_filename" kindref="compound">Filename</ref> const &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="799" column="13" bodyfile="lib/files_functions.hpp" bodystart="799" bodyend="799"/>
        <references refid="class_path_1a4e4d7d7670941e8ddc58261a4fac0916" compoundref="files__functions_8hpp" startline="535" endline="535">Path::get</references>
        <references refid="class_filename_1a6d397a1dc62b7bc35bf84e6e72b9bd03" compoundref="files__functions_8hpp" startline="628" endline="628">Filename::get</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1ad580345a13bcb93c84b981f67f25b899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_folder" kindref="compound">Folder</ref></type>
        <definition>Folder operator+</definition>
        <argsstring>(std::string const &amp;string, Folder const &amp;folder)</argsstring>
        <name>operator+</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="class_folder" kindref="compound">Folder</ref> const &amp;</type>
          <declname>folder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="369" column="8" bodyfile="lib/files_functions.hpp" bodystart="369" bodyend="369"/>
        <references refid="class_folder_1a9d0e844868f8debec7d50659ef7d3507" compoundref="files__functions_8hpp" startline="343" endline="343">Folder::string</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a151e488cdb2e927bd293d0e574948f43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string operator+=</definition>
        <argsstring>(std::string const &amp;string, Folder const &amp;folder)</argsstring>
        <name>operator+=</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="class_folder" kindref="compound">Folder</ref> const &amp;</type>
          <declname>folder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="372" column="13" bodyfile="lib/files_functions.hpp" bodystart="372" bodyend="372"/>
        <references refid="class_folder_1a9d0e844868f8debec7d50659ef7d3507" compoundref="files__functions_8hpp" startline="343" endline="343">Folder::string</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a159a1e5f9109960956ef172f5b862cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, File const &amp;file)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type><ref refid="class_file" kindref="compound">File</ref> const &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="801" column="1" bodyfile="lib/files_functions.hpp" bodystart="801" bodyend="805"/>
        <references refid="class_file_1a256122f7b2c78754d7c5588872428f41" compoundref="files__functions_8hpp" startline="745" endline="745">File::get</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a40dcd00c07b1ec706cecc30653522e4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, Folder const &amp;folder)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type><ref refid="class_folder" kindref="compound">Folder</ref> const &amp;</type>
          <declname>folder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="363" column="1" bodyfile="lib/files_functions.hpp" bodystart="363" bodyend="367"/>
        <references refid="class_folder_1a9d0e844868f8debec7d50659ef7d3507" compoundref="files__functions_8hpp" startline="343" endline="343">Folder::string</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1aa889cd33a4965fd9590feac2fb26b0f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, Folders const &amp;folders)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type><ref refid="class_folders" kindref="compound">Folders</ref> const &amp;</type>
          <declname>folders</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="430" column="1" bodyfile="lib/files_functions.hpp" bodystart="430" bodyend="434"/>
        <references refid="class_folders_1aab07a96e82a348fe89b817c6d7b60394" compoundref="files__functions_8hpp" startline="421" endline="421">Folders::get</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a039532c19ad3ebbe61e164a4e4f28bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, Path const &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type><ref refid="class_path" kindref="compound">Path</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="587" column="1" bodyfile="lib/files_functions.hpp" bodystart="587" bodyend="591"/>
        <references refid="class_path_1a7797092ad2d61166d4adcecff31e34bb" compoundref="files__functions_8hpp" startline="533" endline="533">Path::path</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1ad547fe8dfb968f824b36822b258b736a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, Filename const &amp;filename)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="class_filename" kindref="compound">Filename</ref> const &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="666" column="1" bodyfile="lib/files_functions.hpp" bodystart="666" bodyend="670"/>
        <references refid="class_filename_1a00a9c3c47a6c091bc1c49982c6d57233" compoundref="files__functions_8hpp" startline="631" endline="631">Filename::fullName</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a0cd4400fb967ad5f460624488d8dc211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class N</type>
          </param>
          <param>
            <type>class D</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string procent</definition>
        <argsstring>(N const &amp;n, D const &amp;d)</argsstring>
        <name>procent</name>
        <param>
          <type>N const &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>D const &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="252" column="27" bodyfile="lib/files_functions.hpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string&amp; push_back_if_none</definition>
        <argsstring>(std::string &amp;string, char const &amp;character)</argsstring>
        <name>push_back_if_none</name>
        <param>
          <type>std::string &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char const &amp;</type>
          <declname>character</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="89" column="14" bodyfile="lib/files_functions.hpp" bodystart="89" bodyend="93"/>
        <referencedby refid="class_files_manager_1a6d05662378bde592075237b9fa0a5168" compoundref="_files_manager_8hpp" startline="136" endline="156">FilesManager::addFolder</referencedby>
        <referencedby refid="files__functions_8hpp_1af9990cd15a6b2f01f535dbf9b536f319" compoundref="files__functions_8hpp" startline="188" endline="208">check_new_file</referencedby>
        <referencedby refid="files__functions_8hpp_1a6d7a6f0ccbecfe41730c211f472cfcb3" compoundref="files__functions_8hpp" startline="95" endline="104">folder_exists</referencedby>
        <referencedby refid="files__functions_8hpp_1a595eecb3abc2bf6927fee1c77ea1bfa7" compoundref="files__functions_8hpp" startline="145" endline="161">get_filename_at</referencedby>
        <referencedby refid="class_path_1aa9b3a53718dcd8ba66d90d50b112ddb9" compoundref="files__functions_8hpp" startline="480" endline="515">Path::load</referencedby>
        <referencedby refid="files__functions_8hpp_1a5e105952499e9ca713d2a2fd5db3299d" compoundref="files__functions_8hpp" startline="128" endline="143">nb_files_in_folder</referencedby>
        <referencedby refid="class_path_1aea2baf3449b7fc955e7320f851ec29e5" compoundref="files__functions_8hpp" startline="568" endline="574">Path::operator+=</referencedby>
        <referencedby refid="class_timeshifts_1a26367484f20648d7c3f5b3bbe5679ca8" compoundref="_timeshifts_8hpp" startline="1035" endline="1039">Timeshifts::setOutDir</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a658fd83a6ed34994ff0742273a3cc358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string removeExtension</definition>
        <argsstring>(std::string const &amp;string)</argsstring>
        <name>removeExtension</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="19" column="13" bodyfile="lib/files_functions.hpp" bodystart="19" bodyend="19"/>
        <referencedby refid="class_timeshifts_1ab877131bc1bd7394f55c3d46729ac9e6" compoundref="_timeshifts_8hpp" startline="1050" endline="1057">Timeshifts::setOutData</referencedby>
        <referencedby refid="class_timeshifts_1aa9f0f8cc1d96a5408f233449767ef0f6" compoundref="_timeshifts_8hpp" startline="1041" endline="1048">Timeshifts::setOutRoot</referencedby>
        <referencedby refid="class_timeshifts_1acca1130b271301c5477d4b4a23ae4e5b" compoundref="_timeshifts_8hpp" startline="389" endline="418">Timeshifts::setParameters</referencedby>
        <referencedby refid="class_run_matrixator_1aeb9889ba763858dfb65e05c3a7bb142e" compoundref="_run_matrixator_8hpp" startline="501" endline="550">RunMatrixator::Write</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1ad3a78346393c83676348f6bad34b8ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string removePath</definition>
        <argsstring>(std::string const &amp;string)</argsstring>
        <name>removePath</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="23" column="13" bodyfile="lib/files_functions.hpp" bodystart="23" bodyend="23"/>
        <referencedby refid="files__functions_8hpp_1a6d165da5cc41e5429a9c03c6a6c68d96" compoundref="files__functions_8hpp" startline="66" endline="87">file_exists</referencedby>
        <referencedby refid="class_file_1ac3774fc193239a9a83f6974e9a79f9c4" compoundref="files__functions_8hpp" startline="778" endline="791">File::fill</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a58f50a6390692cff52eef37fdaa94e56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rmPathAndExt</definition>
        <argsstring>(std::string const &amp;string)</argsstring>
        <name>rmPathAndExt</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="25" column="13" bodyfile="lib/files_functions.hpp" bodystart="25" bodyend="28"/>
        <referencedby refid="class_faster2_histo_1ac20f36c0861a3af085c9546ca1325cc6" compoundref="_faster2_histo_8hpp" startline="27" endline="31">Faster2Histo::addFile</referencedby>
        <referencedby refid="class_faster2_histo_1a8684b0b531e6369ce35bca61f4b1007a" compoundref="_faster2_histo_8hpp" startline="21" endline="26">Faster2Histo::addFolder</referencedby>
        <referencedby refid="class_filename_1a4f624193292726bfe15c0c16322ccd07" compoundref="files__functions_8hpp" startline="646" endline="660">Filename::fill</referencedby>
        <referencedby refid="class_timewalk_1abe911d2d25eefb7886fe35c41f1d61db" compoundref="_timewalk_8hpp" startline="36" endline="69">Timewalk::loadFile</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a3a01792a9cfbdd1f2b358d878559a917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float size_file</definition>
        <argsstring>(std::ifstream &amp;file, std::string const &amp;unit=&quot;o&quot;)</argsstring>
        <name>size_file</name>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
          <defval>&quot;o&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="49" column="7" bodyfile="lib/files_functions.hpp" bodystart="49" bodyend="56"/>
        <references refid="files__functions_8hpp_1aaa642aa8e56dec4354f00dd45a43832f" compoundref="files__functions_8hpp" startline="32">size_file_unit</references>
        <referencedby refid="class_files_manager_1a519d928170afd78b97573900450e8e3e" compoundref="_files_manager_8hpp" startline="44" endline="52">FilesManager::diskSize</referencedby>
        <referencedby refid="class_file_1a43e3d087ec47881811167f3a20a99cfa" compoundref="files__functions_8hpp" startline="760" endline="760">File::size</referencedby>
        <referencedby refid="files__functions_8hpp_1a125acb6325acad22f46a038e260ff4c9" compoundref="files__functions_8hpp" startline="58" endline="62">size_file</referencedby>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a125acb6325acad22f46a038e260ff4c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float size_file</definition>
        <argsstring>(std::string filename, std::string const &amp;unit=&quot;o&quot;)</argsstring>
        <name>size_file</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit</declname>
          <defval>&quot;o&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="58" column="7" bodyfile="lib/files_functions.hpp" bodystart="58" bodyend="62"/>
        <references refid="files__functions_8hpp_1a3a01792a9cfbdd1f2b358d878559a917" compoundref="files__functions_8hpp" startline="49" endline="56">size_file</references>
      </memberdef>
      <memberdef kind="function" id="files__functions_8hpp_1a30dc160962c758d9ee0aef14c8999912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float size_file_conversion</definition>
        <argsstring>(float const &amp;size, std::string const &amp;unit_i, std::string const &amp;unit_o)</argsstring>
        <name>size_file_conversion</name>
        <param>
          <type>float const &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit_i</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>unit_o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/files_functions.hpp" line="44" column="7" bodyfile="lib/files_functions.hpp" bodystart="44" bodyend="47"/>
        <references refid="files__functions_8hpp_1aaa642aa8e56dec4354f00dd45a43832f" compoundref="files__functions_8hpp" startline="32">size_file_unit</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>FILES_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FILES_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="print_8hpp" kindref="compound">print.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string__functions_8hpp" kindref="compound">string_functions.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vector__functions_8hpp" kindref="compound">vector_functions.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;filesystem&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">fs<sp/>=<sp/>std::filesystem;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#warning<sp/>(&quot;In<sp/>version<sp/>of<sp/>c++<sp/>&lt;<sp/>17,<sp/>&apos;...&apos;<sp/>fold<sp/>expression<sp/>not<sp/>defined,<sp/>and<sp/>&lt;filesystem&gt;<sp/>not<sp/>loaded.<sp/>Some<sp/>parts<sp/>of<sp/>the<sp/>code<sp/>might<sp/>not<sp/>behave<sp/>as<sp/>expected...&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>C++<sp/>17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>General<sp/>files<sp/>and<sp/>folders<sp/>manipulations<sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="files__functions_8hpp_1a658fd83a6ed34994ff0742273a3cc358" refkind="member"><highlight class="normal">std::string<sp/><ref refid="files__functions_8hpp_1a658fd83a6ed34994ff0742273a3cc358" kindref="member">removeExtension</ref><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_last_of(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/><sp/>));<sp/><sp/>}</highlight></codeline>
<codeline lineno="20" refid="files__functions_8hpp_1a321abbd0681c4da012deaf49122389c5" refkind="member"><highlight class="normal">std::string<sp/><ref refid="files__functions_8hpp_1a321abbd0681c4da012deaf49122389c5" kindref="member">extension</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(<sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_last_of(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)+1));<sp/><sp/>}</highlight></codeline>
<codeline lineno="21" refid="files__functions_8hpp_1a4000ec99a26e146333e62836d01dff5b" refkind="member"><highlight class="normal">std::string<sp/><ref refid="files__functions_8hpp_1a4000ec99a26e146333e62836d01dff5b" kindref="member">getExtension</ref><sp/><sp/><sp/><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(<sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_last_of(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)+1));<sp/><sp/>}</highlight></codeline>
<codeline lineno="22" refid="files__functions_8hpp_1ab1e262f27aaad28944f29cd2bbde417f" refkind="member"><highlight class="normal">std::string<sp/><ref refid="files__functions_8hpp_1ab1e262f27aaad28944f29cd2bbde417f" kindref="member">getPath</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(0,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_last_of(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)+1));<sp/><sp/>}</highlight></codeline>
<codeline lineno="23" refid="files__functions_8hpp_1ad3a78346393c83676348f6bad34b8ce2" refkind="member"><highlight class="normal">std::string<sp/><ref refid="files__functions_8hpp_1ad3a78346393c83676348f6bad34b8ce2" kindref="member">removePath</ref><sp/><sp/><sp/><sp/><sp/><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(<sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_last_of(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)+1));<sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="files__functions_8hpp_1a58f50a6390692cff52eef37fdaa94e56" refkind="member"><highlight class="normal">std::string<sp/><ref refid="files__functions_8hpp_1a58f50a6390692cff52eef37fdaa94e56" kindref="member">rmPathAndExt</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.substr(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_last_of(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)+1,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_last_of(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)-</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.find_last_of(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)-1));<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="files__functions_8hpp_1afd584978228fac5fae283c12837378dd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1afd584978228fac5fae283c12837378dd" kindref="member">file_is_empty</ref>(std::ifstream&amp;<sp/>file)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file.peek()<sp/>==<sp/>std::ifstream::traits_type::eof();}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="files__functions_8hpp_1aaa642aa8e56dec4354f00dd45a43832f" refkind="member"><highlight class="normal">std::map&lt;std::string,<sp/>float&gt;<sp/><ref refid="files__functions_8hpp_1aaa642aa8e56dec4354f00dd45a43832f" kindref="member">size_file_unit</ref><sp/>=</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;o&quot;</highlight><highlight class="normal">,<sp/><sp/>1.},</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;ko&quot;</highlight><highlight class="normal">,<sp/>1024.},</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Mo&quot;</highlight><highlight class="normal">,<sp/>1048576.},</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Go&quot;</highlight><highlight class="normal">,<sp/>1073741824.},</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/><sp/>1.},</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;kB&quot;</highlight><highlight class="normal">,<sp/>1024.},</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;MB&quot;</highlight><highlight class="normal">,<sp/>1048576.},</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;GB&quot;</highlight><highlight class="normal">,<sp/>1073741824.}</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="files__functions_8hpp_1a30dc160962c758d9ee0aef14c8999912" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a30dc160962c758d9ee0aef14c8999912" kindref="member">size_file_conversion</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>size,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>unit_i,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>unit_o)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size<sp/>*<sp/>(<ref refid="files__functions_8hpp_1aaa642aa8e56dec4354f00dd45a43832f" kindref="member">size_file_unit</ref>[unit_i]/<ref refid="files__functions_8hpp_1aaa642aa8e56dec4354f00dd45a43832f" kindref="member">size_file_unit</ref>[unit_o]);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="files__functions_8hpp_1a3a01792a9cfbdd1f2b358d878559a917" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a3a01792a9cfbdd1f2b358d878559a917" kindref="member">size_file</ref>(std::ifstream&amp;<sp/>file,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>unit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;o&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>init<sp/>=<sp/>file.tellg();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>file.seekg(0,<sp/>std::ios::end);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>file.tellg();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>file.seekg(init);</highlight><highlight class="comment">//<sp/>Go<sp/>back<sp/>to<sp/>inital<sp/>place<sp/>in<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ret)/<ref refid="files__functions_8hpp_1aaa642aa8e56dec4354f00dd45a43832f" kindref="member">size_file_unit</ref>[unit]);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="files__functions_8hpp_1a125acb6325acad22f46a038e260ff4c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a3a01792a9cfbdd1f2b358d878559a917" kindref="member">size_file</ref>(std::string<sp/>filename,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>unit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;o&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>f<sp/>(filename,<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a3a01792a9cfbdd1f2b358d878559a917" kindref="member">size_file</ref>(f,<sp/>unit);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="files__functions_8hpp_1a0b4d810562e117c29ca0dda1855a02e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a0b4d810562e117c29ca0dda1855a02e3" kindref="member">hasPath</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>file)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="files__functions_8hpp_1ab1e262f27aaad28944f29cd2bbde417f" kindref="member">getPath</ref>(file)<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="files__functions_8hpp_1a6d165da5cc41e5429a9c03c6a6c68d96" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a6d165da5cc41e5429a9c03c6a6c68d96" kindref="member">file_exists</ref>(std::string<sp/>fileName)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>std::string<sp/>path<sp/>=<sp/><ref refid="files__functions_8hpp_1ab1e262f27aaad28944f29cd2bbde417f" kindref="member">getPath</ref>(fileName);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/><ref refid="files__functions_8hpp_1ad3a78346393c83676348f6bad34b8ce2" kindref="member">removePath</ref>(fileName);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent<sp/>*file<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>DIR<sp/>*dp<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>dp<sp/>=<sp/>opendir(path.c_str());</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dp<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((file<sp/>=<sp/>readdir(dp)))</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(file<sp/>-&gt;<sp/>d_name,<sp/>name.c_str()))</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closedir(dp);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>closedir(dp);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" refkind="member"><highlight class="normal">std::string<sp/>&amp;<sp/><ref refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" kindref="member">push_back_if_none</ref>(std::string<sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>character)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.back()<sp/>!=<sp/>character)<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.push_back(character);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="files__functions_8hpp_1a6d7a6f0ccbecfe41730c211f472cfcb3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a6d7a6f0ccbecfe41730c211f472cfcb3" kindref="member">folder_exists</ref>(std::string<sp/>folderName)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><ref refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" kindref="member">push_back_if_none</ref>(folderName,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>DIR<sp/>*dp<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>dp<sp/>=<sp/>opendir(folderName.c_str());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>(dp<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>std::string<sp/>str<sp/>=<sp/>((dp!=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;oui&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;non&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dp)<sp/>closedir(dp);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="files__functions_8hpp_1a1af9b6a86720b38a84a8b0be4e57bec7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a6d7a6f0ccbecfe41730c211f472cfcb3" kindref="member">folder_exists</ref>(std::string<sp/>folderName,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>verbose)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" kindref="member">push_back_if_none</ref>(folderName,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="files__functions_8hpp_1a6d7a6f0ccbecfe41730c211f472cfcb3" kindref="member">folder_exists</ref>(folderName))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Folder<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>folderName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="files__functions_8hpp_1af52310dd2d55713265daa0e58dd7bf21" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1af52310dd2d55713265daa0e58dd7bf21" kindref="member">create_folder_if_none</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folderName)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(folderName==</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_histogramor_8hpp_1ab48a2fa7184e6354788989602c8c8c29" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>folder<sp/>asked<sp/>for<sp/>!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="files__functions_8hpp_1a6d7a6f0ccbecfe41730c211f472cfcb3" kindref="member">folder_exists</ref>(folderName))</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_histogramor_8hpp_1ab48a2fa7184e6354788989602c8c8c29" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Creating<sp/>folder&quot;</highlight><highlight class="normal">,<sp/>folderName);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>system((</highlight><highlight class="stringliteral">&quot;mkdir<sp/>-p<sp/>&quot;</highlight><highlight class="normal">+folderName).c_str());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="files__functions_8hpp_1a5e105952499e9ca713d2a2fd5db3299d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a5e105952499e9ca713d2a2fd5db3299d" kindref="member">nb_files_in_folder</ref>(std::string<sp/>&amp;<sp/>folderName)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" kindref="member">push_back_if_none</ref>(folderName,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>DIR<sp/>*dp<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>dp<sp/>=<sp/>opendir(folderName.c_str());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dp<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((readdir(dp)))<sp/>i++;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>closedir(dp);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="files__functions_8hpp_1a595eecb3abc2bf6927fee1c77ea1bfa7" refkind="member"><highlight class="normal">std::string<sp/><ref refid="files__functions_8hpp_1a595eecb3abc2bf6927fee1c77ea1bfa7" kindref="member">get_filename_at</ref>(std::string<sp/>&amp;<sp/>folderName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>std::string<sp/>ret;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><ref refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" kindref="member">push_back_if_none</ref>(folderName,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent<sp/>*file<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>DIR<sp/>*dp<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>dp<sp/>=<sp/>opendir(folderName.c_str());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dp<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>ret<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((file<sp/>=<sp/>readdir(dp))<sp/>&amp;&amp;<sp/>i&lt;pos)<sp/>i++;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>file<sp/>-&gt;<sp/>d_name;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>closedir(dp);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="files__functions_8hpp_1a8c014ea676bc34e0ec57b1aeb55af4c5" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="files__functions_8hpp_1a8c014ea676bc34e0ec57b1aeb55af4c5" kindref="member">list_files_in_folder</ref></highlight></codeline>
<codeline lineno="164"><highlight class="normal">(</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>foldername,<sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>extensions<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>reorder<sp/>=<sp/>true</highlight></codeline>
<codeline lineno="168"><highlight class="normal">)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent<sp/>*file<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>DIR<sp/>*dp<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>dp<sp/>=<sp/>opendir(foldername.c_str());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dp<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Folder<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>foldername<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(file<sp/>=<sp/>readdir(dp)))</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>file-&gt;d_name;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>ext<sp/>=<sp/><ref refid="files__functions_8hpp_1a321abbd0681c4da012deaf49122389c5" kindref="member">extension</ref>(name);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extensions[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="string__functions_8hpp_1a03fb03d95885354ac3c329693588097b" kindref="member">found</ref>(extensions,<sp/>ext))<sp/>ret.push_back(foldername+name);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>closedir(dp);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>file;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reorder)<sp/>std::sort(ret.begin(),<sp/>ret.end());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="files__functions_8hpp_1af9990cd15a6b2f01f535dbf9b536f319" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1af9990cd15a6b2f01f535dbf9b536f319" kindref="member">check_new_file</ref>(std::string<sp/>&amp;<sp/>folderName,<sp/>std::string<sp/>&amp;<sp/>lastFile)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" kindref="member">push_back_if_none</ref>(folderName,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>DIR<sp/>*dp<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>dp<sp/>=<sp/>opendir(folderName.c_str());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent<sp/>*file<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dp<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((file<sp/>=<sp/>readdir(dp)))</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastFile<sp/>=<sp/>file<sp/>-&gt;<sp/>d_name;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>closedir(dp);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="files__functions_8hpp_1a25af8f31a8b51b38a4c2334e3901acfc" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="files__functions_8hpp_1a25af8f31a8b51b38a4c2334e3901acfc" kindref="member">listFileReader</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>filename)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>list;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>listfile(filename,std::ios::in);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!listfile.good())</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_histogramor_8hpp_1ab48a2fa7184e6354788989602c8c8c29" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;List<sp/>file&quot;</highlight><highlight class="normal">,<sp/>filename,<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>found<sp/>!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(getline(listfile,line))</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>list.push_back(line);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="files__functions_8hpp_1aef043853f99e42d9dbe0dad171c38a9a" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="files__functions_8hpp_1aef043853f99e42d9dbe0dad171c38a9a" kindref="member">findFilesWildcard</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>expression)</highlight></codeline>
<codeline lineno="231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>glob_t<sp/>result;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glob(expression.c_str(),<sp/>GLOB_TILDE,<sp/>NULL,<sp/>&amp;result)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>result.gl_pathc;<sp/>++i)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(result.gl_pathv[i]);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>globfree(&amp;result);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="files__functions_8hpp_1add17dbbceeb4bb61adb27edce70922e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1aef043853f99e42d9dbe0dad171c38a9a" kindref="member">findFilesWildcard</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>expression,<sp/>std::vector&lt;std::string&gt;<sp/>&amp;<sp/>vec)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>files<sp/>=<sp/><ref refid="files__functions_8hpp_1aef043853f99e42d9dbe0dad171c38a9a" kindref="member">findFilesWildcard</ref>(expression);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>file<sp/>:<sp/>files)<sp/>vec.push_back(file);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="files__functions_8hpp_1a0cd4400fb967ad5f460624488d8dc211" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;<sp/>std::string<sp/><ref refid="files__functions_8hpp_1a0cd4400fb967ad5f460624488d8dc211" kindref="member">procent</ref>(N<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>n,<sp/>D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>d)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::to_string(100*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n)/</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d))+</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="258" refid="class_co_data_frame" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_co_data_frame" kindref="compound">CoDataFrame</ref></highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="261" refid="class_co_data_frame_1a8b4711944af95ac655a64d7c6ae642ad" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_co_data_frame_1a8b4711944af95ac655a64d7c6ae642ad" kindref="member">CoDataFrame</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262" refid="class_co_data_frame_1acefddf32b3e68daa5e8616c50adf670a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_co_data_frame_1acefddf32b3e68daa5e8616c50adf670a" kindref="member">CoDataFrame</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_co_data_frame_1a1aff8a5a81105e495961fe2610c60c35" kindref="member">filename</ref>,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;csv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="class_co_data_frame_1a1aff8a5a81105e495961fe2610c60c35" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_co_data_frame_1a1aff8a5a81105e495961fe2610c60c35" kindref="member">filename</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_co_data_frame_1aab49f63af655fd9bea2efb8952dfcac4" kindref="member">m_filename</ref>;}</highlight></codeline>
<codeline lineno="265" refid="class_co_data_frame_1a0bcdc865bd25f1835e17f471349e2d6f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_co_data_frame_1a0bcdc865bd25f1835e17f471349e2d6f" kindref="member">load</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_co_data_frame_1a1aff8a5a81105e495961fe2610c60c35" kindref="member">filename</ref>,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>type);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="class_co_data_frame_1a62ae554984ec74b6217dc716bff3bf06" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_co_data_frame_1a62ae554984ec74b6217dc716bff3bf06" kindref="member">operator&lt;&lt;</ref>(std::istringstream<sp/>&amp;<sp/>iss);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="270" refid="class_co_data_frame_1a00eee215324aa22e4001d8f1e09dc2b0" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;Index&gt;<sp/><ref refid="class_co_data_frame_1a00eee215324aa22e4001d8f1e09dc2b0" kindref="member">m_index</ref>;</highlight></codeline>
<codeline lineno="271" refid="class_co_data_frame_1af2798a5ea665091240b51eb2373f3c35" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;T&gt;&gt;<sp/><ref refid="class_co_data_frame_1af2798a5ea665091240b51eb2373f3c35" kindref="member">m_data</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="class_co_data_frame_1a73c25cc0f8b810b051f3e0c5c3dedfcc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_co_data_frame_1a73c25cc0f8b810b051f3e0c5c3dedfcc" kindref="member">size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="274" refid="class_co_data_frame_1a06bba67b6dee06535e14218320751c2c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_co_data_frame_1a06bba67b6dee06535e14218320751c2c" kindref="member">good</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="class_co_data_frame_1aab49f63af655fd9bea2efb8952dfcac4" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_co_data_frame_1aab49f63af655fd9bea2efb8952dfcac4" kindref="member">m_filename</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">};</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PATH<sp/>FOLDERS<sp/>AND<sp/>FILES<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="class_folder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_folder" kindref="compound">Folder</ref></highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="class_folder_1a8af69fd19ba86816c60b4c2291311eb1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folder_1a8af69fd19ba86816c60b4c2291311eb1" kindref="member">Folder</ref>(){}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="304" refid="class_folder_1acc9fce9d1c448cd7811a6b22ad900239" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folder_1acc9fce9d1c448cd7811a6b22ad900239" kindref="member">Folder</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder)<sp/>:<sp/><ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref><sp/>(folder)<sp/>{<ref refid="class_folder_1a312a16f583b00232be14746555c765bf" kindref="member">make</ref>();}</highlight></codeline>
<codeline lineno="305" refid="class_folder_1add09c34d4f536e44f1e7b20eecaa8707" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folder_1add09c34d4f536e44f1e7b20eecaa8707" kindref="member">Folder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>folder)<sp/>:<sp/><ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref><sp/>(std::<ref refid="class_folder_1a9d0e844868f8debec7d50659ef7d3507" kindref="member">string</ref>(folder))<sp/>{<ref refid="class_folder_1a312a16f583b00232be14746555c765bf" kindref="member">make</ref>();}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="class_folder_1a92aac747b89056c8dedb623529e8edec" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folder" kindref="compound">Folder</ref><sp/>&amp;<sp/><ref refid="class_folder_1a92aac747b89056c8dedb623529e8edec" kindref="member">operator=</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref><sp/>=<sp/>folder;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_folder_1a312a16f583b00232be14746555c765bf" kindref="member">make</ref>();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="class_folder_1aad6e0351add7357e1e9ebcd1f436f317" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folder" kindref="compound">Folder</ref><sp/>&amp;<sp/><ref refid="class_folder_1aad6e0351add7357e1e9ebcd1f436f317" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>folder)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>std::string(folder));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Folder<sp/>&amp;<sp/>operator+=(std::string<sp/>const<sp/>&amp;<sp/>folder)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>m_folder<sp/>+=<sp/>std::string(folder);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>*this;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="class_folder_1aab31dd7afa19f0dd45abf13e61ddfdf7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folder" kindref="compound">Folder</ref><sp/>&amp;<sp/><ref refid="class_folder_1aab31dd7afa19f0dd45abf13e61ddfdf7" kindref="member">operator+=</ref>(<ref refid="class_folder" kindref="compound">Folder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref><sp/>+=<sp/>folder.<ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Folder<sp/>&amp;<sp/>operator+=(const<sp/>char<sp/>*<sp/>folder)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>m_folder<sp/>+=<sp/>std::string(folder);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>*this;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="class_folder_1ae5e74edda681a2f533aca24d7d193ac8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_folder_1ae5e74edda681a2f533aca24d7d193ac8" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref><sp/>==<sp/>std::string(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="338" refid="class_folder_1a5a62f5e45280e944983bd162878cfe85" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_folder_1a5a62f5e45280e944983bd162878cfe85" kindref="member">operator==</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref><sp/>==<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_folder_1a9d0e844868f8debec7d50659ef7d3507" kindref="member">string</ref><sp/>;}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>operator<sp/>std::string()<sp/>const<sp/>&amp;<sp/>{return<sp/>m_folder;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="class_folder_1a095c43e75ffe4bb1586f03ec95dc5340" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>&amp;<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_folder_1aec34aa6cce9b8074a9892c3f7e2eb3c0" kindref="member">m_ok</ref><sp/><sp/><sp/><sp/>;}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="343" refid="class_folder_1a9d0e844868f8debec7d50659ef7d3507" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_folder_1a9d0e844868f8debec7d50659ef7d3507" kindref="member">string</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref>;}</highlight></codeline>
<codeline lineno="344" refid="class_folder_1a2f8343d495b891134dca56a9767127cc" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_folder_1a2f8343d495b891134dca56a9767127cc" kindref="member">string</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref>;}</highlight></codeline>
<codeline lineno="345" refid="class_folder_1a71aba0f5181775b9ed38163de1c89c0b" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_folder_1a71aba0f5181775b9ed38163de1c89c0b" kindref="member">get</ref><sp/><sp/><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref>;}</highlight></codeline>
<codeline lineno="346" refid="class_folder_1a6aa1e1ebddb2cf4198b76f17f3aa022f" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_folder_1a6aa1e1ebddb2cf4198b76f17f3aa022f" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref>;<sp/>ret.pop_back();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="class_folder_1a312a16f583b00232be14746555c765bf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_folder_1a312a16f583b00232be14746555c765bf" kindref="member">make</ref>()</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref>.size()<sp/>==<sp/>0)<sp/><ref refid="class_folder_1aec34aa6cce9b8074a9892c3f7e2eb3c0" kindref="member">m_ok</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref>.back()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/><ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref>.push_back(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_folder_1aec34aa6cce9b8074a9892c3f7e2eb3c0" kindref="member">m_ok</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="359" refid="class_folder_1aec34aa6cce9b8074a9892c3f7e2eb3c0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_folder_1aec34aa6cce9b8074a9892c3f7e2eb3c0" kindref="member">m_ok</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360" refid="class_folder_1a244869fac986f183dce6b8725cdc64de" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_folder_1a244869fac986f183dce6b8725cdc64de" kindref="member">m_folder</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal">};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="files__functions_8hpp_1a40dcd00c07b1ec706cecc30653522e4f" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="files__functions_8hpp_1a40dcd00c07b1ec706cecc30653522e4f" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/><ref refid="class_folder" kindref="compound">Folder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder)</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>folder.<ref refid="class_folder_1a9d0e844868f8debec7d50659ef7d3507" kindref="member">string</ref>();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369" refid="files__functions_8hpp_1ad580345a13bcb93c84b981f67f25b899" refkind="member"><highlight class="normal"><ref refid="class_folder" kindref="compound">Folder</ref><sp/><ref refid="files__functions_8hpp_1ad580345a13bcb93c84b981f67f25b899" kindref="member">operator+</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="class_folder" kindref="compound">Folder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+<sp/>folder.<ref refid="class_folder_1a9d0e844868f8debec7d50659ef7d3507" kindref="member">string</ref>());}</highlight></codeline>
<codeline lineno="370" refid="files__functions_8hpp_1a4241cbe111be51220d4ff2900f701ade" refkind="member"><highlight class="normal"><ref refid="class_folder" kindref="compound">Folder</ref><sp/><ref refid="files__functions_8hpp_1ad580345a13bcb93c84b981f67f25b899" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="class_folder" kindref="compound">Folder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::string(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>+<sp/>folder.<ref refid="class_folder_1a9d0e844868f8debec7d50659ef7d3507" kindref="member">string</ref>());}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="files__functions_8hpp_1a151e488cdb2e927bd293d0e574948f43" refkind="member"><highlight class="normal">std::string<sp/><ref refid="files__functions_8hpp_1a151e488cdb2e927bd293d0e574948f43" kindref="member">operator+=</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="class_folder" kindref="compound">Folder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+=<sp/>folder.<ref refid="class_folder_1a9d0e844868f8debec7d50659ef7d3507" kindref="member">string</ref>());}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="class_folders" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_folders" kindref="compound">Folders</ref></highlight></codeline>
<codeline lineno="378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="class_folders_1abb5ba77dd0b151ddc2479831740e514b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folders_1abb5ba77dd0b151ddc2479831740e514b" kindref="member">Folders</ref>(){}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="class_folders_1a8be43dfb713e9320014ff37a2e5ca5cb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folders_1a8be43dfb713e9320014ff37a2e5ca5cb" kindref="member">Folders</ref>(std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folders)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder<sp/>:<sp/>folders)<sp/>{<ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>.push_back(<ref refid="class_folder" kindref="compound">Folder</ref>(folder));}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="class_folders_1ae28297a4e83670ce6894c115e6be2592" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folders_1ae28297a4e83670ce6894c115e6be2592" kindref="member">Folders</ref>(std::vector&lt;Folder&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folders)<sp/>{<ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref><sp/>=<sp/>folders;}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="class_folders_1aa84623a40e39787329ca5ef8dbfa9d6c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folders_1aa84623a40e39787329ca5ef8dbfa9d6c" kindref="member">Folders</ref>(<ref refid="class_folders" kindref="compound">Folders</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folders)<sp/>{<sp/><ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref><sp/>=<sp/>folders.<ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>;<sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="class_folders_1a4a7246912adc54275ac8ded201c7ad3a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folders" kindref="compound">Folders</ref>&amp;<sp/><ref refid="class_folders_1a4a7246912adc54275ac8ded201c7ad3a" kindref="member">operator=</ref>(<ref refid="class_folders" kindref="compound">Folders</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folders)<sp/>{<sp/><ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref><sp/>=<sp/>folders.<ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="393" refid="class_folders_1a6757711b57054c387a2309302c216eb7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folders" kindref="compound">Folders</ref>&amp;<sp/><ref refid="class_folders_1a6757711b57054c387a2309302c216eb7" kindref="member">operator=</ref>(std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folders)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder<sp/>:<sp/>folders)<sp/>{<ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>.push_back(<ref refid="class_folder" kindref="compound">Folder</ref>(folder));}<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="class_folders_1a21778cd16e2d1dfa91886bba394a506f" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_folders_1a21778cd16e2d1dfa91886bba394a506f" kindref="member">string</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="399"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ret;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder<sp/>:<sp/><ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>)<sp/>ret+=folder.string();</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="class_folders_1a8e586d397638ccf72386fadd5d4a6df6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_folders_1a8e586d397638ccf72386fadd5d4a6df6" kindref="member">string</ref>();<sp/>}</highlight></codeline>
<codeline lineno="406" refid="class_folders_1a616485734815d9827798b56a265cdc9e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::vector&lt;Folder&gt;()<sp/>const<sp/>&amp;<sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>;}</highlight></codeline>
<codeline lineno="407" refid="class_folders_1ae627977a3c889589d2077f57554301b4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folder" kindref="compound">Folder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_folders_1ae627977a3c889589d2077f57554301b4" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>[i];}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="class_folders_1aa6c7cccbbb9de930b9a41dc42dcbb840" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_folders_1aa6c7cccbbb9de930b9a41dc42dcbb840" kindref="member">erase</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>pos)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>.erase(<ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>.begin()+pos)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);}</highlight></codeline>
<codeline lineno="410" refid="class_folders_1a035d2b31430c66fc7a8941a9d938b658" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_folders_1a035d2b31430c66fc7a8941a9d938b658" kindref="member">erase</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>pos,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_folders_1a6b8b818a0a08a010b9849573883bf189" kindref="member">size</ref>)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>.erase(<ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>.begin()+pos),<sp/><ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>.begin()+pos+<ref refid="class_folders_1a6b8b818a0a08a010b9849573883bf189" kindref="member">size</ref>);}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="class_folders_1aaa63ca280c10fc90c09cc29e38c80a02" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_folders_1aaa63ca280c10fc90c09cc29e38c80a02" kindref="member">clear</ref>()<sp/>{<ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>.resize(0);}</highlight></codeline>
<codeline lineno="413" refid="class_folders_1a9b9a8af61bcaec214ec25ec217b84ef7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folders" kindref="compound">Folders</ref><sp/>&amp;<sp/><ref refid="class_folders_1a9b9a8af61bcaec214ec25ec217b84ef7" kindref="member">resize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_folders_1a6b8b818a0a08a010b9849573883bf189" kindref="member">size</ref>)<sp/>{<ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>.resize(<ref refid="class_folders_1a6b8b818a0a08a010b9849573883bf189" kindref="member">size</ref>);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="class_folders_1a6b8b818a0a08a010b9849573883bf189" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_folders_1a6b8b818a0a08a010b9849573883bf189" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>.size();}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="class_folders_1a08d92a79fdced661ca94fb0547dfcbf2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_folders_1a08d92a79fdced661ca94fb0547dfcbf2" kindref="member">begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>.begin();}</highlight></codeline>
<codeline lineno="418" refid="class_folders_1a11de303e1a1926a03212fa4b085285ca" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_folders_1a11de303e1a1926a03212fa4b085285ca" kindref="member">end</ref><sp/><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>.end();}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="class_folders_1ac590b52776691483bd9647c18d22bd10" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_folders_1ac590b52776691483bd9647c18d22bd10" kindref="member">list</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>;}</highlight></codeline>
<codeline lineno="421" refid="class_folders_1aab07a96e82a348fe89b817c6d7b60394" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_folders_1aab07a96e82a348fe89b817c6d7b60394" kindref="member">get</ref>()</highlight><highlight class="keyword"><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>;}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="class_folders_1ab7471e5d0263ec69f2c87f184c004395" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_folders_1ab7471e5d0263ec69f2c87f184c004395" kindref="member">push_back</ref>(<ref refid="class_folder" kindref="compound">Folder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder)<sp/>{<ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>.push_back(folder);}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;Folder&gt;<sp/><ref refid="class_folders_1aeb55402a14a1b9d847838882c43dbd14" kindref="member">m_folders</ref>;</highlight></codeline>
<codeline lineno="428"><highlight class="normal">};</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="files__functions_8hpp_1aa889cd33a4965fd9590feac2fb26b0f2" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="files__functions_8hpp_1a40dcd00c07b1ec706cecc30653522e4f" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/><ref refid="class_folders" kindref="compound">Folders</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folders)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>folders.<ref refid="class_folders_1aab07a96e82a348fe89b817c6d7b60394" kindref="member">get</ref>();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="class_path" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_path" kindref="compound">Path</ref></highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="448" refid="class_path_1af26cfab021ddf49af73da3b2beca85ac" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_path_1af26cfab021ddf49af73da3b2beca85ac" kindref="member">Path</ref>(){}</highlight></codeline>
<codeline lineno="449" refid="class_path_1ac26c0c210a4c30bade6daca9c0853fc1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_path_1ac26c0c210a4c30bade6daca9c0853fc1" kindref="member">Path</ref>(<ref refid="class_path" kindref="compound">Path</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_path_1a7797092ad2d61166d4adcecff31e34bb" kindref="member">path</ref>)<sp/>:<sp/><ref refid="class_path_1aed6b8b1831e37ad107b290f828777dc2" kindref="member">m_exists</ref>(<ref refid="class_path_1a7797092ad2d61166d4adcecff31e34bb" kindref="member">path</ref>.<ref refid="class_path_1aed6b8b1831e37ad107b290f828777dc2" kindref="member">m_exists</ref>),<sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>(<ref refid="class_path_1a7797092ad2d61166d4adcecff31e34bb" kindref="member">path</ref>.<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="class_path_1ae9ae307831520e338154143243a24a67" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_path_1ae9ae307831520e338154143243a24a67" kindref="member">Path</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_path_1a7797092ad2d61166d4adcecff31e34bb" kindref="member">path</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>create<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>:<sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>(<ref refid="class_path_1a7797092ad2d61166d4adcecff31e34bb" kindref="member">path</ref>)<sp/>{<ref refid="class_path_1aa9b3a53718dcd8ba66d90d50b112ddb9" kindref="member">load</ref>(create);}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="class_path_1ac5e21de774118e980dea1c985155f110" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_path_1ac5e21de774118e980dea1c985155f110" kindref="member">Path</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_path_1a7c25cd5ebf26bf022d3477d9a42f387f" kindref="member">c_str</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>create<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>:<sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>(std::<ref refid="class_path_1aa2f2b14aafcc3fc3626c243fcc6574dc" kindref="member">string</ref>(<ref refid="class_path_1a7c25cd5ebf26bf022d3477d9a42f387f" kindref="member">c_str</ref>))<sp/>{<ref refid="class_path_1aa9b3a53718dcd8ba66d90d50b112ddb9" kindref="member">load</ref>(create);}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="458" refid="class_path_1ac40c8c627d0412be849f1e6cd4cdc556" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_path_1ac40c8c627d0412be849f1e6cd4cdc556" kindref="member">cleanPath</ref>()</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lib_co_8hpp_1a801d6a451a01953ef8cbae6feb6a3638" kindref="member">std::size_t</ref><sp/>i<sp/>=<sp/>0;<sp/>i&lt;<ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref>.<ref refid="class_folders_1a6b8b818a0a08a010b9849573883bf189" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_path_1a859f02f9224a864b541b15e8db325409" kindref="member">folder</ref><sp/>=<sp/><ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref>[i];</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_path_1a859f02f9224a864b541b15e8db325409" kindref="member">folder</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;../&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref>.<ref refid="class_folders_1aa6c7cccbbb9de930b9a41dc42dcbb840" kindref="member">erase</ref>(i);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>&quot;..&quot;<sp/>folder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;0)<sp/></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref>.<ref refid="class_folders_1aa6c7cccbbb9de930b9a41dc42dcbb840" kindref="member">erase</ref>(--i);<sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>previous<sp/>folder<sp/>that<sp/>is<sp/>&quot;cancelled&quot;<sp/>by<sp/>&quot;..&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--i;<sp/></highlight><highlight class="comment">//<sp/>Go<sp/>back<sp/>to<sp/>previous<sp/>folder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_path_1a859f02f9224a864b541b15e8db325409" kindref="member">folder</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;./&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref>.<ref refid="class_folders_1aa6c7cccbbb9de930b9a41dc42dcbb840" kindref="member">erase</ref>(i);<sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>&quot;.&quot;<sp/>folder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">+<ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref>.<ref refid="class_folders_1a21778cd16e2d1dfa91886bba394a506f" kindref="member">string</ref>();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="class_path_1aa9b3a53718dcd8ba66d90d50b112ddb9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_path_1aa9b3a53718dcd8ba66d90d50b112ddb9" kindref="member">load</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>create<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>MTOBJECT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_m_t_object_1a6fe86ce1ea64ede7e695490bceb264a3" kindref="member">MTObject::ON</ref>)<sp/>MTObject::shared_mutex.lock();</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">//MTOBJECT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref>.<ref refid="class_folders_1aaa63ca280c10fc90c09cc29e38c80a02" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>[0]==</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="comment">//<sp/>Absolute<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>[0]==</highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="comment">//<sp/>Home<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref><sp/>=<sp/><ref refid="class_path_1a08c199926ff5432cd3f35c2df4b07433" kindref="member">home</ref>()+<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="comment">//<sp/>Relative<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref><sp/>=<sp/><ref refid="class_path_1a0374de2afee27834da4adccf704d4190" kindref="member">pwd</ref>()+<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>ensure<sp/>it<sp/>finishes<sp/>with<sp/>a<sp/>&apos;/&apos;<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" kindref="member">push_back_if_none</ref>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Additionnal<sp/>information<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_path_1ac9b837b0071ab41b4b0868590786eeae" kindref="member">makeFolderList</ref>();</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>clean<sp/>the<sp/>path<sp/>of<sp/>the<sp/>./<sp/>and<sp/>../</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_path_1ac40c8c627d0412be849f1e6cd4cdc556" kindref="member">cleanPath</ref>();</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>folder<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>exist<sp/>yet<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="class_path_1aed6b8b1831e37ad107b290f828777dc2" kindref="member">m_exists</ref><sp/>=<sp/><ref refid="files__functions_8hpp_1a6d7a6f0ccbecfe41730c211f472cfcb3" kindref="member">folder_exists</ref>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>))<sp/>&amp;&amp;<sp/>create)<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_path_1a1f94b3b7d475723ead35e54c87078ed7" kindref="member">make</ref>();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="class_path_1aed6b8b1831e37ad107b290f828777dc2" kindref="member">m_exists</ref><sp/>=<sp/><ref refid="files__functions_8hpp_1a6d7a6f0ccbecfe41730c211f472cfcb3" kindref="member">folder_exists</ref>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>)))<sp/><ref refid="_histogramor_8hpp_1ab48a2fa7184e6354788989602c8c8c29" kindref="member">print</ref>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>+</highlight><highlight class="stringliteral">&quot;<sp/>doesn&apos;t<sp/>exist<sp/>!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>MTOBJECT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_m_t_object_1a6fe86ce1ea64ede7e695490bceb264a3" kindref="member">MTObject::ON</ref>)<sp/>MTObject::shared_mutex.unlock();<sp/><sp/></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">//MTOBJECT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="class_path_1ac9b837b0071ab41b4b0868590786eeae" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_path_1ac9b837b0071ab41b4b0868590786eeae" kindref="member">makeFolderList</ref>()<sp/>{<ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref><sp/>=<sp/><ref refid="string__functions_8hpp_1a44ad60b408ba7b75bdf7ae75f8d2532f" kindref="member">getList</ref>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>,</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="class_path_1a67161dbd774db3274fadc0c438b0cdf2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="class_path_1a67161dbd774db3274fadc0c438b0cdf2" kindref="member">nbFiles</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a5e105952499e9ca713d2a2fd5db3299d" kindref="member">nb_files_in_folder</ref>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>);}</highlight></codeline>
<codeline lineno="520" refid="class_path_1aecd02f464b364bc26631bcb65e44843b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_path_1aecd02f464b364bc26631bcb65e44843b" kindref="member">exists</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a6d7a6f0ccbecfe41730c211f472cfcb3" kindref="member">folder_exists</ref>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>);}</highlight></codeline>
<codeline lineno="521" refid="class_path_1a0db652f355256181825b11d0199ed0ae" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a6d7a6f0ccbecfe41730c211f472cfcb3" kindref="member">folder_exists</ref>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>);}</highlight></codeline>
<codeline lineno="522" refid="class_path_1a1f94b3b7d475723ead35e54c87078ed7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_path_1a1f94b3b7d475723ead35e54c87078ed7" kindref="member">make</ref>()<sp/>{<sp/><ref refid="files__functions_8hpp_1af52310dd2d55713265daa0e58dd7bf21" kindref="member">create_folder_if_none</ref>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_path_1aecd02f464b364bc26631bcb65e44843b" kindref="member">exists</ref>();}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="class_path_1a99656cd73eb5c5fa461d7570b86eb66d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_path" kindref="compound">Path</ref><sp/>&amp;<sp/><ref refid="class_path_1a99656cd73eb5c5fa461d7570b86eb66d" kindref="member">addFolder</ref>(<ref refid="class_folder" kindref="compound">Folder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_path_1a859f02f9224a864b541b15e8db325409" kindref="member">folder</ref>)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="files__functions_8hpp_1a6d165da5cc41e5429a9c03c6a6c68d96" kindref="member">file_exists</ref>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>+=<ref refid="class_path_1a859f02f9224a864b541b15e8db325409" kindref="member">folder</ref>.<ref refid="class_folder_1a71aba0f5181775b9ed38163de1c89c0b" kindref="member">get</ref>()))</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref>.<ref refid="class_folders_1ab7471e5d0263ec69f2c87f184c004395" kindref="member">push_back</ref>(<ref refid="class_path_1a859f02f9224a864b541b15e8db325409" kindref="member">folder</ref>.<ref refid="class_folder_1a6aa1e1ebddb2cf4198b76f17f3aa022f" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533" refid="class_path_1a7797092ad2d61166d4adcecff31e34bb" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_path_1a7797092ad2d61166d4adcecff31e34bb" kindref="member">path</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>;}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="535" refid="class_path_1a4e4d7d7670941e8ddc58261a4fac0916" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_path_1a4e4d7d7670941e8ddc58261a4fac0916" kindref="member">get</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>;}</highlight></codeline>
<codeline lineno="536" refid="class_path_1aa2f2b14aafcc3fc3626c243fcc6574dc" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_path_1aa2f2b14aafcc3fc3626c243fcc6574dc" kindref="member">string</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(<ref refid="class_path_1a4e4d7d7670941e8ddc58261a4fac0916" kindref="member">get</ref>());}</highlight></codeline>
<codeline lineno="537" refid="class_path_1a6b32e82eaa18b7d2d12bc4eac45b8a4b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string()<sp/>const<sp/>&amp;<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_path_1a4e4d7d7670941e8ddc58261a4fac0916" kindref="member">get</ref>());}</highlight></codeline>
<codeline lineno="538" refid="class_path_1a7c25cd5ebf26bf022d3477d9a42f387f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_path_1a7c25cd5ebf26bf022d3477d9a42f387f" kindref="member">c_str</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>.c_str();}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540" refid="class_path_1a6dafc9642cd2096f67ce9dc80a7a11bf" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_path_1a6dafc9642cd2096f67ce9dc80a7a11bf" kindref="member">operator+</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>addString)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>+addString);}</highlight></codeline>
<codeline lineno="541" refid="class_path_1acb9812e5cc077adf9cecd471b5397a83" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_path_1acb9812e5cc077adf9cecd471b5397a83" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>addString)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>+</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::string</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(addString));}</highlight></codeline>
<codeline lineno="542" refid="class_path_1a3d0909258a10a05b04d3c08ec42f562c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_path" kindref="compound">Path</ref><sp/><ref refid="class_path_1a3d0909258a10a05b04d3c08ec42f562c" kindref="member">operator+</ref>(<ref refid="class_folder" kindref="compound">Folder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_path_1a859f02f9224a864b541b15e8db325409" kindref="member">folder</ref>)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_1af26cfab021ddf49af73da3b2beca85ac" kindref="member">Path</ref>(<ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>+<ref refid="class_path_1a859f02f9224a864b541b15e8db325409" kindref="member">folder</ref>.<ref refid="class_folder_1a71aba0f5181775b9ed38163de1c89c0b" kindref="member">get</ref>());}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="class_path_1a145897ef8010831f6823ef7173ac4a0c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folder" kindref="compound">Folder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_path_1a145897ef8010831f6823ef7173ac4a0c" kindref="member">operator[] </ref>(<ref refid="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" kindref="member">uint</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref>[i];}</highlight></codeline>
<codeline lineno="545" refid="class_path_1a859f02f9224a864b541b15e8db325409" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folder" kindref="compound">Folder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_path_1a859f02f9224a864b541b15e8db325409" kindref="member">folder</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref>.<ref refid="class_folders_1aab07a96e82a348fe89b817c6d7b60394" kindref="member">get</ref>().back();}</highlight></codeline>
<codeline lineno="546" refid="class_path_1a34073c3753fbd7873238808f7f5a655b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_path_1a34073c3753fbd7873238808f7f5a655b" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref>.<ref refid="class_folders_1a6b8b818a0a08a010b9849573883bf189" kindref="member">size</ref>();}</highlight></codeline>
<codeline lineno="547" refid="class_path_1a6aca68097e64629ee5d1e2c02f1b85ee" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folders" kindref="compound">Folders</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_path_1a6aca68097e64629ee5d1e2c02f1b85ee" kindref="member">getFolders</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref>;}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549" refid="class_path_1a42f3cfe8b84c3e11afc5d54b47522ab3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_path" kindref="compound">Path</ref><sp/>&amp;<sp/><ref refid="class_path_1a42f3cfe8b84c3e11afc5d54b47522ab3" kindref="member">operator=</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>inputString)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref><sp/>=<sp/>inputString;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_path_1aa9b3a53718dcd8ba66d90d50b112ddb9" kindref="member">load</ref>();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="555" refid="class_path_1a5bb409bfa25a8efe99b9d07e0ea2cf7a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_path" kindref="compound">Path</ref><sp/>&amp;<sp/><ref refid="class_path_1a5bb409bfa25a8efe99b9d07e0ea2cf7a" kindref="member">operator=</ref>(<ref refid="class_path" kindref="compound">Path</ref><sp/>&amp;<sp/><ref refid="class_path_1a7797092ad2d61166d4adcecff31e34bb" kindref="member">path</ref>)<sp/></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref><sp/>=<sp/><ref refid="class_path_1a7797092ad2d61166d4adcecff31e34bb" kindref="member">path</ref>.m_path;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_path_1aa9b3a53718dcd8ba66d90d50b112ddb9" kindref="member">load</ref>();</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561" refid="class_path_1a71da17bb5e324fd092daeca8f56f81ed" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_path" kindref="compound">Path</ref><sp/>&amp;<sp/><ref refid="class_path_1a71da17bb5e324fd092daeca8f56f81ed" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_path_1a7797092ad2d61166d4adcecff31e34bb" kindref="member">path</ref>)<sp/></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref><sp/>=<sp/><ref refid="class_path_1a7797092ad2d61166d4adcecff31e34bb" kindref="member">path</ref>;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_path_1aa9b3a53718dcd8ba66d90d50b112ddb9" kindref="member">load</ref>();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568" refid="class_path_1aea2baf3449b7fc955e7320f851ec29e5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_path" kindref="compound">Path</ref><sp/>&amp;<sp/><ref refid="class_path_1aea2baf3449b7fc955e7320f851ec29e5" kindref="member">operator+=</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>addString)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str<sp/>=<sp/>addString;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="files__functions_8hpp_1a4a072faccd444b8907dffd96e6211461" kindref="member">push_back_if_none</ref>(str,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>+=str;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576" refid="class_path_1a104457a3f7fbf2dcdb86d8c5a168f344" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_path_1a104457a3f7fbf2dcdb86d8c5a168f344" kindref="member">operator==</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>cmprStr)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(cmprStr<sp/>==<sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>);}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="class_path_1a08c199926ff5432cd3f35c2df4b07433" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_path" kindref="compound">Path</ref><sp/><ref refid="class_path_1a08c199926ff5432cd3f35c2df4b07433" kindref="member">home</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_1af26cfab021ddf49af73da3b2beca85ac" kindref="member">Path</ref>(std::string(std::getenv(</highlight><highlight class="stringliteral">&quot;HOME&quot;</highlight><highlight class="normal">)));}</highlight></codeline>
<codeline lineno="579" refid="class_path_1a0374de2afee27834da4adccf704d4190" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_path" kindref="compound">Path</ref><sp/><ref refid="class_path_1a0374de2afee27834da4adccf704d4190" kindref="member">pwd</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_1af26cfab021ddf49af73da3b2beca85ac" kindref="member">Path</ref>(std::string(std::getenv(</highlight><highlight class="stringliteral">&quot;PWD&quot;</highlight><highlight class="normal">)));}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="582" refid="class_path_1aed6b8b1831e37ad107b290f828777dc2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_path_1aed6b8b1831e37ad107b290f828777dc2" kindref="member">m_exists</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583" refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_path_1ad65d90486dbdf36c2759a7285f4e3a80" kindref="member">m_path</ref>;</highlight></codeline>
<codeline lineno="584" refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folders" kindref="compound">Folders</ref><sp/><ref refid="class_path_1a3f8c60121763c0e1cca52efc144f74e1" kindref="member">m_recursive_folders</ref>;</highlight></codeline>
<codeline lineno="585"><highlight class="normal">};</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587" refid="files__functions_8hpp_1a039532c19ad3ebbe61e164a4e4f28bcd" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="files__functions_8hpp_1a40dcd00c07b1ec706cecc30653522e4f" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/><ref refid="class_path" kindref="compound">Path</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>p)</highlight></codeline>
<codeline lineno="588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>p.<ref refid="class_path_1a7797092ad2d61166d4adcecff31e34bb" kindref="member">path</ref>();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="596" refid="class_filename" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_filename" kindref="compound">Filename</ref></highlight></codeline>
<codeline lineno="597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="599" refid="class_filename_1a2bba4cdf51d4f8042d55850e0699e80b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_filename_1a2bba4cdf51d4f8042d55850e0699e80b" kindref="member">Filename</ref>(){}</highlight></codeline>
<codeline lineno="600" refid="class_filename_1ac695bd1e796829d4a40c81111dd8935b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_filename_1ac695bd1e796829d4a40c81111dd8935b" kindref="member">Filename</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_filename)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_filename_1a4f624193292726bfe15c0c16322ccd07" kindref="member">fill</ref>(_filename);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605" refid="class_filename_1a81f6faf691f9eec75771b37b7d29fffc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_filename_1a81f6faf691f9eec75771b37b7d29fffc" kindref="member">Filename</ref>(<ref refid="class_filename" kindref="compound">Filename</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_filename)<sp/>:<sp/><ref refid="class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d" kindref="member">m_fullName</ref>(_filename.<ref refid="class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d" kindref="member">m_fullName</ref>),<sp/><ref refid="class_filename_1adb51101927c9d3a81522d1686464b1b5" kindref="member">m_shortName</ref>(_filename.<ref refid="class_filename_1adb51101927c9d3a81522d1686464b1b5" kindref="member">m_shortName</ref>),<sp/><ref refid="class_filename_1a8aacdd28091a89bf0e326989383770ec" kindref="member">m_extension</ref>(_filename.<ref refid="class_filename_1a8aacdd28091a89bf0e326989383770ec" kindref="member">m_extension</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607" refid="class_filename_1afc649319b4ccdeef296670531a0b4265" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_filename" kindref="compound">Filename</ref><sp/>&amp;<sp/><ref refid="class_filename_1afc649319b4ccdeef296670531a0b4265" kindref="member">operator=</ref>(<ref refid="class_filename" kindref="compound">Filename</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_filename)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d" kindref="member">m_fullName</ref><sp/>=<sp/>_filename.<ref refid="class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d" kindref="member">m_fullName</ref>;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filename_1adb51101927c9d3a81522d1686464b1b5" kindref="member">m_shortName</ref><sp/>=<sp/>_filename.<ref refid="class_filename_1adb51101927c9d3a81522d1686464b1b5" kindref="member">m_shortName</ref>;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filename_1a8aacdd28091a89bf0e326989383770ec" kindref="member">m_extension</ref><sp/>=<sp/>_filename.<ref refid="class_filename_1a8aacdd28091a89bf0e326989383770ec" kindref="member">m_extension</ref>;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615" refid="class_filename_1af717b51b864f3465eace889d46cb9ffe" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_filename" kindref="compound">Filename</ref><sp/>&amp;<sp/><ref refid="class_filename_1af717b51b864f3465eace889d46cb9ffe" kindref="member">operator=</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_filename)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_filename_1a4f624193292726bfe15c0c16322ccd07" kindref="member">fill</ref>(_filename);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621" refid="class_filename_1ac7be05fb6397494870cbeff3bb85030e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_filename" kindref="compound">Filename</ref><sp/>&amp;<sp/><ref refid="class_filename_1ac7be05fb6397494870cbeff3bb85030e" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_filename)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_filename_1a4f624193292726bfe15c0c16322ccd07" kindref="member">fill</ref>(std::string(_filename));</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627" refid="class_filename_1acb0d63ddf4b17fc590a9617a8096bd47" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string()<sp/>const<sp/>&amp;<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d" kindref="member">m_fullName</ref>;}</highlight></codeline>
<codeline lineno="628" refid="class_filename_1a6d397a1dc62b7bc35bf84e6e72b9bd03" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_filename_1a6d397a1dc62b7bc35bf84e6e72b9bd03" kindref="member">get</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d" kindref="member">m_fullName</ref>;}</highlight></codeline>
<codeline lineno="629" refid="class_filename_1a46cfb960345a190b3971553c65f702b4" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_filename_1a46cfb960345a190b3971553c65f702b4" kindref="member">string</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d" kindref="member">m_fullName</ref>;}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631" refid="class_filename_1a00a9c3c47a6c091bc1c49982c6d57233" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_filename_1a00a9c3c47a6c091bc1c49982c6d57233" kindref="member">fullName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d" kindref="member">m_fullName</ref>;}</highlight></codeline>
<codeline lineno="632" refid="class_filename_1a16a859ce80a8efeabbf8b28add13c55f" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_filename_1a16a859ce80a8efeabbf8b28add13c55f" kindref="member">shortName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_filename_1adb51101927c9d3a81522d1686464b1b5" kindref="member">m_shortName</ref>;}</highlight></codeline>
<codeline lineno="633" refid="class_filename_1a9a5a8b12e6ffac9d53e54e6410b59c02" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_filename_1a9a5a8b12e6ffac9d53e54e6410b59c02" kindref="member">extension</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_filename_1a8aacdd28091a89bf0e326989383770ec" kindref="member">m_extension</ref>;}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635" refid="class_filename_1a2d925b1dc8e2afbd09e729be3f3603b2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_filename_1a2d925b1dc8e2afbd09e729be3f3603b2" kindref="member">setExtension</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_extension)<sp/>{<ref refid="class_filename_1a8aacdd28091a89bf0e326989383770ec" kindref="member">m_extension</ref><sp/>=<sp/>new_extension;<sp/><ref refid="class_filename_1aaebbbc0d7ac17984013bffbd87d05763" kindref="member">update</ref>();}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="class_filename_1aaebbbc0d7ac17984013bffbd87d05763" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_filename_1aaebbbc0d7ac17984013bffbd87d05763" kindref="member">update</ref>()</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d" kindref="member">m_fullName</ref><sp/>=<sp/><ref refid="class_filename_1adb51101927c9d3a81522d1686464b1b5" kindref="member">m_shortName</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_filename_1a8aacdd28091a89bf0e326989383770ec" kindref="member">m_extension</ref>;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646" refid="class_filename_1a4f624193292726bfe15c0c16322ccd07" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_filename_1a4f624193292726bfe15c0c16322ccd07" kindref="member">fill</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>filename)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="files__functions_8hpp_1a0b4d810562e117c29ca0dda1855a02e3" kindref="member">hasPath</ref>(filename))<sp/>{<ref refid="_histogramor_8hpp_1ab48a2fa7184e6354788989602c8c8c29" kindref="member">print</ref>(filename,<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>not<sp/>a<sp/>filename...&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d" kindref="member">m_fullName</ref><sp/>=<sp/>filename;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_filename_1adb51101927c9d3a81522d1686464b1b5" kindref="member">m_shortName</ref><sp/>=<sp/><ref refid="files__functions_8hpp_1a58f50a6390692cff52eef37fdaa94e56" kindref="member">rmPathAndExt</ref>(filename);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_filename_1a8aacdd28091a89bf0e326989383770ec" kindref="member">m_extension</ref><sp/>=<sp/><ref refid="files__functions_8hpp_1a4000ec99a26e146333e62836d01dff5b" kindref="member">getExtension</ref>(filename);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_filename_1a8aacdd28091a89bf0e326989383770ec" kindref="member">m_extension</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_filename_1a8aacdd28091a89bf0e326989383770ec" kindref="member">m_extension</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;extension&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_filename_1aaebbbc0d7ac17984013bffbd87d05763" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="661" refid="class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_filename_1a501c8ba9c8babe9e412c8e2c3013f57d" kindref="member">m_fullName</ref>;</highlight></codeline>
<codeline lineno="662" refid="class_filename_1adb51101927c9d3a81522d1686464b1b5" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_filename_1adb51101927c9d3a81522d1686464b1b5" kindref="member">m_shortName</ref>;</highlight></codeline>
<codeline lineno="663" refid="class_filename_1a8aacdd28091a89bf0e326989383770ec" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_filename_1a8aacdd28091a89bf0e326989383770ec" kindref="member">m_extension</ref>;</highlight></codeline>
<codeline lineno="664"><highlight class="normal">};</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666" refid="files__functions_8hpp_1ad547fe8dfb968f824b36822b258b736a" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="files__functions_8hpp_1a40dcd00c07b1ec706cecc30653522e4f" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/><ref refid="class_filename" kindref="compound">Filename</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>filename)</highlight></codeline>
<codeline lineno="667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>filename.<ref refid="class_filename_1a00a9c3c47a6c091bc1c49982c6d57233" kindref="member">fullName</ref>();</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="680" refid="class_file" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_file" kindref="compound">File</ref></highlight></codeline>
<codeline lineno="681"><highlight class="normal">{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="683" refid="class_file_1ae039af5807fc385f41b60644725d15d0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_file_1ae039af5807fc385f41b60644725d15d0" kindref="member">File</ref>(){}</highlight></codeline>
<codeline lineno="684" refid="class_file_1a12a42d9d804defcc8550af0b38a1cf54" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_file_1a12a42d9d804defcc8550af0b38a1cf54" kindref="member">File</ref>(<ref refid="class_file" kindref="compound">File</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>file)<sp/>:<sp/></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_file_1ac3482b203711cc5895748f7e941f96a0" kindref="member">m_ok</ref>(file.<ref refid="class_file_1ac3482b203711cc5895748f7e941f96a0" kindref="member">m_ok</ref>)<sp/><sp/><sp/><sp/>,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>(file.<ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>),<sp/></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref>(file.<ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref>),<sp/></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref>(file.<ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref>)<sp/></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691" refid="class_file_1a5237343fec40bceaa8cf7fc7c4026426" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_file_1a5237343fec40bceaa8cf7fc7c4026426" kindref="member">File</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>file,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>mode<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1ac3774fc193239a9a83f6974e9a79f9c4" kindref="member">fill</ref>(file);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1a51dd588f64b9d77346a7865de4f2c055" kindref="member">checkMode</ref>(mode);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1a6b15fde4d8bb49099cdf7f27c4f36fae" kindref="member">check</ref>();</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698" refid="class_file_1a5304e25b296fbc6a26a56fc9f4bdbfdd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_file_1a5304e25b296fbc6a26a56fc9f4bdbfdd" kindref="member">File</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>file,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>mode<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1ac3774fc193239a9a83f6974e9a79f9c4" kindref="member">fill</ref>(file);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1a51dd588f64b9d77346a7865de4f2c055" kindref="member">checkMode</ref>(mode);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1a6b15fde4d8bb49099cdf7f27c4f36fae" kindref="member">check</ref>();</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="705" refid="class_file_1a84e9ad3641a6cff0d371dddb2ea0f73e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_file_1a84e9ad3641a6cff0d371dddb2ea0f73e" kindref="member">File</ref>(<ref refid="class_path" kindref="compound">Path</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_file_1ad1ad54af9ff70a91691eed58bdf7e76f" kindref="member">path</ref>,<sp/><ref refid="class_filename" kindref="compound">Filename</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_file_1a0860c6b771d42f74d5c3fdc3fc820332" kindref="member">filename</ref>,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>mode<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>:</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref>(<ref refid="class_file_1ad1ad54af9ff70a91691eed58bdf7e76f" kindref="member">path</ref>),<sp/></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref>(<ref refid="class_file_1a0860c6b771d42f74d5c3fdc3fc820332" kindref="member">filename</ref>)<sp/></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1a8f6a2ccec2d48112847c89541d13bc10" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1a51dd588f64b9d77346a7865de4f2c055" kindref="member">checkMode</ref>(mode);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1a6b15fde4d8bb49099cdf7f27c4f36fae" kindref="member">check</ref>();</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="class_file_1a51dd588f64b9d77346a7865de4f2c055" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_file_1a51dd588f64b9d77346a7865de4f2c055" kindref="member">checkMode</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>mode)</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal"><sp/>||<sp/>mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal"><sp/>||<sp/>mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">)<sp/><ref refid="class_file_1a29cc003db307b52a1f392e1e5bf0fb07" kindref="member">check_verif</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719" refid="class_file_1adcc058679f1c4e1b9561aa7043720ade" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_file_1adcc058679f1c4e1b9561aa7043720ade" kindref="member">c_str</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>.c_str();}</highlight></codeline>
<codeline lineno="720" refid="class_file_1aed1b1495883032cf6ad4f57e83564057" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_file_1aed1b1495883032cf6ad4f57e83564057" kindref="member">c_str</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>.c_str();}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722" refid="class_file_1a900ed41b6c4fbcec93e4306e2d8b0c35" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_file" kindref="compound">File</ref><sp/>&amp;<sp/><ref refid="class_file_1a900ed41b6c4fbcec93e4306e2d8b0c35" kindref="member">operator=</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>file)<sp/></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_file_1ac3774fc193239a9a83f6974e9a79f9c4" kindref="member">fill</ref>(file);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1a6b15fde4d8bb49099cdf7f27c4f36fae" kindref="member">check</ref>();</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="728" refid="class_file_1a731756d54a6a41c2fde1630f1b97cb78" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_file" kindref="compound">File</ref><sp/>&amp;<sp/><ref refid="class_file_1a731756d54a6a41c2fde1630f1b97cb78" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>file)<sp/></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_file_1ac3774fc193239a9a83f6974e9a79f9c4" kindref="member">fill</ref>(std::string(file));</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1a6b15fde4d8bb49099cdf7f27c4f36fae" kindref="member">check</ref>();</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="734" refid="class_file_1a9bab12c1d1eb8eb255f33d01d86d225c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_file" kindref="compound">File</ref><sp/>&amp;<sp/><ref refid="class_file_1a9bab12c1d1eb8eb255f33d01d86d225c" kindref="member">operator=</ref>(<ref refid="class_file" kindref="compound">File</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>file)<sp/></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1ac3482b203711cc5895748f7e941f96a0" kindref="member">m_ok</ref><sp/><sp/><sp/>=<sp/>file.<ref refid="class_file_1ac3482b203711cc5895748f7e941f96a0" kindref="member">m_ok</ref><sp/><sp/>;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref><sp/>=<sp/>file.<ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref><sp/>=<sp/>file.<ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref>;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref><sp/>=<sp/>file.<ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref>;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743" refid="class_file_1a481cb3fd778f11cd216ca1e68308a2a9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string()<sp/>const<sp/>&amp;<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>;}</highlight></codeline>
<codeline lineno="744" refid="class_file_1a899e6a7c528ab2824c7c584c4ee63073" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_file_1a899e6a7c528ab2824c7c584c4ee63073" kindref="member">string</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>;}</highlight></codeline>
<codeline lineno="745" refid="class_file_1a256122f7b2c78754d7c5588872428f41" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_file_1a256122f7b2c78754d7c5588872428f41" kindref="member">get</ref><sp/><sp/><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>;}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747" refid="class_file_1ad1ad54af9ff70a91691eed58bdf7e76f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_path" kindref="compound">Path</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_file_1ad1ad54af9ff70a91691eed58bdf7e76f" kindref="member">path</ref><sp/><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref>;}</highlight></codeline>
<codeline lineno="748" refid="class_file_1ae66434e6a61f2a76b09c3480bcff4fba" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folder" kindref="compound">Folder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_file_1ae66434e6a61f2a76b09c3480bcff4fba" kindref="member">folder</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref>.<ref refid="class_path_1a859f02f9224a864b541b15e8db325409" kindref="member">folder</ref>();}</highlight></codeline>
<codeline lineno="749" refid="class_file_1ab08b6536403bbea4df3adf514fa92768" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_filename" kindref="compound">Filename</ref><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_file_1ab08b6536403bbea4df3adf514fa92768" kindref="member">name</ref><sp/><sp/><sp/><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref>;}</highlight></codeline>
<codeline lineno="750" refid="class_file_1a0860c6b771d42f74d5c3fdc3fc820332" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_filename" kindref="compound">Filename</ref><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_file_1a0860c6b771d42f74d5c3fdc3fc820332" kindref="member">filename</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref>;}</highlight></codeline>
<codeline lineno="751" refid="class_file_1a4162125761930208891770416c498828" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_file_1a4162125761930208891770416c498828" kindref="member">shortName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref>.<ref refid="class_filename_1a16a859ce80a8efeabbf8b28add13c55f" kindref="member">shortName</ref>();}</highlight></codeline>
<codeline lineno="752" refid="class_file_1ac76f2f11d5ae2a206735e4c9172677e2" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_file_1ac76f2f11d5ae2a206735e4c9172677e2" kindref="member">extension</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref>.<ref refid="class_filename_1a9a5a8b12e6ffac9d53e54e6410b59c02" kindref="member">extension</ref>();}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="class_file_1af4dee1c79bf496d505633211177c6ce3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_file_1af4dee1c79bf496d505633211177c6ce3" kindref="member">setExtension</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_extension)<sp/>{<ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref>.<ref refid="class_filename_1a2d925b1dc8e2afbd09e729be3f3603b2" kindref="member">setExtension</ref>(new_extension);<sp/><ref refid="class_file_1a8f6a2ccec2d48112847c89541d13bc10" kindref="member">update</ref>();}</highlight></codeline>
<codeline lineno="755" refid="class_file_1aec78af028103207cb2ce88c0120dd4f6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_file_1aec78af028103207cb2ce88c0120dd4f6" kindref="member">makePath</ref>()<sp/>{<ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref>.<ref refid="class_path_1a1f94b3b7d475723ead35e54c87078ed7" kindref="member">make</ref>();}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757" refid="class_file_1ad621a4180e78d12a5d464d93b603d4a2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/>const<sp/>&amp;<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_file_1ac3482b203711cc5895748f7e941f96a0" kindref="member">m_ok</ref>;}</highlight></codeline>
<codeline lineno="758" refid="class_file_1a620683073a1fa00cb389e5afec3d0469" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_file_1a620683073a1fa00cb389e5afec3d0469" kindref="member">ok</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_file_1ac3482b203711cc5895748f7e941f96a0" kindref="member">m_ok</ref>;}</highlight></codeline>
<codeline lineno="759" refid="class_file_1a53118ce36851cb1c6845a82f915fd8ba" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_file_1a53118ce36851cb1c6845a82f915fd8ba" kindref="member">exists</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a6d165da5cc41e5429a9c03c6a6c68d96" kindref="member">file_exists</ref>(<ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>);}</highlight></codeline>
<codeline lineno="760" refid="class_file_1a43e3d087ec47881811167f3a20a99cfa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_file_1a43e3d087ec47881811167f3a20a99cfa" kindref="member">size</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>unit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;o&quot;</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="files__functions_8hpp_1a3a01792a9cfbdd1f2b358d878559a917" kindref="member">size_file</ref>(<ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>,<sp/>unit);}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="763" refid="class_file_1a8f6a2ccec2d48112847c89541d13bc10" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_file_1a8f6a2ccec2d48112847c89541d13bc10" kindref="member">update</ref>()<sp/>{<ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref><sp/>=<sp/><ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref>.<ref refid="class_path_1aa2f2b14aafcc3fc3626c243fcc6574dc" kindref="member">string</ref>()+<ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref>.<ref refid="class_filename_1a46cfb960345a190b3971553c65f702b4" kindref="member">string</ref>();<sp/><ref refid="class_file_1a6b15fde4d8bb49099cdf7f27c4f36fae" kindref="member">check</ref>();}</highlight></codeline>
<codeline lineno="764" refid="class_file_1a6b15fde4d8bb49099cdf7f27c4f36fae" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_file_1a6b15fde4d8bb49099cdf7f27c4f36fae" kindref="member">check</ref>()</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref>.<ref refid="class_path_1aecd02f464b364bc26631bcb65e44843b" kindref="member">exists</ref>())</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="files__functions_8hpp_1a6d165da5cc41e5429a9c03c6a6c68d96" kindref="member">file_exists</ref>(<ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>)<sp/>||<sp/>!<ref refid="class_file_1a29cc003db307b52a1f392e1e5bf0fb07" kindref="member">check_verif</ref>)<sp/><ref refid="class_file_1ac3482b203711cc5895748f7e941f96a0" kindref="member">m_ok</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<ref refid="_histogramor_8hpp_1ab48a2fa7184e6354788989602c8c8c29" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;The<sp/>file&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>,<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>unreachable<sp/>in<sp/>folder&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref>);<sp/><ref refid="class_file_1ac3482b203711cc5895748f7e941f96a0" kindref="member">m_ok</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_histogramor_8hpp_1ab48a2fa7184e6354788989602c8c8c29" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;The<sp/>path<sp/>of<sp/>the<sp/>file&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>,<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>unreachable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_file_1ac3482b203711cc5895748f7e941f96a0" kindref="member">m_ok</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778" refid="class_file_1ac3774fc193239a9a83f6974e9a79f9c4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_file_1ac3774fc193239a9a83f6974e9a79f9c4" kindref="member">fill</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>file)</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="files__functions_8hpp_1a0b4d810562e117c29ca0dda1855a02e3" kindref="member">hasPath</ref>(file))</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref><sp/>=<sp/><ref refid="files__functions_8hpp_1ab1e262f27aaad28944f29cd2bbde417f" kindref="member">getPath</ref>(file);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref><sp/>=<sp/><ref refid="files__functions_8hpp_1ad3a78346393c83676348f6bad34b8ce2" kindref="member">removePath</ref>(file);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref><sp/>=<sp/><ref refid="class_path_1a0374de2afee27834da4adccf704d4190" kindref="member">Path::pwd</ref>();</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref><sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_file_1a8f6a2ccec2d48112847c89541d13bc10" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793" refid="class_file_1ac3482b203711cc5895748f7e941f96a0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_file_1ac3482b203711cc5895748f7e941f96a0" kindref="member">m_ok</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="794" refid="class_file_1a29cc003db307b52a1f392e1e5bf0fb07" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_file_1a29cc003db307b52a1f392e1e5bf0fb07" kindref="member">check_verif</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="795" refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_file_1a36d935fccef5b644b0de60bdbc6e67b2" kindref="member">m_file</ref>;<sp/></highlight><highlight class="comment">//<sp/>Full<sp/>path<sp/>+<sp/>short<sp/>name<sp/>+<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796" refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_path" kindref="compound">Path</ref><sp/><ref refid="class_file_1a972c4ffa95d0c37406a5e1189f420064" kindref="member">m_path</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797" refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_filename" kindref="compound">Filename</ref><sp/><ref refid="class_file_1ab8b4c4873ffdc891898f877ba31b1b49" kindref="member">m_filename</ref>;</highlight><highlight class="comment">//<sp/>Name<sp/>+<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal">};</highlight></codeline>
<codeline lineno="799" refid="files__functions_8hpp_1a5326a7606384341a1bd2a01f15ca9b06" refkind="member"><highlight class="normal">std::string<sp/><ref refid="files__functions_8hpp_1ad580345a13bcb93c84b981f67f25b899" kindref="member">operator+</ref>(<ref refid="class_path" kindref="compound">Path</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>path,<sp/><ref refid="class_filename" kindref="compound">Filename</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>filename)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path.<ref refid="class_path_1a4e4d7d7670941e8ddc58261a4fac0916" kindref="member">get</ref>()<sp/>+<sp/>filename.<ref refid="class_filename_1a6d397a1dc62b7bc35bf84e6e72b9bd03" kindref="member">get</ref>();}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801" refid="files__functions_8hpp_1a159a1e5f9109960956ef172f5b862cf8" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="files__functions_8hpp_1a40dcd00c07b1ec706cecc30653522e4f" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/><ref refid="class_file" kindref="compound">File</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>file)</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>file.<ref refid="class_file_1a256122f7b2c78754d7c5588872428f41" kindref="member">get</ref>();</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//FILES_HPP</highlight></codeline>
    </programlisting>
    <location file="lib/files_functions.hpp"/>
  </compounddef>
</doxygen>
