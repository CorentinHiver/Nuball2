<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="lib_root_8hpp" kind="file" language="C++">
    <compoundname>libRoot.hpp</compoundname>
    <includes refid="lib_co_8hpp" local="yes">libCo.hpp</includes>
    <includes local="no">TAxis.h</includes>
    <includes local="no">TCanvas.h</includes>
    <includes local="no">TChain.h</includes>
    <includes local="no">TError.h</includes>
    <includes local="no">TF1.h</includes>
    <includes local="no">TF2.h</includes>
    <includes local="no">TFile.h</includes>
    <includes local="no">TFitResultPtr.h</includes>
    <includes local="no">TFitResult.h</includes>
    <includes local="no">TGraph.h</includes>
    <includes local="no">TGraphErrors.h</includes>
    <includes local="no">TH1F.h</includes>
    <includes local="no">TH1D.h</includes>
    <includes local="no">TH1S.h</includes>
    <includes local="no">TH2.h</includes>
    <includes local="no">TH2F.h</includes>
    <includes local="no">TH3I.h</includes>
    <includes local="no">TKey.h</includes>
    <includes local="no">TLeaf.h</includes>
    <includes local="no">TLegend.h</includes>
    <includes local="no">TMarker.h</includes>
    <includes local="no">TMath.h</includes>
    <includes local="no">TRandom.h</includes>
    <includes local="no">TROOT.h</includes>
    <includes local="no">TSpectrum.h</includes>
    <includes local="no">TStopwatch.h</includes>
    <includes local="no">TString.h</includes>
    <includes local="no">TStyle.h</includes>
    <includes local="no">TSystem.h</includes>
    <includes local="no">TThread.h</includes>
    <includes local="no">TTree.h</includes>
    <includes local="no">TTreeIndex.h</includes>
    <includedby refid="_analysed_spectra_8hpp" local="yes">lib/Analyse/AnalysedSpectra.hpp</includedby>
    <includedby refid="_clovers_8hpp" local="yes">lib/Analyse/Clovers.hpp</includedby>
    <includedby refid="_d_s_s_d_8hpp" local="yes">lib/Analyse/DSSD.hpp</includedby>
    <includedby refid="_paris_cluster_8hpp" local="yes">lib/Analyse/ParisCluster.hpp</includedby>
    <includedby refid="_paris_phoswitch_8hpp" local="yes">lib/Analyse/ParisPhoswitch.hpp</includedby>
    <includedby refid="_spectra_alignator_8hpp" local="yes">lib/Analyse/SpectraAlignator.hpp</includedby>
    <includedby refid="_spectra_co_8hpp" local="yes">lib/Analyse/SpectraCo.hpp</includedby>
    <includedby refid="_alignator_8hpp" local="yes">lib/Classes/Alignator.hpp</includedby>
    <includedby refid="_builder_8hpp" local="yes">lib/Classes/Builder.hpp</includedby>
    <includedby refid="_detectors_8hpp" local="yes">lib/Classes/Detectors.hpp</includedby>
    <includedby refid="_event_8hpp" local="yes">lib/Classes/Event.hpp</includedby>
    <includedby refid="_hit_8hpp" local="yes">lib/Classes/Hit.hpp</includedby>
    <includedby refid="_nuball2_tree_8hpp" local="yes">lib/Classes/Nuball2Tree.hpp</includedby>
    <includedby refid="_output_t_file_8hpp" local="yes">lib/Classes/OutputTFile.hpp</includedby>
    <includedby refid="_r_f___manager_8hpp" local="yes">lib/Classes/RF_Manager.hpp</includedby>
    <includedby refid="_r_w_mat_8hxx" local="yes">lib/Classes/RWMat.hxx</includedby>
    <includedby refid="_calibrator_8hpp" local="yes">lib/Modules/Calibrator.hpp</includedby>
    <includedby refid="_evolution_peaks_8hpp" local="yes">lib/Modules/EvolutionPeaks.hpp</includedby>
    <includedby refid="_near_line_8hpp" local="yes">lib/Modules/NearLine.hpp</includedby>
    <incdepgraph>
      <node id="19">
        <label>glob.h</label>
      </node>
      <node id="51">
        <label>TH1S.h</label>
      </node>
      <node id="24">
        <label>functional</label>
      </node>
      <node id="5">
        <label>iomanip</label>
      </node>
      <node id="28">
        <label>queue</label>
      </node>
      <node id="69">
        <label>TTreeIndex.h</label>
      </node>
      <node id="1">
        <label>lib/libRoot.hpp</label>
        <link refid="lib_root_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>filesystem</label>
      </node>
      <node id="38">
        <label>TAxis.h</label>
      </node>
      <node id="67">
        <label>TThread.h</label>
      </node>
      <node id="21">
        <label>errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>TH1D.h</label>
      </node>
      <node id="63">
        <label>TStopwatch.h</label>
      </node>
      <node id="29">
        <label>stdexcept</label>
      </node>
      <node id="27">
        <label>numeric</label>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="2">
        <label>libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>TF1.h</label>
      </node>
      <node id="3">
        <label>print.hpp</label>
        <link refid="print_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>fstream</label>
      </node>
      <node id="41">
        <label>TError.h</label>
      </node>
      <node id="65">
        <label>TStyle.h</label>
      </node>
      <node id="22">
        <label>any</label>
      </node>
      <node id="16">
        <label>files_functions.hpp</label>
        <link refid="files__functions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>random</label>
      </node>
      <node id="61">
        <label>TROOT.h</label>
      </node>
      <node id="33">
        <label>typeinfo</label>
      </node>
      <node id="37">
        <label>ctime</label>
      </node>
      <node id="40">
        <label>TChain.h</label>
      </node>
      <node id="66">
        <label>TSystem.h</label>
      </node>
      <node id="30">
        <label>stack</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="43">
        <label>TF2.h</label>
      </node>
      <node id="44">
        <label>TFile.h</label>
      </node>
      <node id="39">
        <label>TCanvas.h</label>
      </node>
      <node id="54">
        <label>TH3I.h</label>
      </node>
      <node id="55">
        <label>TKey.h</label>
      </node>
      <node id="8">
        <label>vector_functions.hpp</label>
        <link refid="vector__functions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>TSpectrum.h</label>
      </node>
      <node id="23">
        <label>array</label>
      </node>
      <node id="46">
        <label>TFitResult.h</label>
      </node>
      <node id="15">
        <label>sstream</label>
      </node>
      <node id="10">
        <label>randomCo.hpp</label>
        <link refid="random_co_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>TMarker.h</label>
      </node>
      <node id="48">
        <label>TGraphErrors.h</label>
      </node>
      <node id="52">
        <label>TH2.h</label>
      </node>
      <node id="36">
        <label>cstdlib</label>
      </node>
      <node id="49">
        <label>TH1F.h</label>
      </node>
      <node id="56">
        <label>TLeaf.h</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="12">
        <label>string_functions.hpp</label>
        <link refid="string__functions_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>unordered_map</label>
      </node>
      <node id="57">
        <label>TLegend.h</label>
      </node>
      <node id="64">
        <label>TString.h</label>
      </node>
      <node id="59">
        <label>TMath.h</label>
      </node>
      <node id="53">
        <label>TH2F.h</label>
      </node>
      <node id="26">
        <label>mutex</label>
      </node>
      <node id="35">
        <label>csignal</label>
      </node>
      <node id="31">
        <label>thread</label>
      </node>
      <node id="60">
        <label>TRandom.h</label>
      </node>
      <node id="68">
        <label>TTree.h</label>
      </node>
      <node id="9">
        <label>algorithm</label>
      </node>
      <node id="45">
        <label>TFitResultPtr.h</label>
      </node>
      <node id="13">
        <label>cstring</label>
      </node>
      <node id="47">
        <label>TGraph.h</label>
      </node>
      <node id="25">
        <label>memory</label>
      </node>
      <node id="32">
        <label>typeindex</label>
      </node>
      <node id="17">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="26">
        <label>lib/Analyse/Counters.hpp</label>
        <link refid="_analyse_2_counters_8hpp"/>
      </node>
      <node id="38">
        <label>lib/Classes/RWMat.hxx</label>
        <link refid="_r_w_mat_8hxx"/>
      </node>
      <node id="1">
        <label>lib/libRoot.hpp</label>
        <link refid="lib_root_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>lib/Modules/Faster2Histo.hpp</label>
        <link refid="_faster2_histo_8hpp"/>
      </node>
      <node id="33">
        <label>lib/Classes/RF_Manager.hpp</label>
        <link refid="_r_f___manager_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>lib/MTObjects/MTFasterReader.hpp</label>
        <link refid="_m_t_faster_reader_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>lib/Classes/Nuball2Tree.hpp</label>
        <link refid="_nuball2_tree_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>lib/Modules/EvolutionPeaks.hpp</label>
        <link refid="_evolution_peaks_8hpp"/>
      </node>
      <node id="8">
        <label>lib/Analyse/DSSD.hpp</label>
        <link refid="_d_s_s_d_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>lib/Classes/FasterReader.hpp</label>
        <link refid="_faster_reader_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>lib/Analyse/EventAnalyse.hpp</label>
        <link refid="_event_analyse_8hpp"/>
      </node>
      <node id="19">
        <label>lib/Modules/CobaltCalorimeter.hpp</label>
        <link refid="_cobalt_calorimeter_8hpp"/>
      </node>
      <node id="34">
        <label>lib/Classes/Hit.hpp</label>
        <link refid="_hit_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>lib/Classes/EventBuilder.hpp</label>
        <link refid="_event_builder_8hpp"/>
      </node>
      <node id="3">
        <label>lib/Analyse/Clovers.hpp</label>
        <link refid="_clovers_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>lib/Modules/CloverSpectra.hpp</label>
        <link refid="_clover_spectra_8hpp"/>
      </node>
      <node id="36">
        <label>lib/Classes/Fit.hpp</label>
        <link refid="_fit_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>lib/Analyse/ParisCluster.hpp</label>
        <link refid="_paris_cluster_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>lib/Classes/Calibration.hpp</label>
        <link refid="_calibration_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>lib/Classes/Counters.hpp</label>
        <link refid="_classes_2_counters_8hpp"/>
      </node>
      <node id="13">
        <label>lib/Analyse/SpectraCo.hpp</label>
        <link refid="_spectra_co_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>lib/Analyse/SpectraAlignator.hpp</label>
        <link refid="_spectra_alignator_8hpp"/>
      </node>
      <node id="25">
        <label>lib/Classes/Detectors.hpp</label>
        <link refid="_detectors_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>lib/Classes/Event.hpp</label>
        <link refid="_event_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>lib/Analyse/Sorted_Event.hpp</label>
        <link refid="_sorted___event_8hpp"/>
      </node>
      <node id="37">
        <label>lib/Classes/OutputTFile.hpp</label>
        <link refid="_output_t_file_8hpp"/>
      </node>
      <node id="17">
        <label>lib/Modules/Faster2Root.hpp</label>
        <link refid="_faster2_root_8hpp"/>
      </node>
      <node id="11">
        <label>lib/Analyse/ParisPhoswitch.hpp</label>
        <link refid="_paris_phoswitch_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>lib/Modules/RunMatrixator.hpp</label>
        <link refid="_run_matrixator_8hpp"/>
      </node>
      <node id="2">
        <label>lib/Analyse/AnalysedSpectra.hpp</label>
        <link refid="_analysed_spectra_8hpp"/>
      </node>
      <node id="22">
        <label>lib/Classes/CoincBuilder.hpp</label>
        <link refid="_coinc_builder_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>lib/Classes/Builder.hpp</label>
        <link refid="_builder_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>lib/Modules/NearLine.hpp</label>
        <link refid="_near_line_8hpp"/>
      </node>
      <node id="23">
        <label>lib/Modules/Timeshifts.hpp</label>
        <link refid="_timeshifts_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>lib/Analyse/Paris.hpp</label>
        <link refid="_paris_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>lib/Classes/Alignator.hpp</label>
        <link refid="_alignator_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>lib/Modules/Calibrator.hpp</label>
        <link refid="_calibrator_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>lib/MTObjects/MTRootReader.hpp</label>
        <link refid="_m_t_root_reader_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_biggest_peak_fitter" prot="public">BiggestPeakFitter</innerclass>
    <innerclass refid="class_peak_fitter" prot="public">PeakFitter</innerclass>
    <innerclass refid="struct_t_h_binning" prot="public">THBinning</innerclass>
    <innerclass refid="class_the_t_chain" prot="public">TheTChain</innerclass>
    <innerclass refid="class_type_root_map" prot="public">TypeRootMap</innerclass>
    <innernamespace refid="namespace_co_analyse">CoAnalyse</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lib_root_8hpp_1a42c3d6ca5f1a5f58dd1cd77f5fa79174" prot="public" static="no">
        <type>std::map&lt; std::string, TH1F * &gt;</type>
        <definition>using TH1F_map =  std::map&lt;std::string, TH1F*&gt;</definition>
        <argsstring></argsstring>
        <name>TH1F_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1116" column="1" bodyfile="lib/libRoot.hpp" bodystart="1116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_root_8hpp_1a3b73f11bc69f125e12c1d48c9ed79a6e" prot="public" static="no">
        <type>std::unique_ptr&lt; TFile &gt;</type>
        <definition>using unique_TFile =  std::unique_ptr&lt;TFile&gt;</definition>
        <argsstring></argsstring>
        <name>unique_TFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="45" column="1" bodyfile="lib/libRoot.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_root_8hpp_1a32bc45ae9358ae128c6a7d49cb343e2e" prot="public" static="no">
        <type>std::unique_ptr&lt; TH1F &gt;</type>
        <definition>using unique_TH1F =  std::unique_ptr&lt;TH1F&gt;</definition>
        <argsstring></argsstring>
        <name>unique_TH1F</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="43" column="1" bodyfile="lib/libRoot.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_root_8hpp_1ae3db658040c9c85a57d0d6a29dc94c18" prot="public" static="no">
        <type>std::unique_ptr&lt; TH2F &gt;</type>
        <definition>using unique_TH2F =  std::unique_ptr&lt;TH2F&gt;</definition>
        <argsstring></argsstring>
        <name>unique_TH2F</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="44" column="1" bodyfile="lib/libRoot.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lib_root_8hpp_1a50631b7ee8274cbc1161d2a668fdbdf3" prot="public" static="no">
        <type>std::unique_ptr&lt; TTree &gt;</type>
        <definition>using unique_tree =  std::unique_ptr&lt;TTree&gt;</definition>
        <argsstring></argsstring>
        <name>unique_tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="46" column="1" bodyfile="lib/libRoot.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="lib_root_8hpp_1ad29ed215015eb770854e597fbdabb984" prot="public" static="no" mutable="no">
        <type>class <ref refid="class_type_root_map" kindref="compound">TypeRootMap</ref></type>
        <definition>class TypeRootMap typeRootMap</definition>
        <argsstring></argsstring>
        <name>typeRootMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="411" column="12"/>
        <referencedby refid="lib_root_8hpp_1a6a5a5f0922a304bdcb88dd21a29013e7" compoundref="lib_root_8hpp" startline="417" endline="421">createBranch</referencedby>
        <referencedby refid="lib_root_8hpp_1aa47924262f908c94250a3659a3ae4f04" compoundref="lib_root_8hpp" startline="426" endline="431">createBranchArray</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lib_root_8hpp_1ae587b174d8d4d5b8e62f01491140e111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AddTH1</definition>
        <argsstring>(TH1 *histo_total, TH1 *histo)</argsstring>
        <name>AddTH1</name>
        <param>
          <type>TH1 *</type>
          <declname>histo_total</declname>
        </param>
        <param>
          <type>TH1 *</type>
          <declname>histo</declname>
        </param>
        <briefdescription>
<para>Patch to the TH1::Add method when the histograms limits are inconsistent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="101" column="6" bodyfile="lib/libRoot.hpp" bodystart="101" bodyend="109"/>
        <referencedby refid="lib_root_8hpp_1a0135527c42feb1bbb8180af21ef5229e" compoundref="lib_root_8hpp" startline="140" endline="176">AddTH1ByValue</referencedby>
        <referencedby refid="class_calibrator_1aa0fff626078ec3cd2e453c5cf6681462" compoundref="_calibrator_8hpp" startline="421" endline="720">Calibrator::peakFinder</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a6f95a95b189be45d91548ce3bfb70a55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AddTH1</definition>
        <argsstring>(TH2 *histo2, TH1 *histo1, int index, bool x=true)</argsstring>
        <name>AddTH1</name>
        <param>
          <type>TH2 *</type>
          <declname>histo2</declname>
        </param>
        <param>
          <type>TH1 *</type>
          <declname>histo1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>x</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="111" column="6" bodyfile="lib/libRoot.hpp" bodystart="111" bodyend="127"/>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a0135527c42feb1bbb8180af21ef5229e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AddTH1ByValue</definition>
        <argsstring>(TH2 *histo2, TH1 *histo1, int index, bool x=true)</argsstring>
        <name>AddTH1ByValue</name>
        <param>
          <type>TH2 *</type>
          <declname>histo2</declname>
        </param>
        <param>
          <type>TH1 *</type>
          <declname>histo1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>x</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Like AddTH1 but adjusts the binning first. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000012"><xreftitle>Todo</xreftitle><xrefdescription><para>doesn&apos;t work for some reason ...</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>histo2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>histo1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="140" column="6" bodyfile="lib/libRoot.hpp" bodystart="140" bodyend="176"/>
        <references refid="lib_root_8hpp_1ae587b174d8d4d5b8e62f01491140e111" compoundref="lib_root_8hpp" startline="101" endline="109">AddTH1</references>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1ad91e4154d55b03aec78fc49348f35db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alignator</definition>
        <argsstring>(TTree *tree, int *NewIndex)</argsstring>
        <name>alignator</name>
        <param>
          <type>TTree *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>NewIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="315" column="6" bodyfile="lib/libRoot.hpp" bodystart="315" bodyend="349"/>
        <referencedby refid="class_faster2_root_1a2ba93a4814723b6103dc25a701f3dc89" compoundref="_faster2_root_8hpp" startline="309" endline="403">Faster2Root::convertFile</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1ae6fdfc9173e2ab5eb99b26909696c5bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::map&lt; std::string, T &gt;</type>
        <definition>std::map&lt;std::string, T&gt; create_map_of</definition>
        <argsstring>(TFile *file)</argsstring>
        <name>create_map_of</name>
        <param>
          <type>TFile *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1162" column="10" bodyfile="lib/libRoot.hpp" bodystart="1162" bodyend="1172"/>
        <references refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" compoundref="lib_co_8hpp" startline="156" endline="156">throw_error</references>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a6a5a5f0922a304bdcb88dd21a29013e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto createBranch</definition>
        <argsstring>(TTree *tree, T *value, std::string const &amp;name, int buffsize=64000)</argsstring>
        <name>createBranch</name>
        <param>
          <type>TTree *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buffsize</declname>
          <defval>64000</defval>
        </param>
        <briefdescription>
<para>Create a branch for a given value and name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="417" column="6" bodyfile="lib/libRoot.hpp" bodystart="417" bodyend="421"/>
        <references refid="lib_root_8hpp_1ad29ed215015eb770854e597fbdabb984">typeRootMap</references>
        <referencedby refid="class_event_1a0b93fcd8063a3c02edede96bb53b136d" compoundref="_event_8hpp" startline="334" endline="360">Event::writting</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1aa47924262f908c94250a3659a3ae4f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto createBranchArray</definition>
        <argsstring>(TTree *tree, T *array, std::string const &amp;name, std::string const &amp;name_size, int buffsize=64000)</argsstring>
        <name>createBranchArray</name>
        <param>
          <type>TTree *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buffsize</declname>
          <defval>64000</defval>
        </param>
        <briefdescription>
<para>Create a branch for a given array and name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the leaf that holds the size of the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="426" column="6" bodyfile="lib/libRoot.hpp" bodystart="426" bodyend="431"/>
        <references refid="lib_root_8hpp_1ad29ed215015eb770854e597fbdabb984">typeRootMap</references>
        <referencedby refid="class_event_1a0b93fcd8063a3c02edede96bb53b136d" compoundref="_event_8hpp" startline="334" endline="360">Event::writting</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a17dc0eddbbe36a95d0397c09c597a338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void draw_all_TH1</definition>
        <argsstring>(std::string const &amp;filename, int minX=0, int maxX=0, int rebin=1, std::string pattern=&quot;&quot;)</argsstring>
        <name>draw_all_TH1</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minX</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>maxX</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>rebin</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>pattern</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Draws all the TH1F of a given file one by one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Only works in CINT environnement (= macro only) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1261" column="6" bodyfile="lib/libRoot.hpp" bodystart="1261" bodyend="1287"/>
        <references refid="string__functions_8hpp_1a87d8e2cb69021ab11e443cb140349eb6" compoundref="string__functions_8hpp" startline="137" endline="140">found</references>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a5d8e6d047f89cfacdca99f300e08a8a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int findNextBinAbove</definition>
        <argsstring>(TH1 *histo, int &amp;bin, double threshold)</argsstring>
        <name>findNextBinAbove</name>
        <param>
          <type>TH1 *</type>
          <declname>histo</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>bin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="274" column="5" bodyfile="lib/libRoot.hpp" bodystart="274" bodyend="282"/>
        <referencedby refid="class_paris_1ad83b7a82190285f4c69fb5eeb30c5db6" compoundref="_paris_8hpp" startline="133" endline="272">Paris::findAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a913983a1e3590c8dddff74dd195dba8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int findNextBinBelow</definition>
        <argsstring>(TH1 *histo, int &amp;bin, double threshold)</argsstring>
        <name>findNextBinBelow</name>
        <param>
          <type>TH1 *</type>
          <declname>histo</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>bin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="264" column="5" bodyfile="lib/libRoot.hpp" bodystart="264" bodyend="272"/>
        <referencedby refid="class_paris_1ad83b7a82190285f4c69fb5eeb30c5db6" compoundref="_paris_8hpp" startline="133" endline="272">Paris::findAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1ab7f08b4e478a833328fa0fb5cebf88d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fuse_all_histo</definition>
        <argsstring>(std::string const &amp;folder, std::string const &amp;outRoot=&quot;fused_histo.root&quot;, bool const &amp;bidim=true)</argsstring>
        <name>fuse_all_histo</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>folder</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>outRoot</declname>
          <defval>&quot;fused_histo.root&quot;</defval>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>bidim</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>allows one to fuse all the histograms with the same name from different files </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1188" column="6" bodyfile="lib/libRoot.hpp" bodystart="1188" bodyend="1247"/>
        <references refid="files__functions_8hpp_1a0b6555f0818e33170e5c3c3c513d6b91" compoundref="files__functions_8hpp" startline="191" endline="213">list_files_in_folder</references>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a0bbbdcf3f7ab789fec1bdd518f3e0bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; get_names_of</definition>
        <argsstring>(TFile *file)</argsstring>
        <name>get_names_of</name>
        <param>
          <type>TFile *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1141" column="13" bodyfile="lib/libRoot.hpp" bodystart="1141" bodyend="1159"/>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a7b3e18ff762f0dfa647f03b8275e33c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_root_8hpp_1a42c3d6ca5f1a5f58dd1cd77f5fa79174" kindref="member">TH1F_map</ref></type>
        <definition>TH1F_map get_TH1F_map</definition>
        <argsstring>(TFile *file)</argsstring>
        <name>get_TH1F_map</name>
        <param>
          <type>TFile *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1118" column="10" bodyfile="lib/libRoot.hpp" bodystart="1118" bodyend="1127"/>
        <references refid="lib_root_8hpp_1a193ab9e416757c44b70605b92a8824b8" compoundref="lib_root_8hpp" startline="1089" endline="1106">get_TH1F_names</references>
        <referencedby refid="_detectors_8hpp_1ae343a2d2d22d862f6ac7ae10ba1b3d41" compoundref="_detectors_8hpp" startline="431" endline="453">loadFormattedTH1F</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a8831744e89671493c0079722208c9900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lib_root_8hpp_1a42c3d6ca5f1a5f58dd1cd77f5fa79174" kindref="member">TH1F_map</ref></type>
        <definition>TH1F_map get_TH1F_map</definition>
        <argsstring>(TFile *file, std::vector&lt; std::string &gt; &amp;names)</argsstring>
        <name>get_TH1F_map</name>
        <param>
          <type>TFile *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1129" column="10" bodyfile="lib/libRoot.hpp" bodystart="1129" bodyend="1138"/>
        <references refid="lib_root_8hpp_1a193ab9e416757c44b70605b92a8824b8" compoundref="lib_root_8hpp" startline="1089" endline="1106">get_TH1F_names</references>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a410ba7e9505d97b596562fba45237097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; get_TH1F_names</definition>
        <argsstring>(std::string const &amp;filename)</argsstring>
        <name>get_TH1F_names</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1108" column="13" bodyfile="lib/libRoot.hpp" bodystart="1108" bodyend="1114"/>
        <references refid="lib_root_8hpp_1a193ab9e416757c44b70605b92a8824b8" compoundref="lib_root_8hpp" startline="1089" endline="1106">get_TH1F_names</references>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a193ab9e416757c44b70605b92a8824b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; get_TH1F_names</definition>
        <argsstring>(TFile *file)</argsstring>
        <name>get_TH1F_names</name>
        <param>
          <type>TFile *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1089" column="13" bodyfile="lib/libRoot.hpp" bodystart="1089" bodyend="1106"/>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
        <referencedby refid="lib_root_8hpp_1a7b3e18ff762f0dfa647f03b8275e33c0" compoundref="lib_root_8hpp" startline="1118" endline="1127">get_TH1F_map</referencedby>
        <referencedby refid="lib_root_8hpp_1a410ba7e9505d97b596562fba45237097" compoundref="lib_root_8hpp" startline="1108" endline="1114">get_TH1F_names</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1ab8628517ea9ef7ded29d8e22be6f628f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getBin0</definition>
        <argsstring>(TH1F *spectra)</argsstring>
        <name>getBin0</name>
        <param>
          <type>TH1F *</type>
          <declname>spectra</declname>
        </param>
        <briefdescription>
<para>Get which bin holds the X = 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="181" column="5" bodyfile="lib/libRoot.hpp" bodystart="181" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1acd01eadb5a544a5ceb606f61569e62f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getData</definition>
        <argsstring>(TH1 *histo, std::vector&lt; double &gt; &amp;data)</argsstring>
        <name>getData</name>
        <param>
          <type>TH1 *</type>
          <declname>histo</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="253" column="6" bodyfile="lib/libRoot.hpp" bodystart="253" bodyend="262"/>
        <references refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" compoundref="lib_co_8hpp" startline="221" endline="221">double_cast</references>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a88d5549923b75ad5c6c45c83dc2a22f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getData</definition>
        <argsstring>(TH1 *histo, std::vector&lt; float &gt; &amp;data)</argsstring>
        <name>getData</name>
        <param>
          <type>TH1 *</type>
          <declname>histo</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="242" column="6" bodyfile="lib/libRoot.hpp" bodystart="242" bodyend="251"/>
        <references refid="lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d" compoundref="lib_co_8hpp" startline="217" endline="217">float_cast</references>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1accfb8dfb6ee42fa6845013a0cf121ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool getMeanPeak</definition>
        <argsstring>(TH1F *spectra, double &amp;mean)</argsstring>
        <name>getMeanPeak</name>
        <param>
          <type>TH1F *</type>
          <declname>spectra</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mean</declname>
        </param>
        <briefdescription>
<para>Get the mean of the peak of a histogram with one nice single peak. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="194" column="6" bodyfile="lib/libRoot.hpp" bodystart="194" bodyend="240"/>
        <references refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" compoundref="lib_co_8hpp" startline="470" endline="470">CoBazar::mean</references>
        <referencedby refid="class_timeshifts_1a608d9443a15dd669920e10dd8baee23a" compoundref="_timeshifts_8hpp" startline="893" endline="1007">Timeshifts::analyse</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1ad3470a3661e492e7d353b083639b8743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GetPoint</definition>
        <argsstring>(TVirtualPad *vpad, double &amp;x, double &amp;y)</argsstring>
        <name>GetPoint</name>
        <param>
          <type>TVirtualPad *</type>
          <declname>vpad</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>This method allows one to get the x and y values of where the user clicks on the graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1327" column="6" bodyfile="lib/libRoot.hpp" bodystart="1327" bodyend="1336"/>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
        <referencedby refid="class_analysed_spectra_1aa810982a33acfa30e512aa45da4461ce" compoundref="_analysed_spectra_8hpp" startline="263" endline="301">AnalysedSpectra::choosePeaks</referencedby>
        <referencedby refid="class_analysed_spectra_1abb27cafac273c5eb490eeb17596a60a1" compoundref="_analysed_spectra_8hpp" startline="100" endline="108">AnalysedSpectra::selectX</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1afa74a9c66d3386ccfacfe79ba7d4285c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libRoot</definition>
        <argsstring>()</argsstring>
        <name>libRoot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1495" column="6" bodyfile="lib/libRoot.hpp" bodystart="1495" bodyend="1498"/>
        <references refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" compoundref="print_8hpp" startline="44" endline="44">print</references>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a269d058dec61fdc486050ca3e57da0bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>Long64_t</type>
        <definition>Long64_t Long64_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>Long64_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into unsigned short. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="58" column="17" bodyfile="lib/libRoot.hpp" bodystart="58" bodyend="58"/>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="373" endline="394">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a0269226b4d78b1089ef77180712147e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float maxXaxis</definition>
        <argsstring>(TH1 *histo)</argsstring>
        <name>maxXaxis</name>
        <param>
          <type>TH1 *</type>
          <declname>histo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="80" column="7" bodyfile="lib/libRoot.hpp" bodystart="80" bodyend="83"/>
        <referencedby refid="namespace_co_analyse_1a53744e2ddfba6a4a188ada9ed1bc6272" compoundref="lib_root_8hpp" startline="732" endline="739">CoAnalyse::projectX</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1ada9d5d265d78076b2e7fb980a09c71b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float maxYaxis</definition>
        <argsstring>(TH1 *histo)</argsstring>
        <name>maxYaxis</name>
        <param>
          <type>TH1 *</type>
          <declname>histo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="90" column="7" bodyfile="lib/libRoot.hpp" bodystart="90" bodyend="93"/>
        <referencedby refid="namespace_co_analyse_1abecf48371e430ad0cc8dfb063e6d951d" compoundref="lib_root_8hpp" startline="604" endline="611">CoAnalyse::projectY</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1afcf94131ca40144ef5106ddc22a60600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MeanBetweenEdges</definition>
        <argsstring>(TH1F *hist, double edge1, double edge2)</argsstring>
        <name>MeanBetweenEdges</name>
        <param>
          <type>TH1F *</type>
          <declname>hist</declname>
        </param>
        <param>
          <type>double</type>
          <declname>edge1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>edge2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1289" column="8" bodyfile="lib/libRoot.hpp" bodystart="1289" bodyend="1305"/>
        <references refid="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" compoundref="vector__functions_8hpp" startline="14" endline="19">sum</references>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1ab23c9fed2f973bde045e7d90c8e1f2fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float minXaxis</definition>
        <argsstring>(TH1 *histo)</argsstring>
        <name>minXaxis</name>
        <param>
          <type>TH1 *</type>
          <declname>histo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="75" column="7" bodyfile="lib/libRoot.hpp" bodystart="75" bodyend="78"/>
        <referencedby refid="namespace_co_analyse_1a53744e2ddfba6a4a188ada9ed1bc6272" compoundref="lib_root_8hpp" startline="732" endline="739">CoAnalyse::projectX</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a6ce1f9927b8e99f76cbda975fb51adcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float minYaxis</definition>
        <argsstring>(TH1 *histo)</argsstring>
        <name>minYaxis</name>
        <param>
          <type>TH1 *</type>
          <declname>histo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="85" column="7" bodyfile="lib/libRoot.hpp" bodystart="85" bodyend="88"/>
        <referencedby refid="namespace_co_analyse_1abecf48371e430ad0cc8dfb063e6d951d" compoundref="lib_root_8hpp" startline="604" endline="611">CoAnalyse::projectY</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a1bf070584d2988460758158e556cefe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, THBinning binning)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type><ref refid="struct_t_h_binning" kindref="compound">THBinning</ref></type>
          <declname>binning</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="556" column="1" bodyfile="lib/libRoot.hpp" bodystart="556" bodyend="560"/>
        <references refid="struct_t_h_binning_1ab120fe709cd4ae2c2d83106f78007d3c" compoundref="lib_root_8hpp" startline="551">THBinning::bins</references>
        <references refid="struct_t_h_binning_1afe80a092ef2c1232a9bc424585d5035e" compoundref="lib_root_8hpp" startline="553">THBinning::max</references>
        <references refid="struct_t_h_binning_1a2fbaf1a88f065314d81f793e1ec5fe13" compoundref="lib_root_8hpp" startline="552">THBinning::min</references>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a3eb89cd3f4cc55f32deda654a048a4b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, TTree *tree)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>TTree *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="309" column="1" bodyfile="lib/libRoot.hpp" bodystart="309" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1aeef6e33f0411ddfa55da992068e8de8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void removeFits</definition>
        <argsstring>(TH1 *histo)</argsstring>
        <name>removeFits</name>
        <param>
          <type>TH1 *</type>
          <declname>histo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1311" column="6" bodyfile="lib/libRoot.hpp" bodystart="1311" bodyend="1324"/>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1ad880be57855ca84e4bb4d2af9b0ebef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resize_view_range</definition>
        <argsstring>(TH1F *histo)</argsstring>
        <name>resize_view_range</name>
        <param>
          <type>TH1F *</type>
          <declname>histo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1178" column="6" bodyfile="lib/libRoot.hpp" bodystart="1178" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a659bf0d45f72032aa36a43cd4cc5b9ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resize_view_range</definition>
        <argsstring>(TH1F *histo, float const &amp;min)</argsstring>
        <name>resize_view_range</name>
        <param>
          <type>TH1F *</type>
          <declname>histo</declname>
        </param>
        <param>
          <type>float const &amp;</type>
          <declname>min</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="1182" column="6" bodyfile="lib/libRoot.hpp" bodystart="1182" bodyend="1185"/>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a3a6fcc9d0f4e35bf7088b99991905138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shiftX</definition>
        <argsstring>(TH1 *histo, double shift)</argsstring>
        <name>shiftX</name>
        <param>
          <type>TH1 *</type>
          <declname>histo</declname>
        </param>
        <param>
          <type>double</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
<para>Shifts a histogram by &apos;shift&apos; X value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Shifts each bin content by &apos;shift&apos; units of the x axis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="286" column="6" bodyfile="lib/libRoot.hpp" bodystart="286" bodyend="303"/>
        <references refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" compoundref="string__functions_8hpp" startline="240" endline="245">concatenate</references>
        <referencedby refid="class_timeshifts_1a6520eab7a8824f41a2be8517d83fc835" compoundref="_timeshifts_8hpp" startline="621" endline="665">Timeshifts::verify</referencedby>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a0b2306f59088babb4975e636d04c4f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_alignator</definition>
        <argsstring>(TTree *tree, int *NewIndex=nullptr, bool useNewIndex=false)</argsstring>
        <name>test_alignator</name>
        <param>
          <type>TTree *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>NewIndex</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useNewIndex</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="351" column="6" bodyfile="lib/libRoot.hpp" bodystart="351" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a03d21b830e335ed5e98eaf83038ee8d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool THist_exists</definition>
        <argsstring>(TH1 *histo)</argsstring>
        <name>THist_exists</name>
        <param>
          <type>TH1 *</type>
          <declname>histo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="95" column="6" bodyfile="lib/libRoot.hpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="lib_root_8hpp_1a40d3e36a2118509ec94a14fc794895a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>ULong64_t</type>
        <definition>ULong64_t ULong64_cast</definition>
        <argsstring>(T const &amp;t)</argsstring>
        <name>ULong64_cast</name>
        <param>
          <type>T const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Casts a number into unsigned short. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/libRoot.hpp" line="54" column="18" bodyfile="lib/libRoot.hpp" bodystart="54" bodyend="54"/>
        <referencedby refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" compoundref="lib_root_8hpp" startline="373" endline="394">TypeRootMap::TypeRootMap</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>LIBROOT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBROOT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lib_co_8hpp" kindref="compound">libCo.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>**********<sp/>ROOT<sp/>includes<sp/>*********<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TAxis.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TCanvas.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TChain.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TError.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TF1.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TF2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFitResultPtr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFitResult.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TGraph.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TGraphErrors.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TH1F.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TH1D.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TH1S.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TH2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TH2F.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TH3I.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TKey.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TLeaf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TLegend.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TMarker.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TMath.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TRandom.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TROOT.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TSpectrum.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TStopwatch.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TString.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TStyle.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TSystem.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TThread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TTree.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TTreeIndex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/><sp/><sp/>Usings<sp/><sp/>//</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="lib_root_8hpp_1a32bc45ae9358ae128c6a7d49cb343e2e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a32bc45ae9358ae128c6a7d49cb343e2e" kindref="member">unique_TH1F</ref><sp/><sp/>=<sp/>std::unique_ptr&lt;TH1F&gt;;</highlight></codeline>
<codeline lineno="44" refid="lib_root_8hpp_1ae3db658040c9c85a57d0d6a29dc94c18" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1ae3db658040c9c85a57d0d6a29dc94c18" kindref="member">unique_TH2F</ref><sp/><sp/>=<sp/>std::unique_ptr&lt;TH2F&gt;;</highlight></codeline>
<codeline lineno="45" refid="lib_root_8hpp_1a3b73f11bc69f125e12c1d48c9ed79a6e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a3b73f11bc69f125e12c1d48c9ed79a6e" kindref="member">unique_TFile</ref><sp/>=<sp/>std::unique_ptr&lt;TFile&gt;;</highlight></codeline>
<codeline lineno="46" refid="lib_root_8hpp_1a50631b7ee8274cbc1161d2a668fdbdf3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a50631b7ee8274cbc1161d2a668fdbdf3" kindref="member">unique_tree</ref><sp/><sp/>=<sp/>std::unique_ptr&lt;TTree&gt;;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="comment">//<sp/><sp/><sp/>Types<sp/><sp/>//</highlight></codeline>
<codeline lineno="51"><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="54" refid="lib_root_8hpp_1a40d3e36a2118509ec94a14fc794895a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ULong64_t<sp/><ref refid="lib_root_8hpp_1a40d3e36a2118509ec94a14fc794895a0" kindref="member">ULong64_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ULong64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">template&lt;typename<sp/>T,<sp/><sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="58" refid="lib_root_8hpp_1a269d058dec61fdc486050ca3e57da0bb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Long64_t<sp/><ref refid="lib_root_8hpp_1a269d058dec61fdc486050ca3e57da0bb" kindref="member">Long64_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Long64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">//<sp/>Some<sp/>Initialisiations<sp/>//</highlight></codeline>
<codeline lineno="63"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">std::mutex<sp/>mutex_Root;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TRandom<sp/>gRandom(time(0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="comment">//<sp/><sp/><sp/>HISTO<sp/>MANIPULATIONS<sp/><sp/>//</highlight></codeline>
<codeline lineno="74"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="lib_root_8hpp_1ab23c9fed2f973bde045e7d90c8e1f2fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1ab23c9fed2f973bde045e7d90c8e1f2fe" kindref="member">minXaxis</ref>(TH1*<sp/>histo)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>histo-&gt;GetXaxis()-&gt;GetBinLowEdge(1);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="lib_root_8hpp_1a0269226b4d78b1089ef77180712147e0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a0269226b4d78b1089ef77180712147e0" kindref="member">maxXaxis</ref>(TH1*<sp/>histo)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>histo-&gt;GetXaxis()-&gt;GetBinUpEdge(histo-&gt;GetNbinsX());</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="lib_root_8hpp_1a6ce1f9927b8e99f76cbda975fb51adcf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a6ce1f9927b8e99f76cbda975fb51adcf" kindref="member">minYaxis</ref>(TH1*<sp/>histo)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>histo-&gt;GetYaxis()-&gt;GetBinLowEdge(1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="lib_root_8hpp_1ada9d5d265d78076b2e7fb980a09c71b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1ada9d5d265d78076b2e7fb980a09c71b0" kindref="member">maxYaxis</ref>(TH1*<sp/>histo)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>histo-&gt;GetYaxis()-&gt;GetBinUpEdge(histo-&gt;GetNbinsY());</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="lib_root_8hpp_1a03d21b830e335ed5e98eaf83038ee8d2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a03d21b830e335ed5e98eaf83038ee8d2" kindref="member">THist_exists</ref>(TH1*<sp/>histo)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(histo<sp/>&amp;&amp;<sp/>!histo-&gt;IsZombie()<sp/>&amp;&amp;<sp/>histo-&gt;Integral()&gt;1);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="lib_root_8hpp_1ae587b174d8d4d5b8e62f01491140e111" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1ae587b174d8d4d5b8e62f01491140e111" kindref="member">AddTH1</ref>(TH1*<sp/>histo_total,<sp/>TH1*<sp/>histo)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;histo_total-&gt;GetNbinsX()<sp/>+<sp/>1;<sp/>bin++)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>X_value<sp/>=<sp/>histo_total-&gt;GetBinCenter(bin);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>content_other<sp/>=<sp/>histo-&gt;Interpolate(X_value);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_total-&gt;SetBinContent(bin,<sp/>histo_total-&gt;GetBinContent(bin)<sp/>+<sp/>content_other);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="lib_root_8hpp_1a6f95a95b189be45d91548ce3bfb70a55" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1ae587b174d8d4d5b8e62f01491140e111" kindref="member">AddTH1</ref>(TH2*<sp/>histo2,<sp/>TH1*<sp/>histo1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>x<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!histo2)<sp/>{<ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;TH2<sp/>do<sp/>not<sp/>exists&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!histo1)<sp/>{<ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;TH1<sp/>do<sp/>not<sp/>exists&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>axis<sp/>=<sp/>(x)<sp/>?<sp/>histo2<sp/>-&gt;<sp/>GetXaxis()<sp/>:<sp/>histo2<sp/>-&gt;<sp/>GetYaxis();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis-&gt;GetNbins()<sp/>&lt;<sp/>index)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>histo<sp/>like&quot;</highlight><highlight class="normal">,<sp/>histo1-&gt;GetName(),<sp/></highlight><highlight class="stringliteral">&quot;to<sp/>merge<sp/>with&quot;</highlight><highlight class="normal">,<sp/>histo2-&gt;GetName()<sp/>,</highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;histo1-&gt;GetNbinsX();<sp/>bin++)<sp/>histo2-&gt;SetBinContent(index,<sp/>bin,<sp/>histo1-&gt;GetBinContent(bin));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin&lt;histo1-&gt;GetNbinsX();<sp/>bin++)<sp/>histo2-&gt;SetBinContent(bin,<sp/>index,<sp/>histo1-&gt;GetBinContent(bin));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="lib_root_8hpp_1a0135527c42feb1bbb8180af21ef5229e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a0135527c42feb1bbb8180af21ef5229e" kindref="member">AddTH1ByValue</ref>(TH2*<sp/>histo2,<sp/>TH1*<sp/>histo1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>x<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>throw_error(&quot;AddTH1ByValue()<sp/>is<sp/>DEV<sp/>!&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!histo2)<sp/>{<ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;TH2<sp/>do<sp/>not<sp/>exists&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!histo1)<sp/>{<ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;TH1<sp/>do<sp/>not<sp/>exists&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>axis<sp/>=<sp/>(x)<sp/>?<sp/>histo2<sp/>-&gt;<sp/>GetXaxis()<sp/>:<sp/>histo2<sp/>-&gt;<sp/>GetYaxis();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size1<sp/>=<sp/>histo1<sp/>-&gt;GetXaxis()<sp/>-&gt;<sp/>GetNbins();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size2<sp/>=<sp/>axis<sp/>-&gt;<sp/>GetNbins();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_min_value_2<sp/>=<sp/>axis<sp/>-&gt;<sp/>GetBinLowEdge(0)+1;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_max_value_2<sp/>=<sp/>axis<sp/>-&gt;<sp/>GetBinLowEdge(size2)+1;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_min_value_1<sp/>=<sp/>histo1<sp/>-&gt;<sp/>GetXaxis()<sp/>-&gt;<sp/>GetBinLowEdge(0)+1;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_max_value_1<sp/>=<sp/>histo1<sp/>-&gt;<sp/>GetXaxis()<sp/>-&gt;<sp/>GetBinLowEdge(size1)+1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_min_value_2!=m_min_value_1<sp/>||<sp/>m_max_value_2!=m_max_value_1)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>ranges<sp/>are<sp/>at<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>slope<sp/>=<sp/>(m_max_value_1-m_min_value_1)/(m_max_value_2-m_min_value_2);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>intercept<sp/>=<sp/>m_min_value_1<sp/>-<sp/>slope*m_min_value_2;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>filling_histo<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1F(</highlight><highlight class="stringliteral">&quot;temp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;temp&quot;</highlight><highlight class="normal">,<sp/>size2,<sp/>m_min_value_2,<sp/>m_max_value_2));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin2<sp/>=<sp/>0;<sp/>(bin2&lt;size2<sp/>&amp;&amp;<sp/>bin2&lt;size1);<sp/>bin2++)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value2<sp/>=<sp/>axis-&gt;GetBinCenter(bin2);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value1<sp/>=<sp/>value2*slope<sp/>+<sp/>intercept;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bin1<sp/><sp/><sp/>=<sp/>histo1-&gt;FindBin(value1);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filling_histo-&gt;SetBinContent(bin1,<sp/>histo1-&gt;GetBinContent(bin1));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_root_8hpp_1ae587b174d8d4d5b8e62f01491140e111" kindref="member">AddTH1</ref>(histo2,<sp/>filling_histo,<sp/>index,<sp/>x);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>filling_histo;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1ae587b174d8d4d5b8e62f01491140e111" kindref="member">AddTH1</ref>(histo2,<sp/>histo1,<sp/>index,<sp/>x);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="lib_root_8hpp_1ab8628517ea9ef7ded29d8e22be6f628f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1ab8628517ea9ef7ded29d8e22be6f628f" kindref="member">getBin0</ref>(TH1F*<sp/>spectra)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bins<sp/>=<sp/>spectra<sp/>-&gt;<sp/>GetXaxis()<sp/>-&gt;<sp/>GetNbins();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>lowEdges(bins);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>spectra<sp/>-&gt;<sp/>GetXaxis()<sp/>-&gt;<sp/>GetLowEdge(lowEdges.data());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(lowEdges[bin0]<sp/>&lt;<sp/>0)<sp/>bin0++;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bin0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="lib_root_8hpp_1accfb8dfb6ee42fa6845013a0cf121ac1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1accfb8dfb6ee42fa6845013a0cf121ac1" kindref="member">getMeanPeak</ref>(TH1F*<sp/>spectra,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Declaration<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pospic,<sp/>amppic,<sp/>widthpic;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Mean,<sp/>sigma;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>dump<sp/>parameters<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>amppic<sp/>=<sp/>spectra<sp/>-&gt;<sp/>GetMaximum();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>pospic<sp/>=<sp/>spectra-&gt;GetBinCenter(spectra-&gt;GetMaximumBin());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>widthpic<sp/>=<sp/>spectra-&gt;GetBinCenter(spectra-&gt;FindLastBinAbove(amppic*0.8))<sp/>-<sp/>spectra-&gt;GetBinCenter(spectra-&gt;FindFirstBinAbove(amppic*0.8));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fit<sp/>the<sp/>peak<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gaus_pol0<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TF1(</highlight><highlight class="stringliteral">&quot;gaus+pol0&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;gaus(0)+pol0(3)&quot;</highlight><highlight class="normal">,pospic-20*widthpic,pospic+20*widthpic);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>gaus_pol0<sp/>-&gt;<sp/>SetParameters(amppic,<sp/>pospic,<sp/>widthpic,<sp/>1);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>gaus_pol0<sp/>-&gt;<sp/>SetRange(pospic-widthpic*20,pospic+widthpic*20);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>spectra<sp/>-&gt;<sp/><ref refid="class_fit" kindref="compound">Fit</ref>(gaus_pol0,</highlight><highlight class="stringliteral">&quot;R+q&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gaus_pol0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Eliminate<sp/>non<sp/>existing<sp/>fits,<sp/>when<sp/>fits<sp/>doesn&apos;t<sp/>converge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>Mean<sp/>=<sp/>gaus_pol0-&gt;GetParameter(1);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>sigma<sp/>=<sp/>gaus_pol0-&gt;GetParameter(2);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gaus_pol1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TF1(</highlight><highlight class="stringliteral">&quot;gaus+pol1&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;gaus(0)+pol1(3)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>gaus_pol1<sp/>-&gt;<sp/>SetParameters(gaus_pol0-&gt;GetParameter(0),<sp/>gaus_pol0-&gt;GetParameter(1),<sp/>gaus_pol0-&gt;GetParameter(2),<sp/>gaus_pol0-&gt;GetParameter(3),<sp/>0);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>gaus_pol1<sp/>-&gt;<sp/>SetRange(Mean-sigma*5,Mean+sigma*5);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>spectra<sp/>-&gt;<sp/><ref refid="class_fit" kindref="compound">Fit</ref>(gaus_pol1,</highlight><highlight class="stringliteral">&quot;R+q&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gaus_pol1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>Mean<sp/>=<sp/>gaus_pol1-&gt;GetParameter(1);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>sigma<sp/>=<sp/>gaus_pol1-&gt;GetParameter(2);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gaus_pol1_bis<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TF1(</highlight><highlight class="stringliteral">&quot;gaus+pol2&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;gaus(0)+pol1(3)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>gaus_pol1_bis<sp/>-&gt;<sp/>SetParameters(gaus_pol1-&gt;GetParameter(0),<sp/>gaus_pol1-&gt;GetParameter(1),<sp/>gaus_pol1-&gt;GetParameter(2),<sp/>gaus_pol1-&gt;GetParameter(3),<sp/>gaus_pol1-&gt;GetParameter(4));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>gaus_pol1_bis<sp/>-&gt;<sp/>SetRange(Mean-sigma*3,Mean+sigma*3);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>spectra<sp/>-&gt;<sp/><ref refid="class_fit" kindref="compound">Fit</ref>(gaus_pol1_bis,</highlight><highlight class="stringliteral">&quot;R+q&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gaus_pol1_bis)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gaus_pol0;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gaus_pol1;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extracts<sp/>the<sp/>fitted<sp/>parameters<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fittedPic<sp/>=<sp/>gaus_pol1_bis;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref><sp/>=<sp/>Mean<sp/>=<sp/>fittedPic<sp/>-&gt;<sp/>GetParameter(1);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>sigma<sp/>=<sp/>fittedPic<sp/>-&gt;<sp/>GetParameter(2);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="lib_root_8hpp_1a88d5549923b75ad5c6c45c83dc2a22f5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a88d5549923b75ad5c6c45c83dc2a22f5" kindref="member">getData</ref>(TH1*<sp/>histo,<sp/>std::vector&lt;float&gt;<sp/>&amp;<sp/>data)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>size<sp/>=<sp/>histo-&gt;GetNbinsX()+1;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>data.clear();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>data.reserve(size);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>1;<sp/>bin&lt;size;<sp/>bin++)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>data.push_back(<ref refid="lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d" kindref="member">float_cast</ref>(histo-&gt;GetBinContent(bin)));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="lib_root_8hpp_1acd01eadb5a544a5ceb606f61569e62f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a88d5549923b75ad5c6c45c83dc2a22f5" kindref="member">getData</ref>(TH1*<sp/>histo,<sp/>std::vector&lt;double&gt;<sp/>&amp;<sp/>data)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>size<sp/>=<sp/>histo-&gt;GetNbinsX()+1;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>data.clear();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>data.reserve(size);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>1;<sp/>bin&lt;size;<sp/>bin++)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>data.push_back(<ref refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" kindref="member">double_cast</ref>(histo-&gt;GetBinContent(bin)));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="lib_root_8hpp_1a913983a1e3590c8dddff74dd195dba8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a913983a1e3590c8dddff74dd195dba8a" kindref="member">findNextBinBelow</ref>(TH1*<sp/>histo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>bin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>threshold)</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(histo-&gt;GetBinContent(bin++)<sp/>&gt;<sp/>threshold)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin<sp/>&gt;<sp/>histo-&gt;GetNbinsX())<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bin;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="lib_root_8hpp_1a5d8e6d047f89cfacdca99f300e08a8a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a5d8e6d047f89cfacdca99f300e08a8a8" kindref="member">findNextBinAbove</ref>(TH1*<sp/>histo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>bin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>threshold)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(histo-&gt;GetBinContent(bin++)<sp/>&lt;<sp/>threshold)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin<sp/>&gt;<sp/>histo-&gt;GetNbinsX())<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bin;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="lib_root_8hpp_1a3a6fcc9d0f4e35bf7088b99991905138" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a3a6fcc9d0f4e35bf7088b99991905138" kindref="member">shiftX</ref>(TH1*<sp/>histo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>shift)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(histo-&gt;Clone(<ref refid="string__functions_8hpp_1ae058d07fbc702d0b0f79e3650e7804a2" kindref="member">concatenate</ref>(histo-&gt;GetName(),<sp/></highlight><highlight class="stringliteral">&quot;_shifted&quot;</highlight><highlight class="normal">).c_str()));</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>xmin<sp/>=<sp/>histo-&gt;GetXaxis()-&gt;GetXmin();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>xmax<sp/>=<sp/>histo-&gt;GetXaxis()-&gt;GetXmax();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nb_bins<sp/>=<sp/>histo-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_i<sp/>=<sp/>1;<sp/>bin_i&lt;nb_bins+1;<sp/>++bin_i)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value<sp/>=<sp/>histo-&gt;GetBinCenter(bin_i);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shifted_value<sp/>=<sp/>value-shift;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shifted_value<sp/>&lt;<sp/>xmin||<sp/>shifted_value<sp/>&gt;<sp/>xmax)<sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp-&gt;SetBinContent(bin_i,<sp/>0);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>temp-&gt;SetBinContent(bin_i,<sp/>histo-&gt;Interpolate(shifted_value));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_i<sp/>=<sp/>1;<sp/>bin_i&lt;nb_bins+1;<sp/>++bin_i)<sp/>histo-&gt;SetBinContent(bin_i,<sp/>temp-&gt;GetBinContent(bin_i));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="comment">//<sp/><sp/><sp/>TREE<sp/>MANIPULATIONS<sp/><sp/>//</highlight></codeline>
<codeline lineno="308"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="lib_root_8hpp_1a3eb89cd3f4cc55f32deda654a048a4b7" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="lib_root_8hpp_1a3eb89cd3f4cc55f32deda654a048a4b7" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/>TTree<sp/>*<sp/>tree)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>tree-&gt;Print();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="lib_root_8hpp_1ad91e4154d55b03aec78fc49348f35db1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1ad91e4154d55b03aec78fc49348f35db1" kindref="member">alignator</ref>(TTree<sp/>*<sp/>tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*NewIndex)</highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NHits<sp/>=<sp/>tree<sp/>-&gt;<sp/>GetEntries();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>tree<sp/>-&gt;<sp/>SetBranchStatus(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight><highlight class="comment">//<sp/>Disables<sp/>all<sp/>the<sp/>branches<sp/>readability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>tree<sp/>-&gt;<sp/>SetBranchStatus(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight><highlight class="comment">//<sp/>Read<sp/>only<sp/>the<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>std::vector&lt;ULong64_t&gt;<sp/>TimeStampBuffer(NHits,0);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>ULong64_t<sp/>TimeStamp<sp/>=<sp/>0;<sp/>tree-&gt;SetBranchAddress(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/>&amp;TimeStamp);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>creates<sp/>a<sp/>buffer<sp/>of<sp/>all<sp/>the<sp/>timestamps<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;NHits;<sp/>i++)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>tree<sp/>-&gt;<sp/>GetEntry(i);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeStampBuffer[i]=TimeStamp;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>computes<sp/>the<sp/>correct<sp/>order<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>ULong64_t<sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>NewIndex[0]=0;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;NHits;j++)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>NewIndex[j]=j;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>a=TimeStampBuffer[j];<sp/></highlight><highlight class="comment">//Focus<sp/>on<sp/>this<sp/>time<sp/>stamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>i=j;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>place<sp/>to<sp/>insert<sp/>it<sp/>amongst<sp/>the<sp/>previously<sp/>sorted<sp/>timestamps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((i<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(TimeStampBuffer[NewIndex[i-1]]<sp/>&gt;<sp/>a))</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NewIndex[i]=NewIndex[i-1];</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>NewIndex[i]=j;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>tree<sp/>-&gt;<sp/>SetBranchStatus(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//enables<sp/>again<sp/>the<sp/>whole<sp/>tree<sp/>to<sp/>be<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="lib_root_8hpp_1a0b2306f59088babb4975e636d04c4f53" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a0b2306f59088babb4975e636d04c4f53" kindref="member">test_alignator</ref>(TTree<sp/>*tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>NewIndex=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useNewIndex<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>tree<sp/>-&gt;<sp/>SetBranchStatus(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight><highlight class="comment">//<sp/>Disables<sp/>all<sp/>the<sp/>branches<sp/>readability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>tree<sp/>-&gt;<sp/>SetBranchStatus(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight><highlight class="comment">//<sp/>Enables<sp/>to<sp/>read<sp/>only<sp/>the<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>ULong64_t<sp/>TimeStamp;<sp/>tree-&gt;SetBranchAddress(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/>&amp;TimeStamp);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>ULong64_t<sp/>PrevTimeStamp<sp/>=<sp/>0;<sp/>Long64_t<sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxIt<sp/>=<sp/>tree<sp/>-&gt;<sp/>GetEntries();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Long64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>maxIt;<sp/>i++)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useNewIndex)<sp/>j<sp/>=<sp/>NewIndex[i]<sp/>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>tree<sp/>-&gt;<sp/>GetEntry(j);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Long64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(TimeStamp<sp/>-<sp/>PrevTimeStamp)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Long64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(TimeStamp<sp/>-<sp/>PrevTimeStamp)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>PrevTimeStamp<sp/>=<sp/>TimeStamp;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>tree<sp/>-&gt;<sp/>SetBranchStatus(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//enables<sp/>again<sp/>the<sp/>whole<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="class_type_root_map" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_type_root_map" kindref="compound">TypeRootMap</ref></highlight></codeline>
<codeline lineno="371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="373" refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_type_root_map_1acc24a4f33058532b330071a6738f02f4" kindref="member">TypeRootMap</ref>()</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_type_root_map_1a738dc178a974321674fec5116598515c" kindref="member">Initialised</ref>)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bool<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>[</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;O&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Integers<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>[</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/><sp/><ref refid="lib_co_8hpp_1afe72de0c3fabeb8944bfd72ccdbe0d73" kindref="member">char_cast</ref>(1))]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">;<sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>[</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/><ref refid="lib_co_8hpp_1ade77d1f37b1311b3f80ce429a33fd226" kindref="member">uchar_cast</ref>(1))]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>[</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/><ref refid="lib_co_8hpp_1af4d9dac78db5e48b5e2c5253754aaa8c" kindref="member">short_cast</ref>(1))]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">;<sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>[</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="lib_co_8hpp_1ab2f8f9033c2742c4f5ac6d3cce6caf9a" kindref="member">ushort_cast</ref>(1))]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>[</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/><sp/><sp/><ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(1))]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">;<sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>[</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/><sp/><ref refid="lib_co_8hpp_1ad4f41fb682fba59b9adc6142282db5a2" kindref="member">uint_cast</ref>(1))]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>[</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/><sp/><ref refid="lib_co_8hpp_1a695ead22582e1da41880ee67c2c61d07" kindref="member">long_cast</ref>(1))]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;G&quot;</highlight><highlight class="normal">;<sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>[</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/><ref refid="lib_co_8hpp_1ac939b8397e82173edff13b3d00dc9d09" kindref="member">ulong_cast</ref>(1))]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Floating<sp/>point<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>[</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="lib_co_8hpp_1a2052317e56aa118e7ffcdb2e398f551c" kindref="member">double_cast</ref>(1))]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">;<sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>[</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/><ref refid="lib_co_8hpp_1a075a3c229a21ca4d0e91f72e99a6bf6d" kindref="member">float_cast</ref>(1))]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ROOT<sp/>types<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>[</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="lib_root_8hpp_1a269d058dec61fdc486050ca3e57da0bb" kindref="member">Long64_cast</ref>(1))]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">;<sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>[</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="lib_root_8hpp_1a40d3e36a2118509ec94a14fc794895a0" kindref="member">ULong64_cast</ref>(1))<sp/>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_type_root_map_1a738dc178a974321674fec5116598515c" kindref="member">Initialised</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="397" refid="class_type_root_map_1ade1cd7178ea5d224c8140e6339cc3f16" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_type_root_map_1ade1cd7178ea5d224c8140e6339cc3f16" kindref="member">operator() </ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="398"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>typeIndex<sp/>=<sp/>std::type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(t));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>.find(typeIndex);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="409" refid="class_type_root_map_1a738dc178a974321674fec5116598515c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_type_root_map_1a738dc178a974321674fec5116598515c" kindref="member">Initialised</ref>;</highlight></codeline>
<codeline lineno="410" refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" refkind="member"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::type_index,<sp/>std::string&gt;<sp/><ref refid="class_type_root_map_1ad92c898d3d47a36b01b8f3ef5b178407" kindref="member">m_typeRootMap</ref>;</highlight></codeline>
<codeline lineno="411" refid="lib_root_8hpp_1ad29ed215015eb770854e597fbdabb984" refkind="member"><highlight class="normal">}<ref refid="lib_root_8hpp_1ad29ed215015eb770854e597fbdabb984" kindref="member">typeRootMap</ref>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_type_root_map_1a738dc178a974321674fec5116598515c" kindref="member">TypeRootMap::Initialised</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="417" refid="lib_root_8hpp_1a6a5a5f0922a304bdcb88dd21a29013e7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a6a5a5f0922a304bdcb88dd21a29013e7" kindref="member">createBranch</ref>(TTree*<sp/>tree,<sp/>T<sp/>*<sp/>value,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffsize<sp/>=<sp/>64000)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>type_root_format<sp/>=<sp/>name+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">+<ref refid="lib_root_8hpp_1ad29ed215015eb770854e597fbdabb984" kindref="member">typeRootMap</ref>(*value);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(tree<sp/>-&gt;<sp/>Branch(name.c_str(),<sp/>value,<sp/>type_root_format.c_str(),<sp/>buffsize));</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="426" refid="lib_root_8hpp_1aa47924262f908c94250a3659a3ae4f04" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1aa47924262f908c94250a3659a3ae4f04" kindref="member">createBranchArray</ref>(TTree*<sp/>tree,<sp/>T<sp/>*<sp/>array,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>name,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>name_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffsize<sp/>=<sp/>64000)</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>**array<sp/>because<sp/>it<sp/>is<sp/>an<sp/>array,<sp/>so<sp/>*array<sp/>dereferences<sp/>the<sp/>array<sp/>and<sp/>**array<sp/>the<sp/>first<sp/>element<sp/>of<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>type_root_format<sp/>=<sp/>name+</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">+name_size+</highlight><highlight class="stringliteral">&quot;]/&quot;</highlight><highlight class="normal">+<ref refid="lib_root_8hpp_1ad29ed215015eb770854e597fbdabb984" kindref="member">typeRootMap</ref>(**array);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(tree<sp/>-&gt;<sp/>Branch(name.c_str(),<sp/>array,<sp/>type_root_format.c_str(),<sp/>buffsize));</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="comment">//<sp/><sp/>CLASS<sp/>THETCHAIN<sp/><sp/>//</highlight></codeline>
<codeline lineno="437"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="class_the_t_chain" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_the_t_chain" kindref="compound">TheTChain</ref></highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="455" refid="class_the_t_chain_1abca9ad5e5cd894098e39660de91a3b36" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_the_t_chain_1abca9ad5e5cd894098e39660de91a3b36" kindref="member">TheTChain</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>name,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>expression<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>readMode<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">)<sp/>:<sp/><ref refid="class_the_t_chain_1a3e18b727fcdca6044244e2bff67cd704" kindref="member">m_name</ref>(name),<sp/><ref refid="class_the_t_chain_1a86ebdcbf215c3096476090e80d09dbc0" kindref="member">m_read_mode</ref>(readMode)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expression!=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_the_t_chain_1add0a45b5b2328af8a75ebce7bde98f0c" kindref="member">Add</ref>(expression);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TTree<sp/>wrapping<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="class_the_t_chain_1add0a45b5b2328af8a75ebce7bde98f0c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_the_t_chain_1add0a45b5b2328af8a75ebce7bde98f0c" kindref="member">Add</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>expression)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_the_t_chain_1a2b60d00d493c326b7ef6fe9bd7d75395" kindref="member">m_input_files_expressions</ref>.push_back(expression);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>ARGS&gt;</highlight></codeline>
<codeline lineno="467" refid="class_the_t_chain_1a342da75a59ca99b7f56cc76cece2b580" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_the_t_chain_1a342da75a59ca99b7f56cc76cece2b580" kindref="member">SetBranchAddress</ref>(ARGS<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>tree<sp/>:<sp/><ref refid="class_the_t_chain_1a353e40160c351c0049ae964dfd813847" kindref="member">m_trees</ref>)<sp/>tree<sp/>-&gt;<sp/><ref refid="class_the_t_chain_1a342da75a59ca99b7f56cc76cece2b580" kindref="member">SetBranchAddress</ref>(std::forward&lt;ARGS&gt;(args)...);}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>Func,<sp/>class...<sp/>ARGS&gt;<sp/>//<sp/>Attempt<sp/>to<sp/>create<sp/>a<sp/>generic<sp/>wrapping<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>operator-&gt;<sp/>()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Class<sp/>own<sp/>methods<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_the_t_chain_1a0858c536e02a0459fd2e101936fe923f" kindref="member">set</ref>();</highlight></codeline>
<codeline lineno="475" refid="class_the_t_chain_1a5e7c32ab56c040e9fac734db6eb7d6e6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_the_t_chain_1a5e7c32ab56c040e9fac734db6eb7d6e6" kindref="member">read</ref>(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477" refid="class_the_t_chain_1a62880bea2d28ba4963a0784845b5bd66" refkind="member"><highlight class="normal"><sp/><sp/>TTree*<sp/><ref refid="class_the_t_chain_1a62880bea2d28ba4963a0784845b5bd66" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_the_t_chain_1a353e40160c351c0049ae964dfd813847" kindref="member">m_trees</ref>[i];}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="class_the_t_chain_1ae1f6295d54f2ce619bdf5e1555cb5243" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_the_t_chain_1ae1f6295d54f2ce619bdf5e1555cb5243" kindref="member">begin</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_the_t_chain_1a353e40160c351c0049ae964dfd813847" kindref="member">m_trees</ref>.begin();}</highlight></codeline>
<codeline lineno="480" refid="class_the_t_chain_1a950b7bd4cd253b85bc1108ceb573bfd1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_the_t_chain_1a950b7bd4cd253b85bc1108ceb573bfd1" kindref="member">end</ref>()<sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_the_t_chain_1a353e40160c351c0049ae964dfd813847" kindref="member">m_trees</ref>.end()<sp/><sp/>;}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="483" refid="class_the_t_chain_1a3e18b727fcdca6044244e2bff67cd704" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_the_t_chain_1a3e18b727fcdca6044244e2bff67cd704" kindref="member">m_name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484" refid="class_the_t_chain_1a86ebdcbf215c3096476090e80d09dbc0" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_the_t_chain_1a86ebdcbf215c3096476090e80d09dbc0" kindref="member">m_read_mode</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486" refid="class_the_t_chain_1a0eaf5f8f574cfea07a4e2d1edac3e563" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_the_t_chain_1a0eaf5f8f574cfea07a4e2d1edac3e563" kindref="member">set</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>expression);</highlight></codeline>
<codeline lineno="487" refid="class_the_t_chain_1aaa019deecc3a6a2fb214862e479e53a4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_the_t_chain_1aaa019deecc3a6a2fb214862e479e53a4" kindref="member">newTTree</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>fileName)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_the_t_chain_1acdd69c2f1eddd7ff0b8a122336307f00" kindref="member">m_files</ref>.push_back(<sp/>TFile::Open(fileName.c_str())<sp/>);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_the_t_chain_1a353e40160c351c0049ae964dfd813847" kindref="member">m_trees</ref>.push_back(<sp/><ref refid="class_the_t_chain_1acdd69c2f1eddd7ff0b8a122336307f00" kindref="member">m_files</ref>.back()<sp/>-&gt;<sp/>Get&lt;TTree&gt;(<ref refid="class_the_t_chain_1a3e18b727fcdca6044244e2bff67cd704" kindref="member">m_name</ref>.c_str())<sp/>);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493" refid="class_the_t_chain_1a2b60d00d493c326b7ef6fe9bd7d75395" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="class_the_t_chain_1a2b60d00d493c326b7ef6fe9bd7d75395" kindref="member">m_input_files_expressions</ref>;</highlight></codeline>
<codeline lineno="494" refid="class_the_t_chain_1adca1e51c2ca4f6d761db269375a4abdf" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="class_the_t_chain_1adca1e51c2ca4f6d761db269375a4abdf" kindref="member">m_files_vec</ref>;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="class_the_t_chain_1a819ab9dc6c19972b4bd385f771a2e4ba" refkind="member"><highlight class="normal"><sp/><sp/>UInt_t<sp/><sp/><sp/><sp/><ref refid="class_the_t_chain_1a819ab9dc6c19972b4bd385f771a2e4ba" kindref="member">m_tree_cursor</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="497" refid="class_the_t_chain_1af8623a59ec85b7047e505898a2e1ca28" refkind="member"><highlight class="normal"><sp/><sp/>ULong64_t<sp/><ref refid="class_the_t_chain_1af8623a59ec85b7047e505898a2e1ca28" kindref="member">m_evt_cursor</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="498" refid="class_the_t_chain_1a8038a5652ad04d3daaf506f3d0807639" refkind="member"><highlight class="normal"><sp/><sp/>ULong64_t<sp/><ref refid="class_the_t_chain_1a8038a5652ad04d3daaf506f3d0807639" kindref="member">m_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="class_the_t_chain_1a353e40160c351c0049ae964dfd813847" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;TTree*&gt;<sp/><ref refid="class_the_t_chain_1a353e40160c351c0049ae964dfd813847" kindref="member">m_trees</ref>;</highlight></codeline>
<codeline lineno="501" refid="class_the_t_chain_1acdd69c2f1eddd7ff0b8a122336307f00" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;TFile*&gt;<sp/><ref refid="class_the_t_chain_1acdd69c2f1eddd7ff0b8a122336307f00" kindref="member">m_files</ref>;</highlight></codeline>
<codeline lineno="502"><highlight class="normal">};</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504" refid="class_the_t_chain_1a0858c536e02a0459fd2e101936fe923f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_the_t_chain_1a0858c536e02a0459fd2e101936fe923f" kindref="member">TheTChain::set</ref>()</highlight></codeline>
<codeline lineno="505"><highlight class="normal">{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(auto<sp/>const<sp/>&amp;<sp/>expression<sp/>:<sp/>m_input_files_expressions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(!folder_exists(expression))<sp/>{print(&quot;folder&quot;,getPath(expression),&quot;empty<sp/>!&quot;);return;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(expression.back()<sp/>==<sp/>&apos;/&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>{//<sp/>If<sp/>a<sp/>folder<sp/>is<sp/>given<sp/>then<sp/>search<sp/>the<sp/>whole<sp/>folder<sp/>for<sp/>.root<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>findFilesWildcard(expression+&quot;*.root&quot;,<sp/>m_files_vec);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>else<sp/>findFilesWildcard(expression,<sp/>m_files_vec);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>print(m_files_vec);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(auto<sp/>const<sp/>&amp;<sp/>filename<sp/>:<sp/>m_files_vec)<sp/>newTTree(filename);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="comment">//<sp/><sp/><sp/>USEFULL<sp/>CLASSES<sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="522"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="struct_t_h_binning" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_h_binning" kindref="compound">THBinning</ref></highlight></codeline>
<codeline lineno="528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="529" refid="struct_t_h_binning_1abef3484102caf462e6a9cde596790515" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_t_h_binning_1abef3484102caf462e6a9cde596790515" kindref="member">THBinning</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="530" refid="struct_t_h_binning_1ae7ab113929fe481e5bd28a58afae21a6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_t_h_binning_1ae7ab113929fe481e5bd28a58afae21a6" kindref="member">THBinning</ref>(std::Initialiser_list&lt;double&gt;<sp/>initList)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initList.size()<sp/>!=<sp/>3)<sp/></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Initialization<sp/>of<sp/>THBinning<sp/>must<sp/>contain<sp/>only<sp/>3<sp/>elements&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>initList.begin();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_h_binning_1ab120fe709cd4ae2c2d83106f78007d3c" kindref="member">bins</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*it++);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_h_binning_1a2fbaf1a88f065314d81f793e1ec5fe13" kindref="member">min</ref><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*it++);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_h_binning_1afe80a092ef2c1232a9bc424585d5035e" kindref="member">max</ref><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*it<sp/><sp/>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="struct_t_h_binning_1a070c302a8ec5fa92f63de2937c780776" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_t_h_binning_1a070c302a8ec5fa92f63de2937c780776" kindref="member">THBinning</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_bins,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_min,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_max)<sp/></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_h_binning_1ab120fe709cd4ae2c2d83106f78007d3c" kindref="member">bins</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_bins);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_h_binning_1a2fbaf1a88f065314d81f793e1ec5fe13" kindref="member">min</ref><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_min)<sp/>;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_t_h_binning_1afe80a092ef2c1232a9bc424585d5035e" kindref="member">max</ref><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_max)<sp/>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>three<sp/>parameters<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="struct_t_h_binning_1ab120fe709cd4ae2c2d83106f78007d3c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_t_h_binning_1ab120fe709cd4ae2c2d83106f78007d3c" kindref="member">bins</ref><sp/>=<sp/>0<sp/><sp/>;</highlight></codeline>
<codeline lineno="552" refid="struct_t_h_binning_1a2fbaf1a88f065314d81f793e1ec5fe13" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_t_h_binning_1a2fbaf1a88f065314d81f793e1ec5fe13" kindref="member">min</ref><sp/><sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="553" refid="struct_t_h_binning_1afe80a092ef2c1232a9bc424585d5035e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_t_h_binning_1afe80a092ef2c1232a9bc424585d5035e" kindref="member">max</ref><sp/><sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="554"><highlight class="normal">};</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="lib_root_8hpp_1a1bf070584d2988460758158e556cefe4" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="lib_root_8hpp_1a3eb89cd3f4cc55f32deda654a048a4b7" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/><ref refid="struct_t_h_binning" kindref="compound">THBinning</ref><sp/>binning)</highlight></codeline>
<codeline lineno="557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>binning.<ref refid="struct_t_h_binning_1ab120fe709cd4ae2c2d83106f78007d3c" kindref="member">bins</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>binning.<ref refid="struct_t_h_binning_1a2fbaf1a88f065314d81f793e1ec5fe13" kindref="member">min</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>binning.<ref refid="struct_t_h_binning_1afe80a092ef2c1232a9bc424585d5035e" kindref="member">max</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="comment">//<sp/><sp/><sp/>COANALYSE<sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="566"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567" refid="namespace_co_analyse" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_co_analyse" kindref="compound">CoAnalyse</ref></highlight></codeline>
<codeline lineno="568"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570" refid="namespace_co_analyse_1a0c12c2535bb054631b3b0304a1dc9a34" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1a0c12c2535bb054631b3b0304a1dc9a34" kindref="member">ProjectionsBins</ref><sp/>=<sp/>std::vector&lt;std::pair&lt;double,double&gt;&gt;;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="573" refid="namespace_co_analyse_1ab71a4903cf3d3c32f35262dab10a82e3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1ab71a4903cf3d3c32f35262dab10a82e3" kindref="member">normalizeY</ref>(TH2*<sp/>matrix,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>factor<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bins_x<sp/>=<sp/>matrix-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bins_y<sp/>=<sp/>matrix-&gt;GetNbinsY();</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>1;<sp/>x&lt;bins_x;<sp/>x++)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Float_t<sp/>maxRow<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>:<sp/>Get<sp/>the<sp/>maximum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>1;<sp/>y&lt;bins_y+1;<sp/>y++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matrix-&gt;GetBinContent(x,<sp/>y)<sp/>&gt;<sp/>maxRow)<sp/>maxRow<sp/>=<sp/>matrix-&gt;GetBinContent(x,<sp/>y);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>:<sp/>Normalize<sp/>to<sp/>set<sp/>maximum<sp/>=<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxRow&gt;0)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>1;<sp/>y&lt;bins_y+1;<sp/>y++)<sp/></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix<sp/>-&gt;<sp/>SetBinContent(x,<sp/>y,<sp/>factor*matrix-&gt;GetBinContent(x,<sp/>y)/maxRow);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="591" refid="namespace_co_analyse_1a9585a7922e83dcea10f06211868846bc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1a9585a7922e83dcea10f06211868846bc" kindref="member">normalizeBidim</ref>(TH2*<sp/>matrix,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>factor<sp/>=<sp/>1.0)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bins_x<sp/>=<sp/>matrix-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bins_y<sp/>=<sp/>matrix-&gt;GetNbinsY();</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>max<sp/>=<sp/>matrix-&gt;GetMaximum();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max&gt;0.)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x&lt;bins_x+1;<sp/>x++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y&lt;bins_y+1;<sp/>y++)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value<sp/>=<sp/>matrix-&gt;GetBinContent(x,<sp/>y);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value&gt;0)<sp/>matrix<sp/>-&gt;<sp/>SetBinContent(x,<sp/>y,<sp/>factor*value/max);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="604" refid="namespace_co_analyse_1abecf48371e430ad0cc8dfb063e6d951d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1abecf48371e430ad0cc8dfb063e6d951d" kindref="member">projectY</ref>(TH2*<sp/>matrix,<sp/>TH1*<sp/>proj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>binX)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>histo<sp/>nullptr<sp/>in<sp/>CoAnalyse::projectY&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nbBins<sp/>=<sp/>matrix-&gt;GetNbinsY();</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proj<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>proj<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1F();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>proj-&gt;SetBins(nbBins,<ref refid="lib_root_8hpp_1a6ce1f9927b8e99f76cbda975fb51adcf" kindref="member">minYaxis</ref>(matrix),<sp/><ref refid="lib_root_8hpp_1ada9d5d265d78076b2e7fb980a09c71b0" kindref="member">maxYaxis</ref>(matrix));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binY<sp/>=<sp/>0;<sp/>binY&lt;nbBins;<sp/>binY++)<sp/>proj-&gt;SetBinContent(binY,<sp/>matrix-&gt;GetBinContent(binX,<sp/>binY));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="614" refid="namespace_co_analyse_1aa19f9a517f5a4ce70e61ebed3cfeecf9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1abecf48371e430ad0cc8dfb063e6d951d" kindref="member">projectY</ref>(TH2*<sp/>matrix,<sp/>TH1*<sp/>proj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>binXmin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>binXmax)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>histo<sp/>nullptr<sp/>in<sp/>CoAnalyse::projectY&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nbBins<sp/>=<sp/>matrix-&gt;GetNbinsY();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proj<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>proj<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1F();</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>proj-&gt;SetBins(nbBins,<sp/><ref refid="lib_root_8hpp_1a6ce1f9927b8e99f76cbda975fb51adcf" kindref="member">minYaxis</ref>(matrix),<sp/><ref refid="lib_root_8hpp_1ada9d5d265d78076b2e7fb980a09c71b0" kindref="member">maxYaxis</ref>(matrix));</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>binXmin;<sp/>x&lt;binXmax;<sp/>x++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y&lt;nbBins;<sp/>y++)<sp/></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>proj-&gt;AddBinContent(y,<sp/>matrix-&gt;GetBinContent(x,<sp/>y));</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="625" refid="namespace_co_analyse_1ab64c2bb160dbdc01836274235d0bbd3b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1abecf48371e430ad0cc8dfb063e6d951d" kindref="member">projectY</ref>(TH2*<sp/>matrix,<sp/>TH1*<sp/>proj,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>valueXmin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>valueXmax)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_co_analyse_1abecf48371e430ad0cc8dfb063e6d951d" kindref="member">projectY</ref>(matrix,<sp/>proj,<sp/>matrix-&gt;GetXaxis()-&gt;FindBin(valueXmin),<sp/>matrix-&gt;GetXaxis()-&gt;FindBin(valueXmax));</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="631" refid="namespace_co_analyse_1ab8af94a11fa0979cbaf83228dfc1675e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1ab8af94a11fa0979cbaf83228dfc1675e" kindref="member">removeRandomY</ref>(TH2*<sp/>matrix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_stopX<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_stopY<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writeIntermediate<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="namespace_co_analyse_1a0c12c2535bb054631b3b0304a1dc9a34" kindref="member">ProjectionsBins</ref><sp/>projections<sp/>=<sp/>{{}})</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bins_x<sp/>=<sp/>matrix-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bins_y<sp/>=<sp/>matrix-&gt;GetNbinsY();</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startX<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stopX<sp/>=<sp/>(_stopX&lt;0)<sp/>?<sp/>bins_x+1<sp/>:<sp/>_stopX;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startY<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stopY<sp/>=<sp/>(_stopY&lt;0)<sp/>?<sp/>bins_y+1<sp/>:<sp/>_stopY;;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print(&quot;Normalizing...&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normalizeY(matrix,<sp/>1);//<sp/>This<sp/>is<sp/>in<sp/>order<sp/>to<sp/>have<sp/>floating<sp/>points<sp/>in<sp/>the<sp/>z<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normalizeBidim(matrix,<sp/>1);//<sp/>This<sp/>is<sp/>in<sp/>order<sp/>to<sp/>have<sp/>floating<sp/>points<sp/>in<sp/>the<sp/>z<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Cloning...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>clone<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH2*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(matrix-&gt;Clone());</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>clone-&gt;SetDirectory(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Projecting<sp/>on<sp/>both<sp/>axis...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>totProjX(bins_x+1);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>totProjY(bins_y+1);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>startX;<sp/>x&lt;bins_x+1;<sp/>x++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>startY;<sp/>y&lt;bins_y+1;<sp/>y++)<sp/></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value<sp/>=<sp/>matrix-&gt;GetBinContent(x,y);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>totProjX[x]<sp/>+=<sp/>value;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>totProjY[y]<sp/>+=<sp/>value;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Substracting...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TH2*&gt;<sp/>intermediate;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;TH1*&gt;&gt;<sp/>intermediate_proj(projections.size());</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>total<sp/>=<sp/>matrix-&gt;Integral();</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>startX;<sp/>x&lt;stopX;<sp/>x++)</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x%(stopX/100)<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>advancement<sp/>=<sp/><ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(100*x/stopX);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(advancement,<sp/></highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writeIntermediate<sp/>&amp;&amp;<sp/>advancement%10<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Saving<sp/>at&quot;</highlight><highlight class="normal">,<sp/>advancement,<sp/></highlight><highlight class="stringliteral">&quot;%<sp/>process&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>matrix_name<sp/>=<sp/>matrix-&gt;GetName()+std::to_string(advancement);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intermediate.emplace_back(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH2*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(clone-&gt;Clone(matrix_name.c_str())));</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>proj_i<sp/>=<sp/>0;<sp/>proj_i&lt;projections.size();<sp/>proj_i++)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1F();</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>gate<sp/>=<sp/>projections[proj_i];</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_co_analyse_1abecf48371e430ad0cc8dfb063e6d951d" kindref="member">projectY</ref>(intermediate.back(),<sp/>histo,<sp/>gate.first,<sp/>gate.second);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>histo_name<sp/>=<sp/>matrix_name+</highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">+std::to_string(gate.first)+</highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">+std::to_string(gate.second);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intermediate_proj[proj_i].emplace_back(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(histo-&gt;Clone(histo_name.c_str())));</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>w<sp/>=<sp/>totProjX[x]/total;<sp/>//<sp/>Weight<sp/>of<sp/>the<sp/>y<sp/>spectra<sp/>at<sp/>bin<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>startY;<sp/>y&lt;stopY;<sp/>y++)<sp/></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sub<sp/>=<sp/>totProjY[y]<sp/>*<sp/>totProjX[x];</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>&amp;<sp/>sub<sp/>=<sp/>totProjY[y]<sp/>*<sp/>w<sp/>*<sp/>matrix-&gt;GetBinContent(x,<sp/>y);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(sub&gt;0)<sp/>for<sp/>(int<sp/>x2<sp/>=<sp/>startX;<sp/>x2&lt;stopX;<sp/>x2++)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>&amp;<sp/>global_bin<sp/>=<sp/>matrix-&gt;GetBin(x2,<sp/>y);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>&amp;<sp/>new_value<sp/>=<sp/>clone-&gt;GetBinContent(global_bin)-sub;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(new_value&gt;0)<sp/>clone<sp/>-&gt;<sp/>SetBinContent(global_bin,<sp/>new_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_value<sp/>=<sp/>clone-&gt;GetBinContent(x,<sp/>y)-sub/total;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clone<sp/>-&gt;<sp/>SetBinContent(x,<sp/>y,<sp/>new_value);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clone<sp/>-&gt;<sp/>SetBinContent(x,<sp/>y,<sp/>(new_value&gt;0)<sp/>?<sp/>new_value<sp/>:<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Substraction<sp/>done,<sp/>copying<sp/>back...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>matrix;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH2*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(clone-&gt;Clone());</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print(&quot;Renormalising...&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normalizeBidim(matrix,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;RemoveRandomY<sp/>done.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writeIntermediate)</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Writting<sp/>intermediate<sp/>steps...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>filename<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Intermediate_&quot;</highlight><highlight class="normal">)+matrix-&gt;GetName()+</highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>TFile::Open(filename.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;recreate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file-&gt;cd();</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrix-&gt;Write();</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(auto<sp/>&amp;<sp/>histo<sp/>:<sp/>intermediate)<sp/>if<sp/>(histo!=nullptr)<sp/>histo<sp/>-&gt;<sp/>Write();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>projections<sp/>:<sp/>intermediate_proj)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>histo<sp/>:<sp/>projections)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(histo!=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>histo<sp/>-&gt;<sp/>Write();</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file-&gt;Write();</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file-&gt;Close();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(filename,<sp/></highlight><highlight class="stringliteral">&quot;written&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="namespace_co_analyse_1ad13b7eeaa3d7d9a30cdf04a8b0d17088" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1ad13b7eeaa3d7d9a30cdf04a8b0d17088" kindref="member">setX</ref>(TH2*<sp/>matrix,<sp/>TH1*<sp/>proj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>binX)</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){<ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>histo<sp/>nullptr<sp/>in<sp/>CoAnalyse::setX&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proj<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;Projection<sp/>histo<sp/>nullptr<sp/>in<sp/>CoAnalyse::setX&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binY<sp/>=<sp/>0;<sp/>binY&lt;matrix-&gt;GetNbinsY();<sp/>binY++)<sp/>matrix-&gt;SetBinContent(binX,<sp/>binY,<sp/>proj-&gt;GetBinContent(binY));</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="732" refid="namespace_co_analyse_1a53744e2ddfba6a4a188ada9ed1bc6272" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1a53744e2ddfba6a4a188ada9ed1bc6272" kindref="member">projectX</ref>(TH2*<sp/>matrix,<sp/>TH1*<sp/>proj)</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>histo<sp/>nullptr<sp/>in<sp/>CoAnalyse::projectX&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nbBins<sp/>=<sp/>matrix-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proj<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>proj<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1F();</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>proj-&gt;SetBins(nbBins,<sp/><ref refid="lib_root_8hpp_1ab23c9fed2f973bde045e7d90c8e1f2fe" kindref="member">minXaxis</ref>(matrix),<sp/><ref refid="lib_root_8hpp_1a0269226b4d78b1089ef77180712147e0" kindref="member">maxXaxis</ref>(matrix));</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y&lt;nbBins;<sp/>y++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x&lt;nbBins;<sp/>x++)<sp/>proj-&gt;AddBinContent(x,<sp/>matrix-&gt;GetBinContent(x,<sp/>y));</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="742" refid="namespace_co_analyse_1a0158170fa443490d844333c1acd9a89a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1a53744e2ddfba6a4a188ada9ed1bc6272" kindref="member">projectX</ref>(TH2*<sp/>matrix,<sp/>TH1*<sp/>proj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>binY)</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>histo<sp/>nullptr<sp/>in<sp/>CoAnalyse::projectX&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nbBins<sp/>=<sp/>matrix-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proj<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>proj<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1F();</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>proj-&gt;SetBins(nbBins,<ref refid="lib_root_8hpp_1ab23c9fed2f973bde045e7d90c8e1f2fe" kindref="member">minXaxis</ref>(matrix),<sp/><ref refid="lib_root_8hpp_1a0269226b4d78b1089ef77180712147e0" kindref="member">maxXaxis</ref>(matrix));</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x&lt;nbBins;<sp/>x++)<sp/>proj-&gt;SetBinContent(x,<sp/>matrix-&gt;GetBinContent(x,<sp/>binY));</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="752" refid="namespace_co_analyse_1aa27f433db27fe9babd4c55421121556d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1a53744e2ddfba6a4a188ada9ed1bc6272" kindref="member">projectX</ref>(TH2*<sp/>matrix,<sp/>TH1*<sp/>proj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>binYmin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>binYmax)</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>histo<sp/>nullptr<sp/>in<sp/>CoAnalyse::projectX&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nbBins<sp/>=<sp/>matrix-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proj<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>proj<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1F();</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>proj-&gt;SetBins(nbBins,<sp/><ref refid="lib_root_8hpp_1ab23c9fed2f973bde045e7d90c8e1f2fe" kindref="member">minXaxis</ref>(matrix),<sp/><ref refid="lib_root_8hpp_1a0269226b4d78b1089ef77180712147e0" kindref="member">maxXaxis</ref>(matrix));</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>binYmin;<sp/>y&lt;binYmax;<sp/>y++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x&lt;nbBins;<sp/>x++)<sp/></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>proj-&gt;AddBinContent(x,<sp/>matrix-&gt;GetBinContent(x,<sp/>y));</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="763" refid="namespace_co_analyse_1a2d7393e48336effee246cbbc33822847" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1a53744e2ddfba6a4a188ada9ed1bc6272" kindref="member">projectX</ref>(TH2*<sp/>matrix,<sp/>TH1*<sp/>proj,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>binYmin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>binYmax)</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_co_analyse_1a53744e2ddfba6a4a188ada9ed1bc6272" kindref="member">projectX</ref>(matrix,<sp/>proj,<sp/>matrix-&gt;GetYaxis()-&gt;FindBin(binYmin),<sp/>matrix-&gt;GetYaxis()-&gt;FindBin(binYmax));</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="769" refid="namespace_co_analyse_1ac1aa3fcfcc46318e4f0d6f42510471a0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1ac1aa3fcfcc46318e4f0d6f42510471a0" kindref="member">setY</ref>(TH2*<sp/>matrix,<sp/>TH1*<sp/>proj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>binY)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){<ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>histo<sp/>nullptr<sp/>in<sp/>CoAnalyse::setY&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proj<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;Projection<sp/>histo<sp/>nullptr<sp/>in<sp/>CoAnalyse::setY&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binX<sp/>=<sp/>0;<sp/>binX&lt;matrix-&gt;GetNbinsX();<sp/>binX++)<sp/>matrix-&gt;SetBinContent(binX,<sp/>binY,<sp/>proj-&gt;GetBinContent(binY));</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="777" refid="namespace_co_analyse_1a2a89fce5d95da5f0448d4a9fba93a108" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1a2a89fce5d95da5f0448d4a9fba93a108" kindref="member">removeRandomBidim</ref>(TH2*<sp/>matrix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations<sp/>=<sp/>1,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>save_intermediate<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="namespace_co_analyse_1a0c12c2535bb054631b3b0304a1dc9a34" kindref="member">ProjectionsBins</ref><sp/>projectionsY<sp/>=<sp/>{{}},<sp/><ref refid="namespace_co_analyse_1a0c12c2535bb054631b3b0304a1dc9a34" kindref="member">ProjectionsBins</ref><sp/>projectionsX<sp/>=<sp/>{{}})</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matrix-&gt;Rebin2D(2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bins_x<sp/>=<sp/>matrix-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bins_y<sp/>=<sp/>matrix-&gt;GetNbinsY();</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startX<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stopX<sp/>=<sp/>bins_x+1;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startY<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stopY<sp/>=<sp/>bins_y+1;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>matrix_name<sp/>=<sp/>matrix-&gt;GetName();</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>iterations_sqr<sp/>=<sp/>iterations*iterations;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>proportions<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>&amp;<sp/>iterations_pow4<sp/>=<sp/>iterations*iterations*iterations*iterations;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>maximum<sp/>=<sp/>matrix-&gt;GetMaximum();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;TH1*&gt;&gt;<sp/>intermediate_projX(projectionsX.size());</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;TH1*&gt;&gt;<sp/>intermediate_projY(projectionsY.size());</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TH1D*&gt;<sp/>save_totProjX;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TH1D*&gt;<sp/>save_totProjY;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;TH2*&gt;<sp/>clones;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>integrals(iterations_sqr,0.);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;std::vector&lt;std::vector&lt;double&gt;&gt;&gt;<sp/>save_sub(iterations_sqr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>sub_moyX(iterations_sqr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>sub_moyY(iterations_sqr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TH1D*&gt;<sp/>save_sub_projX;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TH1D*&gt;<sp/>save_sub_projY;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>0;<sp/>it&lt;iterations;<sp/>it++)<sp/></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save_sub[it].resize(bins_x+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sub_moyX[it].resize(bins_x+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x&lt;bins_x+1;<sp/>x++)<sp/></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sub_moyX[it][x]<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save_sub[it][x].resize(bins_y+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>y<sp/>=<sp/>0;<sp/>y&lt;bins_y+1;<sp/>y++)<sp/>save_sub<sp/>[it][x][y]<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sub_moyY[it].resize(bins_y+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>y<sp/>=<sp/>0;<sp/>y&lt;bins_y+1;<sp/>y++)<sp/>sub_moyY[it][y]<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>totProjX(bins_x+1);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>totProjY(bins_y+1);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>totProjX_buf(bins_x+1);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>totProjY_buf(bins_y+1);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>startX;<sp/>x&lt;bins_x+1;<sp/>x++)<sp/></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>startY;<sp/>y&lt;bins_y+1;<sp/>y++)<sp/></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>value<sp/>=<sp/>matrix-&gt;GetBinContent(x,y);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totProjX[x]<sp/>+=<sp/>value;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totProjY[y]<sp/>+=<sp/>value;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totProjX_buf[x]<sp/>+=<sp/>value;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totProjY_buf[y]<sp/>+=<sp/>value;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>extremal<sp/>lines<sp/>to<sp/>avoid<sp/>edge<sp/>effects<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x&lt;stopX;<sp/>x++)<sp/></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrix-&gt;SetBinContent(x,0,0);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrix-&gt;SetBinContent(x,bins_x,0);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y&lt;stopX;<sp/>y++)<sp/>matrix-&gt;SetBinContent(0,y,0);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>firstTotProjX<sp/>=<sp/>matrix-&gt;ProjectionX(</highlight><highlight class="stringliteral">&quot;firstTotProjX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>firstTotProjY<sp/>=<sp/>matrix-&gt;ProjectionY(</highlight><highlight class="stringliteral">&quot;firstTotProjY&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>sub_array;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector__functions_8hpp_1a5369c19ff7c2d997fd60b179355cf4ab" kindref="member">fill2D</ref>(sub_array,<sp/>stopX,<sp/>stopY,<sp/>0.0);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>speed_array;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector__functions_8hpp_1a5369c19ff7c2d997fd60b179355cf4ab" kindref="member">fill2D</ref>(speed_array,<sp/>stopX,<sp/>stopY,<sp/>0.0);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>real_sub_array;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill2D(real_sub_array,<sp/>stopX,<sp/>stopY,<sp/>0.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Substracting&quot;</highlight><highlight class="normal">,<sp/>matrix_name,<sp/></highlight><highlight class="stringliteral">&quot;with&quot;</highlight><highlight class="normal">,<sp/>iterations,<sp/></highlight><highlight class="stringliteral">&quot;iterations...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>0;<sp/>it&lt;iterations;<sp/>it++)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Iteration&quot;</highlight><highlight class="normal">,<sp/>it);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_intermediate)</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_totProjX.emplace_back(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(firstTotProjX-&gt;Clone((</highlight><highlight class="stringliteral">&quot;totProjX_&quot;</highlight><highlight class="normal">+std::to_string(<ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(it))).c_str())));</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_totProjY.emplace_back(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(firstTotProjY-&gt;Clone((</highlight><highlight class="stringliteral">&quot;totProjY_&quot;</highlight><highlight class="normal">+std::to_string(<ref refid="lib_co_8hpp_1a48e80fbfd11f9fb219b92ba1c29c1b2a" kindref="member">int_cast</ref>(it))).c_str())));</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(it&gt;0)<sp/>save_sub_projX.emplace_back(dynamic_cast&lt;TH1D*&gt;(firstTotProjX-&gt;Clone((&quot;sub_projX_&quot;+std::to_string((int)(it-1))).c_str())));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(it&gt;0)<sp/>save_sub_projY.emplace_back(dynamic_cast&lt;TH1D*&gt;(firstTotProjY-&gt;Clone((&quot;sub_projY_&quot;+std::to_string((int)(it-1))).c_str())));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x&lt;bins_x+1;<sp/>x++)<sp/></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_totProjX[it]-&gt;SetBinContent(x,<sp/>totProjX[x]);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(it&gt;0)<sp/>save_sub_projX[it-1]-&gt;SetBinContent(x,<sp/>sub_moyX[it-1][x]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y&lt;bins_y+1;<sp/>y++)<sp/></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save_totProjY[it]-&gt;SetBinContent(y,<sp/>totProjY[y]);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(it&gt;0)<sp/>save_sub_projY[it-1]-&gt;SetBinContent(y,<sp/>sub_moyY[it-1][y]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>total<sp/>=<sp/>matrix-&gt;Integral();</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>&amp;<sp/>prev_total<sp/>=<sp/>(it&gt;0)<sp/>?<sp/>clones[it-1]-&gt;Integral()<sp/>:<sp/>total;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>&amp;<sp/>prev_total2<sp/>=<sp/>(it&gt;0)<sp/>?<sp/>clones[it-1]-&gt;Integral()<sp/>:<sp/>total;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>startX;<sp/>x&lt;stopX;<sp/>x++)</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>startY;<sp/>y&lt;stopY;<sp/>y++)<sp/></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>matrix-&gt;GetBinContent(x,<sp/>y);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V1<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>diff<sp/>=<sp/>(it&gt;0)<sp/>?<sp/>clones[it-1]-&gt;GetBinContent(x,y)*total/prev_total<sp/>-<sp/>value<sp/>:<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>&amp;<sp/>sub<sp/>=<sp/>(totProjY[y]<sp/>*<sp/>totProjX[x])/(iterations*total);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>&amp;<sp/>new_value<sp/>=<sp/>value<sp/>-<sp/>sub<sp/>-<sp/>sqrt(diff)/iterations;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V2<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save_sub[it][x][y]<sp/>=<sp/>(totProjX[x]<sp/>*<sp/>totProjY[y])/(iterations*total);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>new_value<sp/>=<sp/>value<sp/>-<sp/>save_sub[it][x][y];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>totProjX_buf[x]<sp/>-=<sp/>save_sub[it][x][y];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>totProjY_buf[y]<sp/>-=<sp/>save_sub[it][x][y];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V3<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sub<sp/>=<sp/>(totProjX[x]<sp/>*<sp/>totProjY[y])/(proportions*total);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iterations&gt;1)<sp/>sub<sp/>*=<sp/>(<sp/>1.<sp/>-<sp/>(sub/(proportions*value)));</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>sub<sp/>*=<sp/>proportions;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix<sp/>-&gt;<sp/>SetBinContent(x,<sp/>y,<sp/>value<sp/>-<sp/>sub);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totProjX_buf[x]<sp/>-=<sp/>sub;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totProjY_buf[y]<sp/>-=<sp/>sub;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V4<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sub_array[x][y]<sp/>=<sp/>(totProjX[x]<sp/>*<sp/>totProjY[y])/(proportions*total);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>speed_array[x][y]<sp/>=<sp/>sub_array[x][y]/value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V4<sp/>:<sp/>(the<sp/>iterations<sp/>are<sp/>done<sp/>excluding<sp/>the<sp/>extremal<sp/>lines<sp/>to<sp/>avoid<sp/>edge<sp/>effet<sp/>:)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>x<sp/>=<sp/>1;<sp/>x&lt;bins_x;<sp/>x++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>(int<sp/>y<sp/>=<sp/>1;<sp/>y&lt;bins_y;<sp/>y++)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>an<sp/>average<sp/>of<sp/>the<sp/>speed<sp/>around<sp/>the<sp/>bin<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>mean_speed<sp/>=<sp/>speed_array[x][y];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>speed_array[x-1][y-1]*0.0313<sp/>+<sp/>speed_array[x][y-1]*0.0938<sp/>+<sp/>speed_array[x+1][y-1]*0.0313<sp/>+<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>speed_array[x-1][y]<sp/><sp/>*0.0938<sp/>+<sp/>speed_array[x][y]<sp/><sp/>*0.5<sp/><sp/><sp/><sp/>+<sp/>speed_array[x+1][y]<sp/><sp/>*0.0938<sp/>+<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>speed_array[x-1][y+1]*0.0313<sp/>+<sp/>speed_array[x][y+1]*0.0938<sp/>+<sp/>speed_array[x+1][y+1]*0.0313<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>const<sp/>&amp;<sp/>sub<sp/>=<sp/>sub_array[x][y]<sp/>*<sp/>(<sp/>1<sp/>-<sp/>mean_speed);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>matrix<sp/>-&gt;<sp/>SetBinContent(x,<sp/>y,<sp/>matrix-&gt;GetBinContent(x,y)<sp/>-<sp/>sub);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>totProjX_buf[x]<sp/>-=<sp/>sub;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>totProjY_buf[y]<sp/>-=<sp/>sub;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(save_intermediate)<sp/></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Project<sp/>on<sp/>the<sp/>axis<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>proj_i<sp/>=<sp/>0;<sp/>proj_i&lt;projectionsY.size();<sp/>proj_i++)</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1F();</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>gate<sp/>=<sp/>projectionsY[proj_i];</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gate.first<sp/>==<sp/>gate.second)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_co_analyse_1abecf48371e430ad0cc8dfb063e6d951d" kindref="member">projectY</ref>(matrix,<sp/>histo,<sp/>gate.first,<sp/>gate.second);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>histo_name<sp/>=<sp/>matrix_name+</highlight><highlight class="stringliteral">&quot;_projY_&quot;</highlight><highlight class="normal">+std::to_string(gate.first)+</highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">+std::to_string(gate.second)+</highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">+std::to_string(it);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intermediate_projY[proj_i].emplace_back(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(histo-&gt;Clone(histo_name.c_str())));</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>proj_i<sp/>=<sp/>0;<sp/>proj_i&lt;projectionsX.size();<sp/>proj_i++)</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1F();</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>gate<sp/>=<sp/>projectionsX[proj_i];</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gate.first<sp/>==<sp/>gate.second)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_co_analyse_1a53744e2ddfba6a4a188ada9ed1bc6272" kindref="member">projectX</ref>(matrix,<sp/>histo,<sp/>gate.first,<sp/>gate.second);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>histo_name<sp/>=<sp/>matrix_name+</highlight><highlight class="stringliteral">&quot;_projX_&quot;</highlight><highlight class="normal">+std::to_string(gate.first)+</highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">+std::to_string(gate.second)+</highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">+std::to_string(it);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intermediate_projX[proj_i].emplace_back(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(histo-&gt;Clone(histo_name.c_str())));</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>total<sp/>projections<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>totProjX<sp/>=<sp/>totProjX_buf;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>totProjY<sp/>=<sp/>totProjY_buf;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normalizeBidim(matrix,<sp/>maximum);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(save_intermediate)</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Writting<sp/>intermediate<sp/>steps...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>filename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Background_removed_&quot;</highlight><highlight class="normal">+matrix_name+</highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>TFile::Open(filename.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;recreate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file-&gt;cd();</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrix-&gt;Write();</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>histo<sp/>:<sp/>save_totProjX)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(histo!=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>histo<sp/>-&gt;<sp/>Write();</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>histo<sp/>:<sp/>save_totProjY)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(histo!=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>histo<sp/>-&gt;<sp/>Write();</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>histo<sp/>:<sp/>save_sub_projX)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(histo!=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>histo<sp/>-&gt;<sp/>Write();</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>histo<sp/>:<sp/>save_sub_projY)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(histo!=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>histo<sp/>-&gt;<sp/>Write();</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>projections<sp/>:<sp/>intermediate_projX)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>histo<sp/>:<sp/>projections)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(histo!=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>histo<sp/>-&gt;<sp/>Write();</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>projections<sp/>:<sp/>intermediate_projY)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>histo<sp/>:<sp/>projections)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(histo!=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>histo<sp/>-&gt;<sp/>Write();</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file-&gt;Write();</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file-&gt;Close();</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(filename,<sp/></highlight><highlight class="stringliteral">&quot;written&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="983" refid="namespace_co_analyse_1acb07ede224cab3e9289d25c72c099b24" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="namespace_co_analyse_1acb07ede224cab3e9289d25c72c099b24" kindref="member">extractBackgroundArray</ref>(std::vector&lt;double&gt;<sp/>&amp;<sp/>source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nsmooth<sp/>=<sp/>10)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;depecrated<sp/>(&quot;</highlight><highlight class="normal">,<sp/>nsmooth,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>s<sp/>=<sp/>new<sp/>TSpectrum();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>s-&gt;Background(source.data(),source.size(),nsmooth,TSpectrum::kBackDecreasingWindow,TSpectrum::kBackOrder2,kTRUE,TSpectrum::kBackSmoothing3,kFALSE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>s-&gt;Delete();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>source;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="993" refid="namespace_co_analyse_1accb0147ca7573fc7dade0af93673a4e3" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="namespace_co_analyse_1acb07ede224cab3e9289d25c72c099b24" kindref="member">extractBackgroundArray</ref>(TH1F<sp/>*<sp/>histo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nsmooth<sp/>=<sp/>10)</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;depecrated<sp/>(&quot;</highlight><highlight class="normal">,<sp/>histo-&gt;GetName(),<sp/>nsmooth,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>&amp;<sp/>nbins<sp/>=<sp/>histo-&gt;GetNbinsX();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;double&gt;<sp/>source(nbins);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>bin=0;bin&lt;nbins;bin++)<sp/>source[bin]=histo-&gt;GetBinContent(bin+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>extractBackgroundArray(source,<sp/>nsmooth);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;(0);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015" refid="namespace_co_analyse_1afa2d6e36c43655ace45e8aa55a53d4da" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_co_analyse_1afa2d6e36c43655ace45e8aa55a53d4da" kindref="member">removeBackground</ref>(TH1<sp/>*<sp/>histo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>niter<sp/>=<sp/>10,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>fit_options<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bidim_options<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">)<sp/>noexcept</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!histo<sp/>||<sp/>histo-&gt;IsZombie())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>dim<sp/>=<sp/>histo-&gt;GetDimension();</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>background<sp/>=<sp/>histo<sp/>-&gt;<sp/>ShowBackground(niter,<sp/>fit_options.c_str());</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin=0;<sp/>bin&lt;histo-&gt;GetNbinsX();<sp/>bin++)<sp/></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>new_value<sp/>=<sp/>histo-&gt;GetBinContent(bin)<sp/>-<sp/>background-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo-&gt;SetBinContent(bin,<sp/>(new_value&lt;1)<sp/>?<sp/>1<sp/>:<sp/>new_value);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>choice<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>0<sp/>:<sp/>X,<sp/>1<sp/>:<sp/>Y,<sp/>2<sp/>:<sp/>symmetric</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bidim_options.find(</highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal">))<sp/>choice<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bidim_options.find(</highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">))<sp/>choice<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bidim<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH2F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(histo);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nXbins<sp/>=<sp/>bidim<sp/>-&gt;<sp/>GetNbinsX();</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>nYbins<sp/>=<sp/>bidim<sp/>-&gt;<sp/>GetNbinsY();</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(choice<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nXbins<sp/>!=<sp/>nYbins)<sp/>{<ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;CoAnalyse::removeBackground<sp/>for<sp/>2D<sp/>spectra<sp/>is<sp/>suited<sp/>only<sp/>for<sp/>symmetric<sp/>spectra&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(choice)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Substract<sp/>the<sp/>background<sp/>of<sp/>Y<sp/>spectra<sp/>gating<sp/>on<sp/>each<sp/>X<sp/>bins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binX<sp/>=<sp/>0;<sp/>binX&lt;nXbins;<sp/>binX++)</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1F*<sp/>histo1D<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_co_analyse_1abecf48371e430ad0cc8dfb063e6d951d" kindref="member">projectY</ref>(bidim,<sp/>histo1D,<sp/>binX);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_co_analyse_1afa2d6e36c43655ace45e8aa55a53d4da" kindref="member">removeBackground</ref>(histo1D,<sp/>niter);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_co_analyse_1ad13b7eeaa3d7d9a30cdf04a8b0d17088" kindref="member">setX</ref>(bidim,<sp/>histo1D,<sp/>binX);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>histo1D;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Substract<sp/>the<sp/>background<sp/>of<sp/>X<sp/>spectra<sp/>gating<sp/>on<sp/>each<sp/>Y<sp/>bins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binY<sp/>=<sp/>0;<sp/>binY&lt;nYbins;<sp/>binY++)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1F*<sp/>histo1D<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1F(</highlight><highlight class="stringliteral">&quot;temp&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;temp&quot;</highlight><highlight class="normal">,nYbins,<sp/>bidim-&gt;GetYaxis()-&gt;GetXmax(),<sp/>bidim-&gt;GetYaxis()-&gt;GetXmin());</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_co_analyse_1a53744e2ddfba6a4a188ada9ed1bc6272" kindref="member">projectX</ref>(bidim,<sp/>histo1D,<sp/>binY);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_co_analyse_1afa2d6e36c43655ace45e8aa55a53d4da" kindref="member">removeBackground</ref>(histo1D,<sp/>niter);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_co_analyse_1ac1aa3fcfcc46318e4f0d6f42510471a0" kindref="member">setY</ref>(bidim,<sp/>histo1D,<sp/>binY);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>histo1D;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(choice<sp/>==<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//2.<sp/>Resymetrise<sp/>the<sp/>matrice<sp/>:<sp/>(PROTOTYPAL<sp/>!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>print(&quot;Symetrisation<sp/>:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>(int<sp/>binY<sp/>=<sp/>0;<sp/>binY&lt;nYbins;<sp/>binY++)<sp/>for<sp/>(int<sp/>binX<sp/>=<sp/>0;<sp/>binX&lt;nXbins;<sp/>binX++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>histo-&gt;SetBinContent(binX,<sp/>binY,<sp/>histo-&gt;GetBinContent(binY,<sp/>binX));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="comment">//<sp/><sp/><sp/>Manage<sp/>histo<sp/>files<sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089" refid="lib_root_8hpp_1a193ab9e416757c44b70605b92a8824b8" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="lib_root_8hpp_1a193ab9e416757c44b70605b92a8824b8" kindref="member">get_TH1F_names</ref>(TFile<sp/>*<sp/>file)</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file)<sp/>{<ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>get_TH1F_names(TFile<sp/>*<sp/>file)<sp/>:<sp/>file<sp/>is<sp/>nullptr&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list<sp/>=<sp/>file-&gt;GetListOfKeys();</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>keyAsObj<sp/>:<sp/>*list)</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;TKey&gt;<sp/>key<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TKey*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(keyAsObj));</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>className<sp/>=<sp/><sp/>key-&gt;GetClassName();</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(className<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;TH1F&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TObject*<sp/>obj<sp/>=<sp/>key-&gt;ReadObj();</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TH1*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(histo-&gt;GetName());</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108" refid="lib_root_8hpp_1a410ba7e9505d97b596562fba45237097" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="lib_root_8hpp_1a193ab9e416757c44b70605b92a8824b8" kindref="member">get_TH1F_names</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>filename)</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>TFile::Open(filename.c_str());</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><sp/><ref refid="lib_root_8hpp_1a193ab9e416757c44b70605b92a8824b8" kindref="member">get_TH1F_names</ref>(file);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>file-&gt;Close();</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116" refid="lib_root_8hpp_1a42c3d6ca5f1a5f58dd1cd77f5fa79174" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a42c3d6ca5f1a5f58dd1cd77f5fa79174" kindref="member">TH1F_map</ref><sp/>=<sp/>std::map&lt;std::string,<sp/>TH1F*&gt;;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118" refid="lib_root_8hpp_1a7b3e18ff762f0dfa647f03b8275e33c0" refkind="member"><highlight class="normal"><ref refid="lib_root_8hpp_1a42c3d6ca5f1a5f58dd1cd77f5fa79174" kindref="member">TH1F_map</ref><sp/><ref refid="lib_root_8hpp_1a7b3e18ff762f0dfa647f03b8275e33c0" kindref="member">get_TH1F_map</ref>(TFile<sp/>*<sp/>file)</highlight></codeline>
<codeline lineno="1119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><ref refid="lib_root_8hpp_1a42c3d6ca5f1a5f58dd1cd77f5fa79174" kindref="member">TH1F_map</ref><sp/>ret;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>names<sp/>=<sp/><ref refid="lib_root_8hpp_1a193ab9e416757c44b70605b92a8824b8" kindref="member">get_TH1F_names</ref>(file);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>name<sp/>:<sp/>names)</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.emplace(name,<sp/>file-&gt;Get&lt;TH1F&gt;(name.c_str()));</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129" refid="lib_root_8hpp_1a8831744e89671493c0079722208c9900" refkind="member"><highlight class="normal"><ref refid="lib_root_8hpp_1a42c3d6ca5f1a5f58dd1cd77f5fa79174" kindref="member">TH1F_map</ref><sp/><ref refid="lib_root_8hpp_1a7b3e18ff762f0dfa647f03b8275e33c0" kindref="member">get_TH1F_map</ref>(TFile<sp/>*<sp/>file,<sp/>std::vector&lt;std::string&gt;<sp/>&amp;<sp/>names)</highlight></codeline>
<codeline lineno="1130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><ref refid="lib_root_8hpp_1a42c3d6ca5f1a5f58dd1cd77f5fa79174" kindref="member">TH1F_map</ref><sp/>ret;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>names<sp/>=<sp/><ref refid="lib_root_8hpp_1a193ab9e416757c44b70605b92a8824b8" kindref="member">get_TH1F_names</ref>(file);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>name<sp/>:<sp/>names)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.emplace(name,<sp/>file-&gt;Get&lt;TH1F&gt;(name.c_str()));</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1141" refid="lib_root_8hpp_1a0bbbdcf3f7ab789fec1bdd518f3e0bbe" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="lib_root_8hpp_1a0bbbdcf3f7ab789fec1bdd518f3e0bbe" kindref="member">get_names_of</ref>(TFile<sp/>*<sp/>file)</highlight></codeline>
<codeline lineno="1142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>T*<sp/>temp_obj<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file)<sp/>{<ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>get_names_of&lt;T&gt;(TFile<sp/>*<sp/>file)<sp/>:<sp/>file<sp/>is<sp/>nullptr&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list<sp/>=<sp/>file-&gt;GetListOfKeys();</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>keyAsObj<sp/>:<sp/>*list)</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;TKey&gt;<sp/>key<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TKey*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(keyAsObj));</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(key-&gt;GetClassName(),<sp/>temp_obj-&gt;ClassName())<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TObject*<sp/>obj<sp/>=<sp/>key-&gt;ReadObj();</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>t<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(t-&gt;GetName());</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>temp_obj;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1162" refid="lib_root_8hpp_1ae6fdfc9173e2ab5eb99b26909696c5bf" refkind="member"><highlight class="normal">std::map&lt;std::string,<sp/>T&gt;<sp/><ref refid="lib_root_8hpp_1ae6fdfc9173e2ab5eb99b26909696c5bf" kindref="member">create_map_of</ref>(TFile<sp/>*<sp/>file)</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><ref refid="lib_co_8hpp_1a6df2dcd4b1f61c75dc292942bc5ca74d" kindref="member">throw_error</ref>(</highlight><highlight class="stringliteral">&quot;create_map_of&lt;T&gt;()<sp/>DEV<sp/>!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>T&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>names<sp/>(get_names_of&lt;T&gt;(file));</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>name<sp/>:<sp/>names)</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.emplace(name,<sp/>file-&gt;Get&lt;T&gt;(name.c_str()));</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="comment">//<sp/>OTHERS<sp/>//</highlight></codeline>
<codeline lineno="1177"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178" refid="lib_root_8hpp_1ad880be57855ca84e4bb4d2af9b0ebef7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1ad880be57855ca84e4bb4d2af9b0ebef7" kindref="member">resize_view_range</ref>(TH1F<sp/>*<sp/>histo)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>histo-&gt;GetXaxis()-&gt;SetRange(histo-&gt;FindFirstBinAbove(histo-&gt;GetMinimum()),<sp/>histo-&gt;FindLastBinAbove(histo-&gt;GetMinimum()));</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182" refid="lib_root_8hpp_1a659bf0d45f72032aa36a43cd4cc5b9ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1ad880be57855ca84e4bb4d2af9b0ebef7" kindref="member">resize_view_range</ref>(TH1F<sp/>*<sp/>histo,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>min)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>histo-&gt;GetXaxis()-&gt;SetRange(min,<sp/>histo-&gt;FindLastBinAbove(histo-&gt;GetMinimum()));</highlight></codeline>
<codeline lineno="1185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188" refid="lib_root_8hpp_1ab7f08b4e478a833328fa0fb5cebf88d2" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1ab7f08b4e478a833328fa0fb5cebf88d2" kindref="member">fuse_all_histo</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>outRoot<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;fused_histo.root&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bidim<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>files<sp/>=<sp/><ref refid="files__functions_8hpp_1a0b6555f0818e33170e5c3c3c513d6b91" kindref="member">list_files_in_folder</ref>(folder,<sp/>{</highlight><highlight class="stringliteral">&quot;root&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_file<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>std::vector&lt;std::unique_ptr&lt;TH1&gt;&gt;<sp/>all_TH1F;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>filename<sp/>:<sp/>files)</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>TFile::Open(filename.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list<sp/>=<sp/>file-&gt;GetListOfKeys();</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb_histos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(filename);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>keyAsObj<sp/>:<sp/>*list)</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;TKey&gt;<sp/>key<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TKey*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(keyAsObj));</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>className<sp/>=<sp/><sp/>key-&gt;GetClassName();</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(className<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;TH1F&quot;</highlight><highlight class="normal"><sp/>||<sp/>(bidim<sp/>&amp;&amp;<sp/>className<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;TH2F&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;TObject&gt;<sp/>obj<sp/>(key-&gt;ReadObj());</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj.get());</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>histo-&gt;GetName();</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_file)<sp/>all_TH1F.emplace_back(std::unique_ptr&lt;TH1&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(histo-&gt;Clone((name).c_str()))));</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb_histos<sp/>&gt;=<sp/>all_TH1F.size())<sp/></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_TH1F.emplace(all_TH1F.begin()+nb_histos,<sp/>std::unique_ptr&lt;TH1&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(histo-&gt;Clone((name).c_str()))));</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb_histos++;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>!=<sp/>all_TH1F[nb_histos]-&gt;GetName())<sp/></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>two<sp/>files<sp/>has<sp/>at<sp/>least<sp/>one<sp/>histogram<sp/>more<sp/>or<sp/>less,<sp/>one<sp/>need<sp/>to<sp/>find<sp/>it<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>checkpoint<sp/>=<sp/>nb_histos;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{nb_histos++;}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nb_histos&lt;all_TH1F.size()<sp/>&amp;&amp;<sp/>name<sp/>!=<sp/>all_TH1F[nb_histos]-&gt;GetName());</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>not<sp/>found<sp/>it<sp/>means<sp/>it<sp/>does<sp/>not<sp/>exist<sp/>and<sp/>needs<sp/>to<sp/>be<sp/>created<sp/>at<sp/>the<sp/>current<sp/>position<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb_histos<sp/>==<sp/>all_TH1F.size())</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>it<sp/>=<sp/>all_TH1F.begin()+checkpoint;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_TH1F.emplace(it,<sp/>std::unique_ptr&lt;TH1&gt;(</highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(histo-&gt;Clone((name).c_str()))));</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb_histos<sp/>=<sp/>checkpoint+1;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(all_TH1F[checkpoint]-&gt;GetName(),<sp/></highlight><highlight class="stringliteral">&quot;created&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_TH1F[nb_histos]-&gt;Add(histo);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb_histos++;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>first_file<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><ref refid="lib_root_8hpp_1a3b73f11bc69f125e12c1d48c9ed79a6e" kindref="member">unique_TFile</ref><sp/>outFile(TFile::Open(outRoot.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;RECREATE&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>outFile-&gt;cd();</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>histo<sp/>:<sp/>all_TH1F)<sp/>histo<sp/>-&gt;<sp/>Write();</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>outFile<sp/>-&gt;<sp/>Write();</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>outFile<sp/>-&gt;<sp/>Close();</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(outRoot,<sp/></highlight><highlight class="stringliteral">&quot;written&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>onClick(Int_t<sp/>event,<sp/>Int_t<sp/>x,<sp/>Int_t<sp/>y,<sp/>TObject*<sp/>obj)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(event<sp/>==<sp/>11)<sp/>{<sp/><sp/>//<sp/>Left<sp/>mouse<sp/>button<sp/>click</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1F*<sp/>hist<sp/>=<sp/>dynamic_cast&lt;TH1F*&gt;(obj);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(hist)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Double_t<sp/>xValue<sp/>=<sp/>hist-&gt;GetXaxis()-&gt;GetBinCenter(hist-&gt;GetXaxis()-&gt;FindBin(gPad-&gt;AbsPixeltoX(x)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Clicked<sp/>at<sp/>x-value:<sp/>%.2f\n&quot;,<sp/>xValue);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261" refid="lib_root_8hpp_1a17dc0eddbbe36a95d0397c09c597a338" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1a17dc0eddbbe36a95d0397c09c597a338" kindref="member">draw_all_TH1</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minX<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxX<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rebin<sp/>=<sp/>1,<sp/>std::string<sp/>pattern<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>TFile::Open(filename.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list<sp/>=<sp/>file-&gt;GetListOfKeys();</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;c1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>keyAsObj<sp/>:<sp/>*list)</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;TKey&gt;<sp/>key<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TKey*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(keyAsObj));</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::string(key-&gt;GetClassName())<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;TH1F&quot;</highlight><highlight class="normal"><sp/>||<sp/>std::string(key-&gt;GetClassName())<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;TH1D&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;TObject&gt;<sp/>obj<sp/>(key-&gt;ReadObj());</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj.get());</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>histo-&gt;GetName();</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!<ref refid="string__functions_8hpp_1a87d8e2cb69021ab11e443cb140349eb6" kindref="member">found</ref>(name,<sp/>pattern))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(name);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(histo-&gt;Integral()&lt;2)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>histo-&gt;Rebin(rebin);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxX<sp/>==<sp/>0)<sp/>maxX<sp/>=<sp/>histo-&gt;GetXaxis()-&gt;GetBinCenter(histo-&gt;GetNbinsX());</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>histo-&gt;GetXaxis()-&gt;SetRangeUser(minX,<sp/>maxX);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c1-&gt;cd();</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>histo-&gt;Draw();</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gPad-&gt;WaitPrimitive();</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c1-&gt;Update();</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289" refid="lib_root_8hpp_1afcf94131ca40144ef5106ddc22a60600" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1afcf94131ca40144ef5106ddc22a60600" kindref="member">MeanBetweenEdges</ref>(TH1F*<sp/>hist,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>edge1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>edge2)<sp/></highlight></codeline>
<codeline lineno="1290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>bin<sp/>indices<sp/>corresponding<sp/>to<sp/>the<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin1<sp/>=<sp/>hist-&gt;FindBin(edge1);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin2<sp/>=<sp/>hist-&gt;FindBin(edge2);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>mean<sp/>value<sp/>of<sp/>bin<sp/>centers<sp/>between<sp/>the<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" kindref="member">sum</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>bin1;<sp/>i<sp/>&lt;=<sp/>bin2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" kindref="member">sum</ref><sp/>+=<sp/>hist-&gt;GetBinCenter(i)<sp/>*<sp/>hist-&gt;GetBinContent(i);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>hist-&gt;GetBinContent(i);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>mean<sp/>value<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(count<sp/>!=<sp/>0)<sp/>?<sp/><ref refid="vector__functions_8hpp_1a2b29a4762dbbff2cabcb7e8a62cb0d39" kindref="member">sum</ref><sp/>/<sp/>count<sp/>:<sp/>0.0;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="comment">//<sp/>User<sp/>friendly<sp/>functions<sp/>//</highlight></codeline>
<codeline lineno="1310"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311" refid="lib_root_8hpp_1aeef6e33f0411ddfa55da992068e8de8f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1aeef6e33f0411ddfa55da992068e8de8f" kindref="member">removeFits</ref>(TH1*<sp/>histo)</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>funcs<sp/>=<sp/>histo-&gt;GetListOfFunctions();</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>funcs-&gt;GetSize();<sp/>++i)<sp/></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>TObject*<sp/>obj<sp/>=<sp/>funcs-&gt;At(i);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>&amp;&amp;<sp/>obj-&gt;InheritsFrom(TF1::Class()))<sp/></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>funcs-&gt;Remove(obj);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>obj;<sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>the<sp/>fit<sp/>function<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--i;<sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>index<sp/>because<sp/>funcs<sp/>size<sp/>has<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327" refid="lib_root_8hpp_1ad3470a3661e492e7d353b083639b8743" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1ad3470a3661e492e7d353b083639b8743" kindref="member">GetPoint</ref>(TVirtualPad<sp/>*<sp/>vpad,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>y)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pad<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TPad*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vpad);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>pad-&gt;Update();</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cutg<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TMarker*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(pad-&gt;WaitPrimitive(</highlight><highlight class="stringliteral">&quot;TMarker&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Marker&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cutg)<sp/>{<ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;CAN&apos;T<sp/>FIND<sp/>THE<sp/>PAD<sp/>OR<sp/>MOUSE<sp/>CLICK&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>cutg-&gt;GetX();</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>cutg-&gt;GetY();</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cutg;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341" refid="class_peak_fitter" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_peak_fitter" kindref="compound">PeakFitter</ref></highlight></codeline>
<codeline lineno="1342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1344" refid="class_peak_fitter_1a6eacc2d68d3b6f3fa954f1570b4ee870" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_peak_fitter_1a6eacc2d68d3b6f3fa954f1570b4ee870" kindref="member">PeakFitter</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1345" refid="class_peak_fitter_1ab7388a3d35abe30e593c429d5d442448" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_peak_fitter_1ab7388a3d35abe30e593c429d5d442448" kindref="member">~PeakFitter</ref>()</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350" refid="class_peak_fitter_1ac7184cc922b31d9c9c3ec80582f878c6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_peak_fitter_1ac7184cc922b31d9c9c3ec80582f878c6" kindref="member">PeakFitter</ref>(TH1*<sp/>histo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low_edge,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>high_edge)<sp/>:<sp/></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><ref refid="class_peak_fitter_1a17c767989b804103544ee0763d9b71be" kindref="member">m_histo</ref><sp/>(histo),</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><ref refid="class_peak_fitter_1ab66419dc7237fd8292f82826355375f8" kindref="member">m_low_edge</ref><sp/><sp/>(low_edge),</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><ref refid="class_peak_fitter_1aa94a3facb6d0dd7c297f4a88aa8d0c1f" kindref="member">m_high_edge</ref><sp/>(high_edge)</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_peak_fitter_1a841cf7c0b3f96186b22636f2df02e3d3" kindref="member">fit</ref>();</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359" refid="class_peak_fitter_1a841cf7c0b3f96186b22636f2df02e3d3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1a841cf7c0b3f96186b22636f2df02e3d3" kindref="member">fit</ref>()<sp/>{</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_peak_fitter_1a841cf7c0b3f96186b22636f2df02e3d3" kindref="member">fit</ref>(<ref refid="class_peak_fitter_1a17c767989b804103544ee0763d9b71be" kindref="member">m_histo</ref>,<sp/><ref refid="class_peak_fitter_1ab66419dc7237fd8292f82826355375f8" kindref="member">m_low_edge</ref>,<sp/><ref refid="class_peak_fitter_1aa94a3facb6d0dd7c297f4a88aa8d0c1f" kindref="member">m_high_edge</ref>);}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362" refid="class_peak_fitter_1a47cd33d5de6c62965edb2e34c49a6118" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1a47cd33d5de6c62965edb2e34c49a6118" kindref="member">fit</ref>(TH1*<sp/>histo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low_edge,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>high_edge,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref><sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sigma<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>constante<sp/>=<sp/>-1)</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>__CINT__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>histo-&gt;GetXaxis()-&gt;SetRangeUser(low_edge,<sp/>high_edge);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>histo-&gt;Draw();</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>gPad-&gt;Update();</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>gPad-&gt;WaitPrimitive();</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">//__CINT__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref><sp/>==<sp/>-1)<sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref><sp/>=<sp/>(high_edge+low_edge)/2;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(constante<sp/>==<sp/>-1)<sp/>constante<sp/>=<sp/>histo-&gt;GetMaximum();</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sigma<sp/>==<sp/>-1)<sp/>sigma<sp/>=<sp/>(high_edge-low_edge)/5.;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>TF1*<sp/>gaus0(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TF1(</highlight><highlight class="stringliteral">&quot;gaus0&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;gaus&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>gaus0<sp/>-&gt;<sp/>SetRange(low_edge,<sp/>high_edge);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>gaus0<sp/>-&gt;<sp/>SetParameters(<sp/>constante,<sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>,<sp/>sigma);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>histo<sp/>-&gt;<sp/><ref refid="class_fit" kindref="compound">Fit</ref>(gaus0,</highlight><highlight class="stringliteral">&quot;RQN+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma=<sp/>gaus0-&gt;GetParameter(2);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref><sp/>=<sp/>gaus0-&gt;GetParameter(1);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>mean<sp/>can<sp/>be<sp/>shifted<sp/>away<sp/>from<sp/>the<sp/>actual<sp/>peak<sp/>position<sp/>because<sp/>of<sp/>the<sp/>background</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Therefore,<sp/>I<sp/>get<sp/>the<sp/>mean<sp/>position<sp/>from<sp/>the<sp/>mean<sp/>of<sp/>the<sp/>fitted<sp/>peak<sp/>and<sp/>the<sp/>weighted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>X<sp/>value<sp/>of<sp/>the<sp/>bin<sp/>with<sp/>maximum<sp/>content<sp/>and<sp/>the<sp/>two<sp/>bins<sp/>around<sp/>it<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mean_max_bins<sp/>=<sp/>0.;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>content_max_bins<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max_bin<sp/>=<sp/>histo-&gt;GetMaximumBin();</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_bin&lt;1)<sp/>max_bin<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>-1;<sp/>i&lt;2;<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mean_max_bins+=histo-&gt;GetBinCenter(max_bin+i)<sp/>*<sp/>histo-&gt;GetBinContent(max_bin+i);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>content_max_bins+=histo-&gt;GetBinContent(max_bin+i);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref><sp/>=<sp/>(<ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>+mean_max_bins/content_max_bins)/2;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_peak_fitter_1a727ceddfd60949055a086b35d1ac8e3d" kindref="member">m_order_background</ref>&lt;2)<sp/>{<ref refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" kindref="member">final_fit</ref><sp/>=<sp/>gaus0;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>TF1*<sp/>gaus1(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TF1(</highlight><highlight class="stringliteral">&quot;gaus1&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;gaus(0)+pol1(3)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>gaus1<sp/>-&gt;<sp/>SetRange(<ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>-5*sigma,<sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>+5*sigma);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>gaus1<sp/>-&gt;<sp/>SetParameters(gaus0-&gt;GetParameter(0),<sp/>gaus0-&gt;GetParameter(1),<sp/>gaus0-&gt;GetParameter(2));</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>histo<sp/>-&gt;<sp/><ref refid="class_fit" kindref="compound">Fit</ref>(gaus1,</highlight><highlight class="stringliteral">&quot;RQN+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_peak_fitter_1a727ceddfd60949055a086b35d1ac8e3d" kindref="member">m_order_background</ref>&lt;3)<sp/>{<ref refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" kindref="member">final_fit</ref><sp/>=<sp/>gaus1;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma=<sp/>gaus1-&gt;GetParameter(2);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref><sp/>=<sp/>gaus1-&gt;GetParameter(1);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref><sp/>=<sp/>(<ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>+histo-&gt;GetBinCenter(histo-&gt;GetMaximumBin()))/2;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>TF1*<sp/>gaus2(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TF1(</highlight><highlight class="stringliteral">&quot;gaus2&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;gaus(0)+pol2(3)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_peak_fitter_1a7f6ea41a7272addc3d3a309aedea9271" kindref="member">m_low_binning</ref>)<sp/>gaus2<sp/>-&gt;<sp/>SetRange(<ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>-4*sigma,<sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>+4*sigma);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gaus2<sp/>-&gt;<sp/>SetRange(<ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>-2*sigma,<sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>+2*sigma);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>gaus2<sp/>-&gt;<sp/>SetParameters(gaus1-&gt;GetParameter(0),<sp/>gaus1-&gt;GetParameter(1),<sp/>gaus1-&gt;GetParameter(2));</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>histo<sp/>-&gt;<sp/><ref refid="class_fit" kindref="compound">Fit</ref>(gaus2,</highlight><highlight class="stringliteral">&quot;RQN+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" kindref="member">final_fit</ref><sp/>=<sp/>gaus2;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" kindref="member">final_fit</ref>-&gt;Draw(</highlight><highlight class="stringliteral">&quot;same&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420" refid="class_peak_fitter_1a4a770d3564dad1c02c0ccad8bbfaa1ee" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1a4a770d3564dad1c02c0ccad8bbfaa1ee" kindref="member">operator-&gt;</ref>(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" kindref="member">final_fit</ref>;}</highlight></codeline>
<codeline lineno="1421" refid="class_peak_fitter_1abbebe1db98d32f0fda50c1edbd30296b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_peak_fitter_1abbebe1db98d32f0fda50c1edbd30296b" kindref="member">getFit</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" kindref="member">final_fit</ref>;}</highlight></codeline>
<codeline lineno="1422" refid="class_peak_fitter_1af1719649da41412e67dd10950de22924" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1af1719649da41412e67dd10950de22924" kindref="member">getConstante</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" kindref="member">final_fit</ref>-&gt;GetParameter(0);}</highlight></codeline>
<codeline lineno="1423" refid="class_peak_fitter_1ae83803972d52d79a55f2af7b1dde0ae5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1ae83803972d52d79a55f2af7b1dde0ae5" kindref="member">getMean</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" kindref="member">final_fit</ref>-&gt;GetParameter(1);}</highlight></codeline>
<codeline lineno="1424" refid="class_peak_fitter_1aecad4fbb3fc12ed9d845bb590858f653" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1aecad4fbb3fc12ed9d845bb590858f653" kindref="member">getSigma</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" kindref="member">final_fit</ref>-&gt;GetParameter(2);}</highlight></codeline>
<codeline lineno="1425" refid="class_peak_fitter_1acfa69ccabbbe06ec5cd5ea85e21b7e8f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1acfa69ccabbbe06ec5cd5ea85e21b7e8f" kindref="member">getBackground</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1426"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>background<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TF1(</highlight><highlight class="stringliteral">&quot;background&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pol2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>background-&gt;SetParameters(<ref refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" kindref="member">final_fit</ref>-&gt;GetParameter(3),<sp/><ref refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" kindref="member">final_fit</ref>-&gt;GetParameter(4),<sp/><ref refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" kindref="member">final_fit</ref>-&gt;GetParameter(5));</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>background;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432" refid="class_peak_fitter_1a21d2023f09f628c8c3c0483202d3ac3d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1a21d2023f09f628c8c3c0483202d3ac3d" kindref="member">setBackgroundOrder</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>order_background)<sp/>{<ref refid="class_peak_fitter_1a727ceddfd60949055a086b35d1ac8e3d" kindref="member">m_order_background</ref><sp/>=<sp/>order_background;}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1435" refid="class_peak_fitter_1a17c767989b804103544ee0763d9b71be" refkind="member"><highlight class="normal"><sp/><sp/>TH1*<sp/><ref refid="class_peak_fitter_1a17c767989b804103544ee0763d9b71be" kindref="member">m_histo</ref>;</highlight></codeline>
<codeline lineno="1436" refid="class_peak_fitter_1ab66419dc7237fd8292f82826355375f8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1ab66419dc7237fd8292f82826355375f8" kindref="member">m_low_edge</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1437" refid="class_peak_fitter_1aa94a3facb6d0dd7c297f4a88aa8d0c1f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1aa94a3facb6d0dd7c297f4a88aa8d0c1f" kindref="member">m_high_edge</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1438" refid="class_peak_fitter_1a727ceddfd60949055a086b35d1ac8e3d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1a727ceddfd60949055a086b35d1ac8e3d" kindref="member">m_order_background</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight></codeline>
<codeline lineno="1440" refid="class_peak_fitter_1a7f6ea41a7272addc3d3a309aedea9271" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter_1a7f6ea41a7272addc3d3a309aedea9271" kindref="member">m_low_binning</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442" refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" refkind="member"><highlight class="normal"><sp/><sp/>TF1*<sp/><ref refid="class_peak_fitter_1aefb677199a0080515e2574e269c99817" kindref="member">final_fit</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452" refid="class_biggest_peak_fitter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_biggest_peak_fitter" kindref="compound">BiggestPeakFitter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_peak_fitter" kindref="compound">PeakFitter</ref></highlight></codeline>
<codeline lineno="1453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1456" refid="class_biggest_peak_fitter_1a645977fa8bd708c4e9137d926c3136f0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_biggest_peak_fitter_1a645977fa8bd708c4e9137d926c3136f0" kindref="member">BiggestPeakFitter</ref>(TH1*<sp/>histo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low_edge<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>high_edge<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>order_background<sp/>=<sp/>3)</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_peak_fitter_1a21d2023f09f628c8c3c0483202d3ac3d" kindref="member">PeakFitter::setBackgroundOrder</ref>(order_background);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>initialRangeMin<sp/>=<sp/>histo-&gt;GetXaxis()-&gt;GetXmin();</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>initialRangeMax<sp/>=<sp/>histo-&gt;GetXaxis()-&gt;GetXmax();</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low_edge<sp/><sp/>==<sp/>-1)<sp/>low_edge<sp/><sp/>=<sp/>initialRangeMin;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(high_edge<sp/>==<sp/>-1)<sp/>high_edge<sp/>=<sp/>initialRangeMax;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>histo-&gt;GetXaxis()-&gt;SetRangeUser(low_edge,<sp/>high_edge);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dumb<sp/>sigma<sp/>of<sp/>the<sp/>maximum<sp/>peak<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>histo-&gt;GetMaximum();</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxbin<sp/>=<sp/>histo-&gt;GetMaximumBin();</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>trying<sp/>to<sp/>find<sp/>the<sp/>edges<sp/>starting<sp/>at<sp/>the<sp/>center<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin_peak_bin<sp/>=<sp/>histo-&gt;FindFirstBinAbove(max*0.8);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_peak_bin<sp/><sp/><sp/>=<sp/>histo-&gt;FindLastBinAbove(max*0.8);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end_peak_bin-begin_peak_bin&lt;3)<sp/>{--begin_peak_bin;<sp/>++end_peak_bin;}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sigma_bin<sp/>=<sp/>end_peak_bin-begin_peak_bin;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(histo-&gt;GetBinCenter(end_peak_bin),<sp/>histo-&gt;GetBinCenter(begin_peak_bin));</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sigma<sp/>=<sp/>histo-&gt;GetBinCenter(end_peak_bin)<sp/>-<sp/>histo-&gt;GetBinCenter(begin_peak_bin);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref><sp/><sp/>=<sp/>histo-&gt;GetBinCenter(maxbin);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sigma_bin<sp/>&lt;<sp/>4)<sp/><ref refid="class_peak_fitter_1a7f6ea41a7272addc3d3a309aedea9271" kindref="member">PeakFitter::m_low_binning</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_peak_fitter_1a841cf7c0b3f96186b22636f2df02e3d3" kindref="member">PeakFitter::fit</ref>(histo,<sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>-5*sigma,<sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>+5*sigma,<sp/><ref refid="namespace_co_bazar_1a030309d1b093093b5fd48a5f7734018e" kindref="member">mean</ref>,<sp/>sigma);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>histo-&gt;GetXaxis()-&gt;SetRangeUser(initialRangeMin,<sp/>initialRangeMax);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>__CINT__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>histo-&gt;Draw();</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;Draw(</highlight><highlight class="stringliteral">&quot;same&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">//__CINT__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495" refid="lib_root_8hpp_1afa74a9c66d3386ccfacfe79ba7d4285c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_root_8hpp_1afa74a9c66d3386ccfacfe79ba7d4285c" kindref="member">libRoot</ref>()</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Welcome<sp/>to<sp/>Corentin&apos;s<sp/>ROOT<sp/>library.<sp/>May<sp/>you<sp/>find<sp/>some<sp/>usefull<sp/>stuff<sp/>around<sp/>!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//LIBROOT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1504"><highlight class="comment"><sp/>//<sp/>unique_TFile<sp/>file(TFile::Open(filename.c_str(),<sp/>&quot;READ&quot;));</highlight></codeline>
<codeline lineno="1505"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>file<sp/>-&gt;<sp/>cd();</highlight></codeline>
<codeline lineno="1506"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(!file.get()-&gt;IsOpen())<sp/>throw_error(&quot;Can&apos;t<sp/>open&quot;+filename);</highlight></codeline>
<codeline lineno="1507"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>print(&quot;Reading&quot;,<sp/>filename);</highlight></codeline>
<codeline lineno="1508"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1509"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>TIter<sp/>nextKey(file-&gt;GetListOfKeys());</highlight></codeline>
<codeline lineno="1510"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>TKey*<sp/>key<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline lineno="1511"><highlight class="comment"></highlight></codeline>
<codeline lineno="1512"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>int<sp/>histo_nb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1513"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>while<sp/>(histo_nb&lt;10<sp/>&amp;&amp;<sp/>(key<sp/>=<sp/>dynamic_cast&lt;TKey*&gt;(nextKey())))<sp/></highlight></codeline>
<codeline lineno="1514"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>TObject*<sp/>obj<sp/>=<sp/>key-&gt;ReadObj();</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>if<sp/>(obj-&gt;IsA()-&gt;InheritsFrom(TH1::Class()))<sp/></highlight></codeline>
<codeline lineno="1517"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1518"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/>if<sp/>(obj-&gt;IsA()-&gt;InheritsFrom(TH1F::Class()))<sp/></highlight></codeline>
<codeline lineno="1519"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>histo<sp/>=<sp/>dynamic_cast&lt;TH1F*&gt;(obj);</highlight></codeline>
<codeline lineno="1521"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>histo-&gt;GetName();</highlight></codeline>
<codeline lineno="1522"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(name,<sp/>histo_nb);</highlight></codeline>
<codeline lineno="1523"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(first_file)<sp/>all_TH1F.emplace_back(dynamic_cast&lt;TH1F*&gt;(histo-&gt;Clone((name+&quot;_manip&quot;).c_str())));</highlight></codeline>
<codeline lineno="1524"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(first_file)<sp/>all_TH1F.emplace_back(std::unique_ptr&lt;TH1F&gt;(static_cast&lt;TH1F*&gt;(histo-&gt;Clone())));</highlight></codeline>
<codeline lineno="1525"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/></highlight></codeline>
<codeline lineno="1526"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(all_TH1F[histo_nb]-&gt;GetName());</highlight></codeline>
<codeline lineno="1528"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(name<sp/>==<sp/>all_TH1F[histo_nb]-&gt;GetName())<sp/>all_TH1F[histo_nb]-&gt;Add(histo);</highlight></codeline>
<codeline lineno="1529"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>throw_error(&quot;Root<sp/>files<sp/>not<sp/>identical<sp/>!!!&quot;);</highlight></codeline>
<codeline lineno="1530"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo_nb++;</highlight></codeline>
<codeline lineno="1532"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/>delete<sp/>obj;</highlight></codeline>
<codeline lineno="1534"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1535"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>//<sp/>delete<sp/>obj;</highlight></codeline>
<codeline lineno="1536"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>delete<sp/>key;</highlight></codeline>
<codeline lineno="1538"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>file-&gt;Close();</highlight></codeline>
<codeline lineno="1539"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>first_file<sp/>=<sp/>false;<sp/>//<sp/>Usefull<sp/>only<sp/>at<sp/>the<sp/>first<sp/>iteration*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>end_peak_bin<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>bin_i<sp/>=<sp/>maxbin;<sp/>bin_i&lt;high_edge_bin;<sp/>++bin_i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>print(histo-&gt;GetBinContent(bin_i),<sp/>max*0.7);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(histo-&gt;GetBinContent(bin_i)&lt;max*0.7)<sp/>{end_peak_bin<sp/>=<sp/>bin_i;<sp/>break;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>bin_i<sp/>=<sp/>maxbin;<sp/>bin_i&gt;low_edge_bin;<sp/>--bin_i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>print(histo-&gt;GetBinContent(bin_i),<sp/>max*0.7);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(histo-&gt;GetBinContent(bin_i)&lt;max*0.7)<sp/>{begin_peak_bin<sp/>=<sp/>bin_i;<sp/>break;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Try<sp/>again<sp/>to<sp/>find<sp/>the<sp/>edges.<sp/>If<sp/>found<sp/>too<sp/>far<sp/>away,<sp/>this<sp/>means<sp/>we<sp/>had<sp/>to<sp/>peak<sp/>the<sp/>first<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>&amp;<sp/>first_left_displacement<sp/>=<sp/>maxbin-begin_peak_bin;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>const<sp/>&amp;<sp/>first_right_displacement<sp/>=<sp/>maxbin+end_peak_bin;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>begin_peak_bin_bis<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>end_peak_bin_bis<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>bin_i<sp/>=<sp/>maxbin;<sp/>bin_i&lt;first_left_displacement;<sp/>++bin_i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(histo-&gt;GetBinContent(bin_i)&lt;max*0.7)<sp/>{end_peak_bin<sp/>=<sp/>bin_i;<sp/>break;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>bin_i<sp/>=<sp/>maxbin;<sp/>bin_i&gt;low_edge_bin;<sp/>--bin_i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(histo-&gt;GetBinContent(bin_i)&lt;max*0.7)<sp/>{begin_peak_bin<sp/>=<sp/>bin_i;<sp/>break;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight></codeline>
    </programlisting>
    <location file="lib/libRoot.hpp"/>
  </compounddef>
</doxygen>
