<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_manip_8hpp" kind="file" language="C++">
    <compoundname>Manip.hpp</compoundname>
    <includes refid="lib_co_8hpp" local="yes">../libCo.hpp</includes>
    <includes refid="_m_t_list_8hpp" local="yes">../MTObjects/MTList.hpp</includes>
    <incdepgraph>
      <node id="19">
        <label>glob.h</label>
      </node>
      <node id="24">
        <label>functional</label>
      </node>
      <node id="5">
        <label>iomanip</label>
      </node>
      <node id="28">
        <label>queue</label>
      </node>
      <node id="20">
        <label>filesystem</label>
      </node>
      <node id="1">
        <label>lib/Classes/Manip.hpp</label>
        <link refid="_manip_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>TThread.h</label>
      </node>
      <node id="21">
        <label>errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>stdexcept</label>
      </node>
      <node id="27">
        <label>numeric</label>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="2">
        <label>../libCo.hpp</label>
        <link refid="lib_co_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>print.hpp</label>
        <link refid="print_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>fstream</label>
      </node>
      <node id="38">
        <label>../MTObjects/MTList.hpp</label>
        <link refid="_m_t_list_8hpp"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>any</label>
      </node>
      <node id="16">
        <label>files_functions.hpp</label>
        <link refid="files__functions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>random</label>
      </node>
      <node id="41">
        <label>TROOT.h</label>
      </node>
      <node id="33">
        <label>typeinfo</label>
      </node>
      <node id="40">
        <label>future</label>
      </node>
      <node id="37">
        <label>ctime</label>
      </node>
      <node id="30">
        <label>stack</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="8">
        <label>vector_functions.hpp</label>
        <link refid="vector__functions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>array</label>
      </node>
      <node id="15">
        <label>sstream</label>
      </node>
      <node id="10">
        <label>randomCo.hpp</label>
        <link refid="random_co_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>cstdlib</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="12">
        <label>string_functions.hpp</label>
        <link refid="string__functions_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>unordered_map</label>
      </node>
      <node id="26">
        <label>mutex</label>
      </node>
      <node id="35">
        <label>csignal</label>
      </node>
      <node id="39">
        <label>MTObject.hpp</label>
        <link refid="_m_t_object_8hpp"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>thread</label>
      </node>
      <node id="9">
        <label>algorithm</label>
      </node>
      <node id="13">
        <label>cstring</label>
      </node>
      <node id="25">
        <label>memory</label>
      </node>
      <node id="32">
        <label>typeindex</label>
      </node>
      <node id="17">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_manip" prot="public">Manip</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_manip_8hpp_1a42112ddf75a5ec621f893f7817b97837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;cout, Manip const &amp;manip)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>cout</declname>
        </param>
        <param>
          <type><ref refid="class_manip" kindref="compound">Manip</ref> const &amp;</type>
          <declname>manip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/Classes/Manip.hpp" line="125" column="1" bodyfile="lib/Classes/Manip.hpp" bodystart="125" bodyend="129"/>
        <references refid="class_manip_1a41dfa1aac77e2340abf4f66934af0092" compoundref="_manip_8hpp" startline="29" endline="29">Manip::get</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>MANIP_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MANIP_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../libCo.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../MTObjects/MTList.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="class_manip" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_manip" kindref="compound">Manip</ref></highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="class_manip_1a1f5a91129d20b2e3924c54bddde521f6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_manip_1a1f5a91129d20b2e3924c54bddde521f6" kindref="member">Manip</ref>(){}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="class_manip_1aab38d946797ab4e5b03c02d9bf69aa0c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_manip_1aab38d946797ab4e5b03c02d9bf69aa0c" kindref="member">Manip</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>runs_file)<sp/>:<sp/><ref refid="class_manip_1af08813391e63fd965d34ff2ff31c6453" kindref="member">m_runs_files</ref>(runs_file)<sp/>{<ref refid="class_manip_1a4fe55690c18999195a5c4c3bec5e6b17" kindref="member">readFile</ref>(<ref refid="class_manip_1af08813391e63fd965d34ff2ff31c6453" kindref="member">m_runs_files</ref>);}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_manip_1ad044eafeb71fda443f77377d44d652d0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_manip_1ad044eafeb71fda443f77377d44d652d0" kindref="member">readFile</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>runs_file)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>file;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>file.open(runs_file);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file.good()){<ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(runs_file,<sp/></highlight><highlight class="stringliteral">&quot;NOT<sp/>FOUND<sp/>!&quot;</highlight><highlight class="normal">);<sp/><ref refid="class_manip_1ade3e293cfef09fb727b8d549d5190ecf" kindref="member">m_ok</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(file<sp/>&gt;&gt;<sp/>line)<sp/><ref refid="class_manip_1a1c4ac027f4eed9e755aca5ba641a27ea" kindref="member">list_runs</ref>.push_back(line);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>file.close();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_manip_1a1bc91186338c5bc2d2d76ac0001c7c05" kindref="member">m_MTOn</ref>)<sp/><ref refid="class_manip_1ac47140bb9d696f5c0cd15edf4171c905" kindref="member">list_runs_MT</ref><sp/>=<sp/><ref refid="class_manip_1a1c4ac027f4eed9e755aca5ba641a27ea" kindref="member">list_runs</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_manip_1ade3e293cfef09fb727b8d549d5190ecf" kindref="member">m_ok</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="class_manip_1a41dfa1aac77e2340abf4f66934af0092" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_manip_1a41dfa1aac77e2340abf4f66934af0092" kindref="member">get</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_manip_1a1c4ac027f4eed9e755aca5ba641a27ea" kindref="member">list_runs</ref>;}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="class_manip_1aec7bc3a8a74d63eda8ad6e6f7496c985" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_manip_1aec7bc3a8a74d63eda8ad6e6f7496c985" kindref="member">setFolder</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_manip_1a1c4ac027f4eed9e755aca5ba641a27ea" kindref="member">list_runs</ref>.clear();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_manip_1a1c4ac027f4eed9e755aca5ba641a27ea" kindref="member">list_runs</ref>.push_back(folder);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_manip_1a1bc91186338c5bc2d2d76ac0001c7c05" kindref="member">m_MTOn</ref>)<sp/><ref refid="class_manip_1ac47140bb9d696f5c0cd15edf4171c905" kindref="member">list_runs_MT</ref><sp/>=<sp/><ref refid="class_manip_1a1c4ac027f4eed9e755aca5ba641a27ea" kindref="member">list_runs</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_manip_1ade3e293cfef09fb727b8d549d5190ecf" kindref="member">m_ok</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="class_manip_1a86ed3dd2dc6d3b8b7342a9552bc43e26" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_manip_1a86ed3dd2dc6d3b8b7342a9552bc43e26" kindref="member">addFolder</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>folder)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_manip_1a1c4ac027f4eed9e755aca5ba641a27ea" kindref="member">list_runs</ref>.push_back(folder);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_manip_1a1bc91186338c5bc2d2d76ac0001c7c05" kindref="member">m_MTOn</ref>)<sp/><ref refid="class_manip_1ac47140bb9d696f5c0cd15edf4171c905" kindref="member">list_runs_MT</ref>.<ref refid="class_m_t_vector_1ada63ea1ffe18a57ba1ce0e87e45e497c" kindref="member">push_back</ref>(folder);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_manip_1a4fe55690c18999195a5c4c3bec5e6b17" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_manip_1a4fe55690c18999195a5c4c3bec5e6b17" kindref="member">readFile</ref>()</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_manip_1af08813391e63fd965d34ff2ff31c6453" kindref="member">m_runs_files</ref><sp/>=<sp/><ref refid="class_manip_1ac2ac621173f7cd52f01c5b4b50a56e5e" kindref="member">m_datapath</ref><sp/>+<sp/><ref refid="class_manip_1a2d82ae040e3db69e9dcac867180f918e" kindref="member">m_manip</ref><sp/>+<sp/><ref refid="class_manip_1a8e335c089c27a67924e3955f5707fc9f" kindref="member">m_file</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_manip_1a4fe55690c18999195a5c4c3bec5e6b17" kindref="member">readFile</ref>(<ref refid="class_manip_1af08813391e63fd965d34ff2ff31c6453" kindref="member">m_runs_files</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="class_manip_1aba047d84e5c3eaff3640c2ed8f31aaea" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_manip_1aba047d84e5c3eaff3640c2ed8f31aaea" kindref="member">setDataPath</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>datapath)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_manip_1ac2ac621173f7cd52f01c5b4b50a56e5e" kindref="member">m_datapath</ref><sp/>=<sp/>datapath;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="class_manip_1a7f2aa2947cd843abecac34300b6da94e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_manip_1a7f2aa2947cd843abecac34300b6da94e" kindref="member">setManipName</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>manipname)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_manip_1a2d82ae040e3db69e9dcac867180f918e" kindref="member">m_manip</ref><sp/>=<sp/>manipname;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="class_manip_1af3f64608a08dd23d186f48e8c1beeba0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_manip_1af3f64608a08dd23d186f48e8c1beeba0" kindref="member">setFileName</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>filename)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_manip_1a8e335c089c27a67924e3955f5707fc9f" kindref="member">m_file</ref><sp/>=<sp/>filename;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="class_manip_1ab0813163118017c1064ec02f091356b8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_manip_1ab0813163118017c1064ec02f091356b8" kindref="member">setMT</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>MTOn<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>To<sp/>enable<sp/>the<sp/>parallel<sp/>reading<sp/>of<sp/>the<sp/>runs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_m_t_object_1a6fe86ce1ea64ede7e695490bceb264a3" kindref="member">MTObject::ON</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_manip_1a1bc91186338c5bc2d2d76ac0001c7c05" kindref="member">m_MTOn</ref><sp/>=<sp/>MTOn);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MTOn)<sp/><ref refid="print_8hpp_1a388f572c62279f839ee138a9afbdeeb5" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;MULTITHREADING<sp/>ISN&apos;T<sp/>InitialiseD<sp/>!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="class_manip_1ad509e37dce3d5a639115b54f16ded598" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/>const<sp/>&amp;<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_manip_1ade3e293cfef09fb727b8d549d5190ecf" kindref="member">m_ok</ref>;}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>void<sp/>Print()<sp/>{<sp/>(m_MTOn)<sp/>?<sp/>list_runs_MT.Print()<sp/>:<sp/>print(list_runs);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="class_manip_1a0192f178496568056b1d17c9e73db064" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_manip_1a0192f178496568056b1d17c9e73db064" kindref="member">getNext</ref>(std::string<sp/>&amp;<sp/>run)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_manip_1a1bc91186338c5bc2d2d76ac0001c7c05" kindref="member">m_MTOn</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_manip_1ac47140bb9d696f5c0cd15edf4171c905" kindref="member">list_runs_MT</ref>.<ref refid="class_m_t_vector_1a824a9ff009dde921eec4759c69f74ca7" kindref="member">getNext</ref>(run);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_manip_1a48b7346ccf31813912089fe976d9663a" kindref="member">i</ref>&lt;<ref refid="class_manip_1a1c4ac027f4eed9e755aca5ba641a27ea" kindref="member">list_runs</ref>.size())</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>=<sp/><ref refid="class_manip_1a1c4ac027f4eed9e755aca5ba641a27ea" kindref="member">list_runs</ref>[<ref refid="class_manip_1a48b7346ccf31813912089fe976d9663a" kindref="member">i</ref>++];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="class_manip_1aa8e71952b07876be2dc56e180bdfe5f5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_manip_1aa8e71952b07876be2dc56e180bdfe5f5" kindref="member">operator&gt;&gt;</ref>(std::string<sp/>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="class_manip_1a0192f178496568056b1d17c9e73db064" kindref="member">getNext</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="class_manip_1a580f1eee22ca0c4f2419867c7a15cb85" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_manip_1a580f1eee22ca0c4f2419867c7a15cb85" kindref="member">reset</ref>()<sp/>{<sp/><ref refid="class_manip_1a48b7346ccf31813912089fe976d9663a" kindref="member">i</ref><sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:<sp/><sp/></highlight></codeline>
<codeline lineno="112" refid="class_manip_1a48b7346ccf31813912089fe976d9663a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="lib_co_8hpp_1a69aa29b598b851b0640aa225a9e5d61d" kindref="member">uint</ref><sp/><ref refid="class_manip_1a48b7346ccf31813912089fe976d9663a" kindref="member">i</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113" refid="class_manip_1ade3e293cfef09fb727b8d549d5190ecf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_manip_1ade3e293cfef09fb727b8d549d5190ecf" kindref="member">m_ok</ref>;</highlight></codeline>
<codeline lineno="114" refid="class_manip_1a1bc91186338c5bc2d2d76ac0001c7c05" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_manip_1a1bc91186338c5bc2d2d76ac0001c7c05" kindref="member">m_MTOn</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Multithreading<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="class_manip_1ac2ac621173f7cd52f01c5b4b50a56e5e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_path" kindref="compound">Path</ref><sp/><ref refid="class_manip_1ac2ac621173f7cd52f01c5b4b50a56e5e" kindref="member">m_datapath</ref>;</highlight></codeline>
<codeline lineno="117" refid="class_manip_1af08813391e63fd965d34ff2ff31c6453" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_manip_1af08813391e63fd965d34ff2ff31c6453" kindref="member">m_runs_files</ref>;</highlight></codeline>
<codeline lineno="118" refid="class_manip_1a2d82ae040e3db69e9dcac867180f918e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_folder" kindref="compound">Folder</ref><sp/><ref refid="class_manip_1a2d82ae040e3db69e9dcac867180f918e" kindref="member">m_manip</ref>;</highlight></codeline>
<codeline lineno="119" refid="class_manip_1a8e335c089c27a67924e3955f5707fc9f" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="class_manip_1a8e335c089c27a67924e3955f5707fc9f" kindref="member">m_file</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="class_manip_1a1c4ac027f4eed9e755aca5ba641a27ea" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="class_manip_1a1c4ac027f4eed9e755aca5ba641a27ea" kindref="member">list_runs</ref>;</highlight></codeline>
<codeline lineno="122" refid="class_manip_1ac47140bb9d696f5c0cd15edf4171c905" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_m_t_vector" kindref="compound">MTList</ref><sp/><ref refid="class_manip_1ac47140bb9d696f5c0cd15edf4171c905" kindref="member">list_runs_MT</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="_manip_8hpp_1a42112ddf75a5ec621f893f7817b97837" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="_manip_8hpp_1a42112ddf75a5ec621f893f7817b97837" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>cout,<sp/><ref refid="class_manip" kindref="compound">Manip</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>manip)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>manip.<ref refid="class_manip_1a41dfa1aac77e2340abf4f66934af0092" kindref="member">get</ref>();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cout;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//MANIP_HPP</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="lib/Classes/Manip.hpp"/>
  </compounddef>
</doxygen>
