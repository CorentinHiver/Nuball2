Class = str(input("Put the name of your new Class : "))
print("Modules/"+Class+".hpp")
f = open(str("Modules/"+Class+".hpp"),'w')
CLASS = Class.upper()
name = Class.lower()

f.write("#ifndef "+CLASS+"_H\n")
f.write("#define "+CLASS+"_H\n")
f.write("#include <libRoot.hpp>\n")
f.write("#include <MTTHist.hpp>\n")
f.write("#include \"../Classes/Parameters.hpp\"\n")
f.write("\n")
f.write("\n")

f.write("class "+Class+"\n")
f.write("{\n")
f.write("public:\n")
f.write("\n")
f.write("  "+Class+"(){};\n")
f.write("  bool launch(Parameters & p);\n")
f.write("  bool setParameters(std::vector<std::string> const & param);\n")
f.write("  void InitialiseManip();\n")
f.write("  static void treatFile(Parameters & p, "+Class+" & "+name+");\n")
f.write("  void FillRaw(Event const & event);\n")
f.write("  void FillSorted(Sorted_Event const & event_s, Event const & event);\n")
f.write("  void Analyse();\n")
f.write("  void Write();\n")
f.write("private:\n")
f.write("\n")
f.write("  // ---- Parameters ---- //\n")
f.write("  std::string param_string = \""+Class+"\";\n")
f.write("  friend class MTObject;\n")
f.write("\n")
f.write("  // ---- Variables ---- //\n")
f.write("  std::string m_outDir  = \"129/"+Class+"/\";\n")
f.write("  std::string m_outRoot = \""+Class+".root\";\n")
f.write("\n")
f.write("  // ---- Histograms ---- //\n")
f.write("};\n")
f.write("\n")

f.write("bool "+Class+"::launch(Parameters & p)\n")
f.write("{\n")
f.write("  if (!this -> setParameters(p.getParameters(param_string))) return false;\n")
f.write("  this -> InitialiseManip();\n")
f.write("  print(\"Starting !\");\n")
f.write("  MTObject::parallelise_function(treatFile, p, *this);\n")
f.write("  this -> Write();\n")
f.write("  return true;\n")
f.write("}\n")
f.write("\n")

f.write("void "+Class+"::treatFile(Parameters & p, "+Class+" & "+name+")\n")
f.write("{\n")
f.write("  std::string rootfile;\n")
f.write("  Sorted_Event event_s;\n")
f.write("  while(p.getNextFile(rootfile))\n")
f.write("  {\n")
f.write("    Timer timer;\n")
f.write("\n")
f.write("    std::unique_ptr<TFile> file (TFile::Open(rootfile.c_str(), \"READ\"));\n")
f.write("    if (file->IsZombie()) {print(rootfile, \"is a Zombie !\");continue;}\n")
f.write("    if (!tree.get()) tree.reset(file->Get<TTree>(\"Nuball2\");")
f.write("    if (!tree.get()) {print(\"Nuball or Nuball2 trees not found in\",rootfile ); continue;}")
f.write("    std::unique_ptr<TTree> tree (file->Get<TTree>(\"Nuball\"));\n")
f.write("    Event event(tree.get(), \"lTn\");\n")
f.write("\n")
f.write("    size_t events = tree->GetEntries();\n")
f.write("    p.totalCounter+=events;\n")
f.write("\n")
f.write("    auto const & filesize = size_file(rootfile, \"Mo\");\n")
f.write("    p.totalFilesSize+=filesize;\n")
f.write("\n")
f.write("    for (size_t i = 0; i<events; i++)\n")
f.write("    {\n")
f.write("      tree->GetEntry(i);\n")
f.write("      event_s.sortEvent(event);\n")
f.write("      "+name+".FillSorted(event_s,event);\n")
f.write("      "+name+".FillRaw(event);\n")
f.write("    } // End event loop\n")
f.write("    auto const & time = timer();\n")
f.write("    print(removePath(rootfile), time, timer.unit(), \":\", filesize/timer.TimeSec(), \"Mo/s\");\n")
f.write("    file -> Close();\n")
f.write("  } // End files loop\n")
f.write("}\n")
f.write("\n")
f.write("void "+Class+"::InitialiseManip()\n")
f.write("{\n")
f.write("  print(\"Initialise histograms\");\n")
f.write("}\n")
f.write("\n")
f.write("void "+Class+"::FillRaw(Event const & event)\n")
f.write("{\n")
f.write("  // for (size_t i = 0; i<event.size(); i++)\n")
f.write("  // {\n")
f.write("  //\n")
f.write("  // }\n")
f.write("}\n")
f.write("\n")
f.write("void "+Class+"::FillSorted(Sorted_Event const & event_s, Event const & event)\n")
f.write("{\n")
f.write("//    for (size_t loop_i = 0; loop_i<event_s.clover_hits.size(); loop_i++)\n")
f.write("//    {\n")
f.write("//    }\n")
f.write("}\n")
f.write("\n")
f.write("void "+Class+"::Analyse()\n")
f.write("{\n")
f.write("  \n")
f.write("}\n")
f.write("\n")
f.write("void "+Class+"::Write()\n")
f.write("{\n")
f.write("  std::unique_ptr<TFile> outfile(TFile::Open((m_outDir+m_outRoot).c_str(),\"recreate\"));\n")
f.write("  outfile->cd();\n")
f.write("  print(\"Writting histograms ...\");\n")
f.write("  // Write here the histograms :\n")
f.write("\n")
f.write("  outfile->Write();\n")
f.write("  outfile->Close();\n")
f.write("  print(\"Writting analysis in\", m_outDir+m_outRoot);\n")
f.write("}\n")
f.write("\n")
f.write("bool "+Class+"::setParameters(std::vector<std::string> const & parameters)\n")
f.write("{\n")
f.write("  if (parameters.size()<1){print(\"No Parameters for \"+param_string+\" !!\"); return false;}")
f.write("  for (auto const & param : parameters)\n")
f.write("  {\n")
f.write("    std::istringstream is(param);\n")
f.write("    std::string temp;\n")
f.write("    while(is>>temp)\n")
f.write("    {\n")
f.write("      if (temp == \"activated\") continue;\n")
f.write("      else if (temp == \"outDir:\")  is >> m_outDir;\n")
f.write("      else if (temp == \"outRoot:\")  is >> m_outRoot;\n")
f.write("      else\n")
f.write("      {\n")
f.write("        print(\"Parameter\", temp, \"for\", param_string, \"unkown...\");\n")
f.write("        return false;\n")
f.write("      }\n")
f.write("    }\n")
f.write("  }\n")
f.write("  return true;\n")
f.write("}\n")
f.write("\n")
f.write("#endif //"+CLASS+"_H\n")

f.close()
