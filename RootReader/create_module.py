Class = str(input("Put the Class od your new class : "))
print(Class)
f = open(str(Class+".hpp"),'w')
CLASS = Class.upper()
name = Class.lower()

f.write("#ifndef "+CLASS+"_H\n")
f.write("#define "+CLASS+"_H\n")
f.write("#include \"../../lib/utils.hpp\"\n")
f.write("#include \"../../lib/MTObjects/MTTHist.hpp\"\n")
f.write("#include \"../Classes/Parameters.hpp\"\n")
f.write("\n")
f.write("std::string param_string = \""+Class+"\";\n")
f.write("\n")

f.write("class "+Class+"\n")
f.write("{\n")
f.write("public:\n")
f.write("  "+Class+"(){};\n")
f.write("  launch(Parameters & p);\n")
f.write("  setParameters(std::vector<std::string> const & param);\n")
f.write("  void InitializeManip();\n")
f.write("  static void run(Parameters & p, "+Class+" & "+name+");\n")
f.write("  void FillRaw(Event const & event);\n")
f.write("  void FillSorted(Sorted_Event const & event_s, Event const & event);\n")
f.write("  void Write();\n")
f.write("private:\n")
f.write("  // Parameters\n")
f.write("  friend class MTObject;\n")
f.write("  std::string outDir  = \"129/"+Class+"/\";\n")
f.write("  std::string outRoot = \""+Class+".root\";\n")
f.write("};\n")
f.write("\n")

f.write("bool "+Class+"::launch(Parameters & p)\n")
f.write("{\n")
f.write("  if (!this -> setParameters(p.getParameters(param_string))) return false;\n")
f.write("  this -> InitializeManip();\n")
f.write("  print(\"Starting !\");\n")
f.write("  MTObject::parallelise_function(run, p, *this);\n")
f.write("  this -> Write();\n")
f.write("  return true;\n")
f.write("}\n")


f.write("\n")
f.write("#endif //"+CLASS+"_H\n")

f.close()
